
stm32WB_test_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  08007e48  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  08007e6c  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  08007f05  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  08007f42  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000098  20000118  08007f53  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000002c8  200001b0  08007feb  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000478  08007feb  00020478  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   00030c71  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 000059ba  00000000  00000000  00050e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00001ed8  00000000  00000000  00056810  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001c50  00000000  00000000  000586e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  000261d7  00000000  00000000  0005a338  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0001cce0  00000000  00000000  0008050f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000cd8d0  00000000  00000000  0009d1ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  0016aabf  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00007d2c  00000000  00000000  0016ab3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001b0 	.word	0x200001b0
 8000158:	00000000 	.word	0x00000000
 800015c:	08007b84 	.word	0x08007b84

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001b4 	.word	0x200001b4
 8000178:	08007b84 	.word	0x08007b84

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f006 fb5b 	bl	8006864 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 fe62 	bl	8005e7a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08007b9c 	.word	0x08007b9c

080001c4 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4313      	orrs	r3, r2
 800020a:	608b      	str	r3, [r1, #8]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800021c:	f000 f80a 	bl	8000234 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000220:	4903      	ldr	r1, [pc, #12]	; (8000230 <APPE_Init+0x18>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fcc0 	bl	8000ba8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000228:	f000 f812 	bl	8000250 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800022c:	bf00      	nop
}
 800022e:	bd80      	pop	{r7, pc}
 8000230:	2000044c 	.word	0x2000044c

08000234 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800023c:	f7ff ffd8 	bl	80001f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000240:	f007 f9e6 	bl	8007610 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000244:	2004      	movs	r0, #4
 8000246:	f7ff ffbd 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800024a:	bf00      	nop
}
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000256:	f006 f969 	bl	800652c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <appe_Tl_Init+0x50>)
 800025c:	2100      	movs	r1, #0
 800025e:	2008      	movs	r0, #8
 8000260:	f007 fb2a 	bl	80078b8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <appe_Tl_Init+0x54>)
 8000266:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <appe_Tl_Init+0x58>)
 800026a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	480e      	ldr	r0, [pc, #56]	; (80002ac <appe_Tl_Init+0x5c>)
 8000272:	f005 ffeb 	bl	800624c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <appe_Tl_Init+0x60>)
 8000278:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <appe_Tl_Init+0x64>)
 800027c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <appe_Tl_Init+0x68>)
 8000280:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000282:	f240 533c 	movw	r3, #1340	; 0x53c
 8000286:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	4618      	mov	r0, r3
 800028e:	f006 fa5f 	bl	8006750 <TL_MM_Init>

  TL_Enable();
 8000292:	f006 f945 	bl	8006520 <TL_Enable>

  return;
 8000296:	bf00      	nop
}
 8000298:	3720      	adds	r7, #32
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	08006285 	.word	0x08006285
 80002a4:	20030724 	.word	0x20030724
 80002a8:	080002bd 	.word	0x080002bd
 80002ac:	080002d3 	.word	0x080002d3
 80002b0:	2003093c 	.word	0x2003093c
 80002b4:	20030830 	.word	0x20030830
 80002b8:	200301e8 	.word	0x200301e8

080002bc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80002c6:	bf00      	nop
}
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80002da:	f7ff ff57 	bl	800018c <APPD_EnableCPU2>

  APP_BLE_Init( );
 80002de:	f006 fbf7 	bl	8006ad0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2001      	movs	r0, #1
 80002e6:	f007 f9a5 	bl	8007634 <UTIL_LPM_SetOffMode>
  return;
 80002ea:	bf00      	nop
}
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 80002f6:	f007 f9cb 	bl	8007690 <UTIL_LPM_EnterLowPower>
#endif
  return;
 80002fa:	bf00      	nop
}
 80002fc:	bd80      	pop	{r7, pc}

080002fe <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b082      	sub	sp, #8
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
 8000306:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f007 f9f4 	bl	80076f8 <UTIL_SEQ_Run>
}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000320:	2100      	movs	r1, #0
 8000322:	2008      	movs	r0, #8
 8000324:	f007 fae8 	bl	80078f8 <UTIL_SEQ_SetTask>
  return;
 8000328:	bf00      	nop
}
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000338:	2002      	movs	r0, #2
 800033a:	f007 fb43 	bl	80079c4 <UTIL_SEQ_SetEvt>
  return;
 800033e:	bf00      	nop
}
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b082      	sub	sp, #8
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800034e:	2002      	movs	r0, #2
 8000350:	f007 fb56 	bl	8007a00 <UTIL_SEQ_WaitEvt>
  return;
 8000354:	bf00      	nop
}
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <LL_EXTI_EnableIT_0_31+0x24>)
 8000366:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800036a:	4905      	ldr	r1, [pc, #20]	; (8000380 <LL_EXTI_EnableIT_0_31+0x24>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4313      	orrs	r3, r2
 8000370:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	58000800 	.word	0x58000800

08000384 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4904      	ldr	r1, [pc, #16]	; (80003a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4313      	orrs	r3, r2
 8000396:	600b      	str	r3, [r1, #0]

}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	58000800 	.word	0x58000800

080003a8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <ReadRtcSsrValue+0x3c>)
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <ReadRtcSsrValue+0x3c>)
 80003b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80003be:	e005      	b.n	80003cc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <ReadRtcSsrValue+0x3c>)
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d1f5      	bne.n	80003c0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80003d4:	683b      	ldr	r3, [r7, #0]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40002800 	.word	0x40002800

080003e8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	460a      	mov	r2, r1
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	4613      	mov	r3, r2
 80003f6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80003f8:	79ba      	ldrb	r2, [r7, #6]
 80003fa:	491d      	ldr	r1, [pc, #116]	; (8000470 <LinkTimerAfter+0x88>)
 80003fc:	4613      	mov	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	440b      	add	r3, r1
 8000406:	3315      	adds	r3, #21
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	2b06      	cmp	r3, #6
 8000410:	d009      	beq.n	8000426 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000412:	7bfa      	ldrb	r2, [r7, #15]
 8000414:	4916      	ldr	r1, [pc, #88]	; (8000470 <LinkTimerAfter+0x88>)
 8000416:	4613      	mov	r3, r2
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	4413      	add	r3, r2
 800041c:	00db      	lsls	r3, r3, #3
 800041e:	440b      	add	r3, r1
 8000420:	3314      	adds	r3, #20
 8000422:	79fa      	ldrb	r2, [r7, #7]
 8000424:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000426:	79fa      	ldrb	r2, [r7, #7]
 8000428:	4911      	ldr	r1, [pc, #68]	; (8000470 <LinkTimerAfter+0x88>)
 800042a:	4613      	mov	r3, r2
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	4413      	add	r3, r2
 8000430:	00db      	lsls	r3, r3, #3
 8000432:	440b      	add	r3, r1
 8000434:	3315      	adds	r3, #21
 8000436:	7bfa      	ldrb	r2, [r7, #15]
 8000438:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800043a:	79fa      	ldrb	r2, [r7, #7]
 800043c:	490c      	ldr	r1, [pc, #48]	; (8000470 <LinkTimerAfter+0x88>)
 800043e:	4613      	mov	r3, r2
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	4413      	add	r3, r2
 8000444:	00db      	lsls	r3, r3, #3
 8000446:	440b      	add	r3, r1
 8000448:	3314      	adds	r3, #20
 800044a:	79ba      	ldrb	r2, [r7, #6]
 800044c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800044e:	79ba      	ldrb	r2, [r7, #6]
 8000450:	4907      	ldr	r1, [pc, #28]	; (8000470 <LinkTimerAfter+0x88>)
 8000452:	4613      	mov	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4413      	add	r3, r2
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	440b      	add	r3, r1
 800045c:	3315      	adds	r3, #21
 800045e:	79fa      	ldrb	r2, [r7, #7]
 8000460:	701a      	strb	r2, [r3, #0]

  return;
 8000462:	bf00      	nop
}
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	20000028 	.word	0x20000028

08000474 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	460a      	mov	r2, r1
 800047e:	71fb      	strb	r3, [r7, #7]
 8000480:	4613      	mov	r3, r2
 8000482:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <LinkTimerBefore+0xb8>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	79ba      	ldrb	r2, [r7, #6]
 800048c:	429a      	cmp	r2, r3
 800048e:	d032      	beq.n	80004f6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000490:	79ba      	ldrb	r2, [r7, #6]
 8000492:	4927      	ldr	r1, [pc, #156]	; (8000530 <LinkTimerBefore+0xbc>)
 8000494:	4613      	mov	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	440b      	add	r3, r1
 800049e:	3314      	adds	r3, #20
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80004a4:	7bfa      	ldrb	r2, [r7, #15]
 80004a6:	4922      	ldr	r1, [pc, #136]	; (8000530 <LinkTimerBefore+0xbc>)
 80004a8:	4613      	mov	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4413      	add	r3, r2
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	440b      	add	r3, r1
 80004b2:	3315      	adds	r3, #21
 80004b4:	79fa      	ldrb	r2, [r7, #7]
 80004b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	491d      	ldr	r1, [pc, #116]	; (8000530 <LinkTimerBefore+0xbc>)
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	440b      	add	r3, r1
 80004c6:	3315      	adds	r3, #21
 80004c8:	79ba      	ldrb	r2, [r7, #6]
 80004ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80004cc:	79fa      	ldrb	r2, [r7, #7]
 80004ce:	4918      	ldr	r1, [pc, #96]	; (8000530 <LinkTimerBefore+0xbc>)
 80004d0:	4613      	mov	r3, r2
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	4413      	add	r3, r2
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	440b      	add	r3, r1
 80004da:	3314      	adds	r3, #20
 80004dc:	7bfa      	ldrb	r2, [r7, #15]
 80004de:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80004e0:	79ba      	ldrb	r2, [r7, #6]
 80004e2:	4913      	ldr	r1, [pc, #76]	; (8000530 <LinkTimerBefore+0xbc>)
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	00db      	lsls	r3, r3, #3
 80004ec:	440b      	add	r3, r1
 80004ee:	3314      	adds	r3, #20
 80004f0:	79fa      	ldrb	r2, [r7, #7]
 80004f2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80004f4:	e014      	b.n	8000520 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80004f6:	79fa      	ldrb	r2, [r7, #7]
 80004f8:	490d      	ldr	r1, [pc, #52]	; (8000530 <LinkTimerBefore+0xbc>)
 80004fa:	4613      	mov	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	4413      	add	r3, r2
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	440b      	add	r3, r1
 8000504:	3315      	adds	r3, #21
 8000506:	79ba      	ldrb	r2, [r7, #6]
 8000508:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800050a:	79ba      	ldrb	r2, [r7, #6]
 800050c:	4908      	ldr	r1, [pc, #32]	; (8000530 <LinkTimerBefore+0xbc>)
 800050e:	4613      	mov	r3, r2
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	4413      	add	r3, r2
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	440b      	add	r3, r1
 8000518:	3314      	adds	r3, #20
 800051a:	79fa      	ldrb	r2, [r7, #7]
 800051c:	701a      	strb	r2, [r3, #0]
  return;
 800051e:	bf00      	nop
}
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	200000b8 	.word	0x200000b8
 8000530:	20000028 	.word	0x20000028

08000534 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800053e:	4b4e      	ldr	r3, [pc, #312]	; (8000678 <linkTimer+0x144>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b06      	cmp	r3, #6
 8000546:	d118      	bne.n	800057a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000548:	4b4b      	ldr	r3, [pc, #300]	; (8000678 <linkTimer+0x144>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b4b      	ldr	r3, [pc, #300]	; (800067c <linkTimer+0x148>)
 8000550:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000552:	4a49      	ldr	r2, [pc, #292]	; (8000678 <linkTimer+0x144>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	4949      	ldr	r1, [pc, #292]	; (8000680 <linkTimer+0x14c>)
 800055c:	4613      	mov	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	4413      	add	r3, r2
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	440b      	add	r3, r1
 8000566:	3315      	adds	r3, #21
 8000568:	2206      	movs	r2, #6
 800056a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800056c:	4b45      	ldr	r3, [pc, #276]	; (8000684 <linkTimer+0x150>)
 800056e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000572:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	81fb      	strh	r3, [r7, #14]
 8000578:	e078      	b.n	800066c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800057a:	f000 f909 	bl	8000790 <ReturnTimeElapsed>
 800057e:	4603      	mov	r3, r0
 8000580:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	493e      	ldr	r1, [pc, #248]	; (8000680 <linkTimer+0x14c>)
 8000586:	4613      	mov	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	4413      	add	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	440b      	add	r3, r1
 8000590:	3308      	adds	r3, #8
 8000592:	6819      	ldr	r1, [r3, #0]
 8000594:	89fb      	ldrh	r3, [r7, #14]
 8000596:	79fa      	ldrb	r2, [r7, #7]
 8000598:	4419      	add	r1, r3
 800059a:	4839      	ldr	r0, [pc, #228]	; (8000680 <linkTimer+0x14c>)
 800059c:	4613      	mov	r3, r2
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	4403      	add	r3, r0
 80005a6:	3308      	adds	r3, #8
 80005a8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80005aa:	79fa      	ldrb	r2, [r7, #7]
 80005ac:	4934      	ldr	r1, [pc, #208]	; (8000680 <linkTimer+0x14c>)
 80005ae:	4613      	mov	r3, r2
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	440b      	add	r3, r1
 80005b8:	3308      	adds	r3, #8
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <linkTimer+0x144>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4619      	mov	r1, r3
 80005c6:	4a2e      	ldr	r2, [pc, #184]	; (8000680 <linkTimer+0x14c>)
 80005c8:	460b      	mov	r3, r1
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	440b      	add	r3, r1
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	4413      	add	r3, r2
 80005d2:	3308      	adds	r3, #8
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d337      	bcc.n	800064c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <linkTimer+0x144>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80005e2:	7b7a      	ldrb	r2, [r7, #13]
 80005e4:	4926      	ldr	r1, [pc, #152]	; (8000680 <linkTimer+0x14c>)
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	440b      	add	r3, r1
 80005f0:	3315      	adds	r3, #21
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80005f6:	e013      	b.n	8000620 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80005f8:	7b7a      	ldrb	r2, [r7, #13]
 80005fa:	4921      	ldr	r1, [pc, #132]	; (8000680 <linkTimer+0x14c>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	440b      	add	r3, r1
 8000606:	3315      	adds	r3, #21
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800060c:	7b7a      	ldrb	r2, [r7, #13]
 800060e:	491c      	ldr	r1, [pc, #112]	; (8000680 <linkTimer+0x14c>)
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	440b      	add	r3, r1
 800061a:	3315      	adds	r3, #21
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000620:	7b3b      	ldrb	r3, [r7, #12]
 8000622:	2b06      	cmp	r3, #6
 8000624:	d00b      	beq.n	800063e <linkTimer+0x10a>
 8000626:	7b3a      	ldrb	r2, [r7, #12]
 8000628:	4915      	ldr	r1, [pc, #84]	; (8000680 <linkTimer+0x14c>)
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	440b      	add	r3, r1
 8000634:	3308      	adds	r3, #8
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	429a      	cmp	r2, r3
 800063c:	d2dc      	bcs.n	80005f8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800063e:	7b7a      	ldrb	r2, [r7, #13]
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fecf 	bl	80003e8 <LinkTimerAfter>
 800064a:	e00f      	b.n	800066c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <linkTimer+0x144>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff0c 	bl	8000474 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <linkTimer+0x144>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <linkTimer+0x148>)
 8000664:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <linkTimer+0x144>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800066c:	89fb      	ldrh	r3, [r7, #14]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000b8 	.word	0x200000b8
 800067c:	200000b9 	.word	0x200000b9
 8000680:	20000028 	.word	0x20000028
 8000684:	200000bc 	.word	0x200000bc

08000688 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <UnlinkTimer+0xf8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d111      	bne.n	80006c8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <UnlinkTimer+0xf8>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <UnlinkTimer+0xfc>)
 80006ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	4935      	ldr	r1, [pc, #212]	; (8000788 <UnlinkTimer+0x100>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	440b      	add	r3, r1
 80006bc:	3315      	adds	r3, #21
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <UnlinkTimer+0xf8>)
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e03e      	b.n	8000746 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80006c8:	79fa      	ldrb	r2, [r7, #7]
 80006ca:	492f      	ldr	r1, [pc, #188]	; (8000788 <UnlinkTimer+0x100>)
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	440b      	add	r3, r1
 80006d6:	3314      	adds	r3, #20
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	492a      	ldr	r1, [pc, #168]	; (8000788 <UnlinkTimer+0x100>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	440b      	add	r3, r1
 80006ea:	3315      	adds	r3, #21
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80006f0:	79f9      	ldrb	r1, [r7, #7]
 80006f2:	7bfa      	ldrb	r2, [r7, #15]
 80006f4:	4824      	ldr	r0, [pc, #144]	; (8000788 <UnlinkTimer+0x100>)
 80006f6:	460b      	mov	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	440b      	add	r3, r1
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	4403      	add	r3, r0
 8000700:	3315      	adds	r3, #21
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2d8      	uxtb	r0, r3
 8000706:	4920      	ldr	r1, [pc, #128]	; (8000788 <UnlinkTimer+0x100>)
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	440b      	add	r3, r1
 8000712:	3315      	adds	r3, #21
 8000714:	4602      	mov	r2, r0
 8000716:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000718:	7bbb      	ldrb	r3, [r7, #14]
 800071a:	2b06      	cmp	r3, #6
 800071c:	d013      	beq.n	8000746 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800071e:	79f9      	ldrb	r1, [r7, #7]
 8000720:	7bba      	ldrb	r2, [r7, #14]
 8000722:	4819      	ldr	r0, [pc, #100]	; (8000788 <UnlinkTimer+0x100>)
 8000724:	460b      	mov	r3, r1
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	440b      	add	r3, r1
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	4403      	add	r3, r0
 800072e:	3314      	adds	r3, #20
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b2d8      	uxtb	r0, r3
 8000734:	4914      	ldr	r1, [pc, #80]	; (8000788 <UnlinkTimer+0x100>)
 8000736:	4613      	mov	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4413      	add	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	440b      	add	r3, r1
 8000740:	3314      	adds	r3, #20
 8000742:	4602      	mov	r2, r0
 8000744:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	490f      	ldr	r1, [pc, #60]	; (8000788 <UnlinkTimer+0x100>)
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	440b      	add	r3, r1
 8000754:	330c      	adds	r3, #12
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <UnlinkTimer+0xf8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b06      	cmp	r3, #6
 8000762:	d107      	bne.n	8000774 <UnlinkTimer+0xec>
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <UnlinkTimer+0x104>)
 800076c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000770:	601a      	str	r2, [r3, #0]
  }

  return;
 8000772:	bf00      	nop
 8000774:	bf00      	nop
}
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	200000b8 	.word	0x200000b8
 8000784:	200000b9 	.word	0x200000b9
 8000788:	20000028 	.word	0x20000028
 800078c:	200000bc 	.word	0x200000bc

08000790 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <ReturnTimeElapsed+0x70>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800079e:	d026      	beq.n	80007ee <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80007a0:	f7ff fe02 	bl	80003a8 <ReadRtcSsrValue>
 80007a4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <ReturnTimeElapsed+0x70>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d805      	bhi.n	80007bc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <ReturnTimeElapsed+0x70>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	e00a      	b.n	80007d2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <ReturnTimeElapsed+0x74>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <ReturnTimeElapsed+0x70>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <ReturnTimeElapsed+0x78>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <ReturnTimeElapsed+0x7c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	40d3      	lsrs	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	e001      	b.n	80007f2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	b29b      	uxth	r3, r3
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000bc 	.word	0x200000bc
 8000804:	200001d2 	.word	0x200001d2
 8000808:	200001d1 	.word	0x200001d1
 800080c:	200001d0 	.word	0x200001d0

08000810 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d108      	bne.n	8000832 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000820:	f7ff fdc2 	bl	80003a8 <ReadRtcSsrValue>
 8000824:	4602      	mov	r2, r0
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <RestartWakeupCounter+0xa8>)
 8000828:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800082a:	2003      	movs	r0, #3
 800082c:	f001 fb5d 	bl	8001eea <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000830:	e03e      	b.n	80008b0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d803      	bhi.n	8000840 <RestartWakeupCounter+0x30>
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <RestartWakeupCounter+0xac>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d002      	beq.n	8000846 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	3b01      	subs	r3, #1
 8000844:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000846:	bf00      	nop
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <RestartWakeupCounter+0xb0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f7      	beq.n	8000848 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <RestartWakeupCounter+0xb0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <RestartWakeupCounter+0xb0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800086c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <RestartWakeupCounter+0xb4>)
 8000870:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000874:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000876:	2003      	movs	r0, #3
 8000878:	f001 fb45 	bl	8001f06 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <RestartWakeupCounter+0xb8>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	0c1b      	lsrs	r3, r3, #16
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	88fa      	ldrh	r2, [r7, #6]
 8000886:	4910      	ldr	r1, [pc, #64]	; (80008c8 <RestartWakeupCounter+0xb8>)
 8000888:	4313      	orrs	r3, r2
 800088a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800088c:	f7ff fd8c 	bl	80003a8 <ReadRtcSsrValue>
 8000890:	4602      	mov	r2, r0
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <RestartWakeupCounter+0xa8>)
 8000894:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <RestartWakeupCounter+0xb0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <RestartWakeupCounter+0xb0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008a8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80008aa:	f3af 8000 	nop.w
  return ;
 80008ae:	bf00      	nop
}
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000bc 	.word	0x200000bc
 80008bc:	200001d0 	.word	0x200001d0
 80008c0:	200001cc 	.word	0x200001cc
 80008c4:	58000800 	.word	0x58000800
 80008c8:	40002800 	.word	0x40002800

080008cc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80008d2:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <RescheduleTimerList+0x124>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008de:	d108      	bne.n	80008f2 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80008e0:	bf00      	nop
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <RescheduleTimerList+0x128>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1f7      	bne.n	80008e2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80008f2:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <RescheduleTimerList+0x128>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <RescheduleTimerList+0x128>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000904:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000906:	4b3c      	ldr	r3, [pc, #240]	; (80009f8 <RescheduleTimerList+0x12c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800090c:	7bfa      	ldrb	r2, [r7, #15]
 800090e:	493b      	ldr	r1, [pc, #236]	; (80009fc <RescheduleTimerList+0x130>)
 8000910:	4613      	mov	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4413      	add	r3, r2
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	440b      	add	r3, r1
 800091a:	3308      	adds	r3, #8
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000920:	f7ff ff36 	bl	8000790 <ReturnTimeElapsed>
 8000924:	4603      	mov	r3, r0
 8000926:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	429a      	cmp	r2, r3
 800092e:	d205      	bcs.n	800093c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000934:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <RescheduleTimerList+0x134>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e04d      	b.n	80009d8 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	4a31      	ldr	r2, [pc, #196]	; (8000a04 <RescheduleTimerList+0x138>)
 8000940:	8812      	ldrh	r2, [r2, #0]
 8000942:	b292      	uxth	r2, r2
 8000944:	4413      	add	r3, r2
 8000946:	461a      	mov	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4293      	cmp	r3, r2
 800094c:	d906      	bls.n	800095c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <RescheduleTimerList+0x138>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <RescheduleTimerList+0x134>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	e03d      	b.n	80009d8 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	b29a      	uxth	r2, r3
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <RescheduleTimerList+0x134>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800096c:	e034      	b.n	80009d8 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	4922      	ldr	r1, [pc, #136]	; (80009fc <RescheduleTimerList+0x130>)
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	440b      	add	r3, r1
 800097c:	3308      	adds	r3, #8
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	429a      	cmp	r2, r3
 8000984:	d20a      	bcs.n	800099c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000986:	7bfa      	ldrb	r2, [r7, #15]
 8000988:	491c      	ldr	r1, [pc, #112]	; (80009fc <RescheduleTimerList+0x130>)
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	3308      	adds	r3, #8
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e013      	b.n	80009c4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800099c:	7bfa      	ldrb	r2, [r7, #15]
 800099e:	4917      	ldr	r1, [pc, #92]	; (80009fc <RescheduleTimerList+0x130>)
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	440b      	add	r3, r1
 80009aa:	3308      	adds	r3, #8
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	7bfa      	ldrb	r2, [r7, #15]
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <RescheduleTimerList+0x130>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	4403      	add	r3, r0
 80009c0:	3308      	adds	r3, #8
 80009c2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80009c4:	7bfa      	ldrb	r2, [r7, #15]
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <RescheduleTimerList+0x130>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	440b      	add	r3, r1
 80009d2:	3315      	adds	r3, #21
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d1c7      	bne.n	800096e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80009de:	89bb      	ldrh	r3, [r7, #12]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff15 	bl	8000810 <RestartWakeupCounter>

  return ;
 80009e6:	bf00      	nop
}
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40002800 	.word	0x40002800
 80009f4:	200001cc 	.word	0x200001cc
 80009f8:	200000b8 	.word	0x200000b8
 80009fc:	20000028 	.word	0x20000028
 8000a00:	200000c0 	.word	0x200000c0
 8000a04:	200001d4 	.word	0x200001d4

08000a08 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8000a12:	617b      	str	r3, [r7, #20]
  return(result);
 8000a14:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a1a:	4b5e      	ldr	r3, [pc, #376]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	22ca      	movs	r2, #202	; 0xca
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
 8000a24:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2253      	movs	r2, #83	; 0x53
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000a2e:	4b59      	ldr	r3, [pc, #356]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a40:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000a42:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000a4a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a4e:	4953      	ldr	r1, [pc, #332]	; (8000b9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	330c      	adds	r3, #12
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d170      	bne.n	8000b46 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000a64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a68:	494c      	ldr	r1, [pc, #304]	; (8000b9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	440b      	add	r3, r1
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000a78:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a7c:	4947      	ldr	r1, [pc, #284]	; (8000b9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	440b      	add	r3, r1
 8000a88:	3310      	adds	r3, #16
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000a8e:	4b44      	ldr	r3, [pc, #272]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d04e      	beq.n	8000b36 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000a98:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a9c:	493f      	ldr	r1, [pc, #252]	; (8000b9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	330d      	adds	r3, #13
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d125      	bne.n	8000afe <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fde5 	bl	8000688 <UnlinkTimer>
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000ac8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000acc:	4933      	ldr	r1, [pc, #204]	; (8000b9c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	440b      	add	r3, r1
 8000ad8:	3304      	adds	r3, #4
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fa40 	bl	8000f68 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	22ca      	movs	r2, #202	; 0xca
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2253      	movs	r2, #83	; 0x53
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
 8000afc:	e013      	b.n	8000b26 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 f9a1 	bl	8000e54 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	22ca      	movs	r2, #202	; 0xca
 8000b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2253      	movs	r2, #83	; 0x53
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000b26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	69b8      	ldr	r0, [r7, #24]
 8000b30:	f000 faa0 	bl	8001074 <HW_TS_RTC_Int_AppNot>
 8000b34:	e024      	b.n	8000b80 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000b36:	f7ff fec9 	bl	80008cc <RescheduleTimerList>
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	f383 8810 	msr	PRIMASK, r3
 8000b44:	e01c      	b.n	8000b80 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b46:	bf00      	nop
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f7      	beq.n	8000b48 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b6c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000b70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	22ff      	movs	r2, #255	; 0xff
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000b8a:	bf00      	nop
}
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001cc 	.word	0x200001cc
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	20000028 	.word	0x20000028
 8000ba0:	200000c0 	.word	0x200000c0
 8000ba4:	58000800 	.word	0x58000800

08000ba8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000bb4:	4a61      	ldr	r2, [pc, #388]	; (8000d3c <HW_TS_Init+0x194>)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bba:	4b60      	ldr	r3, [pc, #384]	; (8000d3c <HW_TS_Init+0x194>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	22ca      	movs	r2, #202	; 0xca
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8000bc4:	4b5d      	ldr	r3, [pc, #372]	; (8000d3c <HW_TS_Init+0x194>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2253      	movs	r2, #83	; 0x53
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000bce:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <HW_TS_Init+0x198>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4a5b      	ldr	r2, [pc, #364]	; (8000d40 <HW_TS_Init+0x198>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000bda:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <HW_TS_Init+0x198>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f1c3 0304 	rsb	r3, r3, #4
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b55      	ldr	r3, [pc, #340]	; (8000d44 <HW_TS_Init+0x19c>)
 8000bee:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000bf0:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <HW_TS_Init+0x198>)
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000bf8:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000bfc:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	fa92 f2a2 	rbit	r2, r2
 8000c04:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	3301      	adds	r3, #1
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4b4c      	ldr	r3, [pc, #304]	; (8000d48 <HW_TS_Init+0x1a0>)
 8000c18:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000c1a:	4b49      	ldr	r3, [pc, #292]	; (8000d40 <HW_TS_Init+0x198>)
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <HW_TS_Init+0x1a4>)
 8000c2c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000c2e:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <HW_TS_Init+0x1a4>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	4a44      	ldr	r2, [pc, #272]	; (8000d48 <HW_TS_Init+0x1a0>)
 8000c36:	7812      	ldrb	r2, [r2, #0]
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000c40:	4a40      	ldr	r2, [pc, #256]	; (8000d44 <HW_TS_Init+0x19c>)
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	40d3      	lsrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d904      	bls.n	8000c5c <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000c52:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <HW_TS_Init+0x1a8>)
 8000c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c58:	801a      	strh	r2, [r3, #0]
 8000c5a:	e003      	b.n	8000c64 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b3b      	ldr	r3, [pc, #236]	; (8000d50 <HW_TS_Init+0x1a8>)
 8000c62:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c68:	f7ff fb8c 	bl	8000384 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c70:	f7ff fb74 	bl	800035c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d143      	bne.n	8000d02 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <HW_TS_Init+0x1ac>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <HW_TS_Init+0x1b0>)
 8000c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c86:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	75fb      	strb	r3, [r7, #23]
 8000c8c:	e00c      	b.n	8000ca8 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000c8e:	7dfa      	ldrb	r2, [r7, #23]
 8000c90:	4932      	ldr	r1, [pc, #200]	; (8000d5c <HW_TS_Init+0x1b4>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	75fb      	strb	r3, [r7, #23]
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d9ef      	bls.n	8000c8e <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <HW_TS_Init+0x1b8>)
 8000cb0:	2206      	movs	r2, #6
 8000cb2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <HW_TS_Init+0x194>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <HW_TS_Init+0x194>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cc6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HW_TS_Init+0x194>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HW_TS_Init+0x194>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000cdc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <HW_TS_Init+0x1bc>)
 8000ce0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ce4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f001 f90d 	bl	8001f06 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HW_TS_Init+0x194>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HW_TS_Init+0x194>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	e00a      	b.n	8000d18 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HW_TS_Init+0x194>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d12:	2003      	movs	r0, #3
 8000d14:	f001 f8e9 	bl	8001eea <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HW_TS_Init+0x194>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	22ff      	movs	r2, #255	; 0xff
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d22:	2200      	movs	r2, #0
 8000d24:	2103      	movs	r1, #3
 8000d26:	2003      	movs	r0, #3
 8000d28:	f001 f89d 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f001 f8b4 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  return;
 8000d32:	bf00      	nop
}
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200001cc 	.word	0x200001cc
 8000d40:	40002800 	.word	0x40002800
 8000d44:	200001d0 	.word	0x200001d0
 8000d48:	200001d1 	.word	0x200001d1
 8000d4c:	200001d2 	.word	0x200001d2
 8000d50:	200001d4 	.word	0x200001d4
 8000d54:	200000c0 	.word	0x200000c0
 8000d58:	200000bc 	.word	0x200000bc
 8000d5c:	20000028 	.word	0x20000028
 8000d60:	200000b8 	.word	0x200000b8
 8000d64:	58000800 	.word	0x58000800

08000d68 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b08b      	sub	sp, #44	; 0x2c
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	4613      	mov	r3, r2
 8000d76:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8000d82:	61fb      	str	r3, [r7, #28]
  return(result);
 8000d84:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000d8a:	e004      	b.n	8000d96 <HW_TS_Create+0x2e>
  {
    loop++;
 8000d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d90:	3301      	adds	r3, #1
 8000d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d9a:	2b05      	cmp	r3, #5
 8000d9c:	d80c      	bhi.n	8000db8 <HW_TS_Create+0x50>
 8000d9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000da2:	492b      	ldr	r1, [pc, #172]	; (8000e50 <HW_TS_Create+0xe8>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	330c      	adds	r3, #12
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1e9      	bne.n	8000d8c <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d037      	beq.n	8000e30 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000dc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000dc4:	4922      	ldr	r1, [pc, #136]	; (8000e50 <HW_TS_Create+0xe8>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	440b      	add	r3, r1
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000de0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000de4:	491a      	ldr	r1, [pc, #104]	; (8000e50 <HW_TS_Create+0xe8>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	440b      	add	r3, r1
 8000df0:	3310      	adds	r3, #16
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000df6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000dfa:	4915      	ldr	r1, [pc, #84]	; (8000e50 <HW_TS_Create+0xe8>)
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	330d      	adds	r3, #13
 8000e08:	79fa      	ldrb	r2, [r7, #7]
 8000e0a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000e0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e10:	490f      	ldr	r1, [pc, #60]	; (8000e50 <HW_TS_Create+0xe8>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e26:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e2e:	e007      	b.n	8000e40 <HW_TS_Create+0xd8>
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	372c      	adds	r7, #44	; 0x2c
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	20000028 	.word	0x20000028

08000e54 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8000e62:	60fb      	str	r3, [r7, #12]
  return(result);
 8000e64:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f001 f823 	bl	8001eb6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e70:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	22ca      	movs	r2, #202	; 0xca
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2253      	movs	r2, #83	; 0x53
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000e84:	79fa      	ldrb	r2, [r7, #7]
 8000e86:	4933      	ldr	r1, [pc, #204]	; (8000f54 <HW_TS_Stop+0x100>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	330c      	adds	r3, #12
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d148      	bne.n	8000f2e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fbf1 	bl	8000688 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <HW_TS_Stop+0x104>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eac:	7cfb      	ldrb	r3, [r7, #19]
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d135      	bne.n	8000f1e <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <HW_TS_Stop+0x108>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebe:	d108      	bne.n	8000ed2 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000ec0:	bf00      	nop
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f7      	bne.n	8000ec2 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ee4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ee6:	bf00      	nop
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f7      	beq.n	8000ee8 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f0c:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HW_TS_Stop+0x10c>)
 8000f10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f14:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f16:	2003      	movs	r0, #3
 8000f18:	f000 fff5 	bl	8001f06 <HAL_NVIC_ClearPendingIRQ>
 8000f1c:	e007      	b.n	8000f2e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HW_TS_Stop+0x110>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	7cfa      	ldrb	r2, [r7, #19]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d001      	beq.n	8000f2e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8000f2a:	f7ff fccf 	bl	80008cc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HW_TS_Stop+0xfc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	22ff      	movs	r2, #255	; 0xff
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 ffae 	bl	8001e9a <HAL_NVIC_EnableIRQ>
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000f48:	bf00      	nop
}
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001cc 	.word	0x200001cc
 8000f54:	20000028 	.word	0x20000028
 8000f58:	200000b8 	.word	0x200000b8
 8000f5c:	40002800 	.word	0x40002800
 8000f60:	58000800 	.word	0x58000800
 8000f64:	200000b9 	.word	0x200000b9

08000f68 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	493b      	ldr	r1, [pc, #236]	; (8001064 <HW_TS_Start+0xfc>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	330c      	adds	r3, #12
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d103      	bne.n	8000f94 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff60 	bl	8000e54 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f94:	f3ef 8310 	mrs	r3, PRIMASK
 8000f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9e:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 ff88 	bl	8001eb6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HW_TS_Start+0x100>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	22ca      	movs	r2, #202	; 0xca
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HW_TS_Start+0x100>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2253      	movs	r2, #83	; 0x53
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	4929      	ldr	r1, [pc, #164]	; (8001064 <HW_TS_Start+0xfc>)
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	330c      	adds	r3, #12
 8000fca:	2202      	movs	r2, #2
 8000fcc:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	4924      	ldr	r1, [pc, #144]	; (8001064 <HW_TS_Start+0xfc>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	3308      	adds	r3, #8
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	491f      	ldr	r1, [pc, #124]	; (8001064 <HW_TS_Start+0xfc>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa9b 	bl	8000534 <linkTimer>
 8000ffe:	4603      	mov	r3, r0
 8001000:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HW_TS_Start+0x104>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HW_TS_Start+0x108>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	7c7a      	ldrb	r2, [r7, #17]
 8001010:	429a      	cmp	r2, r3
 8001012:	d002      	beq.n	800101a <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001014:	f7ff fc5a 	bl	80008cc <RescheduleTimerList>
 8001018:	e013      	b.n	8001042 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	4911      	ldr	r1, [pc, #68]	; (8001064 <HW_TS_Start+0xfc>)
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	3308      	adds	r3, #8
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	8a7b      	ldrh	r3, [r7, #18]
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	1ac9      	subs	r1, r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HW_TS_Start+0xfc>)
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4403      	add	r3, r0
 800103e:	3308      	adds	r3, #8
 8001040:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HW_TS_Start+0x100>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800104c:	2003      	movs	r0, #3
 800104e:	f000 ff24 	bl	8001e9a <HAL_NVIC_EnableIRQ>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800105c:	bf00      	nop
}
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000028 	.word	0x20000028
 8001068:	200001cc 	.word	0x200001cc
 800106c:	200000b8 	.word	0x200000b8
 8001070:	200000b9 	.word	0x200000b9

08001074 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	460b      	mov	r3, r1
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4798      	blx	r3

  return;
 8001086:	bf00      	nop
}
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_UART_TxCpltCallback+0x30>)
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d000      	beq.n	80010a6 <HAL_UART_TxCpltCallback+0x16>
            }
            break;
#endif

        default:
            break;
 80010a4:	e007      	b.n	80010b6 <HAL_UART_TxCpltCallback+0x26>
            if(HW_huart1TxCb)
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <HAL_UART_TxCpltCallback+0x34>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <HAL_UART_TxCpltCallback+0x24>
                HW_huart1TxCb();
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_UART_TxCpltCallback+0x34>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4798      	blx	r3
            break;
 80010b4:	bf00      	nop
    }

    return;
 80010b6:	bf00      	nop
}
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40013800 	.word	0x40013800
 80010c4:	200002fc 	.word	0x200002fc

080010c8 <LL_RCC_LSE_SetDriveCapability>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d8:	f023 0218 	bic.w	r2, r3, #24
 80010dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4313      	orrs	r3, r2
 800110a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4313      	orrs	r3, r2
 800113c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800113e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4013      	ands	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f000 fca2 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f81f 	bl	80011a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f000 f91e 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001168:	f000 f902 	bl	8001370 <MX_DMA_Init>
  MX_RF_Init();
 800116c:	f000 f881 	bl	8001272 <MX_RF_Init>
  MX_RTC_Init();
 8001170:	f000 f886 	bl	8001280 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001174:	f000 f8ae 	bl	80012d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001178:	f7ff f84e 	bl	8000218 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(~0);
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001180:	f006 faba 	bl	80076f8 <UTIL_SEQ_Run>

	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_0);
 8001184:	2101      	movs	r1, #1
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f001 fa37 	bl	80025fc <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_1);
 800118e:	2102      	movs	r1, #2
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f001 fa32 	bl	80025fc <HAL_GPIO_TogglePin>

	  HAL_Delay(1000);
 8001198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119c:	f000 fd08 	bl	8001bb0 <HAL_Delay>
	  UTIL_SEQ_Run(~0);
 80011a0:	e7ec      	b.n	800117c <main+0x24>

080011a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b0a2      	sub	sp, #136	; 0x88
 80011a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ac:	2248      	movs	r2, #72	; 0x48
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 fcde 	bl	8007b72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2224      	movs	r2, #36	; 0x24
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 fcce 	bl	8007b72 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011d6:	f001 fa4f 	bl	8002678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff ff74 	bl	80010c8 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80011e0:	2307      	movs	r3, #7
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ea:	2301      	movs	r3, #1
 80011ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2340      	movs	r3, #64	; 0x40
 80011f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fdd1 	bl	8002da8 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800120c:	f000 f918 	bl	8001440 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001210:	236f      	movs	r3, #111	; 0x6f
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	2103      	movs	r1, #3
 8001232:	4618      	mov	r0, r3
 8001234:	f002 f942 	bl	80034bc <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800123e:	f000 f8ff 	bl	8001440 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP|RCC_PERIPHCLK_RTC
 8001242:	f641 0301 	movw	r3, #6145	; 0x1801
 8001246:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001256:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fc98 	bl	8003b90 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001266:	f000 f8eb 	bl	8001440 <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3788      	adds	r7, #136	; 0x88
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_RTC_Init+0x4c>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_RTC_Init+0x50>)
 8001288:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_RTC_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_RTC_Init+0x4c>)
 8001292:	220f      	movs	r2, #15
 8001294:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_RTC_Init+0x4c>)
 8001298:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800129c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_RTC_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_RTC_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_RTC_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_RTC_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_RTC_Init+0x4c>)
 80012b8:	f002 fd45 	bl	8003d46 <HAL_RTC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80012c2:	f000 f8bd 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000044c 	.word	0x2000044c
 80012d0:	40002800 	.word	0x40002800

080012d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <MX_USART1_UART_Init+0x94>)
 80012da:	4a24      	ldr	r2, [pc, #144]	; (800136c <MX_USART1_UART_Init+0x98>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_USART1_UART_Init+0x94>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_USART1_UART_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_USART1_UART_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_USART1_UART_Init+0x94>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_USART1_UART_Init+0x94>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_USART1_UART_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_USART1_UART_Init+0x94>)
 8001306:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800130a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_USART1_UART_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_USART1_UART_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_USART1_UART_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <MX_USART1_UART_Init+0x94>)
 8001320:	f002 fe0f 	bl	8003f42 <HAL_UART_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800132a:	f000 f889 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132e:	2100      	movs	r1, #0
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_USART1_UART_Init+0x94>)
 8001332:	f003 fb39 	bl	80049a8 <HAL_UARTEx_SetTxFifoThreshold>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800133c:	f000 f880 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	4809      	ldr	r0, [pc, #36]	; (8001368 <MX_USART1_UART_Init+0x94>)
 8001344:	f003 fb6e 	bl	8004a24 <HAL_UARTEx_SetRxFifoThreshold>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800134e:	f000 f877 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART1_UART_Init+0x94>)
 8001354:	f003 faef 	bl	8004936 <HAL_UARTEx_DisableFifoMode>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800135e:	f000 f86f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200003c0 	.word	0x200003c0
 800136c:	40013800 	.word	0x40013800

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001374:	2004      	movs	r0, #4
 8001376:	f7ff febd 	bl	80010f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff feba 	bl	80010f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	200b      	movs	r0, #11
 8001386:	f000 fd6e 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800138a:	200b      	movs	r0, #11
 800138c:	f000 fd85 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	200c      	movs	r0, #12
 8001396:	f000 fd66 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800139a:	200c      	movs	r0, #12
 800139c:	f000 fd7d 	bl	8001e9a <HAL_NVIC_EnableIRQ>

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	2004      	movs	r0, #4
 80013ba:	f7ff feb4 	bl	8001126 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff feb1 	bl	8001126 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	2002      	movs	r0, #2
 80013c6:	f7ff feae 	bl	8001126 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2121      	movs	r1, #33	; 0x21
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <MX_GPIO_Init+0x98>)
 80013d0:	f001 f8fc 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f001 f8f5 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013e2:	2302      	movs	r3, #2
 80013e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f000 ff81 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin PB5 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_5;
 80013fa:	2321      	movs	r3, #33	; 0x21
 80013fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <MX_GPIO_Init+0x98>)
 8001410:	f000 ff74 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001414:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f000 ff65 	bl	80022fc <HAL_GPIO_Init>

}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	48000400 	.word	0x48000400

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80014b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014be:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ca:	4313      	orrs	r3, r2
 80014cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	cafecafe 	.word	0xcafecafe

080014e0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_AHB2_GRP1_EnableClock>:
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4313      	orrs	r3, r2
 8001518:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4013      	ands	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4313      	orrs	r3, r2
 800154a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4313      	orrs	r3, r2
 800157c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800157e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001582:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4013      	ands	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

	OTP_ID0_t * p_otp;


	p_otp = (OTP_ID0_t *) OTP_Read(0);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f005 f97d 	bl	80068d0 <OTP_Read>
 80015d6:	6078      	str	r0, [r7, #4]
	if(p_otp) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <HAL_MspInit+0x1e>
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	799b      	ldrb	r3, [r3, #6]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff5e 	bl	80014a4 <LL_RCC_HSE_SetCapacitorTuning>
	}

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80015e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015ec:	f7ff ffa2 	bl	8001534 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	202e      	movs	r0, #46	; 0x2e
 80015f6:	f000 fc36 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80015fa:	202e      	movs	r0, #46	; 0x2e
 80015fc:	f000 fc4d 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_RTC_MspInit+0x28>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d105      	bne.n	8001626 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800161a:	f7ff ff61 	bl	80014e0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800161e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001622:	f7ff ffa0 	bl	8001566 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40002800 	.word	0x40002800

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a46      	ldr	r2, [pc, #280]	; (800176c <HAL_UART_MspInit+0x138>)
 8001652:	4293      	cmp	r3, r2
 8001654:	f040 8086 	bne.w	8001764 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001658:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800165c:	f7ff ff9c 	bl	8001598 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff ff4e 	bl	8001502 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2002      	movs	r0, #2
 8001668:	f7ff ff4b 	bl	8001502 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800166c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001670:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800167e:	2307      	movs	r3, #7
 8001680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f000 fe36 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001690:	2340      	movs	r3, #64	; 0x40
 8001692:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a0:	2307      	movs	r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	4831      	ldr	r0, [pc, #196]	; (8001770 <HAL_UART_MspInit+0x13c>)
 80016ac:	f000 fe26 	bl	80022fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <HAL_UART_MspInit+0x144>)
 80016b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016b8:	220e      	movs	r2, #14
 80016ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016e6:	4823      	ldr	r0, [pc, #140]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016e8:	f000 fc1c 	bl	8001f24 <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80016f2:	f7ff fea5 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016fa:	679a      	str	r2, [r3, #120]	; 0x78
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_UART_MspInit+0x140>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_UART_MspInit+0x148>)
 8001704:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <HAL_UART_MspInit+0x14c>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_UART_MspInit+0x148>)
 800170a:	220f      	movs	r2, #15
 800170c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_UART_MspInit+0x148>)
 8001710:	2210      	movs	r2, #16
 8001712:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_UART_MspInit+0x148>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_UART_MspInit+0x148>)
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_UART_MspInit+0x148>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_UART_MspInit+0x148>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_UART_MspInit+0x148>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_UART_MspInit+0x148>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001738:	4810      	ldr	r0, [pc, #64]	; (800177c <HAL_UART_MspInit+0x148>)
 800173a:	f000 fbf3 	bl	8001f24 <HAL_DMA_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001744:	f7ff fe7c 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_UART_MspInit+0x148>)
 800174c:	675a      	str	r2, [r3, #116]	; 0x74
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_UART_MspInit+0x148>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2024      	movs	r0, #36	; 0x24
 800175a:	f000 fb84 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800175e:	2024      	movs	r0, #36	; 0x24
 8001760:	f000 fb9b 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013800 	.word	0x40013800
 8001770:	48000400 	.word	0x48000400
 8001774:	20000360 	.word	0x20000360
 8001778:	40020008 	.word	0x40020008
 800177c:	20000300 	.word	0x20000300
 8001780:	4002001c 	.word	0x4002001c

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f9be 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <DMA1_Channel1_IRQHandler+0x10>)
 80017e6:	f000 fc88 	bl	80020fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000360 	.word	0x20000360

080017f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <DMA1_Channel2_IRQHandler+0x10>)
 80017fa:	f000 fc7e 	bl	80020fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000300 	.word	0x20000300

08001808 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART1_IRQHandler+0x10>)
 800180e:	f002 fbe9 	bl	8003fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200003c0 	.word	0x200003c0

0800181c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001820:	f000 ff06 	bl	8002630 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	 HW_TS_RTC_Wakeup_Handler();
 800182c:	f7ff f8ec 	bl	8000a08 <HW_TS_RTC_Wakeup_Handler>
 }
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <IPCC_C1_RX_IRQHandler>:

 void IPCC_C1_RX_IRQHandler(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	  HW_IPCC_Rx_Handler();
 8001838:	f005 fd9a 	bl	8007370 <HW_IPCC_Rx_Handler>
 }
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <IPCC_C1_TX_IRQHandler>:

 void IPCC_C1_TX_IRQHandler(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	  HW_IPCC_Tx_Handler();
 8001844:	f005 fdcc 	bl	80073e0 <HW_IPCC_Tx_Handler>
 }
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <SystemInit+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <SystemInit+0x98>)
 8001858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <SystemInit+0x98>)
 800185e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001862:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800187e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <SystemInit+0x9c>)
 800188c:	4013      	ands	r3, r2
 800188e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800189c:	f023 0305 	bic.w	r3, r3, #5
 80018a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <SystemInit+0xa0>)
 80018be:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00
 80018e8:	faf6fefb 	.word	0xfaf6fefb
 80018ec:	22041000 	.word	0x22041000

080018f0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	4a47      	ldr	r2, [pc, #284]	; (8001a20 <SystemCoreClockUpdate+0x130>)
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d867      	bhi.n	80019e8 <SystemCoreClockUpdate+0xf8>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <SystemCoreClockUpdate+0x30>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	08001955 	.word	0x08001955
 8001924:	080019e9 	.word	0x080019e9
 8001928:	080019e9 	.word	0x080019e9
 800192c:	080019e9 	.word	0x080019e9
 8001930:	0800195d 	.word	0x0800195d
 8001934:	080019e9 	.word	0x080019e9
 8001938:	080019e9 	.word	0x080019e9
 800193c:	080019e9 	.word	0x080019e9
 8001940:	08001965 	.word	0x08001965
 8001944:	080019e9 	.word	0x080019e9
 8001948:	080019e9 	.word	0x080019e9
 800194c:	080019e9 	.word	0x080019e9
 8001950:	0800196d 	.word	0x0800196d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001954:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <SystemCoreClockUpdate+0x134>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6013      	str	r3, [r2, #0]
      break;
 800195a:	e049      	b.n	80019f0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <SystemCoreClockUpdate+0x134>)
 800195e:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <SystemCoreClockUpdate+0x138>)
 8001960:	601a      	str	r2, [r3, #0]
      break;
 8001962:	e045      	b.n	80019f0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001964:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <SystemCoreClockUpdate+0x134>)
 8001966:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <SystemCoreClockUpdate+0x13c>)
 8001968:	601a      	str	r2, [r3, #0]
      break;
 800196a:	e041      	b.n	80019f0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	3301      	adds	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d105      	bne.n	800199a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800198e:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <SystemCoreClockUpdate+0x138>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e00d      	b.n	80019b6 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d105      	bne.n	80019ac <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80019a0:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <SystemCoreClockUpdate+0x13c>)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e004      	b.n	80019b6 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0f5b      	lsrs	r3, r3, #29
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	3301      	adds	r3, #1
 80019d8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <SystemCoreClockUpdate+0x134>)
 80019e4:	6013      	str	r3, [r2, #0]
      break;
 80019e6:	e003      	b.n	80019f0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <SystemCoreClockUpdate+0x134>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6013      	str	r3, [r2, #0]
      break;
 80019ee:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <SystemCoreClockUpdate+0x140>)
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <SystemCoreClockUpdate+0x134>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SystemCoreClockUpdate+0x134>)
 8001a10:	6013      	str	r3, [r2, #0]

}
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	08007da8 	.word	0x08007da8
 8001a24:	20000004 	.word	0x20000004
 8001a28:	00f42400 	.word	0x00f42400
 8001a2c:	01e84800 	.word	0x01e84800
 8001a30:	08007d48 	.word	0x08007d48

08001a34 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001a34:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a36:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a38:	3304      	adds	r3, #4

08001a3a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a3a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001a3e:	d3f9      	bcc.n	8001a34 <CopyDataInit>
  bx lr
 8001a40:	4770      	bx	lr

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a42:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a44:	3004      	adds	r0, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a46:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>
  bx lr
 8001a4a:	4770      	bx	lr

08001a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001a4e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a50:	f7ff fefc 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <LoopForever+0x8>)
 8001a56:	490c      	ldr	r1, [pc, #48]	; (8001a88 <LoopForever+0xc>)
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <LoopForever+0x10>)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f7ff ffed 	bl	8001a3a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <LoopForever+0x14>)
 8001a62:	490c      	ldr	r1, [pc, #48]	; (8001a94 <LoopForever+0x18>)
 8001a64:	2300      	movs	r3, #0
 8001a66:	f7ff ffee 	bl	8001a46 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a6a:	480b      	ldr	r0, [pc, #44]	; (8001a98 <LoopForever+0x1c>)
 8001a6c:	490b      	ldr	r1, [pc, #44]	; (8001a9c <LoopForever+0x20>)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f7ff ffe9 	bl	8001a46 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a74:	f006 f84e 	bl	8007b14 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001a78:	f7ff fb6e 	bl	8001158 <main>

08001a7c <LoopForever>:

LoopForever:
  b LoopForever
 8001a7c:	e7fe      	b.n	8001a7c <LoopForever>
 8001a7e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001a80:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8001a84:	20000004 	.word	0x20000004
 8001a88:	20000028 	.word	0x20000028
 8001a8c:	08007e48 	.word	0x08007e48
  INIT_BSS _sbss, _ebss
 8001a90:	200001b0 	.word	0x200001b0
 8001a94:	20000478 	.word	0x20000478
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a98:	200301e0 	.word	0x200301e0
 8001a9c:	20030a57 	.word	0x20030a57

08001aa0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC1_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_Init+0x3c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <HAL_Init+0x3c>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aba:	2003      	movs	r0, #3
 8001abc:	f000 f9c8 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f000 f80f 	bl	8001ae4 <HAL_InitTick>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	e001      	b.n	8001ad6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad2:	f7ff fd7a 	bl	80015ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58004000 	.word	0x58004000

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_InitTick+0x6c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d024      	beq.n	8001b42 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001af8:	f001 fe86 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_InitTick+0x6c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b08:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f9de 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10f      	bne.n	8001b3c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	d809      	bhi.n	8001b36 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b22:	2200      	movs	r2, #0
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b2a:	f000 f99c 	bl	8001e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_InitTick+0x70>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e007      	b.n	8001b46 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	e004      	b.n	8001b46 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e001      	b.n	8001b46 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000000c 	.word	0x2000000c
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000000c 	.word	0x2000000c
 8001b7c:	20000470 	.word	0x20000470

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000470 	.word	0x20000470

08001b98 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTickPrio+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffe2 	bl	8001b80 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_Delay+0x40>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffd2 	bl	8001b80 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
    {
    }
  }
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <__NVIC_EnableIRQ+0x38>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db10      	blt.n	8001cc8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4909      	ldr	r1, [pc, #36]	; (8001cd4 <__NVIC_DisableIRQ+0x40>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	3320      	adds	r3, #32
 8001cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cc4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0c      	blt.n	8001d04 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <__NVIC_SetPendingIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	3340      	adds	r3, #64	; 0x40
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0c      	blt.n	8001d40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <__NVIC_ClearPendingIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	3360      	adds	r3, #96	; 0x60
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e30:	f7ff ff8e 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fecb 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff fee2 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff90 	bl	8001da4 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5f 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fed5 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fee5 	bl	8001c94 <__NVIC_DisableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff96 	bl	8001e0c <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff feed 	bl	8001cd8 <__NVIC_SetPendingIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fefd 	bl	8001d14 <__NVIC_ClearPendingIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e078      	b.n	8002028 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_DMA_Init+0x10c>)
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a3c      	ldr	r2, [pc, #240]	; (8002034 <HAL_DMA_Init+0x110>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	009a      	lsls	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a39      	ldr	r2, [pc, #228]	; (8002038 <HAL_DMA_Init+0x114>)
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f956 	bl	8002258 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb4:	d102      	bne.n	8001fbc <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fd2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <HAL_DMA_Init+0xda>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d80c      	bhi.n	8001ffe <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f963 	bl	80022b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	e008      	b.n	8002010 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	bffdfff8 	.word	0xbffdfff8
 8002034:	cccccccd 	.word	0xcccccccd
 8002038:	40020000 	.word	0x40020000

0800203c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d005      	beq.n	8002060 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2204      	movs	r2, #4
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	e047      	b.n	80020f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 020e 	bic.w	r2, r2, #14
 800206e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f003 021c 	and.w	r2, r3, #28
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
    }
  }
  return status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f003 031c 	and.w	r3, r3, #28
 800211a:	2204      	movs	r2, #4
 800211c:	409a      	lsls	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d026      	beq.n	8002174 <HAL_DMA_IRQHandler+0x7a>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d021      	beq.n	8002174 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0204 	bic.w	r2, r2, #4
 800214c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 021c 	and.w	r2, r3, #28
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2104      	movs	r1, #4
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	2b00      	cmp	r3, #0
 8002168:	d071      	beq.n	800224e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002172:	e06c      	b.n	800224e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f003 031c 	and.w	r3, r3, #28
 800217c:	2202      	movs	r2, #2
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02e      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xec>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d029      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020a 	bic.w	r2, r2, #10
 80021ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	f003 021c 	and.w	r2, r3, #28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2102      	movs	r1, #2
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d038      	beq.n	800224e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021e4:	e033      	b.n	800224e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f003 031c 	and.w	r3, r3, #28
 80021ee:	2208      	movs	r2, #8
 80021f0:	409a      	lsls	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d02a      	beq.n	8002250 <HAL_DMA_IRQHandler+0x156>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d025      	beq.n	8002250 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 020e 	bic.w	r2, r2, #14
 8002212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f003 021c 	and.w	r2, r3, #28
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f202 	lsl.w	r2, r1, r2
 8002226:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800224e:	bf00      	nop
 8002250:	bf00      	nop
}
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800226c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6493      	str	r3, [r2, #72]	; 0x48
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3b08      	subs	r3, #8
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a08      	ldr	r2, [pc, #32]	; (80022ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800228a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	2201      	movs	r2, #1
 8002294:	409a      	lsls	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	651a      	str	r2, [r3, #80]	; 0x50
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	cccccccd 	.word	0xcccccccd
 80022ac:	40020880 	.word	0x40020880

080022b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	461a      	mov	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80022d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3b01      	subs	r3, #1
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2201      	movs	r2, #1
 80022e0:	409a      	lsls	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	1000823f 	.word	0x1000823f
 80022f8:	40020940 	.word	0x40020940

080022fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	e146      	b.n	800259a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8138 	beq.w	8002594 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d00b      	beq.n	8002344 <HAL_GPIO_Init+0x48>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d007      	beq.n	8002344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002338:	2b11      	cmp	r3, #17
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b12      	cmp	r3, #18
 8002342:	d130      	bne.n	80023a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800237a:	2201      	movs	r2, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 0201 	and.w	r2, r3, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0xea>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d123      	bne.n	800242e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0203 	and.w	r2, r3, #3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8092 	beq.w	8002594 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002470:	4a51      	ldr	r2, [pc, #324]	; (80025b8 <HAL_GPIO_Init+0x2bc>)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800249a:	d013      	beq.n	80024c4 <HAL_GPIO_Init+0x1c8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a47      	ldr	r2, [pc, #284]	; (80025bc <HAL_GPIO_Init+0x2c0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00d      	beq.n	80024c0 <HAL_GPIO_Init+0x1c4>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a46      	ldr	r2, [pc, #280]	; (80025c0 <HAL_GPIO_Init+0x2c4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_Init+0x1c0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a45      	ldr	r2, [pc, #276]	; (80025c4 <HAL_GPIO_Init+0x2c8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_GPIO_Init+0x1bc>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e006      	b.n	80024c6 <HAL_GPIO_Init+0x1ca>
 80024b8:	2307      	movs	r3, #7
 80024ba:	e004      	b.n	80024c6 <HAL_GPIO_Init+0x1ca>
 80024bc:	2302      	movs	r3, #2
 80024be:	e002      	b.n	80024c6 <HAL_GPIO_Init+0x1ca>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_GPIO_Init+0x1ca>
 80024c4:	2300      	movs	r3, #0
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	f002 0203 	and.w	r2, r2, #3
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	4093      	lsls	r3, r2
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024d6:	4938      	ldr	r1, [pc, #224]	; (80025b8 <HAL_GPIO_Init+0x2bc>)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024e4:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 80024e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800250a:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002564:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f47f aeb1 	bne.w	800230c <HAL_GPIO_Init+0x10>
  }
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40010000 	.word	0x40010000
 80025bc:	48000400 	.word	0x48000400
 80025c0:	48000800 	.word	0x48000800
 80025c4:	48001000 	.word	0x48001000
 80025c8:	58000800 	.word	0x58000800

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e8:	e002      	b.n	80025f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	041a      	lsls	r2, r3, #16
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43d9      	mvns	r1, r3
 800261a:	887b      	ldrh	r3, [r7, #2]
 800261c:	400b      	ands	r3, r1
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_HSEM_IRQHandler+0x30>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_HSEM_IRQHandler+0x30>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	43db      	mvns	r3, r3
 8002644:	4906      	ldr	r1, [pc, #24]	; (8002660 <HAL_HSEM_IRQHandler+0x30>)
 8002646:	4013      	ands	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <HAL_HSEM_IRQHandler+0x30>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f807 	bl	8002664 <HAL_HSEM_FreeCallback>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	58001500 	.word	0x58001500

08002664 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	58000400 	.word	0x58000400

08002698 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026aa:	d101      	bne.n	80026b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_RCC_HSE_EnableBypass>:
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_RCC_HSE_DisableBypass>:
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_RCC_HSE_Enable>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_RCC_HSE_Disable>:
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_RCC_HSE_IsReady>:
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002746:	d101      	bne.n	800274c <LL_RCC_HSE_IsReady+0x18>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <LL_RCC_HSE_IsReady+0x1a>
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_RCC_HSI_Enable>:
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_RCC_HSI_Disable>:
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_RCC_HSI_IsReady>:
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a6:	d101      	bne.n	80027ac <LL_RCC_HSI_IsReady+0x18>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <LL_RCC_HSI_IsReady+0x1a>
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_RCC_HSI48_Enable>:
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_RCC_HSI48_Disable>:
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <LL_RCC_HSI48_IsReady>:
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d101      	bne.n	800283e <LL_RCC_HSI48_IsReady+0x18>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <LL_RCC_HSI48_IsReady+0x1a>
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_RCC_LSE_Enable>:
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800284e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_RCC_LSE_Disable>:
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_RCC_LSE_EnableBypass>:
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_LSE_DisableBypass>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_LSE_IsReady>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d101      	bne.n	80028ea <LL_RCC_LSE_IsReady+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_RCC_LSE_IsReady+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_LSI1_Enable>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_RCC_LSI1_Disable>:
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_RCC_LSI1_IsReady>:
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d101      	bne.n	8002952 <LL_RCC_LSI1_IsReady+0x18>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <LL_RCC_LSI1_IsReady+0x1a>
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_RCC_LSI2_Enable>:
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_RCC_LSI2_Disable>:
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_LSI2_IsReady>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d101      	bne.n	80029ba <LL_RCC_LSI2_IsReady+0x18>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <LL_RCC_LSI2_IsReady+0x1a>
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_LSI2_SetTrimming>:
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_MSI_Enable>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_MSI_Disable>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_RCC_MSI_IsReady>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d101      	bne.n	8002a46 <LL_RCC_MSI_IsReady+0x16>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <LL_RCC_MSI_IsReady+0x18>
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_RCC_MSI_SetRange>:
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_MSI_GetRange>:
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2bb0      	cmp	r3, #176	; 0xb0
 8002a90:	d901      	bls.n	8002a96 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002a92:	23b0      	movs	r3, #176	; 0xb0
 8002a94:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002a96:	687b      	ldr	r3, [r7, #4]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_SetSysClkSource>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 0203 	bic.w	r2, r3, #3
 8002ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_GetSysClkSource>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_SetAHBPrescaler>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_SetAHB4Prescaler>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b72:	f023 020f 	bic.w	r2, r3, #15
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_SetAPB1Prescaler>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_SetAPB2Prescaler>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_RCC_GetAHBPrescaler>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_GetAHB4Prescaler>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_RCC_GetAPB2Prescaler>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5c:	6013      	str	r3, [r2, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c7a:	d101      	bne.n	8002c80 <LL_RCC_PLL_IsReady+0x18>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <LL_RCC_PLL_IsReady+0x1a>
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d101      	bne.n	8002d06 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d26:	d101      	bne.n	8002d2c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d101      	bne.n	8002d52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d70:	d101      	bne.n	8002d76 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d94:	d101      	bne.n	8002d9a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b08d      	sub	sp, #52	; 0x34
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e37b      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 808f 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc8:	f7ff fe95 	bl	8002af6 <LL_RCC_GetSysClkSource>
 8002dcc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dce:	f7ff ff82 	bl	8002cd6 <LL_RCC_PLL_GetMainSource>
 8002dd2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_RCC_OscConfig+0x3e>
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d149      	bne.n	8002e74 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d146      	bne.n	8002e74 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de6:	f7ff fe23 	bl	8002a30 <LL_RCC_MSI_IsReady>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_OscConfig+0x54>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e35a      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002e00:	f7ff fe3b 	bl	8002a7a <LL_RCC_MSI_GetRange>
 8002e04:	4603      	mov	r3, r0
 8002e06:	429c      	cmp	r4, r3
 8002e08:	d914      	bls.n	8002e34 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fd24 	bl	800385c <RCC_SetFlashLatencyFromMSIRange>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e349      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fe15 	bl	8002a52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fe39 	bl	8002aa4 <LL_RCC_MSI_SetCalibTrimming>
 8002e32:	e013      	b.n	8002e5c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fe0a 	bl	8002a52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fe2e 	bl	8002aa4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fd05 	bl	800385c <RCC_SetFlashLatencyFromMSIRange>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e32a      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002e5c:	f7fe fd48 	bl	80018f0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e60:	4bb4      	ldr	r3, [pc, #720]	; (8003134 <HAL_RCC_OscConfig+0x38c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe fe3d 	bl	8001ae4 <HAL_InitTick>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d039      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e31e      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01e      	beq.n	8002eba <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e7c:	f7ff fdba 	bl	80029f4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fe7e 	bl	8001b80 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e88:	f7fe fe7a 	bl	8001b80 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e30b      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e9a:	f7ff fdc9 	bl	8002a30 <LL_RCC_MSI_IsReady>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f1      	beq.n	8002e88 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fdd2 	bl	8002a52 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fdf6 	bl	8002aa4 <LL_RCC_MSI_SetCalibTrimming>
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eba:	f7ff fdaa 	bl	8002a12 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fe5f 	bl	8001b80 <HAL_GetTick>
 8002ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fe5b 	bl	8001b80 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e2ec      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ed8:	f7ff fdaa 	bl	8002a30 <LL_RCC_MSI_IsReady>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f1      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x11e>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d05a      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef2:	f7ff fe00 	bl	8002af6 <LL_RCC_GetSysClkSource>
 8002ef6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef8:	f7ff feed 	bl	8002cd6 <LL_RCC_PLL_GetMainSource>
 8002efc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_OscConfig+0x168>
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d10d      	bne.n	8002f26 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d10a      	bne.n	8002f26 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	f7ff fc10 	bl	8002734 <LL_RCC_HSE_IsReady>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d045      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1fe>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d141      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e2c5      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_OscConfig+0x18e>
 8002f30:	f7ff fbe2 	bl	80026f8 <LL_RCC_HSE_Enable>
 8002f34:	e00d      	b.n	8002f52 <HAL_RCC_OscConfig+0x1aa>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3e:	d104      	bne.n	8002f4a <HAL_RCC_OscConfig+0x1a2>
 8002f40:	f7ff fbbc 	bl	80026bc <LL_RCC_HSE_EnableBypass>
 8002f44:	f7ff fbd8 	bl	80026f8 <LL_RCC_HSE_Enable>
 8002f48:	e003      	b.n	8002f52 <HAL_RCC_OscConfig+0x1aa>
 8002f4a:	f7ff fbe4 	bl	8002716 <LL_RCC_HSE_Disable>
 8002f4e:	f7ff fbc4 	bl	80026da <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fe11 	bl	8001b80 <HAL_GetTick>
 8002f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f62:	f7fe fe0d 	bl	8001b80 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e29e      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f74:	f7ff fbde 	bl	8002734 <LL_RCC_HSE_IsReady>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f1      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1ba>
 8002f7e:	e013      	b.n	8002fa8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fdfe 	bl	8001b80 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe fdfa 	bl	8001b80 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e28b      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f9a:	f7ff fbcb 	bl	8002734 <LL_RCC_HSE_IsReady>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f1      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1e0>
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d051      	beq.n	8003058 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb4:	f7ff fd9f 	bl	8002af6 <LL_RCC_GetSysClkSource>
 8002fb8:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fba:	f7ff fe8c 	bl	8002cd6 <LL_RCC_PLL_GetMainSource>
 8002fbe:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x22a>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d113      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d110      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd2:	f7ff fbdf 	bl	8002794 <LL_RCC_HSI_IsReady>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x240>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e264      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fbe3 	bl	80027b8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff2:	e031      	b.n	8003058 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d019      	beq.n	8003030 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffc:	f7ff fbac 	bl	8002758 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fdbe 	bl	8001b80 <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003008:	f7fe fdba 	bl	8001b80 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e24b      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800301a:	f7ff fbbb 	bl	8002794 <LL_RCC_HSI_IsReady>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f1      	beq.n	8003008 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fbc5 	bl	80027b8 <LL_RCC_HSI_SetCalibTrimming>
 800302e:	e013      	b.n	8003058 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003030:	f7ff fba1 	bl	8002776 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe fda4 	bl	8001b80 <HAL_GetTick>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe fda0 	bl	8001b80 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e231      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800304e:	f7ff fba1 	bl	8002794 <LL_RCC_HSI_IsReady>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f1      	bne.n	800303c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a2 	beq.w	80031b6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d075      	beq.n	8003166 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d046      	beq.n	8003114 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003086:	f7ff fc58 	bl	800293a <LL_RCC_LSI1_IsReady>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d113      	bne.n	80030b8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003090:	f7ff fc31 	bl	80028f6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003094:	f7fe fd74 	bl	8001b80 <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800309c:	f7fe fd70 	bl	8001b80 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e201      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80030ae:	f7ff fc44 	bl	800293a <LL_RCC_LSI1_IsReady>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f1      	beq.n	800309c <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80030b8:	f7ff fc51 	bl	800295e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fd60 	bl	8001b80 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030c4:	f7fe fd5c 	bl	8001b80 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1ed      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80030d6:	f7ff fc64 	bl	80029a2 <LL_RCC_LSI2_IsReady>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f1      	beq.n	80030c4 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fc6e 	bl	80029c6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80030ea:	f7ff fc15 	bl	8002918 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe fd47 	bl	8001b80 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030f6:	f7fe fd43 	bl	8001b80 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1d4      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003108:	f7ff fc17 	bl	800293a <LL_RCC_LSI1_IsReady>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f1      	bne.n	80030f6 <HAL_RCC_OscConfig+0x34e>
 8003112:	e050      	b.n	80031b6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003114:	f7ff fbef 	bl	80028f6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fd32 	bl	8001b80 <HAL_GetTick>
 800311c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003120:	f7fe fd2e 	bl	8001b80 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d904      	bls.n	8003138 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1bf      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
 8003132:	bf00      	nop
 8003134:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003138:	f7ff fbff 	bl	800293a <LL_RCC_LSI1_IsReady>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ee      	beq.n	8003120 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003142:	f7ff fc1d 	bl	8002980 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003148:	f7fe fd1a 	bl	8001b80 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b03      	cmp	r3, #3
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1ab      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800315a:	f7ff fc22 	bl	80029a2 <LL_RCC_LSI2_IsReady>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f1      	bne.n	8003148 <HAL_RCC_OscConfig+0x3a0>
 8003164:	e027      	b.n	80031b6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003166:	f7ff fc0b 	bl	8002980 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fe fd09 	bl	8001b80 <HAL_GetTick>
 800316e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003172:	f7fe fd05 	bl	8001b80 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b03      	cmp	r3, #3
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e196      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003184:	f7ff fc0d 	bl	80029a2 <LL_RCC_LSI2_IsReady>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f1      	bne.n	8003172 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800318e:	f7ff fbc3 	bl	8002918 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe fcf5 	bl	8001b80 <HAL_GetTick>
 8003196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800319a:	f7fe fcf1 	bl	8001b80 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e182      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80031ac:	f7ff fbc5 	bl	800293a <LL_RCC_LSI1_IsReady>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f1      	bne.n	800319a <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d05b      	beq.n	800327a <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c2:	4bb4      	ldr	r3, [pc, #720]	; (8003494 <HAL_RCC_OscConfig+0x6ec>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d114      	bne.n	80031f8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80031ce:	f7ff fa53 	bl	8002678 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fcd5 	bl	8001b80 <HAL_GetTick>
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fe fcd1 	bl	8001b80 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e162      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ec:	4ba9      	ldr	r3, [pc, #676]	; (8003494 <HAL_RCC_OscConfig+0x6ec>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_OscConfig+0x45e>
 8003200:	f7ff fb23 	bl	800284a <LL_RCC_LSE_Enable>
 8003204:	e00c      	b.n	8003220 <HAL_RCC_OscConfig+0x478>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b05      	cmp	r3, #5
 800320c:	d104      	bne.n	8003218 <HAL_RCC_OscConfig+0x470>
 800320e:	f7ff fb3e 	bl	800288e <LL_RCC_LSE_EnableBypass>
 8003212:	f7ff fb1a 	bl	800284a <LL_RCC_LSE_Enable>
 8003216:	e003      	b.n	8003220 <HAL_RCC_OscConfig+0x478>
 8003218:	f7ff fb28 	bl	800286c <LL_RCC_LSE_Disable>
 800321c:	f7ff fb48 	bl	80028b0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d014      	beq.n	8003252 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe fcaa 	bl	8001b80 <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe fca6 	bl	8001b80 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e135      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003246:	f7ff fb44 	bl	80028d2 <LL_RCC_LSE_IsReady>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ef      	beq.n	8003230 <HAL_RCC_OscConfig+0x488>
 8003250:	e013      	b.n	800327a <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe fc95 	bl	8001b80 <HAL_GetTick>
 8003256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe fc91 	bl	8001b80 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e120      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003270:	f7ff fb2f 	bl	80028d2 <LL_RCC_LSE_IsReady>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ef      	bne.n	800325a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d014      	beq.n	80032b8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800328e:	f7ff faa8 	bl	80027e2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fe fc75 	bl	8001b80 <HAL_GetTick>
 8003296:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800329a:	f7fe fc71 	bl	8001b80 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e102      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80032ac:	f7ff fabb 	bl	8002826 <LL_RCC_HSI48_IsReady>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f1      	beq.n	800329a <HAL_RCC_OscConfig+0x4f2>
 80032b6:	e013      	b.n	80032e0 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032b8:	f7ff faa4 	bl	8002804 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fc60 	bl	8001b80 <HAL_GetTick>
 80032c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c4:	f7fe fc5c 	bl	8001b80 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0ed      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80032d6:	f7ff faa6 	bl	8002826 <LL_RCC_HSI48_IsReady>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f1      	bne.n	80032c4 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80e3 	beq.w	80034b0 <HAL_RCC_OscConfig+0x708>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ea:	f7ff fc04 	bl	8002af6 <LL_RCC_GetSysClkSource>
 80032ee:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	f040 80a6 	bne.w	800344e <HAL_RCC_OscConfig+0x6a6>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0203 	and.w	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	429a      	cmp	r2, r3
 800330e:	d123      	bne.n	8003358 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d114      	bne.n	8003358 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d10d      	bne.n	8003358 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d054      	beq.n	8003402 <HAL_RCC_OscConfig+0x65a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d04f      	beq.n	80033fe <HAL_RCC_OscConfig+0x656>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800335e:	f7ff fc74 	bl	8002c4a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003362:	f7fe fc0d 	bl	8001b80 <HAL_GetTick>
 8003366:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x5d4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe fc09 	bl	8001b80 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x5d4>
              {
                return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e09a      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_OscConfig+0x5c2>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x6f0>)
 8003392:	4013      	ands	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a2:	0212      	lsls	r2, r2, #8
 80033a4:	4311      	orrs	r1, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033b6:	430a      	orrs	r2, r1
 80033b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033bc:	4313      	orrs	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c0:	f7ff fc34 	bl	8002c2c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033d4:	f7fe fbd4 	bl	8001b80 <HAL_GetTick>
 80033d8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x646>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fe fbd0 	bl	8001b80 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x646>
              {
                return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e061      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <HAL_RCC_OscConfig+0x634>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fc:	e058      	b.n	80034b0 <HAL_RCC_OscConfig+0x708>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e057      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d14f      	bne.n	80034b0 <HAL_RCC_OscConfig+0x708>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003410:	f7ff fc0c 	bl	8002c2c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003422:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003424:	f7fe fbac 	bl	8001b80 <HAL_GetTick>
 8003428:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x696>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe fba8 	bl	8001b80 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x696>
            {
              return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e039      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ef      	beq.n	800342c <HAL_RCC_OscConfig+0x684>
 800344c:	e030      	b.n	80034b0 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d02b      	beq.n	80034ac <HAL_RCC_OscConfig+0x704>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	f7ff fbf9 	bl	8002c4a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8003468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003476:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe fb82 	bl	8001b80 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347e:	e00d      	b.n	800349c <HAL_RCC_OscConfig+0x6f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003480:	f7fe fb7e 	bl	8001b80 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d906      	bls.n	800349c <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e00f      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
 8003492:	bf00      	nop
 8003494:	58000400 	.word	0x58000400
 8003498:	11c1808c 	.word	0x11c1808c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ea      	bne.n	8003480 <HAL_RCC_OscConfig+0x6d8>
 80034aa:	e001      	b.n	80034b0 <HAL_RCC_OscConfig+0x708>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x70a>
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3734      	adds	r7, #52	; 0x34
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}
 80034ba:	bf00      	nop

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e12a      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b97      	ldr	r3, [pc, #604]	; (8003730 <HAL_RCC_ClockConfig+0x274>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d91b      	bls.n	8003516 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b94      	ldr	r3, [pc, #592]	; (8003730 <HAL_RCC_ClockConfig+0x274>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 0207 	bic.w	r2, r3, #7
 80034e6:	4992      	ldr	r1, [pc, #584]	; (8003730 <HAL_RCC_ClockConfig+0x274>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ee:	f7fe fb47 	bl	8001b80 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034f6:	f7fe fb43 	bl	8001b80 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e10e      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003508:	4b89      	ldr	r3, [pc, #548]	; (8003730 <HAL_RCC_ClockConfig+0x274>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d1ef      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff faf1 	bl	8002b0e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800352c:	f7fe fb28 	bl	8001b80 <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003534:	f7fe fb24 	bl	8001b80 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0ef      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003546:	f7ff fbd2 	bl	8002cee <LL_RCC_IsActiveFlag_HPRE>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f1      	beq.n	8003534 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d016      	beq.n	800358a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fae8 	bl	8002b36 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003566:	f7fe fb0b 	bl	8001b80 <HAL_GetTick>
 800356a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800356e:	f7fe fb07 	bl	8001b80 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0d2      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003580:	f7ff fbc7 	bl	8002d12 <LL_RCC_IsActiveFlag_C2HPRE>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f1      	beq.n	800356e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d016      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fae1 	bl	8002b62 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035a0:	f7fe faee 	bl	8001b80 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035a8:	f7fe faea 	bl	8001b80 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0b5      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035ba:	f7ff fbbd 	bl	8002d38 <LL_RCC_IsActiveFlag_SHDHPRE>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f1      	beq.n	80035a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d016      	beq.n	80035fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fadb 	bl	8002b90 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035da:	f7fe fad1 	bl	8001b80 <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035e2:	f7fe facd 	bl	8001b80 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e098      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035f4:	f7ff fbb3 	bl	8002d5e <LL_RCC_IsActiveFlag_PPRE1>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f1      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d017      	beq.n	800363a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fad1 	bl	8002bb8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003616:	f7fe fab3 	bl	8001b80 <HAL_GetTick>
 800361a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800361e:	f7fe faaf 	bl	8001b80 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e07a      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003630:	f7ff fba7 	bl	8002d82 <LL_RCC_IsActiveFlag_PPRE2>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f1      	beq.n	800361e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d043      	beq.n	80036ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d106      	bne.n	800365c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800364e:	f7ff f871 	bl	8002734 <LL_RCC_HSE_IsReady>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11e      	bne.n	8003696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e064      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d106      	bne.n	8003672 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003664:	f7ff fb00 	bl	8002c68 <LL_RCC_PLL_IsReady>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e059      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800367a:	f7ff f9d9 	bl	8002a30 <LL_RCC_MSI_IsReady>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d108      	bne.n	8003696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e04e      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003688:	f7ff f884 	bl	8002794 <LL_RCC_HSI_IsReady>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e047      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fa17 	bl	8002ace <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a0:	f7fe fa6e 	bl	8001b80 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fe fa6a 	bl	8001b80 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e033      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	f7ff fa1a 	bl	8002af6 <LL_RCC_GetSysClkSource>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d1ec      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <HAL_RCC_ClockConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d21b      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_RCC_ClockConfig+0x274>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 0207 	bic.w	r2, r3, #7
 80036e4:	4912      	ldr	r1, [pc, #72]	; (8003730 <HAL_RCC_ClockConfig+0x274>)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ec:	f7fe fa48 	bl	8001b80 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036f4:	f7fe fa44 	bl	8001b80 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e00f      	b.n	8003726 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_RCC_ClockConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d1ef      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8003714:	f7fe f8ec 	bl	80018f0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003718:	f7fe fa3e 	bl	8001b98 <HAL_GetTickPrio>
 800371c:	4603      	mov	r3, r0
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe f9e0 	bl	8001ae4 <HAL_InitTick>
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	58004000 	.word	0x58004000

08003734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373a:	f7ff f9dc 	bl	8002af6 <LL_RCC_GetSysClkSource>
 800373e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003746:	f7ff f998 	bl	8002a7a <LL_RCC_MSI_GetRange>
 800374a:	4603      	mov	r3, r0
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e04a      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d102      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003762:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e044      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d10a      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800376e:	f7fe ff93 	bl	8002698 <LL_RCC_HSE_IsEnabledDiv2>
 8003772:	4603      	mov	r3, r0
 8003774:	2b01      	cmp	r3, #1
 8003776:	d102      	bne.n	800377e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_GetSysClockFreq+0xcc>)
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e039      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b21      	ldr	r3, [pc, #132]	; (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e036      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003784:	f7ff faa7 	bl	8002cd6 <LL_RCC_PLL_GetMainSource>
 8003788:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d002      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x62>
 8003790:	2b03      	cmp	r3, #3
 8003792:	d003      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x68>
 8003794:	e00d      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003796:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003798:	60bb      	str	r3, [r7, #8]
        break;
 800379a:	e015      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800379c:	f7fe ff7c 	bl	8002698 <LL_RCC_HSE_IsEnabledDiv2>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037a8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80037aa:	e00d      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037ae:	60bb      	str	r3, [r7, #8]
        break;
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80037b2:	f7ff f962 	bl	8002a7a <LL_RCC_MSI_GetRange>
 80037b6:	4603      	mov	r3, r0
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80037c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c4:	60bb      	str	r3, [r7, #8]
        break;
 80037c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80037c8:	f7ff fa60 	bl	8002c8c <LL_RCC_PLL_GetN>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	fb03 f402 	mul.w	r4, r3, r2
 80037d4:	f7ff fa73 	bl	8002cbe <LL_RCC_PLL_GetDivider>
 80037d8:	4603      	mov	r3, r0
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	3301      	adds	r3, #1
 80037de:	fbb4 f4f3 	udiv	r4, r4, r3
 80037e2:	f7ff fa60 	bl	8002ca6 <LL_RCC_PLL_GetR>
 80037e6:	4603      	mov	r3, r0
 80037e8:	0f5b      	lsrs	r3, r3, #29
 80037ea:	3301      	adds	r3, #1
 80037ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd90      	pop	{r4, r7, pc}
 80037fc:	08007da8 	.word	0x08007da8
 8003800:	00f42400 	.word	0x00f42400
 8003804:	01e84800 	.word	0x01e84800

08003808 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b598      	push	{r3, r4, r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800380c:	f7ff ff92 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8003810:	4604      	mov	r4, r0
 8003812:	f7ff f9e5 	bl	8002be0 <LL_RCC_GetAHBPrescaler>
 8003816:	4603      	mov	r3, r0
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	4a03      	ldr	r2, [pc, #12]	; (800382c <HAL_RCC_GetHCLKFreq+0x24>)
 8003820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003824:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd98      	pop	{r3, r4, r7, pc}
 800382c:	08007d48 	.word	0x08007d48

08003830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003830:	b598      	push	{r3, r4, r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003834:	f7ff ffe8 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003838:	4604      	mov	r4, r0
 800383a:	f7ff f9eb 	bl	8002c14 <LL_RCC_GetAPB2Prescaler>
 800383e:	4603      	mov	r3, r0
 8003840:	0adb      	lsrs	r3, r3, #11
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd98      	pop	{r3, r4, r7, pc}
 8003858:	08007d88 	.word	0x08007d88

0800385c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2bb0      	cmp	r3, #176	; 0xb0
 8003868:	d903      	bls.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0x60>)
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e007      	b.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	4a10      	ldr	r2, [pc, #64]	; (80038bc <RCC_SetFlashLatencyFromMSIRange+0x60>)
 800387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003880:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003882:	f7ff f9b9 	bl	8002bf8 <LL_RCC_GetAHB4Prescaler>
 8003886:	4603      	mov	r3, r0
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	0c9b      	lsrs	r3, r3, #18
 80038a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f80c 	bl	80038c8 <RCC_SetFlashLatency>
 80038b0:	4603      	mov	r3, r0
#endif
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	08007da8 	.word	0x08007da8
 80038c0:	08007d48 	.word	0x08007d48
 80038c4:	431bde83 	.word	0x431bde83

080038c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b08f      	sub	sp, #60	; 0x3c
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <RCC_SetFlashLatency+0xa0>)
 80038d4:	f107 041c 	add.w	r4, r7, #28
 80038d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <RCC_SetFlashLatency+0xa4>)
 80038e0:	f107 040c 	add.w	r4, r7, #12
 80038e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	633b      	str	r3, [r7, #48]	; 0x30
 80038f2:	e015      	b.n	8003920 <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038fc:	4413      	add	r3, r2
 80038fe:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d808      	bhi.n	800391a <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003910:	4413      	add	r3, r2
 8003912:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003918:	e005      	b.n	8003926 <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	3301      	adds	r3, #1
 800391e:	633b      	str	r3, [r7, #48]	; 0x30
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2b03      	cmp	r3, #3
 8003924:	d9e6      	bls.n	80038f4 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <RCC_SetFlashLatency+0xa8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0207 	bic.w	r2, r3, #7
 800392e:	4910      	ldr	r1, [pc, #64]	; (8003970 <RCC_SetFlashLatency+0xa8>)
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003936:	f7fe f923 	bl	8001b80 <HAL_GetTick>
 800393a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800393c:	e008      	b.n	8003950 <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800393e:	f7fe f91f 	bl	8001b80 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e007      	b.n	8003960 <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <RCC_SetFlashLatency+0xa8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800395a:	429a      	cmp	r2, r3
 800395c:	d1ef      	bne.n	800393e <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	373c      	adds	r7, #60	; 0x3c
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	08007bb8 	.word	0x08007bb8
 800396c:	08007bc8 	.word	0x08007bc8
 8003970:	58004000 	.word	0x58004000

08003974 <LL_RCC_LSE_IsEnabled>:
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <LL_RCC_LSE_IsEnabled+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_RCC_LSE_IsEnabled+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_RCC_LSE_IsReady>:
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d101      	bne.n	80039b0 <LL_RCC_LSE_IsReady+0x18>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <LL_RCC_LSE_IsReady+0x1a>
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_RCC_SetRFWKPClockSource>:
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_RCC_SetUSARTClockSource>:
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f023 0203 	bic.w	r2, r3, #3
 80039fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_RCC_SetI2CClockSource>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <LL_RCC_SetLPTIMClockSource>:
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <LL_RCC_SetRNGClockSource>:
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_RCC_SetCLK48ClockSource>:
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_RCC_SetADCClockSource>:
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_RCC_SetRTCClockSource>:
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_GetRTCClockSource>:
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_RCC_ForceBackupDomainReset>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d046      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003bac:	f7ff ffc1 	bl	8003b32 <LL_RCC_GetRTCClockSource>
 8003bb0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d03c      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003bbc:	f7fe fd5c 	bl	8002678 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d105      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff9b 	bl	8003b06 <LL_RCC_SetRTCClockSource>
 8003bd0:	e02e      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003bdc:	f7ff ffb6 	bl	8003b4c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003be0:	f7ff ffc5 	bl	8003b6e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003bfc:	f7ff feba 	bl	8003974 <LL_RCC_LSE_IsEnabled>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d114      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c06:	f7fd ffbb 	bl	8001b80 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fd ffb7 	bl	8001b80 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d902      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	77fb      	strb	r3, [r7, #31]
              break;
 8003c24:	e004      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c26:	f7ff feb7 	bl	8003998 <LL_RCC_LSE_IsReady>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d1ee      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003c30:	7ffb      	ldrb	r3, [r7, #31]
 8003c32:	77bb      	strb	r3, [r7, #30]
 8003c34:	e001      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	7ffb      	ldrb	r3, [r7, #31]
 8003c38:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fecc 	bl	80039e8 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fef4 	bl	8003a4e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fee9 	bl	8003a4e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fec1 	bl	8003a14 <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d02b      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d008      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cb0:	d003      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fedf 	bl	8003a82 <LL_RCC_SetRNGClockSource>
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7ff fed6 	bl	8003a82 <LL_RCC_SetRNGClockSource>
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fee9 	bl	8003aae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fee7 	bl	8003ada <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d14:	d107      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fe40 	bl	80039bc <LL_RCC_SetRFWKPClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8003d3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e090      	b.n	8003e7a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d106      	bne.n	8003d72 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fd fc4b 	bl	8001608 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	22ca      	movs	r2, #202	; 0xca
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2253      	movs	r2, #83	; 0x53
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f89f 	bl	8003ece <RTC_EnterInitMode>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2204      	movs	r2, #4
 8003da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e067      	b.n	8003e7a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dbc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6899      	ldr	r1, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68d2      	ldr	r2, [r2, #12]
 8003de4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6919      	ldr	r1, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e08:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0203 	bic.w	r2, r2, #3
 8003e18:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d113      	bne.n	8003e68 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f81e 	bl	8003e82 <HAL_RTC_WaitForSynchro>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	22ff      	movs	r2, #255	; 0xff
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2204      	movs	r2, #4
 8003e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e008      	b.n	8003e7a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e98:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003e9a:	f7fd fe71 	bl	8001b80 <HAL_GetTick>
 8003e9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ea0:	e009      	b.n	8003eb6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ea2:	f7fd fe6d 	bl	8001b80 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e007      	b.n	8003ec6 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d119      	bne.n	8003f18 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003eee:	f7fd fe47 	bl	8001b80 <HAL_GetTick>
 8003ef2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ef4:	e009      	b.n	8003f0a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ef6:	f7fd fe43 	bl	8001b80 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f04:	d901      	bls.n	8003f0a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e007      	b.n	8003f1a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ee      	beq.n	8003ef6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <LL_RCC_GetUSARTClockSource>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4013      	ands	r3, r2
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e042      	b.n	8003fda <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd fb64 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f9b7 	bl	80042f8 <UART_SetConfig>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e022      	b.n	8003fda <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 faef 	bl	8004580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fb76 	bl	80046c4 <UART_CheckIdleState>
 8003fd8:	4603      	mov	r3, r0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	f640 030f 	movw	r3, #2063	; 0x80f
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d118      	bne.n	8004046 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d013      	beq.n	8004046 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8145 	beq.w	80042c6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
      }
      return;
 8004044:	e13f      	b.n	80042c6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80e8 	beq.w	800421e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4ba1      	ldr	r3, [pc, #644]	; (80042d8 <HAL_UART_IRQHandler+0x2f4>)
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4ba0      	ldr	r3, [pc, #640]	; (80042dc <HAL_UART_IRQHandler+0x2f8>)
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80dd 	beq.w	800421e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d010      	beq.n	8004090 <HAL_UART_IRQHandler+0xac>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d010      	beq.n	80040bc <HAL_UART_IRQHandler+0xd8>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2202      	movs	r2, #2
 80040aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d010      	beq.n	80040e8 <HAL_UART_IRQHandler+0x104>
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2204      	movs	r2, #4
 80040d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f043 0202 	orr.w	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d015      	beq.n	800411e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d104      	bne.n	8004106 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_UART_IRQHandler+0x2f4>)
 8004100:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f043 0208 	orr.w	r2, r3, #8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004124:	2b00      	cmp	r3, #0
 8004126:	d011      	beq.n	800414c <HAL_UART_IRQHandler+0x168>
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800413a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80b9 	beq.w	80042ca <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d011      	beq.n	8004186 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d004      	beq.n	80041a6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d031      	beq.n	800420a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fb54 	bl	8004854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d123      	bne.n	8004202 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d013      	beq.n	80041fa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d6:	4a42      	ldr	r2, [pc, #264]	; (80042e0 <HAL_UART_IRQHandler+0x2fc>)
 80041d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd ff2c 	bl	800203c <HAL_DMA_Abort_IT>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d017      	beq.n	800421a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80041f4:	4610      	mov	r0, r2
 80041f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	e00f      	b.n	800421a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f872 	bl	80042e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	e00b      	b.n	800421a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f86e 	bl	80042e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	e007      	b.n	800421a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f86a 	bl	80042e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004218:	e057      	b.n	80042ca <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421a:	bf00      	nop
    return;
 800421c:	e055      	b.n	80042ca <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <HAL_UART_IRQHandler+0x260>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800423a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fb5c 	bl	80048fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004242:	e045      	b.n	80042d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	2b00      	cmp	r3, #0
 8004268:	d031      	beq.n	80042ce <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
    }
    return;
 8004272:	e02c      	b.n	80042ce <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_UART_IRQHandler+0x2ac>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fb1c 	bl	80048c6 <UART_EndTransmit_IT>
    return;
 800428e:	e01f      	b.n	80042d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_UART_IRQHandler+0x2c8>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fb3c 	bl	8004922 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042aa:	e011      	b.n	80042d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00c      	beq.n	80042d0 <HAL_UART_IRQHandler+0x2ec>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	da09      	bge.n	80042d0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb26 	bl	800490e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042c2:	bf00      	nop
 80042c4:	e004      	b.n	80042d0 <HAL_UART_IRQHandler+0x2ec>
      return;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80042ce:	bf00      	nop
  }
}
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	10000001 	.word	0x10000001
 80042dc:	04000120 	.word	0x04000120
 80042e0:	0800489b 	.word	0x0800489b

080042e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b90      	ldr	r3, [pc, #576]	; (8004570 <UART_SetConfig+0x278>)
 800432e:	4013      	ands	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	430b      	orrs	r3, r1
 8004338:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800436a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	430b      	orrs	r3, r1
 8004376:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f023 010f 	bic.w	r1, r3, #15
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a78      	ldr	r2, [pc, #480]	; (8004574 <UART_SetConfig+0x27c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d121      	bne.n	80043dc <UART_SetConfig+0xe4>
 8004398:	2003      	movs	r0, #3
 800439a:	f7ff fdc2 	bl	8003f22 <LL_RCC_GetUSARTClockSource>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d817      	bhi.n	80043d4 <UART_SetConfig+0xdc>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0xb4>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043c9 	.word	0x080043c9
 80043b4:	080043c3 	.word	0x080043c3
 80043b8:	080043cf 	.word	0x080043cf
 80043bc:	2301      	movs	r3, #1
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e00e      	b.n	80043e0 <UART_SetConfig+0xe8>
 80043c2:	2302      	movs	r3, #2
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e00b      	b.n	80043e0 <UART_SetConfig+0xe8>
 80043c8:	2304      	movs	r3, #4
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e008      	b.n	80043e0 <UART_SetConfig+0xe8>
 80043ce:	2308      	movs	r3, #8
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e005      	b.n	80043e0 <UART_SetConfig+0xe8>
 80043d4:	2310      	movs	r3, #16
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	bf00      	nop
 80043da:	e001      	b.n	80043e0 <UART_SetConfig+0xe8>
 80043dc:	2310      	movs	r3, #16
 80043de:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e8:	d15f      	bne.n	80044aa <UART_SetConfig+0x1b2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	2b07      	cmp	r3, #7
 80043f0:	d821      	bhi.n	8004436 <UART_SetConfig+0x13e>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0x100>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004419 	.word	0x08004419
 80043fc:	08004421 	.word	0x08004421
 8004400:	08004437 	.word	0x08004437
 8004404:	08004427 	.word	0x08004427
 8004408:	08004437 	.word	0x08004437
 800440c:	08004437 	.word	0x08004437
 8004410:	08004437 	.word	0x08004437
 8004414:	0800442f 	.word	0x0800442f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7ff fa0a 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 800441c:	61b8      	str	r0, [r7, #24]
        break;
 800441e:	e00f      	b.n	8004440 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004420:	4b55      	ldr	r3, [pc, #340]	; (8004578 <UART_SetConfig+0x280>)
 8004422:	61bb      	str	r3, [r7, #24]
        break;
 8004424:	e00c      	b.n	8004440 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004426:	f7ff f985 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 800442a:	61b8      	str	r0, [r7, #24]
        break;
 800442c:	e008      	b.n	8004440 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004432:	61bb      	str	r3, [r7, #24]
        break;
 8004434:	e004      	b.n	8004440 <UART_SetConfig+0x148>
      default:
        pclk = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	77bb      	strb	r3, [r7, #30]
        break;
 800443e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8080 	beq.w	8004548 <UART_SetConfig+0x250>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	4a4b      	ldr	r2, [pc, #300]	; (800457c <UART_SetConfig+0x284>)
 800444e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004452:	461a      	mov	r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	fbb3 f3f2 	udiv	r3, r3, r2
 800445a:	005a      	lsls	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	441a      	add	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	b29b      	uxth	r3, r3
 800446e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b0f      	cmp	r3, #15
 8004474:	d916      	bls.n	80044a4 <UART_SetConfig+0x1ac>
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d212      	bcs.n	80044a4 <UART_SetConfig+0x1ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f023 030f 	bic.w	r3, r3, #15
 8004486:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	b29b      	uxth	r3, r3
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	b29a      	uxth	r2, r3
 8004494:	89fb      	ldrh	r3, [r7, #14]
 8004496:	4313      	orrs	r3, r2
 8004498:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	89fa      	ldrh	r2, [r7, #14]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	e051      	b.n	8004548 <UART_SetConfig+0x250>
      }
      else
      {
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	77bb      	strb	r3, [r7, #30]
 80044a8:	e04e      	b.n	8004548 <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	2b07      	cmp	r3, #7
 80044b0:	d821      	bhi.n	80044f6 <UART_SetConfig+0x1fe>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0x1c0>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044d9 	.word	0x080044d9
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044e7 	.word	0x080044e7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044f7 	.word	0x080044f7
 80044d0:	080044f7 	.word	0x080044f7
 80044d4:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7ff f9aa 	bl	8003830 <HAL_RCC_GetPCLK2Freq>
 80044dc:	61b8      	str	r0, [r7, #24]
        break;
 80044de:	e00f      	b.n	8004500 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <UART_SetConfig+0x280>)
 80044e2:	61bb      	str	r3, [r7, #24]
        break;
 80044e4:	e00c      	b.n	8004500 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7ff f925 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80044ea:	61b8      	str	r0, [r7, #24]
        break;
 80044ec:	e008      	b.n	8004500 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61bb      	str	r3, [r7, #24]
        break;
 80044f4:	e004      	b.n	8004500 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	77bb      	strb	r3, [r7, #30]
        break;
 80044fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d020      	beq.n	8004548 <UART_SetConfig+0x250>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	4a1c      	ldr	r2, [pc, #112]	; (800457c <UART_SetConfig+0x284>)
 800450c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004510:	461a      	mov	r2, r3
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	fbb3 f2f2 	udiv	r2, r3, r2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	441a      	add	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	b29b      	uxth	r3, r3
 800452a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b0f      	cmp	r3, #15
 8004530:	d908      	bls.n	8004544 <UART_SetConfig+0x24c>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d204      	bcs.n	8004544 <UART_SetConfig+0x24c>
      {
        huart->Instance->BRR = usartdiv;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	e001      	b.n	8004548 <UART_SetConfig+0x250>
      }
      else
      {
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004564:	7fbb      	ldrb	r3, [r7, #30]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	cfff69f3 	.word	0xcfff69f3
 8004574:	40013800 	.word	0x40013800
 8004578:	00f42400 	.word	0x00f42400
 800457c:	08007de8 	.word	0x08007de8

08004580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01a      	beq.n	8004696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467e:	d10a      	bne.n	8004696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046d4:	f7fd fa54 	bl	8001b80 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d10e      	bne.n	8004706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f82c 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e022      	b.n	800474c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d10e      	bne.n	8004732 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f816 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e00c      	b.n	800474c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004764:	e062      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800476c:	d05e      	beq.n	800482c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476e:	f7fd fa07 	bl	8001b80 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	429a      	cmp	r2, r3
 800477c:	d302      	bcc.n	8004784 <UART_WaitOnFlagUntilTimeout+0x30>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d11d      	bne.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004792:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e045      	b.n	800484c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02e      	beq.n	800482c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047dc:	d126      	bne.n	800482c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e00f      	b.n	800484c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	429a      	cmp	r2, r3
 8004848:	d08d      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800486a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff fd13 	bl	80042e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fc fbcf 	bl	8001090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_UARTEx_DisableFifoMode+0x16>
 8004948:	2302      	movs	r3, #2
 800494a:	e027      	b.n	800499c <HAL_UARTEx_DisableFifoMode+0x66>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800497a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049bc:	2302      	movs	r3, #2
 80049be:	e02d      	b.n	8004a1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f84f 	bl	8004aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e02d      	b.n	8004a98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f811 	bl	8004aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	; 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004aa8:	4a2f      	ldr	r2, [pc, #188]	; (8004b68 <UARTEx_SetNbDataToProcess+0xc8>)
 8004aaa:	f107 0314 	add.w	r3, r7, #20
 8004aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ab2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004ab6:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <UARTEx_SetNbDataToProcess+0xcc>)
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ac0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d108      	bne.n	8004ade <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004adc:	e03d      	b.n	8004b5a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ade:	2308      	movs	r3, #8
 8004ae0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	0e5b      	lsrs	r3, r3, #25
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	0f5b      	lsrs	r3, r3, #29
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004b06:	7fbb      	ldrb	r3, [r7, #30]
 8004b08:	7f3a      	ldrb	r2, [r7, #28]
 8004b0a:	f107 0120 	add.w	r1, r7, #32
 8004b0e:	440a      	add	r2, r1
 8004b10:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004b14:	fb02 f303 	mul.w	r3, r2, r3
 8004b18:	7f3a      	ldrb	r2, [r7, #28]
 8004b1a:	f107 0120 	add.w	r1, r7, #32
 8004b1e:	440a      	add	r2, r1
 8004b20:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004b24:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004b30:	7ffb      	ldrb	r3, [r7, #31]
 8004b32:	7f7a      	ldrb	r2, [r7, #29]
 8004b34:	f107 0120 	add.w	r1, r7, #32
 8004b38:	440a      	add	r2, r1
 8004b3a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	7f7a      	ldrb	r2, [r7, #29]
 8004b44:	f107 0120 	add.w	r1, r7, #32
 8004b48:	440a      	add	r2, r1
 8004b4a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004b4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b5a:	bf00      	nop
 8004b5c:	3724      	adds	r7, #36	; 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	08007bd8 	.word	0x08007bd8
 8004b6c:	08007be0 	.word	0x08007be0

08004b70 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b7a:	f107 0308 	add.w	r3, r7, #8
 8004b7e:	2218      	movs	r2, #24
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 ff45 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b88:	233f      	movs	r3, #63	; 0x3f
 8004b8a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8004b8c:	2381      	movs	r3, #129	; 0x81
 8004b8e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004b90:	1dfb      	adds	r3, r7, #7
 8004b92:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004b94:	2301      	movs	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b98:	f107 0308 	add.w	r3, r7, #8
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 f9f0 	bl	8005f84 <hci_send_req>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da01      	bge.n	8004bae <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004baa:	23ff      	movs	r3, #255	; 0xff
 8004bac:	e000      	b.n	8004bb0 <aci_gap_set_non_discoverable+0x40>
  return status;
 8004bae:	79fb      	ldrb	r3, [r7, #7]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8004bb8:	b5b0      	push	{r4, r5, r7, lr}
 8004bba:	b0ce      	sub	sp, #312	; 0x138
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	1dfb      	adds	r3, r7, #7
 8004bc8:	462a      	mov	r2, r5
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	1d3b      	adds	r3, r7, #4
 8004bce:	4622      	mov	r2, r4
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	1cbb      	adds	r3, r7, #2
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	1dbb      	adds	r3, r7, #6
 8004bda:	460a      	mov	r2, r1
 8004bdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004bde:	f107 0310 	add.w	r3, r7, #16
 8004be2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004be6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004bea:	3308      	adds	r3, #8
 8004bec:	f107 0210 	add.w	r2, r7, #16
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004bf6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004bfa:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004bfe:	4413      	add	r3, r2
 8004c00:	3309      	adds	r3, #9
 8004c02:	f107 0210 	add.w	r2, r7, #16
 8004c06:	4413      	add	r3, r2
 8004c08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004c0c:	f107 030f 	add.w	r3, r7, #15
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8004c1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c1e:	1dfa      	adds	r2, r7, #7
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8004c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c32:	1d3a      	adds	r2, r7, #4
 8004c34:	8812      	ldrh	r2, [r2, #0]
 8004c36:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c3e:	3302      	adds	r3, #2
 8004c40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8004c44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c48:	1cba      	adds	r2, r7, #2
 8004c4a:	8812      	ldrh	r2, [r2, #0]
 8004c4c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c54:	3302      	adds	r3, #2
 8004c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8004c5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c5e:	1dba      	adds	r2, r7, #6
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8004c6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c72:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004c76:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8004c82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c86:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004c8a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c90:	3301      	adds	r3, #1
 8004c92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8004c96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004ca0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fea4 	bl	80059f2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004caa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004cae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004cb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cbc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004cc0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004ccc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004cd6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fe89 	bl	80059f2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004ce0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004ce4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004ce8:	4413      	add	r3, r2
 8004cea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004cf6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8004d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d06:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004d0a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d10:	3302      	adds	r3, #2
 8004d12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d1a:	2218      	movs	r2, #24
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fe77 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d24:	233f      	movs	r3, #63	; 0x3f
 8004d26:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004d2a:	2383      	movs	r3, #131	; 0x83
 8004d2c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d30:	f107 0310 	add.w	r3, r7, #16
 8004d34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d40:	f107 030f 	add.w	r3, r7, #15
 8004d44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 f915 	bl	8005f84 <hci_send_req>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da01      	bge.n	8004d64 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8004d60:	23ff      	movs	r3, #255	; 0xff
 8004d62:	e002      	b.n	8004d6a <aci_gap_set_discoverable+0x1b2>
  return status;
 8004d64:	f107 030f 	add.w	r3, r7, #15
 8004d68:	781b      	ldrb	r3, [r3, #0]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bdb0      	pop	{r4, r5, r7, pc}

08004d74 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b0cc      	sub	sp, #304	; 0x130
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	1dfb      	adds	r3, r7, #7
 8004d7e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8004d80:	f107 0310 	add.w	r3, r7, #16
 8004d84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004d88:	f107 030f 	add.w	r3, r7, #15
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8004d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d9a:	1dfa      	adds	r2, r7, #7
 8004d9c:	7812      	ldrb	r2, [r2, #0]
 8004d9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004da4:	3301      	adds	r3, #1
 8004da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dae:	2218      	movs	r2, #24
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fe2d 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004db8:	233f      	movs	r3, #63	; 0x3f
 8004dba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8004dbe:	2385      	movs	r3, #133	; 0x85
 8004dc0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004dc4:	f107 0310 	add.w	r3, r7, #16
 8004dc8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004dd4:	f107 030f 	add.w	r3, r7, #15
 8004dd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004de2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 f8cb 	bl	8005f84 <hci_send_req>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	da01      	bge.n	8004df8 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8004df4:	23ff      	movs	r3, #255	; 0xff
 8004df6:	e002      	b.n	8004dfe <aci_gap_set_io_capability+0x8a>
  return status;
 8004df8:	f107 030f 	add.w	r3, r7, #15
 8004dfc:	781b      	ldrb	r3, [r3, #0]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b0cc      	sub	sp, #304	; 0x130
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4605      	mov	r5, r0
 8004e10:	460c      	mov	r4, r1
 8004e12:	4610      	mov	r0, r2
 8004e14:	4619      	mov	r1, r3
 8004e16:	1dfb      	adds	r3, r7, #7
 8004e18:	462a      	mov	r2, r5
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	1dbb      	adds	r3, r7, #6
 8004e1e:	4622      	mov	r2, r4
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	1d7b      	adds	r3, r7, #5
 8004e24:	4602      	mov	r2, r0
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	1d3b      	adds	r3, r7, #4
 8004e2a:	460a      	mov	r2, r1
 8004e2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8004e2e:	f107 0310 	add.w	r3, r7, #16
 8004e32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e36:	f107 030f 	add.w	r3, r7, #15
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8004e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e48:	1dfa      	adds	r2, r7, #7
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e52:	3301      	adds	r3, #1
 8004e54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8004e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5c:	1dba      	adds	r2, r7, #6
 8004e5e:	7812      	ldrb	r2, [r2, #0]
 8004e60:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e66:	3301      	adds	r3, #1
 8004e68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8004e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e70:	1d7a      	adds	r2, r7, #5
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e84:	1d3a      	adds	r2, r7, #4
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8004e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e8e:	3301      	adds	r3, #1
 8004e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8004e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e98:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8004e9c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eac:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8004eb0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8004ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004ec4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8004ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004ed8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8004edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8004ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eea:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004eee:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8004ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004efe:	2218      	movs	r2, #24
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fd85 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f08:	233f      	movs	r3, #63	; 0x3f
 8004f0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8004f0e:	2386      	movs	r3, #134	; 0x86
 8004f10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f14:	f107 0310 	add.w	r3, r7, #16
 8004f18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f24:	f107 030f 	add.w	r3, r7, #15
 8004f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 f823 	bl	8005f84 <hci_send_req>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	da01      	bge.n	8004f48 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8004f44:	23ff      	movs	r3, #255	; 0xff
 8004f46:	e002      	b.n	8004f4e <aci_gap_set_authentication_requirement+0x146>
  return status;
 8004f48:	f107 030f 	add.w	r3, r7, #15
 8004f4c:	781b      	ldrb	r3, [r3, #0]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bdb0      	pop	{r4, r5, r7, pc}

08004f58 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b0cd      	sub	sp, #308	; 0x134
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	4611      	mov	r1, r2
 8004f64:	463a      	mov	r2, r7
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	1dfb      	adds	r3, r7, #7
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	1dbb      	adds	r3, r7, #6
 8004f70:	4602      	mov	r2, r0
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	1d7b      	adds	r3, r7, #5
 8004f76:	460a      	mov	r2, r1
 8004f78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004f7a:	f107 0310 	add.w	r3, r7, #16
 8004f7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004f82:	f107 0308 	add.w	r3, r7, #8
 8004f86:	2207      	movs	r2, #7
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fd41 	bl	8005a12 <Osal_MemSet>
  int index_input = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9a:	1dfa      	adds	r2, r7, #7
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004fa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fae:	1dba      	adds	r2, r7, #6
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc2:	1d7a      	adds	r2, r7, #5
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fd6:	2218      	movs	r2, #24
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fd19 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004fe0:	233f      	movs	r3, #63	; 0x3f
 8004fe2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004fe6:	238a      	movs	r3, #138	; 0x8a
 8004fe8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004fec:	f107 0310 	add.w	r3, r7, #16
 8004ff0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ff8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004ffc:	f107 0308 	add.w	r3, r7, #8
 8005000:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005004:	2307      	movs	r3, #7
 8005006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800500a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f000 ffb7 	bl	8005f84 <hci_send_req>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	da01      	bge.n	8005020 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800501c:	23ff      	movs	r3, #255	; 0xff
 800501e:	e021      	b.n	8005064 <aci_gap_init+0x10c>
  if ( resp.Status )
 8005020:	f107 0308 	add.w	r3, r7, #8
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <aci_gap_init+0xda>
    return resp.Status;
 800502a:	f107 0308 	add.w	r3, r7, #8
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	e018      	b.n	8005064 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8005032:	f107 0308 	add.w	r3, r7, #8
 8005036:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800503a:	b29a      	uxth	r2, r3
 800503c:	463b      	mov	r3, r7
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005042:	f107 0308 	add.w	r3, r7, #8
 8005046:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800504a:	b29a      	uxth	r2, r3
 800504c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005050:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005052:	f107 0308 	add.w	r3, r7, #8
 8005056:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800505a:	b29a      	uxth	r2, r3
 800505c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005060:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800506a:	46bd      	mov	sp, r7
 800506c:	bd90      	pop	{r4, r7, pc}

0800506e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b0cc      	sub	sp, #304	; 0x130
 8005072:	af00      	add	r7, sp, #0
 8005074:	4602      	mov	r2, r0
 8005076:	463b      	mov	r3, r7
 8005078:	6019      	str	r1, [r3, #0]
 800507a:	1dfb      	adds	r3, r7, #7
 800507c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800507e:	f107 0310 	add.w	r3, r7, #16
 8005082:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005086:	f107 030f 	add.w	r3, r7, #15
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005098:	1dfa      	adds	r2, r7, #7
 800509a:	7812      	ldrb	r2, [r2, #0]
 800509c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800509e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050a2:	3301      	adds	r3, #1
 80050a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80050a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ac:	1c58      	adds	r0, r3, #1
 80050ae:	1dfb      	adds	r3, r7, #7
 80050b0:	781a      	ldrb	r2, [r3, #0]
 80050b2:	463b      	mov	r3, r7
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	f000 fc9c 	bl	80059f2 <Osal_MemCpy>
  index_input += AdvDataLen;
 80050ba:	1dfb      	adds	r3, r7, #7
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80050c2:	4413      	add	r3, r2
 80050c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80050c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050cc:	2218      	movs	r2, #24
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fc9e 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 80050d6:	233f      	movs	r3, #63	; 0x3f
 80050d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80050dc:	238e      	movs	r3, #142	; 0x8e
 80050de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80050e2:	f107 0310 	add.w	r3, r7, #16
 80050e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80050ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80050f2:	f107 030f 	add.w	r3, r7, #15
 80050f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005100:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f000 ff3c 	bl	8005f84 <hci_send_req>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	da01      	bge.n	8005116 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8005112:	23ff      	movs	r3, #255	; 0xff
 8005114:	e002      	b.n	800511c <aci_gap_update_adv_data+0xae>
  return status;
 8005116:	f107 030f 	add.w	r3, r7, #15
 800511a:	781b      	ldrb	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b088      	sub	sp, #32
 800512a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005130:	f107 0308 	add.w	r3, r7, #8
 8005134:	2218      	movs	r2, #24
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fc6a 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 800513e:	233f      	movs	r3, #63	; 0x3f
 8005140:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005142:	2392      	movs	r3, #146	; 0x92
 8005144:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005146:	1dfb      	adds	r3, r7, #7
 8005148:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f000 ff15 	bl	8005f84 <hci_send_req>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	da01      	bge.n	8005164 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005160:	23ff      	movs	r3, #255	; 0xff
 8005162:	e000      	b.n	8005166 <aci_gap_configure_whitelist+0x40>
  return status;
 8005164:	79fb      	ldrb	r3, [r7, #7]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005178:	f107 0308 	add.w	r3, r7, #8
 800517c:	2218      	movs	r2, #24
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fc46 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005186:	233f      	movs	r3, #63	; 0x3f
 8005188:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800518a:	f240 1301 	movw	r3, #257	; 0x101
 800518e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005190:	1dfb      	adds	r3, r7, #7
 8005192:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005194:	2301      	movs	r3, #1
 8005196:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005198:	f107 0308 	add.w	r3, r7, #8
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fef0 	bl	8005f84 <hci_send_req>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da01      	bge.n	80051ae <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80051aa:	23ff      	movs	r3, #255	; 0xff
 80051ac:	e000      	b.n	80051b0 <aci_gatt_init+0x42>
  return status;
 80051ae:	79fb      	ldrb	r3, [r7, #7]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b0cf      	sub	sp, #316	; 0x13c
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4604      	mov	r4, r0
 80051c0:	4638      	mov	r0, r7
 80051c2:	6001      	str	r1, [r0, #0]
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	1dfb      	adds	r3, r7, #7
 80051ca:	4622      	mov	r2, r4
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	1dbb      	adds	r3, r7, #6
 80051d0:	4602      	mov	r2, r0
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	1d7b      	adds	r3, r7, #5
 80051d6:	460a      	mov	r2, r1
 80051d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80051da:	f107 0310 	add.w	r3, r7, #16
 80051de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80051e2:	1dfb      	adds	r3, r7, #7
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d007      	beq.n	80051fa <aci_gatt_add_service+0x42>
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d101      	bne.n	80051f6 <aci_gatt_add_service+0x3e>
 80051f2:	2311      	movs	r3, #17
 80051f4:	e002      	b.n	80051fc <aci_gatt_add_service+0x44>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <aci_gatt_add_service+0x44>
 80051fa:	2303      	movs	r3, #3
 80051fc:	f107 0210 	add.w	r2, r7, #16
 8005200:	4413      	add	r3, r2
 8005202:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005206:	f107 030c 	add.w	r3, r7, #12
 800520a:	2203      	movs	r2, #3
 800520c:	2100      	movs	r1, #0
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fbff 	bl	8005a12 <Osal_MemSet>
  int index_input = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800521a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800521e:	1dfa      	adds	r2, r7, #7
 8005220:	7812      	ldrb	r2, [r2, #0]
 8005222:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005228:	3301      	adds	r3, #1
 800522a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800522e:	1dfb      	adds	r3, r7, #7
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d002      	beq.n	800523c <aci_gatt_add_service+0x84>
 8005236:	2b02      	cmp	r3, #2
 8005238:	d004      	beq.n	8005244 <aci_gatt_add_service+0x8c>
 800523a:	e007      	b.n	800524c <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800523c:	2302      	movs	r3, #2
 800523e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005242:	e005      	b.n	8005250 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8005244:	2310      	movs	r3, #16
 8005246:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800524a:	e001      	b.n	8005250 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800524c:	2347      	movs	r3, #71	; 0x47
 800524e:	e05d      	b.n	800530c <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005250:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005254:	1c58      	adds	r0, r3, #1
 8005256:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800525a:	463b      	mov	r3, r7
 800525c:	6819      	ldr	r1, [r3, #0]
 800525e:	f000 fbc8 	bl	80059f2 <Osal_MemCpy>
    index_input += size;
 8005262:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005266:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800526a:	4413      	add	r3, r2
 800526c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8005270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005274:	1dba      	adds	r2, r7, #6
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800527a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800527e:	3301      	adds	r3, #1
 8005280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005288:	1d7a      	adds	r2, r7, #5
 800528a:	7812      	ldrb	r2, [r2, #0]
 800528c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800528e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005292:	3301      	adds	r3, #1
 8005294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005298:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800529c:	2218      	movs	r2, #24
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fbb6 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 80052a6:	233f      	movs	r3, #63	; 0x3f
 80052a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80052ac:	f44f 7381 	mov.w	r3, #258	; 0x102
 80052b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80052b4:	f107 0310 	add.w	r3, r7, #16
 80052b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80052bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80052c4:	f107 030c 	add.w	r3, r7, #12
 80052c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80052cc:	2303      	movs	r3, #3
 80052ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80052d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052d6:	2100      	movs	r1, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fe53 	bl	8005f84 <hci_send_req>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da01      	bge.n	80052e8 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80052e4:	23ff      	movs	r3, #255	; 0xff
 80052e6:	e011      	b.n	800530c <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80052e8:	f107 030c 	add.w	r3, r7, #12
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <aci_gatt_add_service+0x142>
    return resp.Status;
 80052f2:	f107 030c 	add.w	r3, r7, #12
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	e008      	b.n	800530c <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005302:	b29a      	uxth	r2, r3
 8005304:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005308:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005312:	46bd      	mov	sp, r7
 8005314:	bd90      	pop	{r4, r7, pc}

08005316 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005316:	b590      	push	{r4, r7, lr}
 8005318:	b0d1      	sub	sp, #324	; 0x144
 800531a:	af00      	add	r7, sp, #0
 800531c:	4604      	mov	r4, r0
 800531e:	4608      	mov	r0, r1
 8005320:	f107 0108 	add.w	r1, r7, #8
 8005324:	600a      	str	r2, [r1, #0]
 8005326:	4619      	mov	r1, r3
 8005328:	f107 030e 	add.w	r3, r7, #14
 800532c:	4622      	mov	r2, r4
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	f107 030d 	add.w	r3, r7, #13
 8005334:	4602      	mov	r2, r0
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	1dbb      	adds	r3, r7, #6
 800533a:	460a      	mov	r2, r1
 800533c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800533e:	f107 0318 	add.w	r3, r7, #24
 8005342:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005346:	f107 030d 	add.w	r3, r7, #13
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d008      	beq.n	8005362 <aci_gatt_add_char+0x4c>
 8005350:	f107 030d 	add.w	r3, r7, #13
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d101      	bne.n	800535e <aci_gatt_add_char+0x48>
 800535a:	2313      	movs	r3, #19
 800535c:	e002      	b.n	8005364 <aci_gatt_add_char+0x4e>
 800535e:	2303      	movs	r3, #3
 8005360:	e000      	b.n	8005364 <aci_gatt_add_char+0x4e>
 8005362:	2305      	movs	r3, #5
 8005364:	f107 0218 	add.w	r2, r7, #24
 8005368:	4413      	add	r3, r2
 800536a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800536e:	f107 0314 	add.w	r3, r7, #20
 8005372:	2203      	movs	r2, #3
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fb4b 	bl	8005a12 <Osal_MemSet>
  int index_input = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8005382:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005386:	f107 020e 	add.w	r2, r7, #14
 800538a:	8812      	ldrh	r2, [r2, #0]
 800538c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800538e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005392:	3302      	adds	r3, #2
 8005394:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005398:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800539c:	f107 020d 	add.w	r2, r7, #13
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80053a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053a8:	3301      	adds	r3, #1
 80053aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80053ae:	f107 030d 	add.w	r3, r7, #13
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d002      	beq.n	80053be <aci_gatt_add_char+0xa8>
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d004      	beq.n	80053c6 <aci_gatt_add_char+0xb0>
 80053bc:	e007      	b.n	80053ce <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80053be:	2302      	movs	r3, #2
 80053c0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80053c4:	e005      	b.n	80053d2 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80053c6:	2310      	movs	r3, #16
 80053c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80053cc:	e001      	b.n	80053d2 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80053ce:	2347      	movs	r3, #71	; 0x47
 80053d0:	e086      	b.n	80054e0 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80053d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80053d6:	1cd8      	adds	r0, r3, #3
 80053d8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80053dc:	f107 0308 	add.w	r3, r7, #8
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	f000 fb06 	bl	80059f2 <Osal_MemCpy>
    index_input += size;
 80053e6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80053ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80053ee:	4413      	add	r3, r2
 80053f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80053f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053f8:	1dba      	adds	r2, r7, #6
 80053fa:	8812      	ldrh	r2, [r2, #0]
 80053fc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80053fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005402:	3302      	adds	r3, #2
 8005404:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005408:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800540c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005410:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005412:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005416:	3301      	adds	r3, #1
 8005418:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800541c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005420:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005424:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005426:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800542a:	3301      	adds	r3, #1
 800542c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005430:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005434:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8005438:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800543a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800543e:	3301      	adds	r3, #1
 8005440:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8005444:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005448:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800544c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800544e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005452:	3301      	adds	r3, #1
 8005454:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8005458:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800545c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8005460:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005462:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005466:	3301      	adds	r3, #1
 8005468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800546c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005470:	2218      	movs	r2, #24
 8005472:	2100      	movs	r1, #0
 8005474:	4618      	mov	r0, r3
 8005476:	f000 facc 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 800547a:	233f      	movs	r3, #63	; 0x3f
 800547c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8005480:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005484:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005488:	f107 0318 	add.w	r3, r7, #24
 800548c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005490:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005494:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005498:	f107 0314 	add.w	r3, r7, #20
 800549c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80054a0:	2303      	movs	r3, #3
 80054a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80054a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fd69 	bl	8005f84 <hci_send_req>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	da01      	bge.n	80054bc <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80054b8:	23ff      	movs	r3, #255	; 0xff
 80054ba:	e011      	b.n	80054e0 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80054c6:	f107 0314 	add.w	r3, r7, #20
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	e008      	b.n	80054e0 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80054ce:	f107 0314 	add.w	r3, r7, #20
 80054d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80054dc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd90      	pop	{r4, r7, pc}

080054ea <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80054ea:	b5b0      	push	{r4, r5, r7, lr}
 80054ec:	b0cc      	sub	sp, #304	; 0x130
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	4605      	mov	r5, r0
 80054f2:	460c      	mov	r4, r1
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	1dbb      	adds	r3, r7, #6
 80054fa:	462a      	mov	r2, r5
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	1d3b      	adds	r3, r7, #4
 8005500:	4622      	mov	r2, r4
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	1cfb      	adds	r3, r7, #3
 8005506:	4602      	mov	r2, r0
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	1cbb      	adds	r3, r7, #2
 800550c:	460a      	mov	r2, r1
 800550e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005510:	f107 0310 	add.w	r3, r7, #16
 8005514:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005518:	f107 030f 	add.w	r3, r7, #15
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8005526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552a:	1dba      	adds	r2, r7, #6
 800552c:	8812      	ldrh	r2, [r2, #0]
 800552e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005534:	3302      	adds	r3, #2
 8005536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800553a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800553e:	1d3a      	adds	r2, r7, #4
 8005540:	8812      	ldrh	r2, [r2, #0]
 8005542:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005544:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005548:	3302      	adds	r3, #2
 800554a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800554e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005552:	1cfa      	adds	r2, r7, #3
 8005554:	7812      	ldrb	r2, [r2, #0]
 8005556:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005558:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800555c:	3301      	adds	r3, #1
 800555e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005566:	1cba      	adds	r2, r7, #2
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800556c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005570:	3301      	adds	r3, #1
 8005572:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8005576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800557a:	1d98      	adds	r0, r3, #6
 800557c:	1cbb      	adds	r3, r7, #2
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005586:	f000 fa34 	bl	80059f2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800558a:	1cbb      	adds	r3, r7, #2
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005592:	4413      	add	r3, r2
 8005594:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005598:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800559c:	2218      	movs	r2, #24
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fa36 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 80055a6:	233f      	movs	r3, #63	; 0x3f
 80055a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80055ac:	f44f 7383 	mov.w	r3, #262	; 0x106
 80055b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80055b4:	f107 0310 	add.w	r3, r7, #16
 80055b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80055bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80055c4:	f107 030f 	add.w	r3, r7, #15
 80055c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80055d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055d6:	2100      	movs	r1, #0
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fcd3 	bl	8005f84 <hci_send_req>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	da01      	bge.n	80055e8 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80055e4:	23ff      	movs	r3, #255	; 0xff
 80055e6:	e002      	b.n	80055ee <aci_gatt_update_char_value+0x104>
  return status;
 80055e8:	f107 030f 	add.w	r3, r7, #15
 80055ec:	781b      	ldrb	r3, [r3, #0]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bdb0      	pop	{r4, r5, r7, pc}

080055f8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b0cc      	sub	sp, #304	; 0x130
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	463b      	mov	r3, r7
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	1dfb      	adds	r3, r7, #7
 8005604:	4602      	mov	r2, r0
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	1dbb      	adds	r3, r7, #6
 800560a:	460a      	mov	r2, r1
 800560c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800560e:	f107 0310 	add.w	r3, r7, #16
 8005612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005616:	f107 030f 	add.w	r3, r7, #15
 800561a:	2200      	movs	r2, #0
 800561c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8005624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005628:	1dfa      	adds	r2, r7, #7
 800562a:	7812      	ldrb	r2, [r2, #0]
 800562c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800562e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005632:	3301      	adds	r3, #1
 8005634:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8005638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563c:	1dba      	adds	r2, r7, #6
 800563e:	7812      	ldrb	r2, [r2, #0]
 8005640:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005642:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005646:	3301      	adds	r3, #1
 8005648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800564c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005650:	1c98      	adds	r0, r3, #2
 8005652:	1dbb      	adds	r3, r7, #6
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	463b      	mov	r3, r7
 8005658:	6819      	ldr	r1, [r3, #0]
 800565a:	f000 f9ca 	bl	80059f2 <Osal_MemCpy>
  index_input += Length;
 800565e:	1dbb      	adds	r3, r7, #6
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005666:	4413      	add	r3, r2
 8005668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800566c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005670:	2218      	movs	r2, #24
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f000 f9cc 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 800567a:	233f      	movs	r3, #63	; 0x3f
 800567c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8005680:	230c      	movs	r3, #12
 8005682:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005686:	f107 0310 	add.w	r3, r7, #16
 800568a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800568e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005692:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005696:	f107 030f 	add.w	r3, r7, #15
 800569a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800569e:	2301      	movs	r3, #1
 80056a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056a8:	2100      	movs	r1, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fc6a 	bl	8005f84 <hci_send_req>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da01      	bge.n	80056ba <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80056b6:	23ff      	movs	r3, #255	; 0xff
 80056b8:	e002      	b.n	80056c0 <aci_hal_write_config_data+0xc8>
  return status;
 80056ba:	f107 030f 	add.w	r3, r7, #15
 80056be:	781b      	ldrb	r3, [r3, #0]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b0cc      	sub	sp, #304	; 0x130
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	4602      	mov	r2, r0
 80056d2:	1dfb      	adds	r3, r7, #7
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	1dbb      	adds	r3, r7, #6
 80056d8:	460a      	mov	r2, r1
 80056da:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80056dc:	f107 0310 	add.w	r3, r7, #16
 80056e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80056e4:	f107 030f 	add.w	r3, r7, #15
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80056f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f6:	1dfa      	adds	r2, r7, #7
 80056f8:	7812      	ldrb	r2, [r2, #0]
 80056fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80056fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005700:	3301      	adds	r3, #1
 8005702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8005706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570a:	1dba      	adds	r2, r7, #6
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005710:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005714:	3301      	adds	r3, #1
 8005716:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800571a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800571e:	2218      	movs	r2, #24
 8005720:	2100      	movs	r1, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f975 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005728:	233f      	movs	r3, #63	; 0x3f
 800572a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800572e:	230f      	movs	r3, #15
 8005730:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005734:	f107 0310 	add.w	r3, r7, #16
 8005738:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800573c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005740:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005744:	f107 030f 	add.w	r3, r7, #15
 8005748:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800574c:	2301      	movs	r3, #1
 800574e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005752:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fc13 	bl	8005f84 <hci_send_req>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	da01      	bge.n	8005768 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8005764:	23ff      	movs	r3, #255	; 0xff
 8005766:	e002      	b.n	800576e <aci_hal_set_tx_power_level+0xa4>
  return status;
 8005768:	f107 030f 	add.w	r3, r7, #15
 800576c:	781b      	ldrb	r3, [r3, #0]
}
 800576e:	4618      	mov	r0, r3
 8005770:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b0cc      	sub	sp, #304	; 0x130
 800577c:	af00      	add	r7, sp, #0
 800577e:	4602      	mov	r2, r0
 8005780:	1dbb      	adds	r3, r7, #6
 8005782:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800578c:	f107 030f 	add.w	r3, r7, #15
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	1dba      	adds	r2, r7, #6
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80057a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057a8:	3302      	adds	r3, #2
 80057aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057b2:	2218      	movs	r2, #24
 80057b4:	2100      	movs	r1, #0
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f92b 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x3f;
 80057bc:	233f      	movs	r3, #63	; 0x3f
 80057be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80057c2:	2318      	movs	r3, #24
 80057c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80057c8:	f107 0310 	add.w	r3, r7, #16
 80057cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80057d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80057d8:	f107 030f 	add.w	r3, r7, #15
 80057dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80057e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fbc9 	bl	8005f84 <hci_send_req>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	da01      	bge.n	80057fc <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80057f8:	23ff      	movs	r3, #255	; 0xff
 80057fa:	e002      	b.n	8005802 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 80057fc:	f107 030f 	add.w	r3, r7, #15
 8005800:	781b      	ldrb	r3, [r3, #0]
}
 8005802:	4618      	mov	r0, r3
 8005804:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	2218      	movs	r2, #24
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f8f7 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x03;
 8005824:	2303      	movs	r3, #3
 8005826:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005828:	2303      	movs	r3, #3
 800582a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005830:	2301      	movs	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	2100      	movs	r1, #0
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fba2 	bl	8005f84 <hci_send_req>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	da01      	bge.n	800584a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005846:	23ff      	movs	r3, #255	; 0xff
 8005848:	e000      	b.n	800584c <hci_reset+0x40>
  return status;
 800584a:	79fb      	ldrb	r3, [r7, #7]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3720      	adds	r7, #32
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b0ce      	sub	sp, #312	; 0x138
 8005858:	af00      	add	r7, sp, #0
 800585a:	f107 0308 	add.w	r3, r7, #8
 800585e:	6019      	str	r1, [r3, #0]
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	f107 030e 	add.w	r3, r7, #14
 8005868:	4602      	mov	r2, r0
 800586a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800586c:	f107 0318 	add.w	r3, r7, #24
 8005870:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005874:	f107 0310 	add.w	r3, r7, #16
 8005878:	2205      	movs	r2, #5
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f000 f8c8 	bl	8005a12 <Osal_MemSet>
  int index_input = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8005888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800588c:	f107 020e 	add.w	r2, r7, #14
 8005890:	8812      	ldrh	r2, [r2, #0]
 8005892:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005898:	3302      	adds	r3, #2
 800589a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800589e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058a2:	2218      	movs	r2, #24
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f8b3 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x08;
 80058ac:	2308      	movs	r3, #8
 80058ae:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 80058b2:	2330      	movs	r3, #48	; 0x30
 80058b4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80058b8:	f107 0318 	add.w	r3, r7, #24
 80058bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80058c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80058c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80058c8:	f107 0310 	add.w	r3, r7, #16
 80058cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80058d0:	2305      	movs	r3, #5
 80058d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fb51 	bl	8005f84 <hci_send_req>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	da01      	bge.n	80058ec <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80058e8:	23ff      	movs	r3, #255	; 0xff
 80058ea:	e016      	b.n	800591a <hci_le_read_phy+0xc6>
  if ( resp.Status )
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <hci_le_read_phy+0xaa>
    return resp.Status;
 80058f6:	f107 0310 	add.w	r3, r7, #16
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	e00d      	b.n	800591a <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 80058fe:	f107 0310 	add.w	r3, r7, #16
 8005902:	78da      	ldrb	r2, [r3, #3]
 8005904:	f107 0308 	add.w	r3, r7, #8
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800590c:	f107 0310 	add.w	r3, r7, #16
 8005910:	791a      	ldrb	r2, [r3, #4]
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8005924:	b590      	push	{r4, r7, lr}
 8005926:	b0cd      	sub	sp, #308	; 0x134
 8005928:	af00      	add	r7, sp, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	1dfb      	adds	r3, r7, #7
 8005932:	4622      	mov	r2, r4
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	1dbb      	adds	r3, r7, #6
 8005938:	4602      	mov	r2, r0
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	1d7b      	adds	r3, r7, #5
 800593e:	460a      	mov	r2, r1
 8005940:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8005942:	f107 0310 	add.w	r3, r7, #16
 8005946:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800594a:	f107 030f 	add.w	r3, r7, #15
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8005958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595c:	1dfa      	adds	r2, r7, #7
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005966:	3301      	adds	r3, #1
 8005968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800596c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005970:	1dba      	adds	r2, r7, #6
 8005972:	7812      	ldrb	r2, [r2, #0]
 8005974:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005976:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800597a:	3301      	adds	r3, #1
 800597c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	1d7a      	adds	r2, r7, #5
 8005986:	7812      	ldrb	r2, [r2, #0]
 8005988:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800598a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800598e:	3301      	adds	r3, #1
 8005990:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005994:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005998:	2218      	movs	r2, #24
 800599a:	2100      	movs	r1, #0
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f838 	bl	8005a12 <Osal_MemSet>
  rq.ogf = 0x08;
 80059a2:	2308      	movs	r3, #8
 80059a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80059a8:	2331      	movs	r3, #49	; 0x31
 80059aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80059ae:	f107 0310 	add.w	r3, r7, #16
 80059b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80059b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80059be:	f107 030f 	add.w	r3, r7, #15
 80059c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059d0:	2100      	movs	r1, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fad6 	bl	8005f84 <hci_send_req>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da01      	bge.n	80059e2 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80059de:	23ff      	movs	r3, #255	; 0xff
 80059e0:	e002      	b.n	80059e8 <hci_le_set_default_phy+0xc4>
  return status;
 80059e2:	f107 030f 	add.w	r3, r7, #15
 80059e6:	781b      	ldrb	r3, [r3, #0]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd90      	pop	{r4, r7, pc}

080059f2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f002 f8aa 	bl	8007b5c <memcpy>
 8005a08:	4603      	mov	r3, r0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f002 f8a5 	bl	8007b72 <memset>
 8005a28:	4603      	mov	r3, r0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3301      	adds	r3, #1
 8005a46:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2bff      	cmp	r3, #255	; 0xff
 8005a4e:	d000      	beq.n	8005a52 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8005a50:	e04a      	b.n	8005ae8 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	3302      	adds	r3, #2
 8005a56:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f640 4301 	movw	r3, #3073	; 0xc01
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d000      	beq.n	8005a6a <PeerToPeer_Event_Handler+0x36>
          break;
 8005a68:	e03d      	b.n	8005ae6 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	885b      	ldrh	r3, [r3, #2]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	4b1e      	ldr	r3, [pc, #120]	; (8005af4 <PeerToPeer_Event_Handler+0xc0>)
 8005a7a:	889b      	ldrh	r3, [r3, #4]
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d118      	bne.n	8005ab4 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	7a1b      	ldrb	r3, [r3, #8]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8005a94:	2300      	movs	r3, #0
 8005a96:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8005a98:	f107 0308 	add.w	r3, r7, #8
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 fb45 	bl	800712c <P2PS_STM_App_Notification>
        break;
 8005aa2:	e01f      	b.n	8005ae4 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8005aa8:	f107 0308 	add.w	r3, r7, #8
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fb3d 	bl	800712c <P2PS_STM_App_Notification>
        break;
 8005ab2:	e017      	b.n	8005ae4 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	885b      	ldrh	r3, [r3, #2]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <PeerToPeer_Event_Handler+0xc0>)
 8005abe:	885b      	ldrh	r3, [r3, #2]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d10e      	bne.n	8005ae4 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	88db      	ldrh	r3, [r3, #6]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8005ada:	f107 0308 	add.w	r3, r7, #8
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 fb24 	bl	800712c <P2PS_STM_App_Notification>
        break;
 8005ae4:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8005ae6:	bf00      	nop
  }

  return(return_value);
 8005ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8005aec:	4618      	mov	r0, r3
 8005aee:	3728      	adds	r7, #40	; 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	200000c4 	.word	0x200000c4

08005af8 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8005afe:	484a      	ldr	r0, [pc, #296]	; (8005c28 <P2PS_STM_Init+0x130>)
 8005b00:	f000 f938 	bl	8005d74 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8005b04:	238f      	movs	r3, #143	; 0x8f
 8005b06:	703b      	strb	r3, [r7, #0]
 8005b08:	23e5      	movs	r3, #229	; 0xe5
 8005b0a:	707b      	strb	r3, [r7, #1]
 8005b0c:	23b3      	movs	r3, #179	; 0xb3
 8005b0e:	70bb      	strb	r3, [r7, #2]
 8005b10:	23d5      	movs	r3, #213	; 0xd5
 8005b12:	70fb      	strb	r3, [r7, #3]
 8005b14:	232e      	movs	r3, #46	; 0x2e
 8005b16:	713b      	strb	r3, [r7, #4]
 8005b18:	237f      	movs	r3, #127	; 0x7f
 8005b1a:	717b      	strb	r3, [r7, #5]
 8005b1c:	234a      	movs	r3, #74	; 0x4a
 8005b1e:	71bb      	strb	r3, [r7, #6]
 8005b20:	2398      	movs	r3, #152	; 0x98
 8005b22:	71fb      	strb	r3, [r7, #7]
 8005b24:	232a      	movs	r3, #42	; 0x2a
 8005b26:	723b      	strb	r3, [r7, #8]
 8005b28:	2348      	movs	r3, #72	; 0x48
 8005b2a:	727b      	strb	r3, [r7, #9]
 8005b2c:	237a      	movs	r3, #122	; 0x7a
 8005b2e:	72bb      	strb	r3, [r7, #10]
 8005b30:	23cc      	movs	r3, #204	; 0xcc
 8005b32:	72fb      	strb	r3, [r7, #11]
 8005b34:	2340      	movs	r3, #64	; 0x40
 8005b36:	733b      	strb	r3, [r7, #12]
 8005b38:	23fe      	movs	r3, #254	; 0xfe
 8005b3a:	737b      	strb	r3, [r7, #13]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73bb      	strb	r3, [r7, #14]
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8005b44:	4639      	mov	r1, r7
 8005b46:	4b39      	ldr	r3, [pc, #228]	; (8005c2c <P2PS_STM_Init+0x134>)
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	2002      	movs	r0, #2
 8005b50:	f7ff fb32 	bl	80051b8 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8005b54:	2319      	movs	r3, #25
 8005b56:	703b      	strb	r3, [r7, #0]
 8005b58:	23ed      	movs	r3, #237	; 0xed
 8005b5a:	707b      	strb	r3, [r7, #1]
 8005b5c:	2382      	movs	r3, #130	; 0x82
 8005b5e:	70bb      	strb	r3, [r7, #2]
 8005b60:	23ae      	movs	r3, #174	; 0xae
 8005b62:	70fb      	strb	r3, [r7, #3]
 8005b64:	23ed      	movs	r3, #237	; 0xed
 8005b66:	713b      	strb	r3, [r7, #4]
 8005b68:	2321      	movs	r3, #33	; 0x21
 8005b6a:	717b      	strb	r3, [r7, #5]
 8005b6c:	234c      	movs	r3, #76	; 0x4c
 8005b6e:	71bb      	strb	r3, [r7, #6]
 8005b70:	239d      	movs	r3, #157	; 0x9d
 8005b72:	71fb      	strb	r3, [r7, #7]
 8005b74:	2341      	movs	r3, #65	; 0x41
 8005b76:	723b      	strb	r3, [r7, #8]
 8005b78:	2345      	movs	r3, #69	; 0x45
 8005b7a:	727b      	strb	r3, [r7, #9]
 8005b7c:	2322      	movs	r3, #34	; 0x22
 8005b7e:	72bb      	strb	r3, [r7, #10]
 8005b80:	238e      	movs	r3, #142	; 0x8e
 8005b82:	72fb      	strb	r3, [r7, #11]
 8005b84:	2341      	movs	r3, #65	; 0x41
 8005b86:	733b      	strb	r3, [r7, #12]
 8005b88:	23fe      	movs	r3, #254	; 0xfe
 8005b8a:	737b      	strb	r3, [r7, #13]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73bb      	strb	r3, [r7, #14]
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8005b94:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <P2PS_STM_Init+0x134>)
 8005b96:	8818      	ldrh	r0, [r3, #0]
 8005b98:	463a      	mov	r2, r7
 8005b9a:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <P2PS_STM_Init+0x138>)
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	9303      	str	r3, [sp, #12]
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	9302      	str	r3, [sp, #8]
 8005baa:	2300      	movs	r3, #0
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	2306      	movs	r3, #6
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	f7ff fbae 	bl	8005316 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8005bba:	2319      	movs	r3, #25
 8005bbc:	703b      	strb	r3, [r7, #0]
 8005bbe:	23ed      	movs	r3, #237	; 0xed
 8005bc0:	707b      	strb	r3, [r7, #1]
 8005bc2:	2382      	movs	r3, #130	; 0x82
 8005bc4:	70bb      	strb	r3, [r7, #2]
 8005bc6:	23ae      	movs	r3, #174	; 0xae
 8005bc8:	70fb      	strb	r3, [r7, #3]
 8005bca:	23ed      	movs	r3, #237	; 0xed
 8005bcc:	713b      	strb	r3, [r7, #4]
 8005bce:	2321      	movs	r3, #33	; 0x21
 8005bd0:	717b      	strb	r3, [r7, #5]
 8005bd2:	234c      	movs	r3, #76	; 0x4c
 8005bd4:	71bb      	strb	r3, [r7, #6]
 8005bd6:	239d      	movs	r3, #157	; 0x9d
 8005bd8:	71fb      	strb	r3, [r7, #7]
 8005bda:	2341      	movs	r3, #65	; 0x41
 8005bdc:	723b      	strb	r3, [r7, #8]
 8005bde:	2345      	movs	r3, #69	; 0x45
 8005be0:	727b      	strb	r3, [r7, #9]
 8005be2:	2322      	movs	r3, #34	; 0x22
 8005be4:	72bb      	strb	r3, [r7, #10]
 8005be6:	238e      	movs	r3, #142	; 0x8e
 8005be8:	72fb      	strb	r3, [r7, #11]
 8005bea:	2342      	movs	r3, #66	; 0x42
 8005bec:	733b      	strb	r3, [r7, #12]
 8005bee:	23fe      	movs	r3, #254	; 0xfe
 8005bf0:	737b      	strb	r3, [r7, #13]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73bb      	strb	r3, [r7, #14]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <P2PS_STM_Init+0x134>)
 8005bfc:	8818      	ldrh	r0, [r3, #0]
 8005bfe:	463a      	mov	r2, r7
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <P2PS_STM_Init+0x13c>)
 8005c02:	9305      	str	r3, [sp, #20]
 8005c04:	2301      	movs	r3, #1
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	230a      	movs	r3, #10
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	2310      	movs	r3, #16
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2302      	movs	r3, #2
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	f7ff fb7b 	bl	8005316 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8005c20:	bf00      	nop
}
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08005a35 	.word	0x08005a35
 8005c2c:	200000c4 	.word	0x200000c4
 8005c30:	200000c6 	.word	0x200000c6
 8005c34:	200000c8 	.word	0x200000c8

08005c38 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  return;
 8005c3c:	bf00      	nop
}
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8005c46:	b480      	push	{r7}
 8005c48:	af00      	add	r7, sp, #0
  return;
 8005c4a:	bf00      	nop
}
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <DIS_Init>:
__weak void DIS_Init( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return;
 8005c58:	bf00      	nop
}
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8005c62:	b480      	push	{r7}
 8005c64:	af00      	add	r7, sp, #0
  return;
 8005c66:	bf00      	nop
}
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return;
 8005c74:	bf00      	nop
}
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HRS_Init>:
__weak void HRS_Init( void )
{
 8005c7e:	b480      	push	{r7}
 8005c80:	af00      	add	r7, sp, #0
  return;
 8005c82:	bf00      	nop
}
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HTS_Init>:
__weak void HTS_Init( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return;
 8005c90:	bf00      	nop
}
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <IAS_Init>:
__weak void IAS_Init( void )
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  return;
 8005c9e:	bf00      	nop
}
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <LLS_Init>:
__weak void LLS_Init( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return;
 8005cac:	bf00      	nop
}
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <TPS_Init>:
__weak void TPS_Init( void )
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	af00      	add	r7, sp, #0
  return;
 8005cba:	bf00      	nop
}
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return;
 8005cc8:	bf00      	nop
}
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	af00      	add	r7, sp, #0
  return;
 8005cd6:	bf00      	nop
}
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <MESH_Init>:
__weak void MESH_Init( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return;
 8005ce4:	bf00      	nop
}
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8005cee:	b480      	push	{r7}
 8005cf0:	af00      	add	r7, sp, #0
  return;
 8005cf2:	bf00      	nop
}
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return;
 8005d00:	bf00      	nop
}
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005d10:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <SVCCTL_Init+0x18>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005d16:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <SVCCTL_Init+0x1c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005d1c:	f000 f806 	bl	8005d2c <SVCCTL_SvcInit>

  return;
 8005d20:	bf00      	nop
}
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	200000cc 	.word	0x200000cc
 8005d28:	200000ec 	.word	0x200000ec

08005d2c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  BLS_Init();
 8005d30:	f7ff ff82 	bl	8005c38 <BLS_Init>

  CRS_STM_Init();
 8005d34:	f7ff ff87 	bl	8005c46 <CRS_STM_Init>

  DIS_Init();
 8005d38:	f7ff ff8c 	bl	8005c54 <DIS_Init>

  EDS_STM_Init();
 8005d3c:	f7ff ff91 	bl	8005c62 <EDS_STM_Init>

  HIDS_Init();
 8005d40:	f7ff ff96 	bl	8005c70 <HIDS_Init>

  HRS_Init();
 8005d44:	f7ff ff9b 	bl	8005c7e <HRS_Init>

  HTS_Init();
 8005d48:	f7ff ffa0 	bl	8005c8c <HTS_Init>

  IAS_Init();
 8005d4c:	f7ff ffa5 	bl	8005c9a <IAS_Init>

  LLS_Init();
 8005d50:	f7ff ffaa 	bl	8005ca8 <LLS_Init>

  TPS_Init();
 8005d54:	f7ff ffaf 	bl	8005cb6 <TPS_Init>

  MOTENV_STM_Init();
 8005d58:	f7ff ffb4 	bl	8005cc4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005d5c:	f7ff fecc 	bl	8005af8 <P2PS_STM_Init>

  OTAS_STM_Init();
 8005d60:	f7ff ffb7 	bl	8005cd2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005d64:	f7ff ffc3 	bl	8005cee <BVOPUS_STM_Init>

  MESH_Init();
 8005d68:	f7ff ffba 	bl	8005ce0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005d6c:	f7ff ffc6 	bl	8005cfc <SVCCTL_InitCustomSvc>
  
  return;
 8005d70:	bf00      	nop
}
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8005d7c:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <SVCCTL_RegisterSvcHandler+0x30>)
 8005d7e:	7f1b      	ldrb	r3, [r3, #28]
 8005d80:	4619      	mov	r1, r3
 8005d82:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <SVCCTL_RegisterSvcHandler+0x30>)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <SVCCTL_RegisterSvcHandler+0x30>)
 8005d8c:	7f1b      	ldrb	r3, [r3, #28]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4b04      	ldr	r3, [pc, #16]	; (8005da4 <SVCCTL_RegisterSvcHandler+0x30>)
 8005d94:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8005d96:	bf00      	nop
}
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	200000cc 	.word	0x200000cc

08005da8 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3301      	adds	r3, #1
 8005db4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2bff      	cmp	r3, #255	; 0xff
 8005dc0:	d000      	beq.n	8005dc4 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8005dc2:	e025      	b.n	8005e10 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	3302      	adds	r3, #2
 8005dc8:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dd8:	d000      	beq.n	8005ddc <SVCCTL_UserEvtRx+0x34>
          break;
 8005dda:	e018      	b.n	8005e0e <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	757b      	strb	r3, [r7, #21]
 8005de0:	e00d      	b.n	8005dfe <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005de2:	7d7b      	ldrb	r3, [r7, #21]
 8005de4:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <SVCCTL_UserEvtRx+0xa0>)
 8005de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
 8005dee:	4603      	mov	r3, r0
 8005df0:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d108      	bne.n	8005e0a <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005df8:	7d7b      	ldrb	r3, [r7, #21]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	757b      	strb	r3, [r7, #21]
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <SVCCTL_UserEvtRx+0xa0>)
 8005e00:	7f1b      	ldrb	r3, [r3, #28]
 8005e02:	7d7a      	ldrb	r2, [r7, #21]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d3ec      	bcc.n	8005de2 <SVCCTL_UserEvtRx+0x3a>
          break;
 8005e08:	e000      	b.n	8005e0c <SVCCTL_UserEvtRx+0x64>
              break;
 8005e0a:	bf00      	nop
          break;
 8005e0c:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8005e0e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d009      	beq.n	8005e2a <SVCCTL_UserEvtRx+0x82>
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d00a      	beq.n	8005e30 <SVCCTL_UserEvtRx+0x88>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 febe 	bl	8006ba0 <SVCCTL_App_Notification>
 8005e24:	4603      	mov	r3, r0
 8005e26:	75bb      	strb	r3, [r7, #22]
      break;
 8005e28:	e008      	b.n	8005e3c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75bb      	strb	r3, [r7, #22]
      break;
 8005e2e:	e005      	b.n	8005e3c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75bb      	strb	r3, [r7, #22]
      break;
 8005e34:	e002      	b.n	8005e3c <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75bb      	strb	r3, [r7, #22]
      break;
 8005e3a:	bf00      	nop
  }

  return (return_status);
 8005e3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200000cc 	.word	0x200000cc

08005e4c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005e54:	f107 030c 	add.w	r3, r7, #12
 8005e58:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2121      	movs	r1, #33	; 0x21
 8005e64:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005e68:	f000 fa5e 	bl	8006328 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	330b      	adds	r3, #11
 8005e70:	78db      	ldrb	r3, [r3, #3]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b088      	sub	sp, #32
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005e82:	f107 030c 	add.w	r3, r7, #12
 8005e86:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	210f      	movs	r1, #15
 8005e92:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8005e96:	f000 fa47 	bl	8006328 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	330b      	adds	r3, #11
 8005e9e:	78db      	ldrb	r3, [r3, #3]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <hci_init+0x30>)
 8005eb8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005eba:	4a08      	ldr	r2, [pc, #32]	; (8005edc <hci_init+0x34>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005ec0:	4806      	ldr	r0, [pc, #24]	; (8005edc <hci_init+0x34>)
 8005ec2:	f000 f9af 	bl	8006224 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f8dc 	bl	8006088 <TlInit>

  return;
 8005ed0:	bf00      	nop
}
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000200 	.word	0x20000200
 8005edc:	200001d8 	.word	0x200001d8

08005ee0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005ee6:	4824      	ldr	r0, [pc, #144]	; (8005f78 <hci_user_evt_proc+0x98>)
 8005ee8:	f000 fd2a 	bl	8006940 <LST_is_empty>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d12f      	bne.n	8005f52 <hci_user_evt_proc+0x72>
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <hci_user_evt_proc+0x9c>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02b      	beq.n	8005f52 <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005efa:	f107 030c 	add.w	r3, r7, #12
 8005efe:	4619      	mov	r1, r3
 8005f00:	481d      	ldr	r0, [pc, #116]	; (8005f78 <hci_user_evt_proc+0x98>)
 8005f02:	f000 fda4 	bl	8006a4e <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f97b 	bl	8006204 <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 8005f0e:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <hci_user_evt_proc+0xa0>)
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00c      	beq.n	8005f30 <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005f1e:	4b18      	ldr	r3, [pc, #96]	; (8005f80 <hci_user_evt_proc+0xa0>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	1d3a      	adds	r2, r7, #4
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005f28:	793a      	ldrb	r2, [r7, #4]
 8005f2a:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <hci_user_evt_proc+0x9c>)
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005f30:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <hci_user_evt_proc+0x9c>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <hci_user_evt_proc+0x9c>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fc41 	bl	80067c8 <TL_MM_EvtDone>
 8005f46:	e004      	b.n	8005f52 <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	480a      	ldr	r0, [pc, #40]	; (8005f78 <hci_user_evt_proc+0x98>)
 8005f4e:	f000 fd17 	bl	8006980 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005f52:	4809      	ldr	r0, [pc, #36]	; (8005f78 <hci_user_evt_proc+0x98>)
 8005f54:	f000 fcf4 	bl	8006940 <LST_is_empty>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <hci_user_evt_proc+0x8e>
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <hci_user_evt_proc+0x9c>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005f66:	4804      	ldr	r0, [pc, #16]	; (8005f78 <hci_user_evt_proc+0x98>)
 8005f68:	f001 f887 	bl	800707a <hci_notify_asynch_evt>
  }


  return;
 8005f6c:	bf00      	nop
 8005f6e:	bf00      	nop
}
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	200000f4 	.word	0x200000f4
 8005f7c:	20000100 	.word	0x20000100
 8005f80:	200001d8 	.word	0x200001d8

08005f84 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005f90:	2000      	movs	r0, #0
 8005f92:	f000 f8d5 	bl	8006140 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8005f96:	2300      	movs	r3, #0
 8005f98:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	885b      	ldrh	r3, [r3, #2]
 8005f9e:	b21b      	sxth	r3, r3
 8005fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fa4:	b21a      	sxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	029b      	lsls	r3, r3, #10
 8005fac:	b21b      	sxth	r3, r3
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	b21b      	sxth	r3, r3
 8005fb2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	b2d9      	uxtb	r1, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	8bbb      	ldrh	r3, [r7, #28]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 f891 	bl	80060e8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8005fc6:	e052      	b.n	800606e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8005fc8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005fcc:	f001 f86c 	bl	80070a8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005fd0:	e047      	b.n	8006062 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005fd2:	f107 030c 	add.w	r3, r7, #12
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	482a      	ldr	r0, [pc, #168]	; (8006084 <hci_send_req+0x100>)
 8005fda:	f000 fd38 	bl	8006a4e <LST_remove_head>

      OutputRspTrace(pevtpacket);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f8fb 	bl	80061dc <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	7a5b      	ldrb	r3, [r3, #9]
 8005fea:	2b0f      	cmp	r3, #15
 8005fec:	d114      	bne.n	8006018 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	330b      	adds	r3, #11
 8005ff2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	885b      	ldrh	r3, [r3, #2]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	8bba      	ldrh	r2, [r7, #28]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d104      	bne.n	800600a <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	7812      	ldrb	r2, [r2, #0]
 8006008:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d027      	beq.n	8006062 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006012:	2301      	movs	r3, #1
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e024      	b.n	8006062 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	330b      	adds	r3, #11
 800601c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006024:	b29b      	uxth	r3, r3
 8006026:	8bba      	ldrh	r2, [r7, #28]
 8006028:	429a      	cmp	r2, r3
 800602a:	d114      	bne.n	8006056 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	7a9b      	ldrb	r3, [r3, #10]
 8006030:	3b03      	subs	r3, #3
 8006032:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	429a      	cmp	r2, r3
 800603c:	bfa8      	it	ge
 800603e:	461a      	movge	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6918      	ldr	r0, [r3, #16]
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	1cd9      	adds	r1, r3, #3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	461a      	mov	r2, r3
 8006052:	f001 fd83 	bl	8007b5c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800605e:	2301      	movs	r3, #1
 8006060:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006062:	4808      	ldr	r0, [pc, #32]	; (8006084 <hci_send_req+0x100>)
 8006064:	f000 fc6c 	bl	8006940 <LST_is_empty>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0b1      	beq.n	8005fd2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800606e:	7ffb      	ldrb	r3, [r7, #31]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0a9      	beq.n	8005fc8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006074:	2001      	movs	r0, #1
 8006076:	f000 f863 	bl	8006140 <NotifyCmdStatus>

  return 0;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200001f8 	.word	0x200001f8

08006088 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006090:	480f      	ldr	r0, [pc, #60]	; (80060d0 <TlInit+0x48>)
 8006092:	f000 fc45 	bl	8006920 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006096:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <TlInit+0x4c>)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800609c:	480e      	ldr	r0, [pc, #56]	; (80060d8 <TlInit+0x50>)
 800609e:	f000 fc3f 	bl	8006920 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <TlInit+0x54>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80060a8:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <TlInit+0x58>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <TlInit+0x5c>)
 80060b6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80060b8:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <TlInit+0x58>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f107 0208 	add.w	r2, r7, #8
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
  }

  return;
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
}
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200001f8 	.word	0x200001f8
 80060d4:	200000fc 	.word	0x200000fc
 80060d8:	200000f4 	.word	0x200000f4
 80060dc:	20000100 	.word	0x20000100
 80060e0:	200001d8 	.word	0x200001d8
 80060e4:	08006181 	.word	0x08006181

080060e8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	603a      	str	r2, [r7, #0]
 80060f2:	80fb      	strh	r3, [r7, #6]
 80060f4:	460b      	mov	r3, r1
 80060f6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80060f8:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <SendCmd+0x50>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	88fa      	ldrh	r2, [r7, #6]
 80060fe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006102:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <SendCmd+0x50>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	797a      	ldrb	r2, [r7, #5]
 8006108:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <SendCmd+0x50>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	330c      	adds	r3, #12
 8006110:	797a      	ldrb	r2, [r7, #5]
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f001 fd21 	bl	8007b5c <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800611a:	4b07      	ldr	r3, [pc, #28]	; (8006138 <SendCmd+0x50>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 f852 	bl	80061c8 <OutputCmdTrace>

  hciContext.io.Send(0,0);
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <SendCmd+0x54>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2100      	movs	r1, #0
 800612a:	2000      	movs	r0, #0
 800612c:	4798      	blx	r3

  return;
 800612e:	bf00      	nop
}
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200000fc 	.word	0x200000fc
 800613c:	200001d8 	.word	0x200001d8

08006140 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <NotifyCmdStatus+0x3c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006158:	4b08      	ldr	r3, [pc, #32]	; (800617c <NotifyCmdStatus+0x3c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2000      	movs	r0, #0
 800615e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006160:	e008      	b.n	8006174 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <NotifyCmdStatus+0x3c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800616a:	4b04      	ldr	r3, [pc, #16]	; (800617c <NotifyCmdStatus+0x3c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2001      	movs	r0, #1
 8006170:	4798      	blx	r3
  return;
 8006172:	bf00      	nop
 8006174:	bf00      	nop
}
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000200 	.word	0x20000200

08006180 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7a5b      	ldrb	r3, [r3, #9]
 800618c:	2b0f      	cmp	r3, #15
 800618e:	d003      	beq.n	8006198 <TlEvtReceived+0x18>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	7a5b      	ldrb	r3, [r3, #9]
 8006194:	2b0e      	cmp	r3, #14
 8006196:	d107      	bne.n	80061a8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4809      	ldr	r0, [pc, #36]	; (80061c0 <TlEvtReceived+0x40>)
 800619c:	f000 fc14 	bl	80069c8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80061a0:	2000      	movs	r0, #0
 80061a2:	f000 ff76 	bl	8007092 <hci_cmd_resp_release>
 80061a6:	e006      	b.n	80061b6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4806      	ldr	r0, [pc, #24]	; (80061c4 <TlEvtReceived+0x44>)
 80061ac:	f000 fc0c 	bl	80069c8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80061b0:	4804      	ldr	r0, [pc, #16]	; (80061c4 <TlEvtReceived+0x44>)
 80061b2:	f000 ff62 	bl	800707a <hci_notify_asynch_evt>
  }

  return;
 80061b6:	bf00      	nop
}
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	200001f8 	.word	0x200001f8
 80061c4:	200000f4 	.word	0x200000f4

080061c8 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 80061d0:	bf00      	nop
}
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7a5b      	ldrb	r3, [r3, #9]
 80061e8:	2b0e      	cmp	r3, #14
 80061ea:	d002      	beq.n	80061f2 <OutputRspTrace+0x16>
 80061ec:	2b0f      	cmp	r3, #15
 80061ee:	d002      	beq.n	80061f6 <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 80061f0:	e002      	b.n	80061f8 <OutputRspTrace+0x1c>
      break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <OutputRspTrace+0x1c>
      break;
 80061f6:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 80061f8:	bf00      	nop
}
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	7a5b      	ldrb	r3, [r3, #9]
 8006210:	2bff      	cmp	r3, #255	; 0xff
 8006212:	d100      	bne.n	8006216 <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 8006214:	bf00      	nop
 8006216:	bf00      	nop
}
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a05      	ldr	r2, [pc, #20]	; (8006244 <hci_register_io_bus+0x20>)
 8006230:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a04      	ldr	r2, [pc, #16]	; (8006248 <hci_register_io_bus+0x24>)
 8006236:	611a      	str	r2, [r3, #16]

  return;
 8006238:	bf00      	nop
}
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	080065a1 	.word	0x080065a1
 8006248:	08006609 	.word	0x08006609

0800624c <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	4a08      	ldr	r2, [pc, #32]	; (800627c <shci_init+0x30>)
 800625c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800625e:	4a08      	ldr	r2, [pc, #32]	; (8006280 <shci_init+0x34>)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006264:	4806      	ldr	r0, [pc, #24]	; (8006280 <shci_init+0x34>)
 8006266:	f000 f947 	bl	80064f8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f8a0 	bl	80063b4 <TlInit>

  return;
 8006274:	bf00      	nop
}
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20000224 	.word	0x20000224
 8006280:	20000204 	.word	0x20000204

08006284 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800628a:	4824      	ldr	r0, [pc, #144]	; (800631c <shci_user_evt_proc+0x98>)
 800628c:	f000 fb58 	bl	8006940 <LST_is_empty>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d12f      	bne.n	80062f6 <shci_user_evt_proc+0x72>
 8006296:	4b22      	ldr	r3, [pc, #136]	; (8006320 <shci_user_evt_proc+0x9c>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d02b      	beq.n	80062f6 <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	4619      	mov	r1, r3
 80062a4:	481d      	ldr	r0, [pc, #116]	; (800631c <shci_user_evt_proc+0x98>)
 80062a6:	f000 fbd2 	bl	8006a4e <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f913 	bl	80064d8 <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <shci_user_evt_proc+0xa0>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80062be:	2301      	movs	r3, #1
 80062c0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80062c2:	4b18      	ldr	r3, [pc, #96]	; (8006324 <shci_user_evt_proc+0xa0>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	1d3a      	adds	r2, r7, #4
 80062c8:	4610      	mov	r0, r2
 80062ca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80062cc:	793a      	ldrb	r2, [r7, #4]
 80062ce:	4b14      	ldr	r3, [pc, #80]	; (8006320 <shci_user_evt_proc+0x9c>)
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e002      	b.n	80062da <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80062d4:	4b12      	ldr	r3, [pc, #72]	; (8006320 <shci_user_evt_proc+0x9c>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80062da:	4b11      	ldr	r3, [pc, #68]	; (8006320 <shci_user_evt_proc+0x9c>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fa6f 	bl	80067c8 <TL_MM_EvtDone>
 80062ea:	e004      	b.n	80062f6 <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4619      	mov	r1, r3
 80062f0:	480a      	ldr	r0, [pc, #40]	; (800631c <shci_user_evt_proc+0x98>)
 80062f2:	f000 fb45 	bl	8006980 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80062f6:	4809      	ldr	r0, [pc, #36]	; (800631c <shci_user_evt_proc+0x98>)
 80062f8:	f000 fb22 	bl	8006940 <LST_is_empty>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <shci_user_evt_proc+0x8e>
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <shci_user_evt_proc+0x9c>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800630a:	4804      	ldr	r0, [pc, #16]	; (800631c <shci_user_evt_proc+0x98>)
 800630c:	f7fa f804 	bl	8000318 <shci_notify_asynch_evt>
  }


  return;
 8006310:	bf00      	nop
 8006312:	bf00      	nop
}
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000104 	.word	0x20000104
 8006320:	20000114 	.word	0x20000114
 8006324:	20000204 	.word	0x20000204

08006328 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60ba      	str	r2, [r7, #8]
 8006330:	607b      	str	r3, [r7, #4]
 8006332:	4603      	mov	r3, r0
 8006334:	81fb      	strh	r3, [r7, #14]
 8006336:	460b      	mov	r3, r1
 8006338:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800633a:	2000      	movs	r0, #0
 800633c:	f000 f86c 	bl	8006418 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006340:	4b1a      	ldr	r3, [pc, #104]	; (80063ac <shci_send+0x84>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	89fa      	ldrh	r2, [r7, #14]
 8006346:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800634a:	4b18      	ldr	r3, [pc, #96]	; (80063ac <shci_send+0x84>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	7b7a      	ldrb	r2, [r7, #13]
 8006350:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006352:	4b16      	ldr	r3, [pc, #88]	; (80063ac <shci_send+0x84>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	7b7a      	ldrb	r2, [r7, #13]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	4618      	mov	r0, r3
 800635e:	f001 fbfd 	bl	8007b5c <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8006362:	4b12      	ldr	r3, [pc, #72]	; (80063ac <shci_send+0x84>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f89c 	bl	80064a4 <OutputCmdTrace>

  shciContext.io.Send(0,0);
 800636c:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <shci_send+0x88>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2100      	movs	r1, #0
 8006372:	2000      	movs	r0, #0
 8006374:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006376:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800637a:	f7f9 ffe4 	bl	8000346 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f103 0008 	add.w	r0, r3, #8
 8006384:	4b09      	ldr	r3, [pc, #36]	; (80063ac <shci_send+0x84>)
 8006386:	6819      	ldr	r1, [r3, #0]
 8006388:	4b08      	ldr	r3, [pc, #32]	; (80063ac <shci_send+0x84>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	789b      	ldrb	r3, [r3, #2]
 800638e:	3303      	adds	r3, #3
 8006390:	461a      	mov	r2, r3
 8006392:	f001 fbe3 	bl	8007b5c <memcpy>

  OutputRspTrace(p_rsp);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f88e 	bl	80064b8 <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800639c:	2001      	movs	r0, #1
 800639e:	f000 f83b 	bl	8006418 <Cmd_SetStatus>

  return;
 80063a2:	bf00      	nop
}
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000110 	.word	0x20000110
 80063b0:	20000204 	.word	0x20000204

080063b4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80063bc:	4a10      	ldr	r2, [pc, #64]	; (8006400 <TlInit+0x4c>)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80063c2:	4810      	ldr	r0, [pc, #64]	; (8006404 <TlInit+0x50>)
 80063c4:	f000 faac 	bl	8006920 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80063c8:	2001      	movs	r0, #1
 80063ca:	f000 f825 	bl	8006418 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80063ce:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <TlInit+0x54>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80063d4:	4b0d      	ldr	r3, [pc, #52]	; (800640c <TlInit+0x58>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <TlInit+0x5c>)
 80063e2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <TlInit+0x60>)
 80063e6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80063e8:	4b08      	ldr	r3, [pc, #32]	; (800640c <TlInit+0x58>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f107 020c 	add.w	r2, r7, #12
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
  }

  return;
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
}
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000110 	.word	0x20000110
 8006404:	20000104 	.word	0x20000104
 8006408:	20000114 	.word	0x20000114
 800640c:	20000204 	.word	0x20000204
 8006410:	08006469 	.word	0x08006469
 8006414:	08006481 	.word	0x08006481

08006418 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006428:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <Cmd_SetStatus+0x48>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <Cmd_SetStatus+0x48>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2000      	movs	r0, #0
 8006436:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006438:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <Cmd_SetStatus+0x4c>)
 800643a:	2200      	movs	r2, #0
 800643c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800643e:	e00b      	b.n	8006458 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006440:	4b08      	ldr	r3, [pc, #32]	; (8006464 <Cmd_SetStatus+0x4c>)
 8006442:	2201      	movs	r2, #1
 8006444:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <Cmd_SetStatus+0x48>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800644e:	4b04      	ldr	r3, [pc, #16]	; (8006460 <Cmd_SetStatus+0x48>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2001      	movs	r0, #1
 8006454:	4798      	blx	r3
  return;
 8006456:	bf00      	nop
 8006458:	bf00      	nop
}
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000224 	.word	0x20000224
 8006464:	2000010c 	.word	0x2000010c

08006468 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006470:	2000      	movs	r0, #0
 8006472:	f7f9 ff5d 	bl	8000330 <shci_cmd_resp_release>

  return;
 8006476:	bf00      	nop
}
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4805      	ldr	r0, [pc, #20]	; (80064a0 <TlUserEvtReceived+0x20>)
 800648c:	f000 fa9c 	bl	80069c8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006490:	4803      	ldr	r0, [pc, #12]	; (80064a0 <TlUserEvtReceived+0x20>)
 8006492:	f7f9 ff41 	bl	8000318 <shci_notify_asynch_evt>

  return;
 8006496:	bf00      	nop
}
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000104 	.word	0x20000104

080064a4 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 80064ac:	bf00      	nop
}
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7a5b      	ldrb	r3, [r3, #9]
 80064c4:	2b0e      	cmp	r3, #14
 80064c6:	d000      	beq.n	80064ca <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 80064c8:	e000      	b.n	80064cc <OutputRspTrace+0x14>
      break;
 80064ca:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 80064cc:	bf00      	nop
}
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7a5b      	ldrb	r3, [r3, #9]
 80064e4:	2bff      	cmp	r3, #255	; 0xff
 80064e6:	d100      	bne.n	80064ea <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
}
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a05      	ldr	r2, [pc, #20]	; (8006518 <shci_register_io_bus+0x20>)
 8006504:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a04      	ldr	r2, [pc, #16]	; (800651c <shci_register_io_bus+0x24>)
 800650a:	611a      	str	r2, [r3, #16]

  return;
 800650c:	bf00      	nop
}
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	0800667d 	.word	0x0800667d
 800651c:	080066d1 	.word	0x080066d1

08006520 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006524:	f000 ffa6 	bl	8007474 <HW_IPCC_Enable>

  return;
 8006528:	bf00      	nop
}
 800652a:	bd80      	pop	{r7, pc}

0800652c <TL_Init>:


void TL_Init( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006530:	4b10      	ldr	r3, [pc, #64]	; (8006574 <TL_Init+0x48>)
 8006532:	4a11      	ldr	r2, [pc, #68]	; (8006578 <TL_Init+0x4c>)
 8006534:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <TL_Init+0x48>)
 8006538:	4a10      	ldr	r2, [pc, #64]	; (800657c <TL_Init+0x50>)
 800653a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800653c:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <TL_Init+0x48>)
 800653e:	4a10      	ldr	r2, [pc, #64]	; (8006580 <TL_Init+0x54>)
 8006540:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <TL_Init+0x48>)
 8006544:	4a0f      	ldr	r2, [pc, #60]	; (8006584 <TL_Init+0x58>)
 8006546:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <TL_Init+0x48>)
 800654a:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <TL_Init+0x5c>)
 800654c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <TL_Init+0x48>)
 8006550:	4a0e      	ldr	r2, [pc, #56]	; (800658c <TL_Init+0x60>)
 8006552:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <TL_Init+0x48>)
 8006556:	4a0e      	ldr	r2, [pc, #56]	; (8006590 <TL_Init+0x64>)
 8006558:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <TL_Init+0x48>)
 800655c:	4a0d      	ldr	r2, [pc, #52]	; (8006594 <TL_Init+0x68>)
 800655e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006560:	4b04      	ldr	r3, [pc, #16]	; (8006574 <TL_Init+0x48>)
 8006562:	4a0d      	ldr	r2, [pc, #52]	; (8006598 <TL_Init+0x6c>)
 8006564:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006566:	4b03      	ldr	r3, [pc, #12]	; (8006574 <TL_Init+0x48>)
 8006568:	4a0c      	ldr	r2, [pc, #48]	; (800659c <TL_Init+0x70>)
 800656a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800656c:	f000 ff92 	bl	8007494 <HW_IPCC_Init>

  return;
 8006570:	bf00      	nop
}
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20030000 	.word	0x20030000
 8006578:	20030028 	.word	0x20030028
 800657c:	20030048 	.word	0x20030048
 8006580:	20030058 	.word	0x20030058
 8006584:	20030064 	.word	0x20030064
 8006588:	2003006c 	.word	0x2003006c
 800658c:	20030074 	.word	0x20030074
 8006590:	2003007c 	.word	0x2003007c
 8006594:	20030098 	.word	0x20030098
 8006598:	2003009c 	.word	0x2003009c
 800659c:	200300a8 	.word	0x200300a8

080065a0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80065ac:	4811      	ldr	r0, [pc, #68]	; (80065f4 <TL_BLE_Init+0x54>)
 80065ae:	f000 f9b7 	bl	8006920 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80065b2:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <TL_BLE_Init+0x58>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4a0c      	ldr	r2, [pc, #48]	; (80065fc <TL_BLE_Init+0x5c>)
 80065cc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4a08      	ldr	r2, [pc, #32]	; (80065f4 <TL_BLE_Init+0x54>)
 80065d2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80065d4:	f000 ff74 	bl	80074c0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a08      	ldr	r2, [pc, #32]	; (8006600 <TL_BLE_Init+0x60>)
 80065de:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	4a07      	ldr	r2, [pc, #28]	; (8006604 <TL_BLE_Init+0x64>)
 80065e6:	6013      	str	r3, [r2, #0]

  return 0;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	200300c4 	.word	0x200300c4
 80065f8:	20030000 	.word	0x20030000
 80065fc:	20030a48 	.word	0x20030a48
 8006600:	20000230 	.word	0x20000230
 8006604:	20000234 	.word	0x20000234

08006608 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <TL_BLE_SendCmd+0x24>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2201      	movs	r2, #1
 800661c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800661e:	f000 ff59 	bl	80074d4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20030000 	.word	0x20030000

08006630 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006636:	e009      	b.n	800664c <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4808      	ldr	r0, [pc, #32]	; (8006660 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800663e:	f000 fa06 	bl	8006a4e <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800664c:	4804      	ldr	r0, [pc, #16]	; (8006660 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800664e:	f000 f977 	bl	8006940 <LST_is_empty>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0ef      	beq.n	8006638 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006658:	bf00      	nop
}
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	200300c4 	.word	0x200300c4
 8006664:	20000230 	.word	0x20000230

08006668 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800666c:	4b02      	ldr	r3, [pc, #8]	; (8006678 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4798      	blx	r3

  return;
 8006672:	bf00      	nop
}
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000234 	.word	0x20000234

0800667c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006688:	480d      	ldr	r0, [pc, #52]	; (80066c0 <TL_SYS_Init+0x44>)
 800668a:	f000 f949 	bl	8006920 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <TL_SYS_Init+0x48>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <TL_SYS_Init+0x44>)
 80066a0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80066a2:	f000 ff39 	bl	8007518 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a07      	ldr	r2, [pc, #28]	; (80066c8 <TL_SYS_Init+0x4c>)
 80066ac:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	4a06      	ldr	r2, [pc, #24]	; (80066cc <TL_SYS_Init+0x50>)
 80066b4:	6013      	str	r3, [r2, #0]

  return 0;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200300cc 	.word	0x200300cc
 80066c4:	20030000 	.word	0x20030000
 80066c8:	20000238 	.word	0x20000238
 80066cc:	2000023c 	.word	0x2000023c

080066d0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <TL_SYS_SendCmd+0x24>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2210      	movs	r2, #16
 80066e4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 80066e6:	f000 ff21 	bl	800752c <HW_IPCC_SYS_SendCmd>

  return 0;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20030000 	.word	0x20030000

080066f8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80066fc:	4b04      	ldr	r3, [pc, #16]	; (8006710 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a04      	ldr	r2, [pc, #16]	; (8006714 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 8006702:	68d2      	ldr	r2, [r2, #12]
 8006704:	6812      	ldr	r2, [r2, #0]
 8006706:	4610      	mov	r0, r2
 8006708:	4798      	blx	r3

  return;
 800670a:	bf00      	nop
}
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000238 	.word	0x20000238
 8006714:	20030000 	.word	0x20030000

08006718 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800671e:	e009      	b.n	8006734 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4808      	ldr	r0, [pc, #32]	; (8006748 <HW_IPCC_SYS_EvtNot+0x30>)
 8006726:	f000 f992 	bl	8006a4e <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <HW_IPCC_SYS_EvtNot+0x34>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	4610      	mov	r0, r2
 8006732:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006734:	4804      	ldr	r0, [pc, #16]	; (8006748 <HW_IPCC_SYS_EvtNot+0x30>)
 8006736:	f000 f903 	bl	8006940 <LST_is_empty>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0ef      	beq.n	8006720 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006740:	bf00      	nop
}
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	200300cc 	.word	0x200300cc
 800674c:	2000023c 	.word	0x2000023c

08006750 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8006758:	4817      	ldr	r0, [pc, #92]	; (80067b8 <TL_MM_Init+0x68>)
 800675a:	f000 f8e1 	bl	8006920 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800675e:	4817      	ldr	r0, [pc, #92]	; (80067bc <TL_MM_Init+0x6c>)
 8006760:	f000 f8de 	bl	8006920 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8006764:	4b16      	ldr	r3, [pc, #88]	; (80067c0 <TL_MM_Init+0x70>)
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <TL_MM_Init+0x74>)
 800676a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800676c:	4b15      	ldr	r3, [pc, #84]	; (80067c4 <TL_MM_Init+0x74>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6892      	ldr	r2, [r2, #8]
 8006774:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <TL_MM_Init+0x74>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68d2      	ldr	r2, [r2, #12]
 800677e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <TL_MM_Init+0x74>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0c      	ldr	r2, [pc, #48]	; (80067b8 <TL_MM_Init+0x68>)
 8006786:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8006788:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <TL_MM_Init+0x74>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <TL_MM_Init+0x74>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6852      	ldr	r2, [r2, #4]
 800679a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <TL_MM_Init+0x74>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6912      	ldr	r2, [r2, #16]
 80067a4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80067a6:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <TL_MM_Init+0x74>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6952      	ldr	r2, [r2, #20]
 80067ae:	619a      	str	r2, [r3, #24]

  return;
 80067b0:	bf00      	nop
}
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200300b4 	.word	0x200300b4
 80067bc:	20000228 	.word	0x20000228
 80067c0:	20030000 	.word	0x20030000
 80067c4:	20000240 	.word	0x20000240

080067c8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4806      	ldr	r0, [pc, #24]	; (80067ec <TL_MM_EvtDone+0x24>)
 80067d4:	f000 f8f8 	bl	80069c8 <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f82b 	bl	8006834 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80067de:	4804      	ldr	r0, [pc, #16]	; (80067f0 <TL_MM_EvtDone+0x28>)
 80067e0:	f000 feca 	bl	8007578 <HW_IPCC_MM_SendFreeBuf>

  return;
 80067e4:	bf00      	nop
}
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000228 	.word	0x20000228
 80067f0:	080067f5 	.word	0x080067f5

080067f4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80067fa:	e00c      	b.n	8006816 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80067fc:	1d3b      	adds	r3, r7, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	480a      	ldr	r0, [pc, #40]	; (800682c <SendFreeBuf+0x38>)
 8006802:	f000 f924 	bl	8006a4e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006806:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <SendFreeBuf+0x3c>)
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f8d9 	bl	80069c8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006816:	4805      	ldr	r0, [pc, #20]	; (800682c <SendFreeBuf+0x38>)
 8006818:	f000 f892 	bl	8006940 <LST_is_empty>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0ec      	beq.n	80067fc <SendFreeBuf+0x8>
  }

  return;
 8006822:	bf00      	nop
}
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000228 	.word	0x20000228
 8006830:	20030000 	.word	0x20030000

08006834 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	7a5b      	ldrb	r3, [r3, #9]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d004      	beq.n	800684e <OutputMemReleaseTrace+0x1a>
 8006844:	2bff      	cmp	r3, #255	; 0xff
 8006846:	d004      	beq.n	8006852 <OutputMemReleaseTrace+0x1e>
 8006848:	2b0e      	cmp	r3, #14
 800684a:	d004      	beq.n	8006856 <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 800684c:	e004      	b.n	8006858 <OutputMemReleaseTrace+0x24>
      break;
 800684e:	bf00      	nop
 8006850:	e002      	b.n	8006858 <OutputMemReleaseTrace+0x24>
      break;
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <OutputMemReleaseTrace+0x24>
      break;
 8006856:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 8006858:	bf00      	nop
}
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8006868:	4805      	ldr	r0, [pc, #20]	; (8006880 <TL_TRACES_Init+0x1c>)
 800686a:	f000 f859 	bl	8006920 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800686e:	4b05      	ldr	r3, [pc, #20]	; (8006884 <TL_TRACES_Init+0x20>)
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	4a03      	ldr	r2, [pc, #12]	; (8006880 <TL_TRACES_Init+0x1c>)
 8006874:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8006876:	f000 feb5 	bl	80075e4 <HW_IPCC_TRACES_Init>

  return;
 800687a:	bf00      	nop
}
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	200300bc 	.word	0x200300bc
 8006884:	20030000 	.word	0x20030000

08006888 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800688e:	e008      	b.n	80068a2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8006890:	1d3b      	adds	r3, r7, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4808      	ldr	r0, [pc, #32]	; (80068b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006896:	f000 f8da 	bl	8006a4e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4618      	mov	r0, r3
 800689e:	f000 f80d 	bl	80068bc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80068a2:	4805      	ldr	r0, [pc, #20]	; (80068b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80068a4:	f000 f84c 	bl	8006940 <LST_is_empty>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80068ae:	bf00      	nop
}
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200300bc 	.word	0x200300bc

080068bc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80068da:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <OTP_Read+0x48>)
 80068dc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80068de:	e002      	b.n	80068e6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3b08      	subs	r3, #8
 80068e4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3307      	adds	r3, #7
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	79fa      	ldrb	r2, [r7, #7]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d003      	beq.n	80068fa <OTP_Read+0x2a>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a09      	ldr	r2, [pc, #36]	; (800691c <OTP_Read+0x4c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d1f2      	bne.n	80068e0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3307      	adds	r3, #7
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	79fa      	ldrb	r2, [r7, #7]
 8006902:	429a      	cmp	r2, r3
 8006904:	d001      	beq.n	800690a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	1fff73f8 	.word	0x1fff73f8
 800691c:	1fff7000 	.word	0x1fff7000

08006920 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	605a      	str	r2, [r3, #4]
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006948:	f3ef 8310 	mrs	r3, PRIMASK
 800694c:	60fb      	str	r3, [r7, #12]
  return(result);
 800694e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006950:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006952:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	429a      	cmp	r2, r3
 800695c:	d102      	bne.n	8006964 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
 8006962:	e001      	b.n	8006968 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	75fb      	strb	r3, [r7, #23]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
}
 8006974:	4618      	mov	r0, r3
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800698a:	f3ef 8310 	mrs	r3, PRIMASK
 800698e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006990:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006994:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	605a      	str	r2, [r3, #4]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d2:	f3ef 8310 	mrs	r3, PRIMASK
 80069d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80069d8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80069da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80069dc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006a04:	bf00      	nop
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a18:	f3ef 8310 	mrs	r3, PRIMASK
 8006a1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a22:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6852      	ldr	r2, [r2, #4]
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a58:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a62:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff ffcd 	bl	8006a10 <LST_remove_node>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006a80:	bf00      	nop
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006a8c:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <LL_FLASH_GetUDN+0x14>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	1fff7580 	.word	0x1fff7580

08006aa0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006aa4:	4b03      	ldr	r3, [pc, #12]	; (8006ab4 <LL_FLASH_GetDeviceID+0x14>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	1fff7584 	.word	0x1fff7584

08006ab8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8006abc:	4b03      	ldr	r3, [pc, #12]	; (8006acc <LL_FLASH_GetSTCompanyID+0x14>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	0a1b      	lsrs	r3, r3, #8
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	1fff7584 	.word	0x1fff7584

08006ad0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8006ad0:	b5b0      	push	{r4, r5, r7, lr}
 8006ad2:	b08c      	sub	sp, #48	; 0x30
 8006ad4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006ad6:	4b28      	ldr	r3, [pc, #160]	; (8006b78 <APP_BLE_Init+0xa8>)
 8006ad8:	463c      	mov	r4, r7
 8006ada:	461d      	mov	r5, r3
 8006adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006ae8:	c407      	stmia	r4!, {r0, r1, r2}
 8006aea:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8006aec:	f000 f8f6 	bl	8006cdc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006af0:	2101      	movs	r1, #1
 8006af2:	2002      	movs	r0, #2
 8006af4:	f000 fd9e 	bl	8007634 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006af8:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <APP_BLE_Init+0xac>)
 8006afa:	2100      	movs	r1, #0
 8006afc:	2004      	movs	r0, #4
 8006afe:	f000 fedb 	bl	80078b8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8006b02:	463b      	mov	r3, r7
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff f9a1 	bl	8005e4c <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006b0a:	f000 f8fd 	bl	8006d08 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006b0e:	f7ff f8fd 	bl	8005d0c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <APP_BLE_Init+0xb0>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8006b1a:	4b19      	ldr	r3, [pc, #100]	; (8006b80 <APP_BLE_Init+0xb0>)
 8006b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b20:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8006b22:	4a18      	ldr	r2, [pc, #96]	; (8006b84 <APP_BLE_Init+0xb4>)
 8006b24:	2100      	movs	r1, #0
 8006b26:	2001      	movs	r0, #1
 8006b28:	f000 fec6 	bl	80078b8 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8006b2c:	2006      	movs	r0, #6
 8006b2e:	f7fe fe23 	bl	8005778 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8006b32:	f000 fb27 	bl	8007184 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8006b36:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <APP_BLE_Init+0xb8>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4914      	ldr	r1, [pc, #80]	; (8006b8c <APP_BLE_Init+0xbc>)
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	f7fa f913 	bl	8000d68 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8006b42:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <APP_BLE_Init+0xc0>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	4913      	ldr	r1, [pc, #76]	; (8006b94 <APP_BLE_Init+0xc4>)
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7fa f90d 	bl	8000d68 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <APP_BLE_Init+0xb0>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8006b56:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <APP_BLE_Init+0xb0>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <APP_BLE_Init+0xc8>)
 8006b60:	2280      	movs	r2, #128	; 0x80
 8006b62:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <APP_BLE_Init+0xcc>)
 8006b66:	22a0      	movs	r2, #160	; 0xa0
 8006b68:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f000 f9a6 	bl	8006ebc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8006b70:	bf00      	nop
}
 8006b72:	3730      	adds	r7, #48	; 0x30
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bdb0      	pop	{r4, r5, r7, pc}
 8006b78:	08007be8 	.word	0x08007be8
 8006b7c:	08005ee1 	.word	0x08005ee1
 8006b80:	20000118 	.word	0x20000118
 8006b84:	08007029 	.word	0x08007029
 8006b88:	0800705d 	.word	0x0800705d
 8006b8c:	200001a9 	.word	0x200001a9
 8006b90:	0800706d 	.word	0x0800706d
 8006b94:	200001aa 	.word	0x200001aa
 8006b98:	200001ac 	.word	0x200001ac
 8006b9c:	200001ae 	.word	0x200001ae

08006ba0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006ba8:	2342      	movs	r3, #66	; 0x42
 8006baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bba:	d024      	beq.n	8006c06 <SVCCTL_App_Notification+0x66>
 8006bbc:	2bff      	cmp	r3, #255	; 0xff
 8006bbe:	d070      	beq.n	8006ca2 <SVCCTL_App_Notification+0x102>
 8006bc0:	2b05      	cmp	r3, #5
 8006bc2:	d000      	beq.n	8006bc6 <SVCCTL_App_Notification+0x26>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8006bc4:	e080      	b.n	8006cc8 <SVCCTL_App_Notification+0x128>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	3302      	adds	r3, #2
 8006bca:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	4b3f      	ldr	r3, [pc, #252]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d106      	bne.n	8006bea <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8006bdc:	4b3d      	ldr	r3, [pc, #244]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006be2:	4b3c      	ldr	r3, [pc, #240]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 8006bea:	2001      	movs	r0, #1
 8006bec:	f000 f966 	bl	8006ebc <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8006bf0:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <SVCCTL_App_Notification+0x138>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006bf6:	4b37      	ldr	r3, [pc, #220]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006bf8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8006bfa:	4b37      	ldr	r3, [pc, #220]	; (8006cd8 <SVCCTL_App_Notification+0x138>)
 8006bfc:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8006bfe:	4836      	ldr	r0, [pc, #216]	; (8006cd8 <SVCCTL_App_Notification+0x138>)
 8006c00:	f000 faac 	bl	800715c <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8006c04:	e060      	b.n	8006cc8 <SVCCTL_App_Notification+0x128>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	3302      	adds	r3, #2
 8006c0a:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d042      	beq.n	8006c9a <SVCCTL_App_Notification+0xfa>
 8006c14:	2b0c      	cmp	r3, #12
 8006c16:	d002      	beq.n	8006c1e <SVCCTL_App_Notification+0x7e>
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d016      	beq.n	8006c4a <SVCCTL_App_Notification+0xaa>
          break;
 8006c1c:	e040      	b.n	8006ca0 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	3301      	adds	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8006c24:	4b2b      	ldr	r3, [pc, #172]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c28:	f107 020a 	add.w	r2, r7, #10
 8006c2c:	f107 010b 	add.w	r1, r7, #11
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe fe0f 	bl	8005854 <hci_le_read_phy>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8006c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d12c      	bne.n	8006c9e <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	2b02      	cmp	r3, #2
          break;
 8006c48:	e029      	b.n	8006c9e <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8006c50:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006c52:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fa f8fc 	bl	8000e54 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006c5e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d104      	bne.n	8006c70 <SVCCTL_App_Notification+0xd0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8006c66:	4b1b      	ldr	r3, [pc, #108]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006c68:	2206      	movs	r2, #6
 8006c6a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8006c6e:	e003      	b.n	8006c78 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8006c70:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006c72:	2205      	movs	r2, #5
 8006c74:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006c82:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8006c84:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <SVCCTL_App_Notification+0x138>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <SVCCTL_App_Notification+0x134>)
 8006c8c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8006c8e:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <SVCCTL_App_Notification+0x138>)
 8006c90:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8006c92:	4811      	ldr	r0, [pc, #68]	; (8006cd8 <SVCCTL_App_Notification+0x138>)
 8006c94:	f000 fa62 	bl	800715c <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8006c98:	e002      	b.n	8006ca0 <SVCCTL_App_Notification+0x100>
          break;
 8006c9a:	bf00      	nop
 8006c9c:	e014      	b.n	8006cc8 <SVCCTL_App_Notification+0x128>
          break;
 8006c9e:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8006ca0:	e012      	b.n	8006cc8 <SVCCTL_App_Notification+0x128>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f240 4207 	movw	r2, #1031	; 0x407
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d004      	beq.n	8006cc0 <SVCCTL_App_Notification+0x120>
 8006cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cba:	d003      	beq.n	8006cc4 <SVCCTL_App_Notification+0x124>
 8006cbc:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 8006cbe:	e002      	b.n	8006cc6 <SVCCTL_App_Notification+0x126>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8006cc0:	bf00      	nop
 8006cc2:	e000      	b.n	8006cc6 <SVCCTL_App_Notification+0x126>
      break;
 8006cc4:	bf00      	nop
      break; /* EVT_VENDOR */
 8006cc6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006cc8:	2301      	movs	r3, #1
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3728      	adds	r7, #40	; 0x28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000118 	.word	0x20000118
 8006cd8:	20000474 	.word	0x20000474

08006cdc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <Ble_Tl_Init+0x20>)
 8006ce4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8006ce6:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <Ble_Tl_Init+0x24>)
 8006ce8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006cea:	463b      	mov	r3, r7
 8006cec:	4619      	mov	r1, r3
 8006cee:	4805      	ldr	r0, [pc, #20]	; (8006d04 <Ble_Tl_Init+0x28>)
 8006cf0:	f7ff f8da 	bl	8005ea8 <hci_init>

  return;
 8006cf4:	bf00      	nop
}
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	200300d4 	.word	0x200300d4
 8006d00:	080070f7 	.word	0x080070f7
 8006d04:	080070bf 	.word	0x080070bf

08006d08 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8006d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0a:	b091      	sub	sp, #68	; 0x44
 8006d0c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8006d0e:	2300      	movs	r3, #0
 8006d10:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8006d12:	f7fe fd7b 	bl	800580c <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8006d16:	f000 f943 	bl	8006fa0 <BleGetBdAddress>
 8006d1a:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8006d1c:	6a3a      	ldr	r2, [r7, #32]
 8006d1e:	2106      	movs	r1, #6
 8006d20:	2000      	movs	r0, #0
 8006d22:	f7fe fc69 	bl	80055f8 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	795a      	ldrb	r2, [r3, #5]
 8006d2a:	4b5e      	ldr	r3, [pc, #376]	; (8006ea4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8006d2c:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	791a      	ldrb	r2, [r3, #4]
 8006d32:	4b5c      	ldr	r3, [pc, #368]	; (8006ea4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8006d34:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	78da      	ldrb	r2, [r3, #3]
 8006d3a:	4b5a      	ldr	r3, [pc, #360]	; (8006ea4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8006d3c:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	789a      	ldrb	r2, [r3, #2]
 8006d42:	4b58      	ldr	r3, [pc, #352]	; (8006ea4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8006d44:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	785a      	ldrb	r2, [r3, #1]
 8006d4a:	4b56      	ldr	r3, [pc, #344]	; (8006ea4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8006d4c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	4b54      	ldr	r3, [pc, #336]	; (8006ea4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8006d54:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8006d56:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8006d5a:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8006d5c:	f7ff fe94 	bl	8006a88 <LL_FLASH_GetUDN>
 8006d60:	4603      	mov	r3, r0
 8006d62:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8006d64:	f107 0308 	add.w	r3, r7, #8
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2106      	movs	r1, #6
 8006d6c:	202e      	movs	r0, #46	; 0x2e
 8006d6e:	f7fe fc43 	bl	80055f8 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8006d72:	4a4d      	ldr	r2, [pc, #308]	; (8006ea8 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8006d74:	2110      	movs	r1, #16
 8006d76:	2018      	movs	r0, #24
 8006d78:	f7fe fc3e 	bl	80055f8 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8006d7c:	4a4b      	ldr	r2, [pc, #300]	; (8006eac <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 8006d7e:	2110      	movs	r1, #16
 8006d80:	2008      	movs	r0, #8
 8006d82:	f7fe fc39 	bl	80055f8 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006d86:	2118      	movs	r1, #24
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f7fe fc9e 	bl	80056ca <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8006d8e:	f7fe f9ee 	bl	800516e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8006d96:	7ffb      	ldrb	r3, [r7, #31]
 8006d98:	f043 0301 	orr.w	r3, r3, #1
 8006d9c:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8006d9e:	7ffb      	ldrb	r3, [r7, #31]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01e      	beq.n	8006de2 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "check1";
 8006da4:	4b42      	ldr	r3, [pc, #264]	; (8006eb0 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8006da6:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8006da8:	f107 0216 	add.w	r2, r7, #22
 8006dac:	7ff8      	ldrb	r0, [r7, #31]
 8006dae:	f107 0312 	add.w	r3, r7, #18
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f107 0314 	add.w	r3, r7, #20
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	f7fe f8ca 	bl	8004f58 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8006dc4:	8afc      	ldrh	r4, [r7, #22]
 8006dc6:	8abd      	ldrh	r5, [r7, #20]
 8006dc8:	69b8      	ldr	r0, [r7, #24]
 8006dca:	f7f9 f9d7 	bl	800017c <strlen>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7fe fb84 	bl	80054ea <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8006de2:	8af8      	ldrh	r0, [r7, #22]
 8006de4:	8a79      	ldrh	r1, [r7, #18]
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	2302      	movs	r3, #2
 8006dec:	2200      	movs	r2, #0
 8006dee:	f7fe fb7c 	bl	80054ea <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8006df2:	2202      	movs	r2, #2
 8006df4:	2102      	movs	r1, #2
 8006df6:	2000      	movs	r0, #0
 8006df8:	f7fe fd94 	bl	8005924 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8006dfc:	4b2d      	ldr	r3, [pc, #180]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8006e02:	4b2c      	ldr	r3, [pc, #176]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fd ffb4 	bl	8004d74 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8006e0c:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8006e12:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8006e18:	4b26      	ldr	r3, [pc, #152]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e1a:	2208      	movs	r2, #8
 8006e1c:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8006e1e:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e20:	2210      	movs	r2, #16
 8006e22:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006e24:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8006e2a:	4b22      	ldr	r3, [pc, #136]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e2c:	4a22      	ldr	r2, [pc, #136]	; (8006eb8 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8006e2e:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8006e30:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e3c:	e00b      	b.n	8006e56 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8006e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e42:	4a1c      	ldr	r2, [pc, #112]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e44:	4413      	add	r3, r2
 8006e46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e4a:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8006e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e50:	3301      	adds	r3, #1
 8006e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e5a:	2b0f      	cmp	r3, #15
 8006e5c:	d9ef      	bls.n	8006e3e <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8006e5e:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e60:	789d      	ldrb	r5, [r3, #2]
 8006e62:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e64:	785e      	ldrb	r6, [r3, #1]
 8006e66:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e68:	7d5b      	ldrb	r3, [r3, #21]
 8006e6a:	4a12      	ldr	r2, [pc, #72]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e6c:	7d92      	ldrb	r2, [r2, #22]
 8006e6e:	4911      	ldr	r1, [pc, #68]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e70:	7d09      	ldrb	r1, [r1, #20]
 8006e72:	4810      	ldr	r0, [pc, #64]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e74:	6980      	ldr	r0, [r0, #24]
 8006e76:	2400      	movs	r4, #0
 8006e78:	9404      	str	r4, [sp, #16]
 8006e7a:	9003      	str	r0, [sp, #12]
 8006e7c:	9102      	str	r1, [sp, #8]
 8006e7e:	9201      	str	r2, [sp, #4]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	2300      	movs	r3, #0
 8006e84:	2201      	movs	r2, #1
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f7fd ffbd 	bl	8004e08 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006e90:	789b      	ldrb	r3, [r3, #2]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 8006e96:	f7fe f946 	bl	8005126 <aci_gap_configure_whitelist>
   }
}
 8006e9a:	bf00      	nop
 8006e9c:	372c      	adds	r7, #44	; 0x2c
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000010 	.word	0x20000010
 8006ea8:	08007e08 	.word	0x08007e08
 8006eac:	08007e18 	.word	0x08007e18
 8006eb0:	08007c18 	.word	0x08007c18
 8006eb4:	20000118 	.word	0x20000118
 8006eb8:	0001b207 	.word	0x0001b207

08006ebc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08c      	sub	sp, #48	; 0x30
 8006ec0:	af08      	add	r7, sp, #32
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006ec6:	2342      	movs	r3, #66	; 0x42
 8006ec8:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d106      	bne.n	8006ede <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8006ed0:	4b2c      	ldr	r3, [pc, #176]	; (8006f84 <Adv_Request+0xc8>)
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8006ed6:	4b2c      	ldr	r3, [pc, #176]	; (8006f88 <Adv_Request+0xcc>)
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	81bb      	strh	r3, [r7, #12]
 8006edc:	e005      	b.n	8006eea <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8006ede:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8006ee2:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8006ee4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006ee8:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8006eea:	4b28      	ldr	r3, [pc, #160]	; (8006f8c <Adv_Request+0xd0>)
 8006eec:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7f9 ffaf 	bl	8000e54 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d10d      	bne.n	8006f18 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8006efc:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <Adv_Request+0xd0>)
 8006efe:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d004      	beq.n	8006f10 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8006f06:	4b21      	ldr	r3, [pc, #132]	; (8006f8c <Adv_Request+0xd0>)
 8006f08:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d103      	bne.n	8006f18 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8006f10:	f7fd fe2e 	bl	8004b70 <aci_gap_set_non_discoverable>
 8006f14:	4603      	mov	r3, r0
 8006f16:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8006f18:	4a1c      	ldr	r2, [pc, #112]	; (8006f8c <Adv_Request+0xd0>)
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <Adv_Request+0xd0>)
 8006f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f26:	89b8      	ldrh	r0, [r7, #12]
 8006f28:	89f9      	ldrh	r1, [r7, #14]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	9206      	str	r2, [sp, #24]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	9205      	str	r2, [sp, #20]
 8006f32:	4a17      	ldr	r2, [pc, #92]	; (8006f90 <Adv_Request+0xd4>)
 8006f34:	9204      	str	r2, [sp, #16]
 8006f36:	9303      	str	r3, [sp, #12]
 8006f38:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <Adv_Request+0xd8>)
 8006f3a:	9302      	str	r3, [sp, #8]
 8006f3c:	2307      	movs	r3, #7
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	2300      	movs	r3, #0
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	2300      	movs	r3, #0
 8006f46:	4602      	mov	r2, r0
 8006f48:	2000      	movs	r0, #0
 8006f4a:	f7fd fe35 	bl	8004bb8 <aci_gap_set_discoverable>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8006f52:	4911      	ldr	r1, [pc, #68]	; (8006f98 <Adv_Request+0xdc>)
 8006f54:	200e      	movs	r0, #14
 8006f56:	f7fe f88a 	bl	800506e <aci_gap_update_adv_data>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d107      	bne.n	8006f7a <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <Adv_Request+0xd0>)
 8006f6c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8006f70:	490a      	ldr	r1, [pc, #40]	; (8006f9c <Adv_Request+0xe0>)
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7f9 fff8 	bl	8000f68 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
}
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	200001ac 	.word	0x200001ac
 8006f88:	200001ae 	.word	0x200001ae
 8006f8c:	20000118 	.word	0x20000118
 8006f90:	20000141 	.word	0x20000141
 8006f94:	08007e28 	.word	0x08007e28
 8006f98:	20000010 	.word	0x20000010
 8006f9c:	0001e046 	.word	0x0001e046

08006fa0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8006fa6:	f7ff fd6f 	bl	8006a88 <LL_FLASH_GetUDN>
 8006faa:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fb2:	d023      	beq.n	8006ffc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006fb4:	f7ff fd80 	bl	8006ab8 <LL_FLASH_GetSTCompanyID>
 8006fb8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8006fba:	f7ff fd71 	bl	8006aa0 <LL_FLASH_GetDeviceID>
 8006fbe:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	4b16      	ldr	r3, [pc, #88]	; (8007020 <BleGetBdAddress+0x80>)
 8006fc6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	4b14      	ldr	r3, [pc, #80]	; (8007020 <BleGetBdAddress+0x80>)
 8006fd0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	4b11      	ldr	r3, [pc, #68]	; (8007020 <BleGetBdAddress+0x80>)
 8006fda:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <BleGetBdAddress+0x80>)
 8006fe2:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	4b0d      	ldr	r3, [pc, #52]	; (8007020 <BleGetBdAddress+0x80>)
 8006fea:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <BleGetBdAddress+0x80>)
 8006ff4:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <BleGetBdAddress+0x80>)
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	e00b      	b.n	8007014 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	f7ff fc67 	bl	80068d0 <OTP_Read>
 8007002:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e001      	b.n	8007014 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <BleGetBdAddress+0x84>)
 8007012:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8007014:	697b      	ldr	r3, [r7, #20]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000244 	.word	0x20000244
 8007024:	08007e00 	.word	0x08007e00

08007028 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800702e:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <Adv_Cancel+0x30>)
 8007030:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007034:	2b05      	cmp	r3, #5
 8007036:	d00a      	beq.n	800704e <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8007038:	2300      	movs	r3, #0
 800703a:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800703c:	f7fd fd98 	bl	8004b70 <aci_gap_set_non_discoverable>
 8007040:	4603      	mov	r3, r0
 8007042:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <Adv_Cancel+0x30>)
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800704c:	bf00      	nop
 800704e:	bf00      	nop
}
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000118 	.word	0x20000118

0800705c <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8007060:	2100      	movs	r1, #0
 8007062:	2001      	movs	r0, #1
 8007064:	f000 fc48 	bl	80078f8 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8007068:	bf00      	nop
}
 800706a:	bd80      	pop	{r7, pc}

0800706c <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 8007070:	bf00      	nop
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007082:	2100      	movs	r1, #0
 8007084:	2004      	movs	r0, #4
 8007086:	f000 fc37 	bl	80078f8 <UTIL_SEQ_SetTask>
  return;
 800708a:	bf00      	nop
}
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800709a:	2001      	movs	r0, #1
 800709c:	f000 fc92 	bl	80079c4 <UTIL_SEQ_SetEvt>
  return;
 80070a0:	bf00      	nop
}
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80070b0:	2001      	movs	r0, #1
 80070b2:	f000 fca5 	bl	8007a00 <UTIL_SEQ_WaitEvt>
  return;
 80070b6:	bf00      	nop
}
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	3308      	adds	r3, #8
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fe69 	bl	8005da8 <SVCCTL_UserEvtRx>
 80070d6:	4603      	mov	r3, r0
 80070d8:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 80070e6:	e002      	b.n	80070ee <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	4603      	mov	r3, r0
 80070fe:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <BLE_StatusNot+0x16>
 8007106:	2b01      	cmp	r3, #1
 8007108:	d006      	beq.n	8007118 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800710a:	e00b      	b.n	8007124 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800710c:	2307      	movs	r3, #7
 800710e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fc1b 	bl	800794c <UTIL_SEQ_PauseTask>
      break;
 8007116:	e005      	b.n	8007124 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007118:	2307      	movs	r3, #7
 800711a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fc33 	bl	8007988 <UTIL_SEQ_ResumeTask>
      break;
 8007122:	bf00      	nop
  }
  return;
 8007124:	bf00      	nop
}
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d004      	beq.n	8007146 <P2PS_STM_App_Notification+0x1a>
 800713c:	2b03      	cmp	r3, #3
 800713e:	d004      	beq.n	800714a <P2PS_STM_App_Notification+0x1e>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d004      	beq.n	800714e <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8007144:	e004      	b.n	8007150 <P2PS_STM_App_Notification+0x24>
      break;
 8007146:	bf00      	nop
 8007148:	e002      	b.n	8007150 <P2PS_STM_App_Notification+0x24>
      break;
 800714a:	bf00      	nop
 800714c:	e000      	b.n	8007150 <P2PS_STM_App_Notification+0x24>
      break;
 800714e:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8007150:	bf00      	nop
}
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <P2PS_APP_Notification+0x16>
 800716c:	2b01      	cmp	r3, #1
 800716e:	d002      	beq.n	8007176 <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8007170:	e002      	b.n	8007178 <P2PS_APP_Notification+0x1c>
    break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <P2PS_APP_Notification+0x1c>
    break;
 8007176:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8007178:	bf00      	nop
}
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8007188:	bf00      	nop
}
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <LL_PWR_EnableBootC2>:
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <LL_PWR_EnableBootC2+0x1c>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a04      	ldr	r2, [pc, #16]	; (80071b0 <LL_PWR_EnableBootC2+0x1c>)
 800719e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a2:	60d3      	str	r3, [r2, #12]
}
 80071a4:	bf00      	nop
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	58000400 	.word	0x58000400

080071b4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80071bc:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80071be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80071c2:	4905      	ldr	r1, [pc, #20]	; (80071d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	58000800 	.word	0x58000800

080071dc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80071e6:	6a1a      	ldr	r2, [r3, #32]
 80071e8:	4904      	ldr	r1, [pc, #16]	; (80071fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	620b      	str	r3, [r1, #32]
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	58000800 	.word	0x58000800

08007200 <LL_AHB3_GRP1_EnableClock>:
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800720c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800720e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4313      	orrs	r3, r2
 8007216:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4013      	ands	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007224:	68fb      	ldr	r3, [r7, #12]
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f043 0201 	orr.w	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	43db      	mvns	r3, r3
 8007286:	401a      	ands	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	605a      	str	r2, [r3, #4]
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	605a      	str	r2, [r3, #4]
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	43db      	mvns	r3, r3
 80072ce:	401a      	ands	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	609a      	str	r2, [r3, #8]
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	041a      	lsls	r2, r3, #16
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	609a      	str	r2, [r3, #8]
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	4013      	ands	r3, r2
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d101      	bne.n	8007336 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69da      	ldr	r2, [r3, #28]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	4013      	ands	r3, r2
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d101      	bne.n	8007360 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007374:	2102      	movs	r1, #2
 8007376:	4819      	ldr	r0, [pc, #100]	; (80073dc <HW_IPCC_Rx_Handler+0x6c>)
 8007378:	f7ff ffe4 	bl	8007344 <LL_C2_IPCC_IsActiveFlag_CHx>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <HW_IPCC_Rx_Handler+0x26>
 8007382:	4b16      	ldr	r3, [pc, #88]	; (80073dc <HW_IPCC_Rx_Handler+0x6c>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	43db      	mvns	r3, r3
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8007390:	f000 f8e6 	bl	8007560 <HW_IPCC_SYS_EvtHandler>
 8007394:	e01f      	b.n	80073d6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007396:	2101      	movs	r1, #1
 8007398:	4810      	ldr	r0, [pc, #64]	; (80073dc <HW_IPCC_Rx_Handler+0x6c>)
 800739a:	f7ff ffd3 	bl	8007344 <LL_C2_IPCC_IsActiveFlag_CHx>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <HW_IPCC_Rx_Handler+0x46>
 80073a4:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <HW_IPCC_Rx_Handler+0x6c>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80073b0:	f000 f89a 	bl	80074e8 <HW_IPCC_BLE_EvtHandler>
 80073b4:	e00f      	b.n	80073d6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80073b6:	2108      	movs	r1, #8
 80073b8:	4808      	ldr	r0, [pc, #32]	; (80073dc <HW_IPCC_Rx_Handler+0x6c>)
 80073ba:	f7ff ffc3 	bl	8007344 <LL_C2_IPCC_IsActiveFlag_CHx>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <HW_IPCC_Rx_Handler+0x68>
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <HW_IPCC_Rx_Handler+0x6c>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	43db      	mvns	r3, r3
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80073d2:	f000 f911 	bl	80075f8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
}
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58000c00 	.word	0x58000c00

080073e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80073e4:	2102      	movs	r1, #2
 80073e6:	4822      	ldr	r0, [pc, #136]	; (8007470 <HW_IPCC_Tx_Handler+0x90>)
 80073e8:	f7ff ff97 	bl	800731a <LL_C1_IPCC_IsActiveFlag_CHx>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d109      	bne.n	8007406 <HW_IPCC_Tx_Handler+0x26>
 80073f2:	4b1f      	ldr	r3, [pc, #124]	; (8007470 <HW_IPCC_Tx_Handler+0x90>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	43db      	mvns	r3, r3
 80073f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007400:	f000 f8a2 	bl	8007548 <HW_IPCC_SYS_CmdEvtHandler>
 8007404:	e031      	b.n	800746a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007406:	2102      	movs	r1, #2
 8007408:	4819      	ldr	r0, [pc, #100]	; (8007470 <HW_IPCC_Tx_Handler+0x90>)
 800740a:	f7ff ff86 	bl	800731a <LL_C1_IPCC_IsActiveFlag_CHx>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d109      	bne.n	8007428 <HW_IPCC_Tx_Handler+0x48>
 8007414:	4b16      	ldr	r3, [pc, #88]	; (8007470 <HW_IPCC_Tx_Handler+0x90>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	43db      	mvns	r3, r3
 800741a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007422:	f000 f891 	bl	8007548 <HW_IPCC_SYS_CmdEvtHandler>
 8007426:	e020      	b.n	800746a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007428:	2108      	movs	r1, #8
 800742a:	4811      	ldr	r0, [pc, #68]	; (8007470 <HW_IPCC_Tx_Handler+0x90>)
 800742c:	f7ff ff75 	bl	800731a <LL_C1_IPCC_IsActiveFlag_CHx>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <HW_IPCC_Tx_Handler+0x6a>
 8007436:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <HW_IPCC_Tx_Handler+0x90>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	43db      	mvns	r3, r3
 800743c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8007444:	f000 f8ba 	bl	80075bc <HW_IPCC_MM_FreeBufHandler>
 8007448:	e00f      	b.n	800746a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800744a:	2120      	movs	r1, #32
 800744c:	4808      	ldr	r0, [pc, #32]	; (8007470 <HW_IPCC_Tx_Handler+0x90>)
 800744e:	f7ff ff64 	bl	800731a <LL_C1_IPCC_IsActiveFlag_CHx>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <HW_IPCC_Tx_Handler+0x8c>
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <HW_IPCC_Tx_Handler+0x90>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	43db      	mvns	r3, r3
 800745e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007466:	f000 f84b 	bl	8007500 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800746a:	bf00      	nop
 800746c:	bf00      	nop
}
 800746e:	bd80      	pop	{r7, pc}
 8007470:	58000c00 	.word	0x58000c00

08007474 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007478:	f44f 7000 	mov.w	r0, #512	; 0x200
 800747c:	f7ff fe9a 	bl	80071b4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007480:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007484:	f7ff feaa 	bl	80071dc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007488:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800748a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800748c:	f7ff fe82 	bl	8007194 <LL_PWR_EnableBootC2>

  return;
 8007490:	bf00      	nop
}
 8007492:	bd80      	pop	{r7, pc}

08007494 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007498:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800749c:	f7ff feb0 	bl	8007200 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80074a0:	4806      	ldr	r0, [pc, #24]	; (80074bc <HW_IPCC_Init+0x28>)
 80074a2:	f7ff fed6 	bl	8007252 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80074a6:	4805      	ldr	r0, [pc, #20]	; (80074bc <HW_IPCC_Init+0x28>)
 80074a8:	f7ff fec3 	bl	8007232 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80074ac:	202c      	movs	r0, #44	; 0x2c
 80074ae:	f7fa fcf4 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80074b2:	202d      	movs	r0, #45	; 0x2d
 80074b4:	f7fa fcf1 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  return;
 80074b8:	bf00      	nop
}
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	58000c00 	.word	0x58000c00

080074c0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80074c4:	2101      	movs	r1, #1
 80074c6:	4802      	ldr	r0, [pc, #8]	; (80074d0 <HW_IPCC_BLE_Init+0x10>)
 80074c8:	f7ff fef8 	bl	80072bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80074cc:	bf00      	nop
}
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	58000c00 	.word	0x58000c00

080074d4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80074d8:	2101      	movs	r1, #1
 80074da:	4802      	ldr	r0, [pc, #8]	; (80074e4 <HW_IPCC_BLE_SendCmd+0x10>)
 80074dc:	f7ff ff0e 	bl	80072fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80074e0:	bf00      	nop
}
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	58000c00 	.word	0x58000c00

080074e8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80074ec:	f7ff f8a0 	bl	8006630 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80074f0:	2101      	movs	r1, #1
 80074f2:	4802      	ldr	r0, [pc, #8]	; (80074fc <HW_IPCC_BLE_EvtHandler+0x14>)
 80074f4:	f7ff fef4 	bl	80072e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80074f8:	bf00      	nop
}
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	58000c00 	.word	0x58000c00

08007500 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007504:	2120      	movs	r1, #32
 8007506:	4803      	ldr	r0, [pc, #12]	; (8007514 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007508:	f7ff fec6 	bl	8007298 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800750c:	f7ff f8ac 	bl	8006668 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007510:	bf00      	nop
}
 8007512:	bd80      	pop	{r7, pc}
 8007514:	58000c00 	.word	0x58000c00

08007518 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800751c:	2102      	movs	r1, #2
 800751e:	4802      	ldr	r0, [pc, #8]	; (8007528 <HW_IPCC_SYS_Init+0x10>)
 8007520:	f7ff fecc 	bl	80072bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007524:	bf00      	nop
}
 8007526:	bd80      	pop	{r7, pc}
 8007528:	58000c00 	.word	0x58000c00

0800752c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007530:	2102      	movs	r1, #2
 8007532:	4804      	ldr	r0, [pc, #16]	; (8007544 <HW_IPCC_SYS_SendCmd+0x18>)
 8007534:	f7ff fee2 	bl	80072fc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007538:	2102      	movs	r1, #2
 800753a:	4802      	ldr	r0, [pc, #8]	; (8007544 <HW_IPCC_SYS_SendCmd+0x18>)
 800753c:	f7ff fe99 	bl	8007272 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007540:	bf00      	nop
}
 8007542:	bd80      	pop	{r7, pc}
 8007544:	58000c00 	.word	0x58000c00

08007548 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800754c:	2102      	movs	r1, #2
 800754e:	4803      	ldr	r0, [pc, #12]	; (800755c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007550:	f7ff fea2 	bl	8007298 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007554:	f7ff f8d0 	bl	80066f8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007558:	bf00      	nop
}
 800755a:	bd80      	pop	{r7, pc}
 800755c:	58000c00 	.word	0x58000c00

08007560 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007564:	f7ff f8d8 	bl	8006718 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007568:	2102      	movs	r1, #2
 800756a:	4802      	ldr	r0, [pc, #8]	; (8007574 <HW_IPCC_SYS_EvtHandler+0x14>)
 800756c:	f7ff feb8 	bl	80072e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007570:	bf00      	nop
}
 8007572:	bd80      	pop	{r7, pc}
 8007574:	58000c00 	.word	0x58000c00

08007578 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007580:	2108      	movs	r1, #8
 8007582:	480c      	ldr	r0, [pc, #48]	; (80075b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007584:	f7ff fec9 	bl	800731a <LL_C1_IPCC_IsActiveFlag_CHx>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800758e:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007594:	2108      	movs	r1, #8
 8007596:	4807      	ldr	r0, [pc, #28]	; (80075b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007598:	f7ff fe6b 	bl	8007272 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800759c:	e006      	b.n	80075ac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80075a2:	2108      	movs	r1, #8
 80075a4:	4803      	ldr	r0, [pc, #12]	; (80075b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80075a6:	f7ff fea9 	bl	80072fc <LL_C1_IPCC_SetFlag_CHx>
  return;
 80075aa:	bf00      	nop
}
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	58000c00 	.word	0x58000c00
 80075b8:	2000024c 	.word	0x2000024c

080075bc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80075c0:	2108      	movs	r1, #8
 80075c2:	4806      	ldr	r0, [pc, #24]	; (80075dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80075c4:	f7ff fe68 	bl	8007298 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80075ce:	2108      	movs	r1, #8
 80075d0:	4802      	ldr	r0, [pc, #8]	; (80075dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80075d2:	f7ff fe93 	bl	80072fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80075d6:	bf00      	nop
}
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	58000c00 	.word	0x58000c00
 80075e0:	2000024c 	.word	0x2000024c

080075e4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80075e8:	2108      	movs	r1, #8
 80075ea:	4802      	ldr	r0, [pc, #8]	; (80075f4 <HW_IPCC_TRACES_Init+0x10>)
 80075ec:	f7ff fe66 	bl	80072bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80075f0:	bf00      	nop
}
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	58000c00 	.word	0x58000c00

080075f8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80075fc:	f7ff f944 	bl	8006888 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007600:	2108      	movs	r1, #8
 8007602:	4802      	ldr	r0, [pc, #8]	; (800760c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007604:	f7ff fe6c 	bl	80072e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007608:	bf00      	nop
}
 800760a:	bd80      	pop	{r7, pc}
 800760c:	58000c00 	.word	0x58000c00

08007610 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <UTIL_LPM_Init+0x1c>)
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <UTIL_LPM_Init+0x20>)
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007620:	bf00      	nop
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000250 	.word	0x20000250
 8007630:	20000254 	.word	0x20000254

08007634 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007640:	f3ef 8310 	mrs	r3, PRIMASK
 8007644:	613b      	str	r3, [r7, #16]
  return(result);
 8007646:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8007648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800764a:	b672      	cpsid	i
  
  switch(state)
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d009      	beq.n	8007666 <UTIL_LPM_SetOffMode+0x32>
 8007652:	2b01      	cmp	r3, #1
 8007654:	d000      	beq.n	8007658 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8007656:	e00e      	b.n	8007676 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <UTIL_LPM_SetOffMode+0x58>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4313      	orrs	r3, r2
 8007660:	4a0a      	ldr	r2, [pc, #40]	; (800768c <UTIL_LPM_SetOffMode+0x58>)
 8007662:	6013      	str	r3, [r2, #0]
      break;
 8007664:	e007      	b.n	8007676 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	43da      	mvns	r2, r3
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <UTIL_LPM_SetOffMode+0x58>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4013      	ands	r3, r2
 8007670:	4a06      	ldr	r2, [pc, #24]	; (800768c <UTIL_LPM_SetOffMode+0x58>)
 8007672:	6013      	str	r3, [r2, #0]
      break;
 8007674:	bf00      	nop
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	20000254 	.word	0x20000254

08007690 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007696:	f3ef 8310 	mrs	r3, PRIMASK
 800769a:	60bb      	str	r3, [r7, #8]
  return(result);
 800769c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800769e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80076a0:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <UTIL_LPM_EnterLowPower+0x5c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d006      	beq.n	80076b8 <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80076aa:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <UTIL_LPM_EnterLowPower+0x60>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80076b0:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <UTIL_LPM_EnterLowPower+0x60>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	4798      	blx	r3
 80076b6:	e010      	b.n	80076da <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80076b8:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <UTIL_LPM_EnterLowPower+0x64>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 80076c0:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <UTIL_LPM_EnterLowPower+0x60>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <UTIL_LPM_EnterLowPower+0x60>)
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	4798      	blx	r3
 80076cc:	e005      	b.n	80076da <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 80076ce:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <UTIL_LPM_EnterLowPower+0x60>)
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80076d4:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <UTIL_LPM_EnterLowPower+0x60>)
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	4798      	blx	r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000250 	.word	0x20000250
 80076f0:	08007d30 	.word	0x08007d30
 80076f4:	20000254 	.word	0x20000254

080076f8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08c      	sub	sp, #48	; 0x30
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007700:	4b65      	ldr	r3, [pc, #404]	; (8007898 <UTIL_SEQ_Run+0x1a0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8007706:	4b64      	ldr	r3, [pc, #400]	; (8007898 <UTIL_SEQ_Run+0x1a0>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4013      	ands	r3, r2
 800770e:	4a62      	ldr	r2, [pc, #392]	; (8007898 <UTIL_SEQ_Run+0x1a0>)
 8007710:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8007712:	e081      	b.n	8007818 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007718:	e002      	b.n	8007720 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	3301      	adds	r3, #1
 800771e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007720:	4a5e      	ldr	r2, [pc, #376]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007728:	4b5d      	ldr	r3, [pc, #372]	; (80078a0 <UTIL_SEQ_Run+0x1a8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	401a      	ands	r2, r3
 800772e:	4b5a      	ldr	r3, [pc, #360]	; (8007898 <UTIL_SEQ_Run+0x1a0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4013      	ands	r3, r2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f0      	beq.n	800771a <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8007738:	4a58      	ldr	r2, [pc, #352]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007740:	4b57      	ldr	r3, [pc, #348]	; (80078a0 <UTIL_SEQ_Run+0x1a8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	401a      	ands	r2, r3
 8007746:	4b54      	ldr	r3, [pc, #336]	; (8007898 <UTIL_SEQ_Run+0x1a0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4013      	ands	r3, r2
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800774e:	4a53      	ldr	r2, [pc, #332]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007760:	4a4e      	ldr	r2, [pc, #312]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4413      	add	r3, r2
 8007768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800776c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800776e:	4a4b      	ldr	r2, [pc, #300]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	4413      	add	r3, r2
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	4013      	ands	r3, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f000 f98f 	bl	8007aa0 <SEQ_BitPosition>
 8007782:	4603      	mov	r3, r0
 8007784:	461a      	mov	r2, r3
 8007786:	4b47      	ldr	r3, [pc, #284]	; (80078a4 <UTIL_SEQ_Run+0x1ac>)
 8007788:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800778a:	4a44      	ldr	r2, [pc, #272]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	4413      	add	r3, r2
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	4b43      	ldr	r3, [pc, #268]	; (80078a4 <UTIL_SEQ_Run+0x1ac>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2101      	movs	r1, #1
 800779a:	fa01 f303 	lsl.w	r3, r1, r3
 800779e:	43db      	mvns	r3, r3
 80077a0:	401a      	ands	r2, r3
 80077a2:	493e      	ldr	r1, [pc, #248]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	440b      	add	r3, r1
 80077aa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ac:	f3ef 8310 	mrs	r3, PRIMASK
 80077b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80077b2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80077b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80077b6:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80077b8:	4b3a      	ldr	r3, [pc, #232]	; (80078a4 <UTIL_SEQ_Run+0x1ac>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2201      	movs	r2, #1
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	43da      	mvns	r2, r3
 80077c4:	4b38      	ldr	r3, [pc, #224]	; (80078a8 <UTIL_SEQ_Run+0x1b0>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4013      	ands	r3, r2
 80077ca:	4a37      	ldr	r2, [pc, #220]	; (80078a8 <UTIL_SEQ_Run+0x1b0>)
 80077cc:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80077ce:	2302      	movs	r3, #2
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d2:	e013      	b.n	80077fc <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4a30      	ldr	r2, [pc, #192]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 80077da:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80077de:	4b31      	ldr	r3, [pc, #196]	; (80078a4 <UTIL_SEQ_Run+0x1ac>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2201      	movs	r2, #1
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	43da      	mvns	r2, r3
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	3b01      	subs	r3, #1
 80077ee:	400a      	ands	r2, r1
 80077f0:	492a      	ldr	r1, [pc, #168]	; (800789c <UTIL_SEQ_Run+0x1a4>)
 80077f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	3b01      	subs	r3, #1
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e8      	bne.n	80077d4 <UTIL_SEQ_Run+0xdc>
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800780c:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <UTIL_SEQ_Run+0x1ac>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a26      	ldr	r2, [pc, #152]	; (80078ac <UTIL_SEQ_Run+0x1b4>)
 8007812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007816:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8007818:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <UTIL_SEQ_Run+0x1b0>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	4b20      	ldr	r3, [pc, #128]	; (80078a0 <UTIL_SEQ_Run+0x1a8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	401a      	ands	r2, r3
 8007822:	4b1d      	ldr	r3, [pc, #116]	; (8007898 <UTIL_SEQ_Run+0x1a0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d007      	beq.n	800783c <UTIL_SEQ_Run+0x144>
 800782c:	4b20      	ldr	r3, [pc, #128]	; (80078b0 <UTIL_SEQ_Run+0x1b8>)
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	4b20      	ldr	r3, [pc, #128]	; (80078b4 <UTIL_SEQ_Run+0x1bc>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4013      	ands	r3, r2
 8007836:	2b00      	cmp	r3, #0
 8007838:	f43f af6c 	beq.w	8007714 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800783c:	4b19      	ldr	r3, [pc, #100]	; (80078a4 <UTIL_SEQ_Run+0x1ac>)
 800783e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007842:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8007844:	f000 f91e 	bl	8007a84 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007848:	f3ef 8310 	mrs	r3, PRIMASK
 800784c:	613b      	str	r3, [r7, #16]
  return(result);
 800784e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007852:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8007854:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <UTIL_SEQ_Run+0x1b0>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <UTIL_SEQ_Run+0x1a8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	401a      	ands	r2, r3
 800785e:	4b0e      	ldr	r3, [pc, #56]	; (8007898 <UTIL_SEQ_Run+0x1a0>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4013      	ands	r3, r2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d108      	bne.n	800787a <UTIL_SEQ_Run+0x182>
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <UTIL_SEQ_Run+0x1b8>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <UTIL_SEQ_Run+0x1bc>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4013      	ands	r3, r2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 8007876:	f7f8 fd3c 	bl	80002f2 <UTIL_SEQ_Idle>
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8007884:	f000 f905 	bl	8007a92 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007888:	4a03      	ldr	r2, [pc, #12]	; (8007898 <UTIL_SEQ_Run+0x1a0>)
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	6013      	str	r3, [r2, #0]

  return;
 800788e:	bf00      	nop
}
 8007890:	3730      	adds	r7, #48	; 0x30
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000024 	.word	0x20000024
 800789c:	200002e8 	.word	0x200002e8
 80078a0:	20000020 	.word	0x20000020
 80078a4:	20000264 	.word	0x20000264
 80078a8:	20000258 	.word	0x20000258
 80078ac:	20000268 	.word	0x20000268
 80078b0:	2000025c 	.word	0x2000025c
 80078b4:	20000260 	.word	0x20000260

080078b8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078c4:	f3ef 8310 	mrs	r3, PRIMASK
 80078c8:	617b      	str	r3, [r7, #20]
  return(result);
 80078ca:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80078cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80078ce:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f8e5 	bl	8007aa0 <SEQ_BitPosition>
 80078d6:	4603      	mov	r3, r0
 80078d8:	4619      	mov	r1, r3
 80078da:	4a06      	ldr	r2, [pc, #24]	; (80078f4 <UTIL_SEQ_RegTask+0x3c>)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80078ec:	bf00      	nop
}
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000268 	.word	0x20000268

080078f8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007902:	f3ef 8310 	mrs	r3, PRIMASK
 8007906:	60fb      	str	r3, [r7, #12]
  return(result);
 8007908:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800790a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800790c:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 800790e:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <UTIL_SEQ_SetTask+0x4c>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4313      	orrs	r3, r2
 8007916:	4a0b      	ldr	r2, [pc, #44]	; (8007944 <UTIL_SEQ_SetTask+0x4c>)
 8007918:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800791a:	4a0b      	ldr	r2, [pc, #44]	; (8007948 <UTIL_SEQ_SetTask+0x50>)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	431a      	orrs	r2, r3
 8007926:	4908      	ldr	r1, [pc, #32]	; (8007948 <UTIL_SEQ_SetTask+0x50>)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007938:	bf00      	nop
}
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	20000258 	.word	0x20000258
 8007948:	200002e8 	.word	0x200002e8

0800794c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007954:	f3ef 8310 	mrs	r3, PRIMASK
 8007958:	60fb      	str	r3, [r7, #12]
  return(result);
 800795a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800795c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800795e:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	43da      	mvns	r2, r3
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <UTIL_SEQ_PauseTask+0x38>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4013      	ands	r3, r2
 800796a:	4a06      	ldr	r2, [pc, #24]	; (8007984 <UTIL_SEQ_PauseTask+0x38>)
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007978:	bf00      	nop
}
 800797a:	371c      	adds	r7, #28
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	20000020 	.word	0x20000020

08007988 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007990:	f3ef 8310 	mrs	r3, PRIMASK
 8007994:	60fb      	str	r3, [r7, #12]
  return(result);
 8007996:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007998:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800799a:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 800799c:	4b08      	ldr	r3, [pc, #32]	; (80079c0 <UTIL_SEQ_ResumeTask+0x38>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	4a06      	ldr	r2, [pc, #24]	; (80079c0 <UTIL_SEQ_ResumeTask+0x38>)
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80079b2:	bf00      	nop
}
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20000020 	.word	0x20000020

080079c4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079cc:	f3ef 8310 	mrs	r3, PRIMASK
 80079d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80079d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80079d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80079d6:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 80079d8:	4b08      	ldr	r3, [pc, #32]	; (80079fc <UTIL_SEQ_SetEvt+0x38>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4313      	orrs	r3, r2
 80079e0:	4a06      	ldr	r2, [pc, #24]	; (80079fc <UTIL_SEQ_SetEvt+0x38>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80079ee:	bf00      	nop
}
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	2000025c 	.word	0x2000025c

08007a00 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007a08:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <UTIL_SEQ_WaitEvt+0x78>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8007a0e:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <UTIL_SEQ_WaitEvt+0x78>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a16:	d102      	bne.n	8007a1e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e005      	b.n	8007a2a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8007a1e:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <UTIL_SEQ_WaitEvt+0x78>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2201      	movs	r2, #1
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007a2a:	4b14      	ldr	r3, [pc, #80]	; (8007a7c <UTIL_SEQ_WaitEvt+0x7c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8007a30:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <UTIL_SEQ_WaitEvt+0x7c>)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8007a36:	e005      	b.n	8007a44 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8007a38:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <UTIL_SEQ_WaitEvt+0x7c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6978      	ldr	r0, [r7, #20]
 8007a40:	f7f8 fc5d 	bl	80002fe <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <UTIL_SEQ_WaitEvt+0x80>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <UTIL_SEQ_WaitEvt+0x7c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0f2      	beq.n	8007a38 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8007a52:	4a09      	ldr	r2, [pc, #36]	; (8007a78 <UTIL_SEQ_WaitEvt+0x78>)
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8007a58:	4b08      	ldr	r3, [pc, #32]	; (8007a7c <UTIL_SEQ_WaitEvt+0x7c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	43da      	mvns	r2, r3
 8007a5e:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <UTIL_SEQ_WaitEvt+0x80>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4013      	ands	r3, r2
 8007a64:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <UTIL_SEQ_WaitEvt+0x80>)
 8007a66:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8007a68:	4a04      	ldr	r2, [pc, #16]	; (8007a7c <UTIL_SEQ_WaitEvt+0x7c>)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6013      	str	r3, [r2, #0]

  return;
 8007a6e:	bf00      	nop
}
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000264 	.word	0x20000264
 8007a7c:	20000260 	.word	0x20000260
 8007a80:	2000025c 	.word	0x2000025c

08007a84 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007a88:	bf00      	nop
}
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8007a92:	b480      	push	{r7}
 8007a94:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007a96:	bf00      	nop
}
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d104      	bne.n	8007ac0 <SEQ_BitPosition+0x20>
 8007ab6:	2310      	movs	r3, #16
 8007ab8:	73fb      	strb	r3, [r7, #15]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	041b      	lsls	r3, r3, #16
 8007abe:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <SEQ_BitPosition+0x36>
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	3308      	adds	r3, #8
 8007ace:	73fb      	strb	r3, [r7, #15]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d105      	bne.n	8007aec <SEQ_BitPosition+0x4c>
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	73fb      	strb	r3, [r7, #15]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	0f1b      	lsrs	r3, r3, #28
 8007af0:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <SEQ_BitPosition+0x70>)
 8007af2:	5cd2      	ldrb	r2, [r2, r3]
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4413      	add	r3, r2
 8007af8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	f1c3 031f 	rsb	r3, r3, #31
 8007b00:	b2db      	uxtb	r3, r3
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	08007e30 	.word	0x08007e30

08007b14 <__libc_init_array>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	4e0d      	ldr	r6, [pc, #52]	; (8007b4c <__libc_init_array+0x38>)
 8007b18:	4c0d      	ldr	r4, [pc, #52]	; (8007b50 <__libc_init_array+0x3c>)
 8007b1a:	1ba4      	subs	r4, r4, r6
 8007b1c:	10a4      	asrs	r4, r4, #2
 8007b1e:	2500      	movs	r5, #0
 8007b20:	42a5      	cmp	r5, r4
 8007b22:	d109      	bne.n	8007b38 <__libc_init_array+0x24>
 8007b24:	4e0b      	ldr	r6, [pc, #44]	; (8007b54 <__libc_init_array+0x40>)
 8007b26:	4c0c      	ldr	r4, [pc, #48]	; (8007b58 <__libc_init_array+0x44>)
 8007b28:	f000 f82c 	bl	8007b84 <_init>
 8007b2c:	1ba4      	subs	r4, r4, r6
 8007b2e:	10a4      	asrs	r4, r4, #2
 8007b30:	2500      	movs	r5, #0
 8007b32:	42a5      	cmp	r5, r4
 8007b34:	d105      	bne.n	8007b42 <__libc_init_array+0x2e>
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b3c:	4798      	blx	r3
 8007b3e:	3501      	adds	r5, #1
 8007b40:	e7ee      	b.n	8007b20 <__libc_init_array+0xc>
 8007b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b46:	4798      	blx	r3
 8007b48:	3501      	adds	r5, #1
 8007b4a:	e7f2      	b.n	8007b32 <__libc_init_array+0x1e>
 8007b4c:	08007e40 	.word	0x08007e40
 8007b50:	08007e40 	.word	0x08007e40
 8007b54:	08007e40 	.word	0x08007e40
 8007b58:	08007e44 	.word	0x08007e44

08007b5c <memcpy>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	1e43      	subs	r3, r0, #1
 8007b60:	440a      	add	r2, r1
 8007b62:	4291      	cmp	r1, r2
 8007b64:	d100      	bne.n	8007b68 <memcpy+0xc>
 8007b66:	bd10      	pop	{r4, pc}
 8007b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b70:	e7f7      	b.n	8007b62 <memcpy+0x6>

08007b72 <memset>:
 8007b72:	4402      	add	r2, r0
 8007b74:	4603      	mov	r3, r0
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d100      	bne.n	8007b7c <memset+0xa>
 8007b7a:	4770      	bx	lr
 8007b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8007b80:	e7f9      	b.n	8007b76 <memset+0x4>
	...

08007b84 <_init>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr

08007b90 <_fini>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr
