
stm32WB_test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ec  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  08006b74  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  08006b98  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000048  200000c4  08006c31  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000010c  08006c79  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000098  20000120  08006c8a  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000174  200001b8  08006d22  000201b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  08006d22  0002032c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0002b370  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000519c  00000000  00000000  0004b558  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00001a98  00000000  00000000  000506f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001850  00000000  00000000  00052190  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00024fda  00000000  00000000  000539e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   000198c1  00000000  00000000  000789ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000c74a2  00000000  00000000  0009227b  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  0015971d  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00006af4  00000000  00000000  00159798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001b8 	.word	0x200001b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08006910 	.word	0x08006910

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001bc 	.word	0x200001bc
 8000178:	08006910 	.word	0x08006910

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 f959 	bl	8005460 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f004 fc60 	bl	8004a76 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08006928 	.word	0x08006928

080001c4 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4313      	orrs	r3, r2
 800020a:	608b      	str	r3, [r1, #8]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800021c:	f000 f80a 	bl	8000234 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000220:	4903      	ldr	r1, [pc, #12]	; (8000230 <APPE_Init+0x18>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fcc2 	bl	8000bac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000228:	f000 f812 	bl	8000250 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800022c:	bf00      	nop
}
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000300 	.word	0x20000300

08000234 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800023c:	f7ff ffd8 	bl	80001f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000240:	f006 f8e0 	bl	8006404 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000244:	2004      	movs	r0, #4
 8000246:	f7ff ffbd 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800024a:	bf00      	nop
}
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000256:	f004 ff67 	bl	8005128 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <appe_Tl_Init+0x50>)
 800025c:	2100      	movs	r1, #0
 800025e:	2008      	movs	r0, #8
 8000260:	f006 f9f0 	bl	8006644 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <appe_Tl_Init+0x54>)
 8000266:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <appe_Tl_Init+0x58>)
 800026a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	480e      	ldr	r0, [pc, #56]	; (80002ac <appe_Tl_Init+0x5c>)
 8000272:	f004 fde9 	bl	8004e48 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <appe_Tl_Init+0x60>)
 8000278:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <appe_Tl_Init+0x64>)
 800027c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <appe_Tl_Init+0x68>)
 8000280:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000282:	f240 533c 	movw	r3, #1340	; 0x53c
 8000286:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	4618      	mov	r0, r3
 800028e:	f005 f85d 	bl	800534c <TL_MM_Init>

  TL_Enable();
 8000292:	f004 ff43 	bl	800511c <TL_Enable>

  return;
 8000296:	bf00      	nop
}
 8000298:	3720      	adds	r7, #32
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	08004e81 	.word	0x08004e81
 80002a4:	20030724 	.word	0x20030724
 80002a8:	080002bd 	.word	0x080002bd
 80002ac:	080002d3 	.word	0x080002d3
 80002b0:	2003093c 	.word	0x2003093c
 80002b4:	20030830 	.word	0x20030830
 80002b8:	200301e8 	.word	0x200301e8

080002bc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80002c6:	bf00      	nop
}
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80002da:	f7ff ff57 	bl	800018c <APPD_EnableCPU2>

  APP_BLE_Init( );
 80002de:	f005 f9f5 	bl	80056cc <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2001      	movs	r0, #1
 80002e6:	f006 f89f 	bl	8006428 <UTIL_LPM_SetOffMode>
  return;
 80002ea:	bf00      	nop
}
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80002f6:	bf00      	nop
}
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800030a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030e:	f006 f8b9 	bl	8006484 <UTIL_SEQ_Run>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000322:	2100      	movs	r1, #0
 8000324:	2008      	movs	r0, #8
 8000326:	f006 f9ad 	bl	8006684 <UTIL_SEQ_SetTask>
  return;
 800032a:	bf00      	nop
}
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	b082      	sub	sp, #8
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800033a:	2002      	movs	r0, #2
 800033c:	f006 fa08 	bl	8006750 <UTIL_SEQ_SetEvt>
  return;
 8000340:	bf00      	nop
}
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000350:	2002      	movs	r0, #2
 8000352:	f006 fa1b 	bl	800678c <UTIL_SEQ_WaitEvt>
  return;
 8000356:	bf00      	nop
}
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <LL_EXTI_EnableIT_0_31+0x24>)
 800036a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800036e:	4905      	ldr	r1, [pc, #20]	; (8000384 <LL_EXTI_EnableIT_0_31+0x24>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4313      	orrs	r3, r2
 8000374:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	58000800 	.word	0x58000800

08000388 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4904      	ldr	r1, [pc, #16]	; (80003a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	600b      	str	r3, [r1, #0]

}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	58000800 	.word	0x58000800

080003ac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003be:	b29b      	uxth	r3, r3
 80003c0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80003c2:	e005      	b.n	80003d0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d1f5      	bne.n	80003c4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80003d8:	683b      	ldr	r3, [r7, #0]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40002800 	.word	0x40002800

080003ec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80003fc:	79ba      	ldrb	r2, [r7, #6]
 80003fe:	491d      	ldr	r1, [pc, #116]	; (8000474 <LinkTimerAfter+0x88>)
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	440b      	add	r3, r1
 800040a:	3315      	adds	r3, #21
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	2b06      	cmp	r3, #6
 8000414:	d009      	beq.n	800042a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000416:	7bfa      	ldrb	r2, [r7, #15]
 8000418:	4916      	ldr	r1, [pc, #88]	; (8000474 <LinkTimerAfter+0x88>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	440b      	add	r3, r1
 8000424:	3314      	adds	r3, #20
 8000426:	79fa      	ldrb	r2, [r7, #7]
 8000428:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800042a:	79fa      	ldrb	r2, [r7, #7]
 800042c:	4911      	ldr	r1, [pc, #68]	; (8000474 <LinkTimerAfter+0x88>)
 800042e:	4613      	mov	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	440b      	add	r3, r1
 8000438:	3315      	adds	r3, #21
 800043a:	7bfa      	ldrb	r2, [r7, #15]
 800043c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800043e:	79fa      	ldrb	r2, [r7, #7]
 8000440:	490c      	ldr	r1, [pc, #48]	; (8000474 <LinkTimerAfter+0x88>)
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	440b      	add	r3, r1
 800044c:	3314      	adds	r3, #20
 800044e:	79ba      	ldrb	r2, [r7, #6]
 8000450:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000452:	79ba      	ldrb	r2, [r7, #6]
 8000454:	4907      	ldr	r1, [pc, #28]	; (8000474 <LinkTimerAfter+0x88>)
 8000456:	4613      	mov	r3, r2
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4413      	add	r3, r2
 800045c:	00db      	lsls	r3, r3, #3
 800045e:	440b      	add	r3, r1
 8000460:	3315      	adds	r3, #21
 8000462:	79fa      	ldrb	r2, [r7, #7]
 8000464:	701a      	strb	r2, [r3, #0]

  return;
 8000466:	bf00      	nop
}
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	20000028 	.word	0x20000028

08000478 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	460a      	mov	r2, r1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	4613      	mov	r3, r2
 8000486:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <LinkTimerBefore+0xb8>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	79ba      	ldrb	r2, [r7, #6]
 8000490:	429a      	cmp	r2, r3
 8000492:	d032      	beq.n	80004fa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000494:	79ba      	ldrb	r2, [r7, #6]
 8000496:	4927      	ldr	r1, [pc, #156]	; (8000534 <LinkTimerBefore+0xbc>)
 8000498:	4613      	mov	r3, r2
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4413      	add	r3, r2
 800049e:	00db      	lsls	r3, r3, #3
 80004a0:	440b      	add	r3, r1
 80004a2:	3314      	adds	r3, #20
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80004a8:	7bfa      	ldrb	r2, [r7, #15]
 80004aa:	4922      	ldr	r1, [pc, #136]	; (8000534 <LinkTimerBefore+0xbc>)
 80004ac:	4613      	mov	r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4413      	add	r3, r2
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	440b      	add	r3, r1
 80004b6:	3315      	adds	r3, #21
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	491d      	ldr	r1, [pc, #116]	; (8000534 <LinkTimerBefore+0xbc>)
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	440b      	add	r3, r1
 80004ca:	3315      	adds	r3, #21
 80004cc:	79ba      	ldrb	r2, [r7, #6]
 80004ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	4918      	ldr	r1, [pc, #96]	; (8000534 <LinkTimerBefore+0xbc>)
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	440b      	add	r3, r1
 80004de:	3314      	adds	r3, #20
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	4913      	ldr	r1, [pc, #76]	; (8000534 <LinkTimerBefore+0xbc>)
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	440b      	add	r3, r1
 80004f2:	3314      	adds	r3, #20
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80004f8:	e014      	b.n	8000524 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	490d      	ldr	r1, [pc, #52]	; (8000534 <LinkTimerBefore+0xbc>)
 80004fe:	4613      	mov	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	4413      	add	r3, r2
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	440b      	add	r3, r1
 8000508:	3315      	adds	r3, #21
 800050a:	79ba      	ldrb	r2, [r7, #6]
 800050c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800050e:	79ba      	ldrb	r2, [r7, #6]
 8000510:	4908      	ldr	r1, [pc, #32]	; (8000534 <LinkTimerBefore+0xbc>)
 8000512:	4613      	mov	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	4413      	add	r3, r2
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	440b      	add	r3, r1
 800051c:	3314      	adds	r3, #20
 800051e:	79fa      	ldrb	r2, [r7, #7]
 8000520:	701a      	strb	r2, [r3, #0]
  return;
 8000522:	bf00      	nop
}
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200000b8 	.word	0x200000b8
 8000534:	20000028 	.word	0x20000028

08000538 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000542:	4b4e      	ldr	r3, [pc, #312]	; (800067c <linkTimer+0x144>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b06      	cmp	r3, #6
 800054a:	d118      	bne.n	800057e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800054c:	4b4b      	ldr	r3, [pc, #300]	; (800067c <linkTimer+0x144>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b4b      	ldr	r3, [pc, #300]	; (8000680 <linkTimer+0x148>)
 8000554:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000556:	4a49      	ldr	r2, [pc, #292]	; (800067c <linkTimer+0x144>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800055c:	79fa      	ldrb	r2, [r7, #7]
 800055e:	4949      	ldr	r1, [pc, #292]	; (8000684 <linkTimer+0x14c>)
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	440b      	add	r3, r1
 800056a:	3315      	adds	r3, #21
 800056c:	2206      	movs	r2, #6
 800056e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000570:	4b45      	ldr	r3, [pc, #276]	; (8000688 <linkTimer+0x150>)
 8000572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000576:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	81fb      	strh	r3, [r7, #14]
 800057c:	e078      	b.n	8000670 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800057e:	f000 f909 	bl	8000794 <ReturnTimeElapsed>
 8000582:	4603      	mov	r3, r0
 8000584:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000586:	79fa      	ldrb	r2, [r7, #7]
 8000588:	493e      	ldr	r1, [pc, #248]	; (8000684 <linkTimer+0x14c>)
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	440b      	add	r3, r1
 8000594:	3308      	adds	r3, #8
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	4419      	add	r1, r3
 800059e:	4839      	ldr	r0, [pc, #228]	; (8000684 <linkTimer+0x14c>)
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	4403      	add	r3, r0
 80005aa:	3308      	adds	r3, #8
 80005ac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	4934      	ldr	r1, [pc, #208]	; (8000684 <linkTimer+0x14c>)
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	440b      	add	r3, r1
 80005bc:	3308      	adds	r3, #8
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <linkTimer+0x144>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <linkTimer+0x14c>)
 80005cc:	460b      	mov	r3, r1
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	440b      	add	r3, r1
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4413      	add	r3, r2
 80005d6:	3308      	adds	r3, #8
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d337      	bcc.n	8000650 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <linkTimer+0x144>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80005e6:	7b7a      	ldrb	r2, [r7, #13]
 80005e8:	4926      	ldr	r1, [pc, #152]	; (8000684 <linkTimer+0x14c>)
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	440b      	add	r3, r1
 80005f4:	3315      	adds	r3, #21
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80005fa:	e013      	b.n	8000624 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80005fc:	7b7a      	ldrb	r2, [r7, #13]
 80005fe:	4921      	ldr	r1, [pc, #132]	; (8000684 <linkTimer+0x14c>)
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	440b      	add	r3, r1
 800060a:	3315      	adds	r3, #21
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000610:	7b7a      	ldrb	r2, [r7, #13]
 8000612:	491c      	ldr	r1, [pc, #112]	; (8000684 <linkTimer+0x14c>)
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	440b      	add	r3, r1
 800061e:	3315      	adds	r3, #21
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	2b06      	cmp	r3, #6
 8000628:	d00b      	beq.n	8000642 <linkTimer+0x10a>
 800062a:	7b3a      	ldrb	r2, [r7, #12]
 800062c:	4915      	ldr	r1, [pc, #84]	; (8000684 <linkTimer+0x14c>)
 800062e:	4613      	mov	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4413      	add	r3, r2
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	440b      	add	r3, r1
 8000638:	3308      	adds	r3, #8
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	429a      	cmp	r2, r3
 8000640:	d2dc      	bcs.n	80005fc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000642:	7b7a      	ldrb	r2, [r7, #13]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fecf 	bl	80003ec <LinkTimerAfter>
 800064e:	e00f      	b.n	8000670 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <linkTimer+0x144>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff0c 	bl	8000478 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <linkTimer+0x144>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <linkTimer+0x148>)
 8000668:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <linkTimer+0x144>)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000670:	89fb      	ldrh	r3, [r7, #14]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000b8 	.word	0x200000b8
 8000680:	200000b9 	.word	0x200000b9
 8000684:	20000028 	.word	0x20000028
 8000688:	200000bc 	.word	0x200000bc

0800068c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <UnlinkTimer+0xf8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d111      	bne.n	80006cc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <UnlinkTimer+0xf8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <UnlinkTimer+0xfc>)
 80006b0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	4935      	ldr	r1, [pc, #212]	; (800078c <UnlinkTimer+0x100>)
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	440b      	add	r3, r1
 80006c0:	3315      	adds	r3, #21
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <UnlinkTimer+0xf8>)
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e03e      	b.n	800074a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	492f      	ldr	r1, [pc, #188]	; (800078c <UnlinkTimer+0x100>)
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	440b      	add	r3, r1
 80006da:	3314      	adds	r3, #20
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	492a      	ldr	r1, [pc, #168]	; (800078c <UnlinkTimer+0x100>)
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	440b      	add	r3, r1
 80006ee:	3315      	adds	r3, #21
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80006f4:	79f9      	ldrb	r1, [r7, #7]
 80006f6:	7bfa      	ldrb	r2, [r7, #15]
 80006f8:	4824      	ldr	r0, [pc, #144]	; (800078c <UnlinkTimer+0x100>)
 80006fa:	460b      	mov	r3, r1
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	440b      	add	r3, r1
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4403      	add	r3, r0
 8000704:	3315      	adds	r3, #21
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2d8      	uxtb	r0, r3
 800070a:	4920      	ldr	r1, [pc, #128]	; (800078c <UnlinkTimer+0x100>)
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	440b      	add	r3, r1
 8000716:	3315      	adds	r3, #21
 8000718:	4602      	mov	r2, r0
 800071a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	2b06      	cmp	r3, #6
 8000720:	d013      	beq.n	800074a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000722:	79f9      	ldrb	r1, [r7, #7]
 8000724:	7bba      	ldrb	r2, [r7, #14]
 8000726:	4819      	ldr	r0, [pc, #100]	; (800078c <UnlinkTimer+0x100>)
 8000728:	460b      	mov	r3, r1
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	440b      	add	r3, r1
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	4403      	add	r3, r0
 8000732:	3314      	adds	r3, #20
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2d8      	uxtb	r0, r3
 8000738:	4914      	ldr	r1, [pc, #80]	; (800078c <UnlinkTimer+0x100>)
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3314      	adds	r3, #20
 8000746:	4602      	mov	r2, r0
 8000748:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	490f      	ldr	r1, [pc, #60]	; (800078c <UnlinkTimer+0x100>)
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	440b      	add	r3, r1
 8000758:	330c      	adds	r3, #12
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <UnlinkTimer+0xf8>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b06      	cmp	r3, #6
 8000766:	d107      	bne.n	8000778 <UnlinkTimer+0xec>
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <UnlinkTimer+0x104>)
 8000770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000774:	601a      	str	r2, [r3, #0]
  }

  return;
 8000776:	bf00      	nop
 8000778:	bf00      	nop
}
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	200000b8 	.word	0x200000b8
 8000788:	200000b9 	.word	0x200000b9
 800078c:	20000028 	.word	0x20000028
 8000790:	200000bc 	.word	0x200000bc

08000794 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <ReturnTimeElapsed+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007a2:	d026      	beq.n	80007f2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80007a4:	f7ff fe02 	bl	80003ac <ReadRtcSsrValue>
 80007a8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d805      	bhi.n	80007c0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e00a      	b.n	80007d6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <ReturnTimeElapsed+0x74>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <ReturnTimeElapsed+0x78>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <ReturnTimeElapsed+0x7c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	40d3      	lsrs	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	e001      	b.n	80007f6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	b29b      	uxth	r3, r3
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000bc 	.word	0x200000bc
 8000808:	200001da 	.word	0x200001da
 800080c:	200001d9 	.word	0x200001d9
 8000810:	200001d8 	.word	0x200001d8

08000814 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d108      	bne.n	8000836 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000824:	f7ff fdc2 	bl	80003ac <ReadRtcSsrValue>
 8000828:	4602      	mov	r2, r0
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <RestartWakeupCounter+0xa8>)
 800082c:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800082e:	2003      	movs	r0, #3
 8000830:	f001 f997 	bl	8001b62 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000834:	e03e      	b.n	80008b4 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d803      	bhi.n	8000844 <RestartWakeupCounter+0x30>
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <RestartWakeupCounter+0xac>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d002      	beq.n	800084a <RestartWakeupCounter+0x36>
      Value -= 1;
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	3b01      	subs	r3, #1
 8000848:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800084a:	bf00      	nop
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f7      	beq.n	800084c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <RestartWakeupCounter+0xb0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000870:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <RestartWakeupCounter+0xb4>)
 8000874:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000878:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800087a:	2003      	movs	r0, #3
 800087c:	f001 f97f 	bl	8001b7e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <RestartWakeupCounter+0xb8>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	0c1b      	lsrs	r3, r3, #16
 8000886:	041b      	lsls	r3, r3, #16
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	4910      	ldr	r1, [pc, #64]	; (80008cc <RestartWakeupCounter+0xb8>)
 800088c:	4313      	orrs	r3, r2
 800088e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000890:	f7ff fd8c 	bl	80003ac <ReadRtcSsrValue>
 8000894:	4602      	mov	r2, r0
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <RestartWakeupCounter+0xa8>)
 8000898:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <RestartWakeupCounter+0xb0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008ac:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80008ae:	f3af 8000 	nop.w
  return ;
 80008b2:	bf00      	nop
}
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000bc 	.word	0x200000bc
 80008c0:	200001d8 	.word	0x200001d8
 80008c4:	200001d4 	.word	0x200001d4
 80008c8:	58000800 	.word	0x58000800
 80008cc:	40002800 	.word	0x40002800

080008d0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <RescheduleTimerList+0x124>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008e2:	d108      	bne.n	80008f6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80008e4:	bf00      	nop
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <RescheduleTimerList+0x128>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f7      	bne.n	80008e6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <RescheduleTimerList+0x128>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <RescheduleTimerList+0x128>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000908:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <RescheduleTimerList+0x12c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	493b      	ldr	r1, [pc, #236]	; (8000a00 <RescheduleTimerList+0x130>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3308      	adds	r3, #8
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000924:	f7ff ff36 	bl	8000794 <ReturnTimeElapsed>
 8000928:	4603      	mov	r3, r0
 800092a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	429a      	cmp	r2, r3
 8000932:	d205      	bcs.n	8000940 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <RescheduleTimerList+0x134>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e04d      	b.n	80009dc <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <RescheduleTimerList+0x138>)
 8000944:	8812      	ldrh	r2, [r2, #0]
 8000946:	b292      	uxth	r2, r2
 8000948:	4413      	add	r3, r2
 800094a:	461a      	mov	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4293      	cmp	r3, r2
 8000950:	d906      	bls.n	8000960 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <RescheduleTimerList+0x138>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000958:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <RescheduleTimerList+0x134>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e03d      	b.n	80009dc <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	b29a      	uxth	r2, r3
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <RescheduleTimerList+0x134>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000970:	e034      	b.n	80009dc <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	4922      	ldr	r1, [pc, #136]	; (8000a00 <RescheduleTimerList+0x130>)
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	3308      	adds	r3, #8
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	d20a      	bcs.n	80009a0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	491c      	ldr	r1, [pc, #112]	; (8000a00 <RescheduleTimerList+0x130>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3308      	adds	r3, #8
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e013      	b.n	80009c8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	4917      	ldr	r1, [pc, #92]	; (8000a00 <RescheduleTimerList+0x130>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3308      	adds	r3, #8
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <RescheduleTimerList+0x130>)
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4403      	add	r3, r0
 80009c4:	3308      	adds	r3, #8
 80009c6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80009c8:	7bfa      	ldrb	r2, [r7, #15]
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <RescheduleTimerList+0x130>)
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	440b      	add	r3, r1
 80009d6:	3315      	adds	r3, #21
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d1c7      	bne.n	8000972 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80009e2:	89bb      	ldrh	r3, [r7, #12]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff15 	bl	8000814 <RestartWakeupCounter>

  return ;
 80009ea:	bf00      	nop
}
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40002800 	.word	0x40002800
 80009f8:	200001d4 	.word	0x200001d4
 80009fc:	200000b8 	.word	0x200000b8
 8000a00:	20000028 	.word	0x20000028
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	200001dc 	.word	0x200001dc

08000a0c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a12:	f3ef 8310 	mrs	r3, PRIMASK
 8000a16:	617b      	str	r3, [r7, #20]
  return(result);
 8000a18:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a1e:	4b5e      	ldr	r3, [pc, #376]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	22ca      	movs	r2, #202	; 0xca
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
 8000a28:	4b5b      	ldr	r3, [pc, #364]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000a32:	4b59      	ldr	r3, [pc, #356]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	4b57      	ldr	r3, [pc, #348]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a44:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000a46:	4b55      	ldr	r3, [pc, #340]	; (8000b9c <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000a4e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a52:	4953      	ldr	r1, [pc, #332]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	330c      	adds	r3, #12
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d170      	bne.n	8000b4a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000a68:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a6c:	494c      	ldr	r1, [pc, #304]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	440b      	add	r3, r1
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000a7c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a80:	4947      	ldr	r1, [pc, #284]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3310      	adds	r3, #16
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000a92:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d04e      	beq.n	8000b3a <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000a9c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000aa0:	493f      	ldr	r1, [pc, #252]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	440b      	add	r3, r1
 8000aac:	330d      	adds	r3, #13
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d125      	bne.n	8000b02 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000aba:	2101      	movs	r1, #1
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fde5 	bl	800068c <UnlinkTimer>
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000acc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ad0:	4933      	ldr	r1, [pc, #204]	; (8000ba0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	440b      	add	r3, r1
 8000adc:	3304      	adds	r3, #4
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fa40 	bl	8000f6c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	22ca      	movs	r2, #202	; 0xca
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2253      	movs	r2, #83	; 0x53
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
 8000b00:	e013      	b.n	8000b2a <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f9a1 	bl	8000e58 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	22ca      	movs	r2, #202	; 0xca
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2253      	movs	r2, #83	; 0x53
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4619      	mov	r1, r3
 8000b32:	69b8      	ldr	r0, [r7, #24]
 8000b34:	f000 faa0 	bl	8001078 <HW_TS_RTC_Int_AppNot>
 8000b38:	e024      	b.n	8000b84 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000b3a:	f7ff fec9 	bl	80008d0 <RescheduleTimerList>
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	f383 8810 	msr	PRIMASK, r3
 8000b48:	e01c      	b.n	8000b84 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b4a:	bf00      	nop
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f7      	beq.n	8000b4c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000b74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000b8e:	bf00      	nop
}
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001d4 	.word	0x200001d4
 8000b9c:	200000b8 	.word	0x200000b8
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	200000c0 	.word	0x200000c0
 8000ba8:	58000800 	.word	0x58000800

08000bac <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000bb8:	4a61      	ldr	r2, [pc, #388]	; (8000d40 <HW_TS_Init+0x194>)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bbe:	4b60      	ldr	r3, [pc, #384]	; (8000d40 <HW_TS_Init+0x194>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	22ca      	movs	r2, #202	; 0xca
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
 8000bc8:	4b5d      	ldr	r3, [pc, #372]	; (8000d40 <HW_TS_Init+0x194>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2253      	movs	r2, #83	; 0x53
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000bd2:	4b5c      	ldr	r3, [pc, #368]	; (8000d44 <HW_TS_Init+0x198>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	4a5b      	ldr	r2, [pc, #364]	; (8000d44 <HW_TS_Init+0x198>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000bde:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <HW_TS_Init+0x198>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f1c3 0304 	rsb	r3, r3, #4
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b55      	ldr	r3, [pc, #340]	; (8000d48 <HW_TS_Init+0x19c>)
 8000bf2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000bf4:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <HW_TS_Init+0x198>)
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000bfc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000c00:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	fa92 f2a2 	rbit	r2, r2
 8000c08:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	40d3      	lsrs	r3, r2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	3301      	adds	r3, #1
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <HW_TS_Init+0x1a0>)
 8000c1c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000c1e:	4b49      	ldr	r3, [pc, #292]	; (8000d44 <HW_TS_Init+0x198>)
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b48      	ldr	r3, [pc, #288]	; (8000d50 <HW_TS_Init+0x1a4>)
 8000c30:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <HW_TS_Init+0x1a4>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	4a44      	ldr	r2, [pc, #272]	; (8000d4c <HW_TS_Init+0x1a0>)
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000c44:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <HW_TS_Init+0x19c>)
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	40d3      	lsrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d904      	bls.n	8000c60 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000c56:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <HW_TS_Init+0x1a8>)
 8000c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	e003      	b.n	8000c68 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <HW_TS_Init+0x1a8>)
 8000c66:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c6c:	f7ff fb8c 	bl	8000388 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c74:	f7ff fb74 	bl	8000360 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d143      	bne.n	8000d06 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <HW_TS_Init+0x1ac>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c84:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <HW_TS_Init+0x1b0>)
 8000c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	75fb      	strb	r3, [r7, #23]
 8000c90:	e00c      	b.n	8000cac <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000c92:	7dfa      	ldrb	r2, [r7, #23]
 8000c94:	4932      	ldr	r1, [pc, #200]	; (8000d60 <HW_TS_Init+0x1b4>)
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	330c      	adds	r3, #12
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d9ef      	bls.n	8000c92 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <HW_TS_Init+0x1b8>)
 8000cb4:	2206      	movs	r2, #6
 8000cb6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HW_TS_Init+0x194>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HW_TS_Init+0x194>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cca:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HW_TS_Init+0x194>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HW_TS_Init+0x194>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ce0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HW_TS_Init+0x1bc>)
 8000ce4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ce8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000cea:	2003      	movs	r0, #3
 8000cec:	f000 ff47 	bl	8001b7e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HW_TS_Init+0x194>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HW_TS_Init+0x194>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	e00a      	b.n	8000d1c <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HW_TS_Init+0x194>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 ff23 	bl	8001b62 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HW_TS_Init+0x194>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	22ff      	movs	r2, #255	; 0xff
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d26:	2200      	movs	r2, #0
 8000d28:	2103      	movs	r1, #3
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f000 fed7 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 feee 	bl	8001b12 <HAL_NVIC_EnableIRQ>

  return;
 8000d36:	bf00      	nop
}
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001d4 	.word	0x200001d4
 8000d44:	40002800 	.word	0x40002800
 8000d48:	200001d8 	.word	0x200001d8
 8000d4c:	200001d9 	.word	0x200001d9
 8000d50:	200001da 	.word	0x200001da
 8000d54:	200001dc 	.word	0x200001dc
 8000d58:	200000c0 	.word	0x200000c0
 8000d5c:	200000bc 	.word	0x200000bc
 8000d60:	20000028 	.word	0x20000028
 8000d64:	200000b8 	.word	0x200000b8
 8000d68:	58000800 	.word	0x58000800

08000d6c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b08b      	sub	sp, #44	; 0x2c
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d82:	f3ef 8310 	mrs	r3, PRIMASK
 8000d86:	61fb      	str	r3, [r7, #28]
  return(result);
 8000d88:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000d8e:	e004      	b.n	8000d9a <HW_TS_Create+0x2e>
  {
    loop++;
 8000d90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d94:	3301      	adds	r3, #1
 8000d96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d9e:	2b05      	cmp	r3, #5
 8000da0:	d80c      	bhi.n	8000dbc <HW_TS_Create+0x50>
 8000da2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000da6:	492b      	ldr	r1, [pc, #172]	; (8000e54 <HW_TS_Create+0xe8>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	330c      	adds	r3, #12
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e9      	bne.n	8000d90 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d037      	beq.n	8000e34 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000dc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000dc8:	4922      	ldr	r1, [pc, #136]	; (8000e54 <HW_TS_Create+0xe8>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	330c      	adds	r3, #12
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000de4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000de8:	491a      	ldr	r1, [pc, #104]	; (8000e54 <HW_TS_Create+0xe8>)
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	440b      	add	r3, r1
 8000df4:	3310      	adds	r3, #16
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000dfa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000dfe:	4915      	ldr	r1, [pc, #84]	; (8000e54 <HW_TS_Create+0xe8>)
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	440b      	add	r3, r1
 8000e0a:	330d      	adds	r3, #13
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000e10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e14:	490f      	ldr	r1, [pc, #60]	; (8000e54 <HW_TS_Create+0xe8>)
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e2a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e32:	e007      	b.n	8000e44 <HW_TS_Create+0xd8>
 8000e34:	6a3b      	ldr	r3, [r7, #32]
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	372c      	adds	r7, #44	; 0x2c
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	20000028 	.word	0x20000028

08000e58 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e62:	f3ef 8310 	mrs	r3, PRIMASK
 8000e66:	60fb      	str	r3, [r7, #12]
  return(result);
 8000e68:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f000 fe5d 	bl	8001b2e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	22ca      	movs	r2, #202	; 0xca
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2253      	movs	r2, #83	; 0x53
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	4933      	ldr	r1, [pc, #204]	; (8000f58 <HW_TS_Stop+0x100>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	440b      	add	r3, r1
 8000e96:	330c      	adds	r3, #12
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d148      	bne.n	8000f32 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fbf1 	bl	800068c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <HW_TS_Stop+0x104>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eb0:	7cfb      	ldrb	r3, [r7, #19]
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d135      	bne.n	8000f22 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HW_TS_Stop+0x108>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec2:	d108      	bne.n	8000ed6 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000ec4:	bf00      	nop
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f7      	bne.n	8000ec6 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ee8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000eea:	bf00      	nop
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f7      	beq.n	8000eec <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f10:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HW_TS_Stop+0x10c>)
 8000f14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f18:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 fe2f 	bl	8001b7e <HAL_NVIC_ClearPendingIRQ>
 8000f20:	e007      	b.n	8000f32 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HW_TS_Stop+0x110>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	7cfa      	ldrb	r2, [r7, #19]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d001      	beq.n	8000f32 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8000f2e:	f7ff fccf 	bl	80008d0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HW_TS_Stop+0xfc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	22ff      	movs	r2, #255	; 0xff
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 fde8 	bl	8001b12 <HAL_NVIC_EnableIRQ>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001d4 	.word	0x200001d4
 8000f58:	20000028 	.word	0x20000028
 8000f5c:	200000b8 	.word	0x200000b8
 8000f60:	40002800 	.word	0x40002800
 8000f64:	58000800 	.word	0x58000800
 8000f68:	200000b9 	.word	0x200000b9

08000f6c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	493b      	ldr	r1, [pc, #236]	; (8001068 <HW_TS_Start+0xfc>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	330c      	adds	r3, #12
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d103      	bne.n	8000f98 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff60 	bl	8000e58 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f98:	f3ef 8310 	mrs	r3, PRIMASK
 8000f9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 fdc2 	bl	8001b2e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <HW_TS_Start+0x100>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	22ca      	movs	r2, #202	; 0xca
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HW_TS_Start+0x100>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2253      	movs	r2, #83	; 0x53
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	4929      	ldr	r1, [pc, #164]	; (8001068 <HW_TS_Start+0xfc>)
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	330c      	adds	r3, #12
 8000fce:	2202      	movs	r2, #2
 8000fd0:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	4924      	ldr	r1, [pc, #144]	; (8001068 <HW_TS_Start+0xfc>)
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	440b      	add	r3, r1
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000fe6:	79fa      	ldrb	r2, [r7, #7]
 8000fe8:	491f      	ldr	r1, [pc, #124]	; (8001068 <HW_TS_Start+0xfc>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa9b 	bl	8000538 <linkTimer>
 8001002:	4603      	mov	r3, r0
 8001004:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HW_TS_Start+0x104>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HW_TS_Start+0x108>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	7c7a      	ldrb	r2, [r7, #17]
 8001014:	429a      	cmp	r2, r3
 8001016:	d002      	beq.n	800101e <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001018:	f7ff fc5a 	bl	80008d0 <RescheduleTimerList>
 800101c:	e013      	b.n	8001046 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	4911      	ldr	r1, [pc, #68]	; (8001068 <HW_TS_Start+0xfc>)
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	3308      	adds	r3, #8
 800102e:	6819      	ldr	r1, [r3, #0]
 8001030:	8a7b      	ldrh	r3, [r7, #18]
 8001032:	79fa      	ldrb	r2, [r7, #7]
 8001034:	1ac9      	subs	r1, r1, r3
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <HW_TS_Start+0xfc>)
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4403      	add	r3, r0
 8001042:	3308      	adds	r3, #8
 8001044:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HW_TS_Start+0x100>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	22ff      	movs	r2, #255	; 0xff
 800104e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001050:	2003      	movs	r0, #3
 8001052:	f000 fd5e 	bl	8001b12 <HAL_NVIC_EnableIRQ>
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001060:	bf00      	nop
}
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000028 	.word	0x20000028
 800106c:	200001d4 	.word	0x200001d4
 8001070:	200000b8 	.word	0x200000b8
 8001074:	200000b9 	.word	0x200000b9

08001078 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	460b      	mov	r3, r1
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4798      	blx	r3

  return;
 800108a:	bf00      	nop
}
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <LL_RCC_LSE_SetDriveCapability>:
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a2:	f023 0218 	bic.w	r2, r3, #24
 80010a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f000 fb12 	bl	800171c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f81b 	bl	8001132 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 f8b0 	bl	8001260 <MX_GPIO_Init>
  MX_RF_Init();
 8001100:	f000 f87d 	bl	80011fe <MX_RF_Init>
  MX_RTC_Init();
 8001104:	f000 f882 	bl	800120c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001108:	f7ff f886 	bl	8000218 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(~0);
 800110c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001110:	f005 f9b8 	bl	8006484 <UTIL_SEQ_Run>

	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_0);
 8001114:	2101      	movs	r1, #1
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f000 febf 	bl	8001e9c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_1);
 800111e:	2102      	movs	r1, #2
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 feba 	bl	8001e9c <HAL_GPIO_TogglePin>

	  HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f000 fb7c 	bl	8001828 <HAL_Delay>
	  UTIL_SEQ_Run(~0);
 8001130:	e7ec      	b.n	800110c <main+0x1c>

08001132 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b0a2      	sub	sp, #136	; 0x88
 8001136:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001138:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800113c:	2248      	movs	r2, #72	; 0x48
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f005 fbdc 	bl	80068fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2224      	movs	r2, #36	; 0x24
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f005 fbcc 	bl	80068fe <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001166:	f000 fed7 	bl	8001f18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff ff91 	bl	8001092 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001170:	2307      	movs	r3, #7
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800117a:	2301      	movs	r3, #1
 800117c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001184:	2340      	movs	r3, #64	; 0x40
 8001186:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fa4d 	bl	8002630 <HAL_RCC_OscConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800119c:	f000 f8ae 	bl	80012fc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80011a0:	236f      	movs	r3, #111	; 0x6f
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	2103      	movs	r1, #3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fdbe 	bl	8002d44 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80011ce:	f000 f895 	bl	80012fc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP|RCC_PERIPHCLK_RTC;
 80011d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011d6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80011de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 f900 	bl	80033ec <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011f2:	f000 f883 	bl	80012fc <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3788      	adds	r7, #136	; 0x88
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_RTC_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_RTC_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_RTC_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_RTC_Init+0x4c>)
 800121e:	220f      	movs	r2, #15
 8001220:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <MX_RTC_Init+0x4c>)
 8001224:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001228:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_RTC_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_RTC_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_RTC_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_RTC_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_RTC_Init+0x4c>)
 8001244:	f002 f9ad 	bl	80035a2 <HAL_RTC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f855 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000300 	.word	0x20000300
 800125c:	40002800 	.word	0x40002800

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001274:	2004      	movs	r0, #4
 8001276:	f7ff ff22 	bl	80010be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff ff1f 	bl	80010be <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	2002      	movs	r0, #2
 8001282:	f7ff ff1c 	bl	80010be <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2161      	movs	r1, #97	; 0x61
 800128a:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_GPIO_Init+0x98>)
 800128c:	f000 fdee 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f000 fde7 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800129e:	2302      	movs	r3, #2
 80012a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f000 fc73 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 80012b6:	2361      	movs	r3, #97	; 0x61
 80012b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	480b      	ldr	r0, [pc, #44]	; (80012f8 <MX_GPIO_Init+0x98>)
 80012cc:	f000 fc66 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f000 fc57 	bl	8001b9c <HAL_GPIO_Init>

}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	48000400 	.word	0x48000400

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800131a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001326:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001332:	4313      	orrs	r3, r2
 8001334:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	cafecafe 	.word	0xcafecafe

08001348 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800134c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

	OTP_ID0_t * p_otp;


	p_otp = (OTP_ID0_t *) OTP_Read(0);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f004 f879 	bl	80054cc <OTP_Read>
 80013da:	6078      	str	r0, [r7, #4]
	if(p_otp) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d004      	beq.n	80013ec <HAL_MspInit+0x1e>
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	799b      	ldrb	r3, [r3, #6]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff90 	bl	800130c <LL_RCC_HSE_SetCapacitorTuning>
	}

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80013ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013f0:	f7ff ffbb 	bl	800136a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	202e      	movs	r0, #46	; 0x2e
 80013fa:	f000 fb70 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80013fe:	202e      	movs	r0, #46	; 0x2e
 8001400:	f000 fb87 	bl	8001b12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_RTC_MspInit+0x28>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d105      	bne.n	800142a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800141e:	f7ff ff93 	bl	8001348 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001422:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001426:	f7ff ffb9 	bl	800139c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40002800 	.word	0x40002800

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f9a0 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001498:	f000 fd1a 	bl	8001ed0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	 HW_TS_RTC_Wakeup_Handler();
 80014a4:	f7ff fab2 	bl	8000a0c <HW_TS_RTC_Wakeup_Handler>
 }
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <IPCC_C1_RX_IRQHandler>:

 void IPCC_C1_RX_IRQHandler(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	  HW_IPCC_Rx_Handler();
 80014b0:	f004 fe58 	bl	8006164 <HW_IPCC_Rx_Handler>
 }
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <IPCC_C1_TX_IRQHandler>:

 void IPCC_C1_TX_IRQHandler(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	  HW_IPCC_Tx_Handler();
 80014bc:	f004 fe8a 	bl	80061d4 <HW_IPCC_Tx_Handler>
 }
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <SystemInit+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <SystemInit+0x98>)
 80014d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <SystemInit+0x98>)
 80014d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80014f6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <SystemInit+0x9c>)
 8001504:	4013      	ands	r3, r2
 8001506:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001514:	f023 0305 	bic.w	r3, r3, #5
 8001518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <SystemInit+0xa0>)
 8001536:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001546:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	faf6fefb 	.word	0xfaf6fefb
 8001564:	22041000 	.word	0x22041000

08001568 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	4a47      	ldr	r2, [pc, #284]	; (8001698 <SystemCoreClockUpdate+0x130>)
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d867      	bhi.n	8001660 <SystemCoreClockUpdate+0xf8>
 8001590:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <SystemCoreClockUpdate+0x30>)
 8001592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001596:	bf00      	nop
 8001598:	080015cd 	.word	0x080015cd
 800159c:	08001661 	.word	0x08001661
 80015a0:	08001661 	.word	0x08001661
 80015a4:	08001661 	.word	0x08001661
 80015a8:	080015d5 	.word	0x080015d5
 80015ac:	08001661 	.word	0x08001661
 80015b0:	08001661 	.word	0x08001661
 80015b4:	08001661 	.word	0x08001661
 80015b8:	080015dd 	.word	0x080015dd
 80015bc:	08001661 	.word	0x08001661
 80015c0:	08001661 	.word	0x08001661
 80015c4:	08001661 	.word	0x08001661
 80015c8:	080015e5 	.word	0x080015e5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015cc:	4a33      	ldr	r2, [pc, #204]	; (800169c <SystemCoreClockUpdate+0x134>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6013      	str	r3, [r2, #0]
      break;
 80015d2:	e049      	b.n	8001668 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <SystemCoreClockUpdate+0x134>)
 80015d6:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <SystemCoreClockUpdate+0x138>)
 80015d8:	601a      	str	r2, [r3, #0]
      break;
 80015da:	e045      	b.n	8001668 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <SystemCoreClockUpdate+0x134>)
 80015de:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <SystemCoreClockUpdate+0x13c>)
 80015e0:	601a      	str	r2, [r3, #0]
      break;
 80015e2:	e041      	b.n	8001668 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80015f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	3301      	adds	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d105      	bne.n	8001612 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001606:	4a26      	ldr	r2, [pc, #152]	; (80016a0 <SystemCoreClockUpdate+0x138>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e00d      	b.n	800162e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d105      	bne.n	8001624 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001618:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <SystemCoreClockUpdate+0x13c>)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e004      	b.n	800162e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0f5b      	lsrs	r3, r3, #29
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	3301      	adds	r3, #1
 8001650:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <SystemCoreClockUpdate+0x134>)
 800165c:	6013      	str	r3, [r2, #0]
      break;
 800165e:	e003      	b.n	8001668 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <SystemCoreClockUpdate+0x134>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6013      	str	r3, [r2, #0]
      break;
 8001666:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <SystemCoreClockUpdate+0x140>)
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <SystemCoreClockUpdate+0x134>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <SystemCoreClockUpdate+0x134>)
 8001688:	6013      	str	r3, [r2, #0]

}
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	08006aec 	.word	0x08006aec
 800169c:	20000004 	.word	0x20000004
 80016a0:	00f42400 	.word	0x00f42400
 80016a4:	01e84800 	.word	0x01e84800
 80016a8:	08006aac 	.word	0x08006aac

080016ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80016ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b0:	3304      	adds	r3, #4

080016b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80016b6:	d3f9      	bcc.n	80016ac <CopyDataInit>
  bx lr
 80016b8:	4770      	bx	lr

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80016ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80016bc:	3004      	adds	r0, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80016be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>
  bx lr
 80016c2:	4770      	bx	lr

080016c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80016c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016c8:	f7ff fefc 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <LoopForever+0x8>)
 80016ce:	490c      	ldr	r1, [pc, #48]	; (8001700 <LoopForever+0xc>)
 80016d0:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <LoopForever+0x10>)
 80016d2:	2300      	movs	r3, #0
 80016d4:	f7ff ffed 	bl	80016b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <LoopForever+0x14>)
 80016da:	490c      	ldr	r1, [pc, #48]	; (800170c <LoopForever+0x18>)
 80016dc:	2300      	movs	r3, #0
 80016de:	f7ff ffee 	bl	80016be <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <LoopForever+0x1c>)
 80016e4:	490b      	ldr	r1, [pc, #44]	; (8001714 <LoopForever+0x20>)
 80016e6:	2300      	movs	r3, #0
 80016e8:	f7ff ffe9 	bl	80016be <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016ec:	f005 f8d8 	bl	80068a0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80016f0:	f7ff fcfe 	bl	80010f0 <main>

080016f4 <LoopForever>:

LoopForever:
  b LoopForever
 80016f4:	e7fe      	b.n	80016f4 <LoopForever>
 80016f6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80016f8:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 80016fc:	20000004 	.word	0x20000004
 8001700:	20000028 	.word	0x20000028
 8001704:	08006b74 	.word	0x08006b74
  INIT_BSS _sbss, _ebss
 8001708:	200001b8 	.word	0x200001b8
 800170c:	2000032c 	.word	0x2000032c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001710:	200301e0 	.word	0x200301e0
 8001714:	20030a57 	.word	0x20030a57

08001718 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_IRQHandler>
	...

0800171c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_Init+0x3c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_Init+0x3c>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001732:	2003      	movs	r0, #3
 8001734:	f000 f9c8 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001738:	2000      	movs	r0, #0
 800173a:	f000 f80f 	bl	800175c <HAL_InitTick>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	e001      	b.n	800174e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800174a:	f7ff fe40 	bl	80013ce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800174e:	79fb      	ldrb	r3, [r7, #7]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	58004000 	.word	0x58004000

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_InitTick+0x6c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d024      	beq.n	80017ba <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001770:	f001 fc8e 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_InitTick+0x6c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001780:	fbb3 f3f1 	udiv	r3, r3, r1
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f9de 	bl	8001b4a <HAL_SYSTICK_Config>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10f      	bne.n	80017b4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b0f      	cmp	r3, #15
 8001798:	d809      	bhi.n	80017ae <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179a:	2200      	movs	r2, #0
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a2:	f000 f99c 	bl	8001ade <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_InitTick+0x70>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e007      	b.n	80017be <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e004      	b.n	80017be <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e001      	b.n	80017be <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	20000008 	.word	0x20000008

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2000000c 	.word	0x2000000c
 80017f4:	20000324 	.word	0x20000324

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000324 	.word	0x20000324

08001810 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTickPrio+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffe2 	bl	80017f8 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_Delay+0x40>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffd2 	bl	80017f8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
    {
    }
  }
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000000c 	.word	0x2000000c

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <__NVIC_EnableIRQ+0x38>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db10      	blt.n	8001940 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4909      	ldr	r1, [pc, #36]	; (800194c <__NVIC_DisableIRQ+0x40>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	3320      	adds	r3, #32
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800193c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0c      	blt.n	800197c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_SetPendingIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	3340      	adds	r3, #64	; 0x40
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0c      	blt.n	80019b8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_ClearPendingIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	3360      	adds	r3, #96	; 0x60
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fecb 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff fee2 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff90 	bl	8001a1c <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5f 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fed5 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fee5 	bl	800190c <__NVIC_DisableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff96 	bl	8001a84 <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff feed 	bl	8001950 <__NVIC_SetPendingIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fefd 	bl	800198c <__NVIC_ClearPendingIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e146      	b.n	8001e3a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8138 	beq.w	8001e34 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d00b      	beq.n	8001be4 <HAL_GPIO_Init+0x48>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd8:	2b11      	cmp	r3, #17
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d130      	bne.n	8001c46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 0201 	and.w	r2, r3, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0xea>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d123      	bne.n	8001cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	6939      	ldr	r1, [r7, #16]
 8001cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0203 	and.w	r2, r3, #3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8092 	beq.w	8001e34 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d10:	4a51      	ldr	r2, [pc, #324]	; (8001e58 <HAL_GPIO_Init+0x2bc>)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d3a:	d013      	beq.n	8001d64 <HAL_GPIO_Init+0x1c8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a47      	ldr	r2, [pc, #284]	; (8001e5c <HAL_GPIO_Init+0x2c0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00d      	beq.n	8001d60 <HAL_GPIO_Init+0x1c4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a46      	ldr	r2, [pc, #280]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0x1c0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a45      	ldr	r2, [pc, #276]	; (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_GPIO_Init+0x1bc>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e006      	b.n	8001d66 <HAL_GPIO_Init+0x1ca>
 8001d58:	2307      	movs	r3, #7
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_Init+0x1ca>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x1ca>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_Init+0x1ca>
 8001d64:	2300      	movs	r3, #0
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d76:	4938      	ldr	r1, [pc, #224]	; (8001e58 <HAL_GPIO_Init+0x2bc>)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d84:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001daa:	4a2f      	ldr	r2, [pc, #188]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e04:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f47f aeb1 	bne.w	8001bac <HAL_GPIO_Init+0x10>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	48000800 	.word	0x48000800
 8001e64:	48001000 	.word	0x48001000
 8001e68:	58000800 	.word	0x58000800

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43d9      	mvns	r1, r3
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	400b      	ands	r3, r1
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_HSEM_IRQHandler+0x30>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_HSEM_IRQHandler+0x30>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	4906      	ldr	r1, [pc, #24]	; (8001f00 <HAL_HSEM_IRQHandler+0x30>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_HSEM_IRQHandler+0x30>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f807 	bl	8001f04 <HAL_HSEM_FreeCallback>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	58001500 	.word	0x58001500

08001f04 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	58000400 	.word	0x58000400

08001f38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f4a:	d101      	bne.n	8001f50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_RCC_HSE_EnableBypass>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_RCC_HSE_DisableBypass>:
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_HSE_Enable>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_HSE_Disable>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_HSE_IsReady>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fe6:	d101      	bne.n	8001fec <LL_RCC_HSE_IsReady+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_RCC_HSE_IsReady+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_RCC_HSI_Enable>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_RCC_HSI_Disable>:
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_RCC_HSI_IsReady>:
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002046:	d101      	bne.n	800204c <LL_RCC_HSI_IsReady+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_RCC_HSI_IsReady+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_RCC_HSI48_Enable>:
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_RCC_HSI48_Disable>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_HSI48_IsReady>:
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d101      	bne.n	80020de <LL_RCC_HSI48_IsReady+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_RCC_HSI48_IsReady+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_RCC_LSE_Enable>:
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_RCC_LSE_Disable>:
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_RCC_LSE_EnableBypass>:
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_RCC_LSE_DisableBypass>:
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_RCC_LSE_IsReady>:
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d101      	bne.n	800218a <LL_RCC_LSE_IsReady+0x18>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_RCC_LSE_IsReady+0x1a>
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_LSI1_Enable>:
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_RCC_LSI1_Disable>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_RCC_LSI1_IsReady>:
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d101      	bne.n	80021f2 <LL_RCC_LSI1_IsReady+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_RCC_LSI1_IsReady+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_RCC_LSI2_Enable>:
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_RCC_LSI2_Disable>:
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_RCC_LSI2_IsReady>:
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b08      	cmp	r3, #8
 8002254:	d101      	bne.n	800225a <LL_RCC_LSI2_IsReady+0x18>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <LL_RCC_LSI2_IsReady+0x1a>
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_RCC_LSI2_SetTrimming>:
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_RCC_MSI_Enable>:
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_RCC_MSI_Disable>:
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6013      	str	r3, [r2, #0]
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_RCC_MSI_IsReady>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d101      	bne.n	80022e6 <LL_RCC_MSI_IsReady+0x16>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_RCC_MSI_IsReady+0x18>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_RCC_MSI_SetRange>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_RCC_MSI_GetRange>:
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2bb0      	cmp	r3, #176	; 0xb0
 8002330:	d901      	bls.n	8002336 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002332:	23b0      	movs	r3, #176	; 0xb0
 8002334:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002336:	687b      	ldr	r3, [r7, #4]
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_RCC_SetSysClkSource>:
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 0203 	bic.w	r2, r3, #3
 8002380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_RCC_GetSysClkSource>:
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_RCC_SetAHBPrescaler>:
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_RCC_SetAHB4Prescaler>:
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002412:	f023 020f 	bic.w	r2, r3, #15
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_RCC_SetAPB1Prescaler>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_RCC_SetAPB2Prescaler>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_RCC_GetAHBPrescaler>:
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_RCC_GetAHB4Prescaler>:
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e4:	6013      	str	r3, [r2, #0]
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002502:	d101      	bne.n	8002508 <LL_RCC_PLL_IsReady+0x18>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <LL_RCC_PLL_IsReady+0x1a>
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0303 	and.w	r3, r3, #3
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d101      	bne.n	800258e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025ae:	d101      	bne.n	80025b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d101      	bne.n	80025da <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025f8:	d101      	bne.n	80025fe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800261c:	d101      	bne.n	8002622 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b08d      	sub	sp, #52	; 0x34
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e37b      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 808f 	beq.w	800276e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002650:	f7ff fea1 	bl	8002396 <LL_RCC_GetSysClkSource>
 8002654:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002656:	f7ff ff82 	bl	800255e <LL_RCC_PLL_GetMainSource>
 800265a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x3e>
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	2b0c      	cmp	r3, #12
 8002666:	d149      	bne.n	80026fc <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	2b01      	cmp	r3, #1
 800266c:	d146      	bne.n	80026fc <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800266e:	f7ff fe2f 	bl	80022d0 <LL_RCC_MSI_IsReady>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_OscConfig+0x54>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e35a      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002688:	f7ff fe47 	bl	800231a <LL_RCC_MSI_GetRange>
 800268c:	4603      	mov	r3, r0
 800268e:	429c      	cmp	r4, r3
 8002690:	d914      	bls.n	80026bc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fd0e 	bl	80030b8 <RCC_SetFlashLatencyFromMSIRange>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e349      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fe21 	bl	80022f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe45 	bl	8002344 <LL_RCC_MSI_SetCalibTrimming>
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fe16 	bl	80022f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fe3a 	bl	8002344 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fcef 	bl	80030b8 <RCC_SetFlashLatencyFromMSIRange>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e32a      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80026e4:	f7fe ff40 	bl	8001568 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026e8:	4bb4      	ldr	r3, [pc, #720]	; (80029bc <HAL_RCC_OscConfig+0x38c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f835 	bl	800175c <HAL_InitTick>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d039      	beq.n	800276c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e31e      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01e      	beq.n	8002742 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002704:	f7ff fdc6 	bl	8002294 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002708:	f7ff f876 	bl	80017f8 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002710:	f7ff f872 	bl	80017f8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e30b      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002722:	f7ff fdd5 	bl	80022d0 <LL_RCC_MSI_IsReady>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f1      	beq.n	8002710 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fdde 	bl	80022f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fe02 	bl	8002344 <LL_RCC_MSI_SetCalibTrimming>
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002742:	f7ff fdb6 	bl	80022b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002746:	f7ff f857 	bl	80017f8 <HAL_GetTick>
 800274a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800274e:	f7ff f853 	bl	80017f8 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e2ec      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002760:	f7ff fdb6 	bl	80022d0 <LL_RCC_MSI_IsReady>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f1      	bne.n	800274e <HAL_RCC_OscConfig+0x11e>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d05a      	beq.n	8002830 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	f7ff fe0c 	bl	8002396 <LL_RCC_GetSysClkSource>
 800277e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002780:	f7ff feed 	bl	800255e <LL_RCC_PLL_GetMainSource>
 8002784:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d005      	beq.n	8002798 <HAL_RCC_OscConfig+0x168>
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d10d      	bne.n	80027ae <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d10a      	bne.n	80027ae <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	f7ff fc1c 	bl	8001fd4 <LL_RCC_HSE_IsReady>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d045      	beq.n	800282e <HAL_RCC_OscConfig+0x1fe>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d141      	bne.n	800282e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e2c5      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d102      	bne.n	80027be <HAL_RCC_OscConfig+0x18e>
 80027b8:	f7ff fbee 	bl	8001f98 <LL_RCC_HSE_Enable>
 80027bc:	e00d      	b.n	80027da <HAL_RCC_OscConfig+0x1aa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c6:	d104      	bne.n	80027d2 <HAL_RCC_OscConfig+0x1a2>
 80027c8:	f7ff fbc8 	bl	8001f5c <LL_RCC_HSE_EnableBypass>
 80027cc:	f7ff fbe4 	bl	8001f98 <LL_RCC_HSE_Enable>
 80027d0:	e003      	b.n	80027da <HAL_RCC_OscConfig+0x1aa>
 80027d2:	f7ff fbf0 	bl	8001fb6 <LL_RCC_HSE_Disable>
 80027d6:	f7ff fbd0 	bl	8001f7a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7ff f809 	bl	80017f8 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ea:	f7ff f805 	bl	80017f8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b64      	cmp	r3, #100	; 0x64
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e29e      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80027fc:	f7ff fbea 	bl	8001fd4 <LL_RCC_HSE_IsReady>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f1      	beq.n	80027ea <HAL_RCC_OscConfig+0x1ba>
 8002806:	e013      	b.n	8002830 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fff6 	bl	80017f8 <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fff2 	bl	80017f8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e28b      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002822:	f7ff fbd7 	bl	8001fd4 <LL_RCC_HSE_IsReady>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f1      	bne.n	8002810 <HAL_RCC_OscConfig+0x1e0>
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d051      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283c:	f7ff fdab 	bl	8002396 <LL_RCC_GetSysClkSource>
 8002840:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002842:	f7ff fe8c 	bl	800255e <LL_RCC_PLL_GetMainSource>
 8002846:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b04      	cmp	r3, #4
 800284c:	d005      	beq.n	800285a <HAL_RCC_OscConfig+0x22a>
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d113      	bne.n	800287c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d110      	bne.n	800287c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800285a:	f7ff fbeb 	bl	8002034 <LL_RCC_HSI_IsReady>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_OscConfig+0x240>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e264      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fbef 	bl	8002058 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287a:	e031      	b.n	80028e0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d019      	beq.n	80028b8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	f7ff fbb8 	bl	8001ff8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe ffb6 	bl	80017f8 <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002890:	f7fe ffb2 	bl	80017f8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e24b      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028a2:	f7ff fbc7 	bl	8002034 <LL_RCC_HSI_IsReady>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f1      	beq.n	8002890 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fbd1 	bl	8002058 <LL_RCC_HSI_SetCalibTrimming>
 80028b6:	e013      	b.n	80028e0 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b8:	f7ff fbad 	bl	8002016 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe ff9c 	bl	80017f8 <HAL_GetTick>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fe ff98 	bl	80017f8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e231      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80028d6:	f7ff fbad 	bl	8002034 <LL_RCC_HSI_IsReady>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f1      	bne.n	80028c4 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a2 	beq.w	8002a3e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d075      	beq.n	80029ee <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d046      	beq.n	800299c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800290e:	f7ff fc64 	bl	80021da <LL_RCC_LSI1_IsReady>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d113      	bne.n	8002940 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002918:	f7ff fc3d 	bl	8002196 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800291c:	f7fe ff6c 	bl	80017f8 <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002924:	f7fe ff68 	bl	80017f8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e201      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002936:	f7ff fc50 	bl	80021da <LL_RCC_LSI1_IsReady>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f1      	beq.n	8002924 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002940:	f7ff fc5d 	bl	80021fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe ff58 	bl	80017f8 <HAL_GetTick>
 8002948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800294c:	f7fe ff54 	bl	80017f8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b03      	cmp	r3, #3
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e1ed      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800295e:	f7ff fc70 	bl	8002242 <LL_RCC_LSI2_IsReady>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f1      	beq.n	800294c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fc7a 	bl	8002266 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002972:	f7ff fc21 	bl	80021b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe ff3f 	bl	80017f8 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800297e:	f7fe ff3b 	bl	80017f8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1d4      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002990:	f7ff fc23 	bl	80021da <LL_RCC_LSI1_IsReady>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f1      	bne.n	800297e <HAL_RCC_OscConfig+0x34e>
 800299a:	e050      	b.n	8002a3e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800299c:	f7ff fbfb 	bl	8002196 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe ff2a 	bl	80017f8 <HAL_GetTick>
 80029a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029a8:	f7fe ff26 	bl	80017f8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d904      	bls.n	80029c0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1bf      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
 80029ba:	bf00      	nop
 80029bc:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029c0:	f7ff fc0b 	bl	80021da <LL_RCC_LSI1_IsReady>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ee      	beq.n	80029a8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80029ca:	f7ff fc29 	bl	8002220 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029d0:	f7fe ff12 	bl	80017f8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1ab      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029e2:	f7ff fc2e 	bl	8002242 <LL_RCC_LSI2_IsReady>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f1      	bne.n	80029d0 <HAL_RCC_OscConfig+0x3a0>
 80029ec:	e027      	b.n	8002a3e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80029ee:	f7ff fc17 	bl	8002220 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe ff01 	bl	80017f8 <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029fa:	f7fe fefd 	bl	80017f8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e196      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a0c:	f7ff fc19 	bl	8002242 <LL_RCC_LSI2_IsReady>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f1      	bne.n	80029fa <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002a16:	f7ff fbcf 	bl	80021b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe feed 	bl	80017f8 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a22:	f7fe fee9 	bl	80017f8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e182      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a34:	f7ff fbd1 	bl	80021da <LL_RCC_LSI1_IsReady>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d05b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4a:	4bb4      	ldr	r3, [pc, #720]	; (8002d1c <HAL_RCC_OscConfig+0x6ec>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d114      	bne.n	8002a80 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a56:	f7ff fa5f 	bl	8001f18 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fecd 	bl	80017f8 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fe fec9 	bl	80017f8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e162      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a74:	4ba9      	ldr	r3, [pc, #676]	; (8002d1c <HAL_RCC_OscConfig+0x6ec>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0x45e>
 8002a88:	f7ff fb2f 	bl	80020ea <LL_RCC_LSE_Enable>
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x478>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d104      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x470>
 8002a96:	f7ff fb4a 	bl	800212e <LL_RCC_LSE_EnableBypass>
 8002a9a:	f7ff fb26 	bl	80020ea <LL_RCC_LSE_Enable>
 8002a9e:	e003      	b.n	8002aa8 <HAL_RCC_OscConfig+0x478>
 8002aa0:	f7ff fb34 	bl	800210c <LL_RCC_LSE_Disable>
 8002aa4:	f7ff fb54 	bl	8002150 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d014      	beq.n	8002ada <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fea2 	bl	80017f8 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fe9e 	bl	80017f8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e135      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ace:	f7ff fb50 	bl	8002172 <LL_RCC_LSE_IsReady>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ef      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x488>
 8002ad8:	e013      	b.n	8002b02 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe fe8d 	bl	80017f8 <HAL_GetTick>
 8002ade:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fe89 	bl	80017f8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e120      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002af8:	f7ff fb3b 	bl	8002172 <LL_RCC_LSE_IsReady>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b16:	f7ff fab4 	bl	8002082 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fe6d 	bl	80017f8 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b22:	f7fe fe69 	bl	80017f8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e102      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b34:	f7ff fac7 	bl	80020c6 <LL_RCC_HSI48_IsReady>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f1      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4f2>
 8002b3e:	e013      	b.n	8002b68 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b40:	f7ff fab0 	bl	80020a4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fe fe58 	bl	80017f8 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4c:	f7fe fe54 	bl	80017f8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0ed      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b5e:	f7ff fab2 	bl	80020c6 <LL_RCC_HSI48_IsReady>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f1      	bne.n	8002b4c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80e3 	beq.w	8002d38 <HAL_RCC_OscConfig+0x708>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b72:	f7ff fc10 	bl	8002396 <LL_RCC_GetSysClkSource>
 8002b76:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	f040 80a6 	bne.w	8002cd6 <HAL_RCC_OscConfig+0x6a6>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0203 	and.w	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d123      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d11c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d114      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d10d      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d054      	beq.n	8002c8a <HAL_RCC_OscConfig+0x65a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d04f      	beq.n	8002c86 <HAL_RCC_OscConfig+0x656>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002be6:	f7ff fc74 	bl	80024d2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bea:	f7fe fe05 	bl	80017f8 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x5d4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7fe fe01 	bl	80017f8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x5d4>
              {
                return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e09a      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ef      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5c2>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x6f0>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c24:	4311      	orrs	r1, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c2a:	0212      	lsls	r2, r2, #8
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c32:	4311      	orrs	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c38:	4311      	orrs	r1, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c48:	f7ff fc34 	bl	80024b4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c5c:	f7fe fdcc 	bl	80017f8 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x646>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fdc8 	bl	80017f8 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x646>
              {
                return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e061      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <HAL_RCC_OscConfig+0x634>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c84:	e058      	b.n	8002d38 <HAL_RCC_OscConfig+0x708>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e057      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d14f      	bne.n	8002d38 <HAL_RCC_OscConfig+0x708>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c98:	f7ff fc0c 	bl	80024b4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cac:	f7fe fda4 	bl	80017f8 <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x696>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe fda0 	bl	80017f8 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x696>
            {
              return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e039      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ef      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x684>
 8002cd4:	e030      	b.n	8002d38 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	d02b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x704>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	f7ff fbf9 	bl	80024d2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fd7a 	bl	80017f8 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d06:	e00d      	b.n	8002d24 <HAL_RCC_OscConfig+0x6f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fd76 	bl	80017f8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d906      	bls.n	8002d24 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e00f      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
 8002d1a:	bf00      	nop
 8002d1c:	58000400 	.word	0x58000400
 8002d20:	11c1808c 	.word	0x11c1808c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ea      	bne.n	8002d08 <HAL_RCC_OscConfig+0x6d8>
 8002d32:	e001      	b.n	8002d38 <HAL_RCC_OscConfig+0x708>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x70a>
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3734      	adds	r7, #52	; 0x34
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd90      	pop	{r4, r7, pc}
 8002d42:	bf00      	nop

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e12a      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b97      	ldr	r3, [pc, #604]	; (8002fb8 <HAL_RCC_ClockConfig+0x274>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d91b      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b94      	ldr	r3, [pc, #592]	; (8002fb8 <HAL_RCC_ClockConfig+0x274>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 0207 	bic.w	r2, r3, #7
 8002d6e:	4992      	ldr	r1, [pc, #584]	; (8002fb8 <HAL_RCC_ClockConfig+0x274>)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d76:	f7fe fd3f 	bl	80017f8 <HAL_GetTick>
 8002d7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d7e:	f7fe fd3b 	bl	80017f8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e10e      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d90:	4b89      	ldr	r3, [pc, #548]	; (8002fb8 <HAL_RCC_ClockConfig+0x274>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d1ef      	bne.n	8002d7e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fafd 	bl	80023ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fd20 	bl	80017f8 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dbc:	f7fe fd1c 	bl	80017f8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0ef      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002dce:	f7ff fbd2 	bl	8002576 <LL_RCC_IsActiveFlag_HPRE>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f1      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d016      	beq.n	8002e12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff faf4 	bl	80023d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dee:	f7fe fd03 	bl	80017f8 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002df6:	f7fe fcff 	bl	80017f8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0d2      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e08:	f7ff fbc7 	bl	800259a <LL_RCC_IsActiveFlag_C2HPRE>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f1      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff faed 	bl	8002402 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e28:	f7fe fce6 	bl	80017f8 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e30:	f7fe fce2 	bl	80017f8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0b5      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e42:	f7ff fbbd 	bl	80025c0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f1      	beq.n	8002e30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d016      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fae7 	bl	8002430 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e62:	f7fe fcc9 	bl	80017f8 <HAL_GetTick>
 8002e66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e6a:	f7fe fcc5 	bl	80017f8 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e098      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e7c:	f7ff fbb3 	bl	80025e6 <LL_RCC_IsActiveFlag_PPRE1>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f1      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fadd 	bl	8002458 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe fcab 	bl	80017f8 <HAL_GetTick>
 8002ea2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ea6:	f7fe fca7 	bl	80017f8 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e07a      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002eb8:	f7ff fba7 	bl	800260a <LL_RCC_IsActiveFlag_PPRE2>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f1      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d043      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ed6:	f7ff f87d 	bl	8001fd4 <LL_RCC_HSE_IsReady>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11e      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e064      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002eec:	f7ff fb00 	bl	80024f0 <LL_RCC_PLL_IsReady>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d113      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e059      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f02:	f7ff f9e5 	bl	80022d0 <LL_RCC_MSI_IsReady>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d108      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e04e      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f10:	f7ff f890 	bl	8002034 <LL_RCC_HSI_IsReady>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e047      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fa23 	bl	800236e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f28:	f7fe fc66 	bl	80017f8 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7fe fc62 	bl	80017f8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e033      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	f7ff fa26 	bl	8002396 <LL_RCC_GetSysClkSource>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d1ec      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_RCC_ClockConfig+0x274>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d21b      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCC_ClockConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 0207 	bic.w	r2, r3, #7
 8002f6c:	4912      	ldr	r1, [pc, #72]	; (8002fb8 <HAL_RCC_ClockConfig+0x274>)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f74:	f7fe fc40 	bl	80017f8 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f7c:	f7fe fc3c 	bl	80017f8 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e00f      	b.n	8002fae <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1ef      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002f9c:	f7fe fae4 	bl	8001568 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002fa0:	f7fe fc36 	bl	8001810 <HAL_GetTickPrio>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fbd8 	bl	800175c <HAL_InitTick>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	58004000 	.word	0x58004000

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc2:	f7ff f9e8 	bl	8002396 <LL_RCC_GetSysClkSource>
 8002fc6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002fce:	f7ff f9a4 	bl	800231a <LL_RCC_MSI_GetRange>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e04a      	b.n	800307a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e044      	b.n	800307a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d10a      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ff6:	f7fe ff9f 	bl	8001f38 <LL_RCC_HSE_IsEnabledDiv2>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d102      	bne.n	8003006 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003000:	4b21      	ldr	r3, [pc, #132]	; (8003088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e039      	b.n	800307a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e036      	b.n	800307a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800300c:	f7ff faa7 	bl	800255e <LL_RCC_PLL_GetMainSource>
 8003010:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d002      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x62>
 8003018:	2b03      	cmp	r3, #3
 800301a:	d003      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x68>
 800301c:	e00d      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003020:	60bb      	str	r3, [r7, #8]
        break;
 8003022:	e015      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003024:	f7fe ff88 	bl	8001f38 <LL_RCC_HSE_IsEnabledDiv2>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800302e:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003030:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003032:	e00d      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003036:	60bb      	str	r3, [r7, #8]
        break;
 8003038:	e00a      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800303a:	f7ff f96e 	bl	800231a <LL_RCC_MSI_GetRange>
 800303e:	4603      	mov	r3, r0
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304c:	60bb      	str	r3, [r7, #8]
        break;
 800304e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003050:	f7ff fa60 	bl	8002514 <LL_RCC_PLL_GetN>
 8003054:	4602      	mov	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	fb03 f402 	mul.w	r4, r3, r2
 800305c:	f7ff fa73 	bl	8002546 <LL_RCC_PLL_GetDivider>
 8003060:	4603      	mov	r3, r0
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	3301      	adds	r3, #1
 8003066:	fbb4 f4f3 	udiv	r4, r4, r3
 800306a:	f7ff fa60 	bl	800252e <LL_RCC_PLL_GetR>
 800306e:	4603      	mov	r3, r0
 8003070:	0f5b      	lsrs	r3, r3, #29
 8003072:	3301      	adds	r3, #1
 8003074:	fbb4 f3f3 	udiv	r3, r4, r3
 8003078:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	08006aec 	.word	0x08006aec
 8003088:	00f42400 	.word	0x00f42400
 800308c:	01e84800 	.word	0x01e84800

08003090 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003090:	b598      	push	{r3, r4, r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003094:	f7ff ff92 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8003098:	4604      	mov	r4, r0
 800309a:	f7ff f9f1 	bl	8002480 <LL_RCC_GetAHBPrescaler>
 800309e:	4603      	mov	r3, r0
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd98      	pop	{r3, r4, r7, pc}
 80030b4:	08006aac 	.word	0x08006aac

080030b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2bb0      	cmp	r3, #176	; 0xb0
 80030c4:	d903      	bls.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e007      	b.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a10      	ldr	r2, [pc, #64]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80030de:	f7ff f9db 	bl	8002498 <LL_RCC_GetAHB4Prescaler>
 80030e2:	4603      	mov	r3, r0
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	4a0c      	ldr	r2, [pc, #48]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80030ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4a09      	ldr	r2, [pc, #36]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	0c9b      	lsrs	r3, r3, #18
 8003102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f80c 	bl	8003124 <RCC_SetFlashLatency>
 800310c:	4603      	mov	r3, r0
#endif
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	08006aec 	.word	0x08006aec
 800311c:	08006aac 	.word	0x08006aac
 8003120:	431bde83 	.word	0x431bde83

08003124 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b08f      	sub	sp, #60	; 0x3c
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800312e:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <RCC_SetFlashLatency+0xa0>)
 8003130:	f107 041c 	add.w	r4, r7, #28
 8003134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <RCC_SetFlashLatency+0xa4>)
 800313c:	f107 040c 	add.w	r4, r7, #12
 8003140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003146:	2300      	movs	r3, #0
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800314a:	2300      	movs	r3, #0
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
 800314e:	e015      	b.n	800317c <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003158:	4413      	add	r3, r2
 800315a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	429a      	cmp	r2, r3
 8003162:	d808      	bhi.n	8003176 <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800316c:	4413      	add	r3, r2
 800316e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003174:	e005      	b.n	8003182 <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	3301      	adds	r3, #1
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	2b03      	cmp	r3, #3
 8003180:	d9e6      	bls.n	8003150 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <RCC_SetFlashLatency+0xa8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 0207 	bic.w	r2, r3, #7
 800318a:	4910      	ldr	r1, [pc, #64]	; (80031cc <RCC_SetFlashLatency+0xa8>)
 800318c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003192:	f7fe fb31 	bl	80017f8 <HAL_GetTick>
 8003196:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003198:	e008      	b.n	80031ac <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800319a:	f7fe fb2d 	bl	80017f8 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e007      	b.n	80031bc <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <RCC_SetFlashLatency+0xa8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d1ef      	bne.n	800319a <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	373c      	adds	r7, #60	; 0x3c
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	08006944 	.word	0x08006944
 80031c8:	08006954 	.word	0x08006954
 80031cc:	58004000 	.word	0x58004000

080031d0 <LL_RCC_LSE_IsEnabled>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <LL_RCC_LSE_IsEnabled+0x18>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <LL_RCC_LSE_IsEnabled+0x1a>
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_RCC_LSE_IsReady>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b02      	cmp	r3, #2
 8003206:	d101      	bne.n	800320c <LL_RCC_LSE_IsReady+0x18>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <LL_RCC_LSE_IsReady+0x1a>
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_SetRFWKPClockSource>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003228:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800322c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_RCC_SetUSARTClockSource>:
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800324c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f023 0203 	bic.w	r2, r3, #3
 8003258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_RCC_SetI2CClockSource>:
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <LL_RCC_SetLPTIMClockSource>:
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_RCC_SetRNGClockSource>:
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80032f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_RCC_SetCLK48ClockSource>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800331e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <LL_RCC_SetADCClockSource>:
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800334a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_RCC_SetRTCClockSource>:
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <LL_RCC_GetRTCClockSource>:
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_RCC_ForceBackupDomainReset>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <LL_RCC_ReleaseBackupDomainReset>:
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80033f4:	2300      	movs	r3, #0
 80033f6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80033f8:	2300      	movs	r3, #0
 80033fa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003404:	2b00      	cmp	r3, #0
 8003406:	d046      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003408:	f7ff ffc1 	bl	800338e <LL_RCC_GetRTCClockSource>
 800340c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	429a      	cmp	r2, r3
 8003416:	d03c      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003418:	f7fe fd7e 	bl	8001f18 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff9b 	bl	8003362 <LL_RCC_SetRTCClockSource>
 800342c:	e02e      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003438:	f7ff ffb6 	bl	80033a8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800343c:	f7ff ffc5 	bl	80033ca <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800344e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003458:	f7ff feba 	bl	80031d0 <LL_RCC_LSE_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d114      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003462:	f7fe f9c9 	bl	80017f8 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003468:	e00b      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe f9c5 	bl	80017f8 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	; 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d902      	bls.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	77fb      	strb	r3, [r7, #31]
              break;
 8003480:	e004      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003482:	f7ff feb7 	bl	80031f4 <LL_RCC_LSE_IsReady>
 8003486:	4603      	mov	r3, r0
 8003488:	2b01      	cmp	r3, #1
 800348a:	d1ee      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800348c:	7ffb      	ldrb	r3, [r7, #31]
 800348e:	77bb      	strb	r3, [r7, #30]
 8003490:	e001      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	7ffb      	ldrb	r3, [r7, #31]
 8003494:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fecc 	bl	8003244 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fef4 	bl	80032aa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fee9 	bl	80032aa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fec1 	bl	8003270 <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d02b      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d008      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fedf 	bl	80032de <LL_RCC_SetRNGClockSource>
 8003520:	e00a      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	2000      	movs	r0, #0
 800352e:	f7ff fed6 	bl	80032de <LL_RCC_SetRNGClockSource>
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff fee9 	bl	800330a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003540:	d107      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800354c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003550:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	2b00      	cmp	r3, #0
 800355c:	d011      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fee7 	bl	8003336 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003570:	d107      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fe40 	bl	8003218 <LL_RCC_SetRFWKPClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8003598:	7fbb      	ldrb	r3, [r7, #30]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e090      	b.n	80036d6 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fd ff1f 	bl	800140c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	22ca      	movs	r2, #202	; 0xca
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2253      	movs	r2, #83	; 0x53
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f89f 	bl	800372a <RTC_EnterInitMode>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	22ff      	movs	r2, #255	; 0xff
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e067      	b.n	80036d6 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003618:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68d2      	ldr	r2, [r2, #12]
 8003640:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6919      	ldr	r1, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003664:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0203 	bic.w	r2, r2, #3
 8003674:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d113      	bne.n	80036c4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f81e 	bl	80036de <HAL_RTC_WaitForSynchro>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	22ff      	movs	r2, #255	; 0xff
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2204      	movs	r2, #4
 80036b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e008      	b.n	80036d6 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	22ff      	movs	r2, #255	; 0xff
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80036f6:	f7fe f87f 	bl	80017f8 <HAL_GetTick>
 80036fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036fc:	e009      	b.n	8003712 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036fe:	f7fe f87b 	bl	80017f8 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370c:	d901      	bls.n	8003712 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e007      	b.n	8003722 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ee      	beq.n	80036fe <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d119      	bne.n	8003774 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003748:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800374a:	f7fe f855 	bl	80017f8 <HAL_GetTick>
 800374e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003750:	e009      	b.n	8003766 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003752:	f7fe f851 	bl	80017f8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003760:	d901      	bls.n	8003766 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e007      	b.n	8003776 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b088      	sub	sp, #32
 8003782:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	2218      	movs	r2, #24
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ff45 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003796:	233f      	movs	r3, #63	; 0x3f
 8003798:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800379a:	2381      	movs	r3, #129	; 0x81
 800379c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80037a6:	f107 0308 	add.w	r3, r7, #8
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 f9e7 	bl	8004b80 <hci_send_req>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da01      	bge.n	80037bc <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80037b8:	23ff      	movs	r3, #255	; 0xff
 80037ba:	e000      	b.n	80037be <aci_gap_set_non_discoverable+0x40>
  return status;
 80037bc:	79fb      	ldrb	r3, [r7, #7]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80037c6:	b5b0      	push	{r4, r5, r7, lr}
 80037c8:	b0ce      	sub	sp, #312	; 0x138
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	4605      	mov	r5, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	1dfb      	adds	r3, r7, #7
 80037d6:	462a      	mov	r2, r5
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	4622      	mov	r2, r4
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	1cbb      	adds	r3, r7, #2
 80037e2:	4602      	mov	r2, r0
 80037e4:	801a      	strh	r2, [r3, #0]
 80037e6:	1dbb      	adds	r3, r7, #6
 80037e8:	460a      	mov	r2, r1
 80037ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80037ec:	f107 0310 	add.w	r3, r7, #16
 80037f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80037f4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80037f8:	3308      	adds	r3, #8
 80037fa:	f107 0210 	add.w	r2, r7, #16
 80037fe:	4413      	add	r3, r2
 8003800:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003804:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003808:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800380c:	4413      	add	r3, r2
 800380e:	3309      	adds	r3, #9
 8003810:	f107 0210 	add.w	r2, r7, #16
 8003814:	4413      	add	r3, r2
 8003816:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800381a:	f107 030f 	add.w	r3, r7, #15
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003828:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800382c:	1dfa      	adds	r2, r7, #7
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003836:	3301      	adds	r3, #1
 8003838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800383c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003840:	1d3a      	adds	r2, r7, #4
 8003842:	8812      	ldrh	r2, [r2, #0]
 8003844:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003848:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800384c:	3302      	adds	r3, #2
 800384e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003852:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003856:	1cba      	adds	r2, r7, #2
 8003858:	8812      	ldrh	r2, [r2, #0]
 800385a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800385e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003862:	3302      	adds	r3, #2
 8003864:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8003868:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800386c:	1dba      	adds	r2, r7, #6
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003876:	3301      	adds	r3, #1
 8003878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800387c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003880:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003884:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800388a:	3301      	adds	r3, #1
 800388c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8003890:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003894:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003898:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800389a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800389e:	3301      	adds	r3, #1
 80038a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80038a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038a8:	3308      	adds	r3, #8
 80038aa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80038ae:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fea4 	bl	8004600 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80038b8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80038bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80038c0:	4413      	add	r3, r2
 80038c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80038c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038ca:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80038ce:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80038d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038d4:	3301      	adds	r3, #1
 80038d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80038da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038de:	3301      	adds	r3, #1
 80038e0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80038e4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fe89 	bl	8004600 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80038ee:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80038f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80038f6:	4413      	add	r3, r2
 80038f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80038fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003900:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003904:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800390a:	3302      	adds	r3, #2
 800390c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8003910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003914:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003918:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800391a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800391e:	3302      	adds	r3, #2
 8003920:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003928:	2218      	movs	r2, #24
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fe77 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003932:	233f      	movs	r3, #63	; 0x3f
 8003934:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003938:	2383      	movs	r3, #131	; 0x83
 800393a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800393e:	f107 0310 	add.w	r3, r7, #16
 8003942:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800394a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800394e:	f107 030f 	add.w	r3, r7, #15
 8003952:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800395c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f001 f90c 	bl	8004b80 <hci_send_req>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	da01      	bge.n	8003972 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800396e:	23ff      	movs	r3, #255	; 0xff
 8003970:	e002      	b.n	8003978 <aci_gap_set_discoverable+0x1b2>
  return status;
 8003972:	f107 030f 	add.w	r3, r7, #15
 8003976:	781b      	ldrb	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800397e:	46bd      	mov	sp, r7
 8003980:	bdb0      	pop	{r4, r5, r7, pc}

08003982 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b0cc      	sub	sp, #304	; 0x130
 8003986:	af00      	add	r7, sp, #0
 8003988:	4602      	mov	r2, r0
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800398e:	f107 0310 	add.w	r3, r7, #16
 8003992:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003996:	f107 030f 	add.w	r3, r7, #15
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80039a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039a8:	1dfa      	adds	r2, r7, #7
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80039ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039b2:	3301      	adds	r3, #1
 80039b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80039b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039bc:	2218      	movs	r2, #24
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fe2d 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 80039c6:	233f      	movs	r3, #63	; 0x3f
 80039c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80039cc:	2385      	movs	r3, #133	; 0x85
 80039ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80039d2:	f107 0310 	add.w	r3, r7, #16
 80039d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80039da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80039e2:	f107 030f 	add.w	r3, r7, #15
 80039e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80039f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 f8c2 	bl	8004b80 <hci_send_req>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da01      	bge.n	8003a06 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8003a02:	23ff      	movs	r3, #255	; 0xff
 8003a04:	e002      	b.n	8003a0c <aci_gap_set_io_capability+0x8a>
  return status;
 8003a06:	f107 030f 	add.w	r3, r7, #15
 8003a0a:	781b      	ldrb	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8003a16:	b5b0      	push	{r4, r5, r7, lr}
 8003a18:	b0cc      	sub	sp, #304	; 0x130
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	1dfb      	adds	r3, r7, #7
 8003a26:	462a      	mov	r2, r5
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	1dbb      	adds	r3, r7, #6
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	1d7b      	adds	r3, r7, #5
 8003a32:	4602      	mov	r2, r0
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	460a      	mov	r2, r1
 8003a3a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8003a3c:	f107 0310 	add.w	r3, r7, #16
 8003a40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003a44:	f107 030f 	add.w	r3, r7, #15
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8003a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a56:	1dfa      	adds	r2, r7, #7
 8003a58:	7812      	ldrb	r2, [r2, #0]
 8003a5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003a5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a60:	3301      	adds	r3, #1
 8003a62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8003a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a6a:	1dba      	adds	r2, r7, #6
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003a70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a74:	3301      	adds	r3, #1
 8003a76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8003a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a7e:	1d7a      	adds	r2, r7, #5
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a88:	3301      	adds	r3, #1
 8003a8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8003a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a92:	1d3a      	adds	r2, r7, #4
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8003a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8003aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003aa6:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8003aaa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003aac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8003ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003aba:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8003abe:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8003aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ace:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003ad2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8003ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ae2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003ae6:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8003aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aee:	3304      	adds	r3, #4
 8003af0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8003af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003af8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8003afc:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8003afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b02:	3301      	adds	r3, #1
 8003b04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003b08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b0c:	2218      	movs	r2, #24
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fd85 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003b16:	233f      	movs	r3, #63	; 0x3f
 8003b18:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8003b1c:	2386      	movs	r3, #134	; 0x86
 8003b1e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003b22:	f107 0310 	add.w	r3, r7, #16
 8003b26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003b32:	f107 030f 	add.w	r3, r7, #15
 8003b36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f81a 	bl	8004b80 <hci_send_req>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da01      	bge.n	8003b56 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8003b52:	23ff      	movs	r3, #255	; 0xff
 8003b54:	e002      	b.n	8003b5c <aci_gap_set_authentication_requirement+0x146>
  return status;
 8003b56:	f107 030f 	add.w	r3, r7, #15
 8003b5a:	781b      	ldrb	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bdb0      	pop	{r4, r5, r7, pc}

08003b66 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8003b66:	b590      	push	{r4, r7, lr}
 8003b68:	b0cd      	sub	sp, #308	; 0x134
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4608      	mov	r0, r1
 8003b70:	4611      	mov	r1, r2
 8003b72:	463a      	mov	r2, r7
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	4622      	mov	r2, r4
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	1dbb      	adds	r3, r7, #6
 8003b7e:	4602      	mov	r2, r0
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	1d7b      	adds	r3, r7, #5
 8003b84:	460a      	mov	r2, r1
 8003b86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8003b88:	f107 0310 	add.w	r3, r7, #16
 8003b8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003b90:	f107 0308 	add.w	r3, r7, #8
 8003b94:	2207      	movs	r2, #7
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fd41 	bl	8004620 <Osal_MemSet>
  int index_input = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8003ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ba8:	1dfa      	adds	r2, r7, #7
 8003baa:	7812      	ldrb	r2, [r2, #0]
 8003bac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8003bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bbc:	1dba      	adds	r2, r7, #6
 8003bbe:	7812      	ldrb	r2, [r2, #0]
 8003bc0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8003bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bd0:	1d7a      	adds	r2, r7, #5
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003be0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003be4:	2218      	movs	r2, #24
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fd19 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003bee:	233f      	movs	r3, #63	; 0x3f
 8003bf0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8003bf4:	238a      	movs	r3, #138	; 0x8a
 8003bf6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003bfa:	f107 0310 	add.w	r3, r7, #16
 8003bfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003c12:	2307      	movs	r3, #7
 8003c14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003c18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 ffae 	bl	8004b80 <hci_send_req>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da01      	bge.n	8003c2e <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8003c2a:	23ff      	movs	r3, #255	; 0xff
 8003c2c:	e021      	b.n	8003c72 <aci_gap_init+0x10c>
  if ( resp.Status )
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <aci_gap_init+0xda>
    return resp.Status;
 8003c38:	f107 0308 	add.w	r3, r7, #8
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	e018      	b.n	8003c72 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8003c40:	f107 0308 	add.w	r3, r7, #8
 8003c44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003c5e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c6e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd90      	pop	{r4, r7, pc}

08003c7c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b0cc      	sub	sp, #304	; 0x130
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4602      	mov	r2, r0
 8003c84:	463b      	mov	r3, r7
 8003c86:	6019      	str	r1, [r3, #0]
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8003c8c:	f107 0310 	add.w	r3, r7, #16
 8003c90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003c94:	f107 030f 	add.w	r3, r7, #15
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8003ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ca6:	1dfa      	adds	r2, r7, #7
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8003cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cba:	1c58      	adds	r0, r3, #1
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	f000 fc9c 	bl	8004600 <Osal_MemCpy>
  index_input += AdvDataLen;
 8003cc8:	1dfb      	adds	r3, r7, #7
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003cd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003cda:	2218      	movs	r2, #24
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fc9e 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003ce4:	233f      	movs	r3, #63	; 0x3f
 8003ce6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8003cea:	238e      	movs	r3, #142	; 0x8e
 8003cec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003cf0:	f107 0310 	add.w	r3, r7, #16
 8003cf4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cfc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003d00:	f107 030f 	add.w	r3, r7, #15
 8003d04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003d0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 ff33 	bl	8004b80 <hci_send_req>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	da01      	bge.n	8003d24 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8003d20:	23ff      	movs	r3, #255	; 0xff
 8003d22:	e002      	b.n	8003d2a <aci_gap_update_adv_data+0xae>
  return status;
 8003d24:	f107 030f 	add.w	r3, r7, #15
 8003d28:	781b      	ldrb	r3, [r3, #0]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003d3e:	f107 0308 	add.w	r3, r7, #8
 8003d42:	2218      	movs	r2, #24
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fc6a 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003d4c:	233f      	movs	r3, #63	; 0x3f
 8003d4e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8003d50:	2392      	movs	r3, #146	; 0x92
 8003d52:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003d54:	1dfb      	adds	r3, r7, #7
 8003d56:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003d5c:	f107 0308 	add.w	r3, r7, #8
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 ff0c 	bl	8004b80 <hci_send_req>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da01      	bge.n	8003d72 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003d6e:	23ff      	movs	r3, #255	; 0xff
 8003d70:	e000      	b.n	8003d74 <aci_gap_configure_whitelist+0x40>
  return status;
 8003d72:	79fb      	ldrb	r3, [r7, #7]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003d86:	f107 0308 	add.w	r3, r7, #8
 8003d8a:	2218      	movs	r2, #24
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fc46 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003d94:	233f      	movs	r3, #63	; 0x3f
 8003d96:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8003d98:	f240 1301 	movw	r3, #257	; 0x101
 8003d9c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003d9e:	1dfb      	adds	r3, r7, #7
 8003da0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fee7 	bl	8004b80 <hci_send_req>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da01      	bge.n	8003dbc <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8003db8:	23ff      	movs	r3, #255	; 0xff
 8003dba:	e000      	b.n	8003dbe <aci_gatt_init+0x42>
  return status;
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8003dc6:	b590      	push	{r4, r7, lr}
 8003dc8:	b0cf      	sub	sp, #316	; 0x13c
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4604      	mov	r4, r0
 8003dce:	4638      	mov	r0, r7
 8003dd0:	6001      	str	r1, [r0, #0]
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	1dfb      	adds	r3, r7, #7
 8003dd8:	4622      	mov	r2, r4
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	1dbb      	adds	r3, r7, #6
 8003dde:	4602      	mov	r2, r0
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	1d7b      	adds	r3, r7, #5
 8003de4:	460a      	mov	r2, r1
 8003de6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8003df0:	1dfb      	adds	r3, r7, #7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d007      	beq.n	8003e08 <aci_gatt_add_service+0x42>
 8003df8:	1dfb      	adds	r3, r7, #7
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d101      	bne.n	8003e04 <aci_gatt_add_service+0x3e>
 8003e00:	2311      	movs	r3, #17
 8003e02:	e002      	b.n	8003e0a <aci_gatt_add_service+0x44>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <aci_gatt_add_service+0x44>
 8003e08:	2303      	movs	r3, #3
 8003e0a:	f107 0210 	add.w	r2, r7, #16
 8003e0e:	4413      	add	r3, r2
 8003e10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	2203      	movs	r2, #3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fbff 	bl	8004620 <Osal_MemSet>
  int index_input = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8003e28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e2c:	1dfa      	adds	r2, r7, #7
 8003e2e:	7812      	ldrb	r2, [r2, #0]
 8003e30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003e32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e36:	3301      	adds	r3, #1
 8003e38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8003e3c:	1dfb      	adds	r3, r7, #7
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d002      	beq.n	8003e4a <aci_gatt_add_service+0x84>
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d004      	beq.n	8003e52 <aci_gatt_add_service+0x8c>
 8003e48:	e007      	b.n	8003e5a <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003e50:	e005      	b.n	8003e5e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8003e52:	2310      	movs	r3, #16
 8003e54:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003e58:	e001      	b.n	8003e5e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8003e5a:	2347      	movs	r3, #71	; 0x47
 8003e5c:	e05d      	b.n	8003f1a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8003e5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e62:	1c58      	adds	r0, r3, #1
 8003e64:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8003e68:	463b      	mov	r3, r7
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	f000 fbc8 	bl	8004600 <Osal_MemCpy>
    index_input += size;
 8003e70:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003e74:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003e78:	4413      	add	r3, r2
 8003e7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8003e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e82:	1dba      	adds	r2, r7, #6
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8003e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e96:	1d7a      	adds	r2, r7, #5
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8003e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003ea6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003eaa:	2218      	movs	r2, #24
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fbb6 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003eb4:	233f      	movs	r3, #63	; 0x3f
 8003eb6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8003eba:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003ebe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003ec2:	f107 0310 	add.w	r3, r7, #16
 8003ec6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ece:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003eda:	2303      	movs	r3, #3
 8003edc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003ee0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fe4a 	bl	8004b80 <hci_send_req>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da01      	bge.n	8003ef6 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8003ef2:	23ff      	movs	r3, #255	; 0xff
 8003ef4:	e011      	b.n	8003f1a <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8003ef6:	f107 030c 	add.w	r3, r7, #12
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <aci_gatt_add_service+0x142>
    return resp.Status;
 8003f00:	f107 030c 	add.w	r3, r7, #12
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	e008      	b.n	8003f1a <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003f16:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd90      	pop	{r4, r7, pc}

08003f24 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b0d1      	sub	sp, #324	; 0x144
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	f107 0108 	add.w	r1, r7, #8
 8003f32:	600a      	str	r2, [r1, #0]
 8003f34:	4619      	mov	r1, r3
 8003f36:	f107 030e 	add.w	r3, r7, #14
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	f107 030d 	add.w	r3, r7, #13
 8003f42:	4602      	mov	r2, r0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	1dbb      	adds	r3, r7, #6
 8003f48:	460a      	mov	r2, r1
 8003f4a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8003f4c:	f107 0318 	add.w	r3, r7, #24
 8003f50:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8003f54:	f107 030d 	add.w	r3, r7, #13
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d008      	beq.n	8003f70 <aci_gatt_add_char+0x4c>
 8003f5e:	f107 030d 	add.w	r3, r7, #13
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d101      	bne.n	8003f6c <aci_gatt_add_char+0x48>
 8003f68:	2313      	movs	r3, #19
 8003f6a:	e002      	b.n	8003f72 <aci_gatt_add_char+0x4e>
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e000      	b.n	8003f72 <aci_gatt_add_char+0x4e>
 8003f70:	2305      	movs	r3, #5
 8003f72:	f107 0218 	add.w	r2, r7, #24
 8003f76:	4413      	add	r3, r2
 8003f78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	2203      	movs	r2, #3
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fb4b 	bl	8004620 <Osal_MemSet>
  int index_input = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8003f90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f94:	f107 020e 	add.w	r2, r7, #14
 8003f98:	8812      	ldrh	r2, [r2, #0]
 8003f9a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003f9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8003fa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003faa:	f107 020d 	add.w	r2, r7, #13
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003fb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8003fbc:	f107 030d 	add.w	r3, r7, #13
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <aci_gatt_add_char+0xa8>
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d004      	beq.n	8003fd4 <aci_gatt_add_char+0xb0>
 8003fca:	e007      	b.n	8003fdc <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8003fd2:	e005      	b.n	8003fe0 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8003fda:	e001      	b.n	8003fe0 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8003fdc:	2347      	movs	r3, #71	; 0x47
 8003fde:	e086      	b.n	80040ee <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8003fe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003fe4:	1cd8      	adds	r0, r3, #3
 8003fe6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	f000 fb06 	bl	8004600 <Osal_MemCpy>
    index_input += size;
 8003ff4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003ff8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004002:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004006:	1dba      	adds	r2, r7, #6
 8004008:	8812      	ldrh	r2, [r2, #0]
 800400a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800400c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004010:	3302      	adds	r3, #2
 8004012:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8004016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800401a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800401e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004020:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004024:	3301      	adds	r3, #1
 8004026:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800402a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800402e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004032:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004034:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004038:	3301      	adds	r3, #1
 800403a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800403e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004042:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004046:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004048:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800404c:	3301      	adds	r3, #1
 800404e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004052:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004056:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800405a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800405c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004060:	3301      	adds	r3, #1
 8004062:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004066:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800406a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800406e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004070:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004074:	3301      	adds	r3, #1
 8004076:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800407a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800407e:	2218      	movs	r2, #24
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f000 facc 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004088:	233f      	movs	r3, #63	; 0x3f
 800408a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800408e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004092:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004096:	f107 0318 	add.w	r3, r7, #24
 800409a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800409e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80040a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80040a6:	f107 0314 	add.w	r3, r7, #20
 80040aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80040ae:	2303      	movs	r3, #3
 80040b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80040b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fd60 	bl	8004b80 <hci_send_req>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	da01      	bge.n	80040ca <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80040c6:	23ff      	movs	r3, #255	; 0xff
 80040c8:	e011      	b.n	80040ee <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	e008      	b.n	80040ee <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80040ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80040f8:	b5b0      	push	{r4, r5, r7, lr}
 80040fa:	b0cc      	sub	sp, #304	; 0x130
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4605      	mov	r5, r0
 8004100:	460c      	mov	r4, r1
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	1dbb      	adds	r3, r7, #6
 8004108:	462a      	mov	r2, r5
 800410a:	801a      	strh	r2, [r3, #0]
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	4622      	mov	r2, r4
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	1cfb      	adds	r3, r7, #3
 8004114:	4602      	mov	r2, r0
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	1cbb      	adds	r3, r7, #2
 800411a:	460a      	mov	r2, r1
 800411c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004126:	f107 030f 	add.w	r3, r7, #15
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004138:	1dba      	adds	r2, r7, #6
 800413a:	8812      	ldrh	r2, [r2, #0]
 800413c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800413e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004142:	3302      	adds	r3, #2
 8004144:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800414c:	1d3a      	adds	r2, r7, #4
 800414e:	8812      	ldrh	r2, [r2, #0]
 8004150:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004152:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004156:	3302      	adds	r3, #2
 8004158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800415c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004160:	1cfa      	adds	r2, r7, #3
 8004162:	7812      	ldrb	r2, [r2, #0]
 8004164:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004166:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800416a:	3301      	adds	r3, #1
 800416c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004174:	1cba      	adds	r2, r7, #2
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800417a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800417e:	3301      	adds	r3, #1
 8004180:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004188:	1d98      	adds	r0, r3, #6
 800418a:	1cbb      	adds	r3, r7, #2
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004194:	f000 fa34 	bl	8004600 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004198:	1cbb      	adds	r3, r7, #2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80041a0:	4413      	add	r3, r2
 80041a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80041a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041aa:	2218      	movs	r2, #24
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fa36 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 80041b4:	233f      	movs	r3, #63	; 0x3f
 80041b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80041ba:	f44f 7383 	mov.w	r3, #262	; 0x106
 80041be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80041c2:	f107 0310 	add.w	r3, r7, #16
 80041c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80041ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80041d2:	f107 030f 	add.w	r3, r7, #15
 80041d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80041da:	2301      	movs	r3, #1
 80041dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80041e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fcca 	bl	8004b80 <hci_send_req>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da01      	bge.n	80041f6 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80041f2:	23ff      	movs	r3, #255	; 0xff
 80041f4:	e002      	b.n	80041fc <aci_gatt_update_char_value+0x104>
  return status;
 80041f6:	f107 030f 	add.w	r3, r7, #15
 80041fa:	781b      	ldrb	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004202:	46bd      	mov	sp, r7
 8004204:	bdb0      	pop	{r4, r5, r7, pc}

08004206 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b0cc      	sub	sp, #304	; 0x130
 800420a:	af00      	add	r7, sp, #0
 800420c:	463b      	mov	r3, r7
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	1dfb      	adds	r3, r7, #7
 8004212:	4602      	mov	r2, r0
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	1dbb      	adds	r3, r7, #6
 8004218:	460a      	mov	r2, r1
 800421a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800421c:	f107 0310 	add.w	r3, r7, #16
 8004220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004224:	f107 030f 	add.w	r3, r7, #15
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004236:	1dfa      	adds	r2, r7, #7
 8004238:	7812      	ldrb	r2, [r2, #0]
 800423a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800423c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004240:	3301      	adds	r3, #1
 8004242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800424a:	1dba      	adds	r2, r7, #6
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004250:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004254:	3301      	adds	r3, #1
 8004256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800425a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800425e:	1c98      	adds	r0, r3, #2
 8004260:	1dbb      	adds	r3, r7, #6
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	463b      	mov	r3, r7
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	f000 f9ca 	bl	8004600 <Osal_MemCpy>
  index_input += Length;
 800426c:	1dbb      	adds	r3, r7, #6
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004274:	4413      	add	r3, r2
 8004276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800427a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800427e:	2218      	movs	r2, #24
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f9cc 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004288:	233f      	movs	r3, #63	; 0x3f
 800428a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800428e:	230c      	movs	r3, #12
 8004290:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800429c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80042a4:	f107 030f 	add.w	r3, r7, #15
 80042a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80042b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fc61 	bl	8004b80 <hci_send_req>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da01      	bge.n	80042c8 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80042c4:	23ff      	movs	r3, #255	; 0xff
 80042c6:	e002      	b.n	80042ce <aci_hal_write_config_data+0xc8>
  return status;
 80042c8:	f107 030f 	add.w	r3, r7, #15
 80042cc:	781b      	ldrb	r3, [r3, #0]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b0cc      	sub	sp, #304	; 0x130
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4602      	mov	r2, r0
 80042e0:	1dfb      	adds	r3, r7, #7
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	1dbb      	adds	r3, r7, #6
 80042e6:	460a      	mov	r2, r1
 80042e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80042ea:	f107 0310 	add.w	r3, r7, #16
 80042ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80042f2:	f107 030f 	add.w	r3, r7, #15
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004304:	1dfa      	adds	r2, r7, #7
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800430a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800430e:	3301      	adds	r3, #1
 8004310:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8004314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004318:	1dba      	adds	r2, r7, #6
 800431a:	7812      	ldrb	r2, [r2, #0]
 800431c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800431e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004322:	3301      	adds	r3, #1
 8004324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004328:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800432c:	2218      	movs	r2, #24
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f975 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004336:	233f      	movs	r3, #63	; 0x3f
 8004338:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800433c:	230f      	movs	r3, #15
 800433e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004342:	f107 0310 	add.w	r3, r7, #16
 8004346:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800434a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800434e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004352:	f107 030f 	add.w	r3, r7, #15
 8004356:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800435a:	2301      	movs	r3, #1
 800435c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004360:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fc0a 	bl	8004b80 <hci_send_req>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	da01      	bge.n	8004376 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004372:	23ff      	movs	r3, #255	; 0xff
 8004374:	e002      	b.n	800437c <aci_hal_set_tx_power_level+0xa4>
  return status;
 8004376:	f107 030f 	add.w	r3, r7, #15
 800437a:	781b      	ldrb	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b0cc      	sub	sp, #304	; 0x130
 800438a:	af00      	add	r7, sp, #0
 800438c:	4602      	mov	r2, r0
 800438e:	1dbb      	adds	r3, r7, #6
 8004390:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8004392:	f107 0310 	add.w	r3, r7, #16
 8004396:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800439a:	f107 030f 	add.w	r3, r7, #15
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80043a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ac:	1dba      	adds	r2, r7, #6
 80043ae:	8812      	ldrh	r2, [r2, #0]
 80043b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80043b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043b6:	3302      	adds	r3, #2
 80043b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80043bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043c0:	2218      	movs	r2, #24
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f92b 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x3f;
 80043ca:	233f      	movs	r3, #63	; 0x3f
 80043cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80043d0:	2318      	movs	r3, #24
 80043d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80043d6:	f107 0310 	add.w	r3, r7, #16
 80043da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80043de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80043e6:	f107 030f 	add.w	r3, r7, #15
 80043ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80043f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fbc0 	bl	8004b80 <hci_send_req>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	da01      	bge.n	800440a <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8004406:	23ff      	movs	r3, #255	; 0xff
 8004408:	e002      	b.n	8004410 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 800440a:	f107 030f 	add.w	r3, r7, #15
 800440e:	781b      	ldrb	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b088      	sub	sp, #32
 800441e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	2218      	movs	r2, #24
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f8f7 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x03;
 8004432:	2303      	movs	r3, #3
 8004434:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004436:	2303      	movs	r3, #3
 8004438:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800443a:	1dfb      	adds	r3, r7, #7
 800443c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fb99 	bl	8004b80 <hci_send_req>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	da01      	bge.n	8004458 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004454:	23ff      	movs	r3, #255	; 0xff
 8004456:	e000      	b.n	800445a <hci_reset+0x40>
  return status;
 8004458:	79fb      	ldrb	r3, [r7, #7]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b0ce      	sub	sp, #312	; 0x138
 8004466:	af00      	add	r7, sp, #0
 8004468:	f107 0308 	add.w	r3, r7, #8
 800446c:	6019      	str	r1, [r3, #0]
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	f107 030e 	add.w	r3, r7, #14
 8004476:	4602      	mov	r2, r0
 8004478:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800447a:	f107 0318 	add.w	r3, r7, #24
 800447e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004482:	f107 0310 	add.w	r3, r7, #16
 8004486:	2205      	movs	r2, #5
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f000 f8c8 	bl	8004620 <Osal_MemSet>
  int index_input = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8004496:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800449a:	f107 020e 	add.w	r2, r7, #14
 800449e:	8812      	ldrh	r2, [r2, #0]
 80044a0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80044a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044a6:	3302      	adds	r3, #2
 80044a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80044ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044b0:	2218      	movs	r2, #24
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f8b3 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x08;
 80044ba:	2308      	movs	r3, #8
 80044bc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 80044c0:	2330      	movs	r3, #48	; 0x30
 80044c2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80044c6:	f107 0318 	add.w	r3, r7, #24
 80044ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80044ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80044d6:	f107 0310 	add.w	r3, r7, #16
 80044da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80044de:	2305      	movs	r3, #5
 80044e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80044e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fb48 	bl	8004b80 <hci_send_req>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da01      	bge.n	80044fa <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80044f6:	23ff      	movs	r3, #255	; 0xff
 80044f8:	e016      	b.n	8004528 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 80044fa:	f107 0310 	add.w	r3, r7, #16
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <hci_le_read_phy+0xaa>
    return resp.Status;
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	e00d      	b.n	8004528 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	78da      	ldrb	r2, [r3, #3]
 8004512:	f107 0308 	add.w	r3, r7, #8
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800451a:	f107 0310 	add.w	r3, r7, #16
 800451e:	791a      	ldrb	r2, [r3, #4]
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8004532:	b590      	push	{r4, r7, lr}
 8004534:	b0cd      	sub	sp, #308	; 0x134
 8004536:	af00      	add	r7, sp, #0
 8004538:	4604      	mov	r4, r0
 800453a:	4608      	mov	r0, r1
 800453c:	4611      	mov	r1, r2
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	4622      	mov	r2, r4
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	1dbb      	adds	r3, r7, #6
 8004546:	4602      	mov	r2, r0
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	1d7b      	adds	r3, r7, #5
 800454c:	460a      	mov	r2, r1
 800454e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004550:	f107 0310 	add.w	r3, r7, #16
 8004554:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004558:	f107 030f 	add.w	r3, r7, #15
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8004566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800456a:	1dfa      	adds	r2, r7, #7
 800456c:	7812      	ldrb	r2, [r2, #0]
 800456e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004574:	3301      	adds	r3, #1
 8004576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800457a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800457e:	1dba      	adds	r2, r7, #6
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004584:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004588:	3301      	adds	r3, #1
 800458a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800458e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004592:	1d7a      	adds	r2, r7, #5
 8004594:	7812      	ldrb	r2, [r2, #0]
 8004596:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800459c:	3301      	adds	r3, #1
 800459e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045a6:	2218      	movs	r2, #24
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f838 	bl	8004620 <Osal_MemSet>
  rq.ogf = 0x08;
 80045b0:	2308      	movs	r3, #8
 80045b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80045b6:	2331      	movs	r3, #49	; 0x31
 80045b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80045bc:	f107 0310 	add.w	r3, r7, #16
 80045c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80045c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80045cc:	f107 030f 	add.w	r3, r7, #15
 80045d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 facd 	bl	8004b80 <hci_send_req>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da01      	bge.n	80045f0 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80045ec:	23ff      	movs	r3, #255	; 0xff
 80045ee:	e002      	b.n	80045f6 <hci_le_set_default_phy+0xc4>
  return status;
 80045f0:	f107 030f 	add.w	r3, r7, #15
 80045f4:	781b      	ldrb	r3, [r3, #0]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd90      	pop	{r4, r7, pc}

08004600 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f002 f969 	bl	80068e8 <memcpy>
 8004616:	4603      	mov	r3, r0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f002 f964 	bl	80068fe <memset>
 8004636:	4603      	mov	r3, r0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8004648:	2300      	movs	r3, #0
 800464a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3301      	adds	r3, #1
 8004652:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2bff      	cmp	r3, #255	; 0xff
 800465a:	d000      	beq.n	800465e <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800465c:	e04a      	b.n	80046f4 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	3302      	adds	r3, #2
 8004662:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	f640 4301 	movw	r3, #3073	; 0xc01
 8004670:	429a      	cmp	r2, r3
 8004672:	d000      	beq.n	8004676 <PeerToPeer_Event_Handler+0x36>
          break;
 8004674:	e03d      	b.n	80046f2 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3302      	adds	r3, #2
 800467a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	885b      	ldrh	r3, [r3, #2]
 8004680:	b29b      	uxth	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <PeerToPeer_Event_Handler+0xc0>)
 8004686:	889b      	ldrh	r3, [r3, #4]
 8004688:	3302      	adds	r3, #2
 800468a:	429a      	cmp	r2, r3
 800468c:	d118      	bne.n	80046c0 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	7a1b      	ldrb	r3, [r3, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80046a0:	2300      	movs	r3, #0
 80046a2:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fc39 	bl	8005f20 <P2PS_STM_App_Notification>
        break;
 80046ae:	e01f      	b.n	80046f0 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80046b0:	2301      	movs	r3, #1
 80046b2:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80046b4:	f107 0308 	add.w	r3, r7, #8
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fc31 	bl	8005f20 <P2PS_STM_App_Notification>
        break;
 80046be:	e017      	b.n	80046f0 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	885b      	ldrh	r3, [r3, #2]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <PeerToPeer_Event_Handler+0xc0>)
 80046ca:	885b      	ldrh	r3, [r3, #2]
 80046cc:	3301      	adds	r3, #1
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d10e      	bne.n	80046f0 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	88db      	ldrh	r3, [r3, #6]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	3308      	adds	r3, #8
 80046e4:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80046e6:	f107 0308 	add.w	r3, r7, #8
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 fc18 	bl	8005f20 <P2PS_STM_App_Notification>
        break;
 80046f0:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 80046f2:	bf00      	nop
  }

  return(return_value);
 80046f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	; 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	200000c4 	.word	0x200000c4

08004704 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800470a:	484a      	ldr	r0, [pc, #296]	; (8004834 <P2PS_STM_Init+0x130>)
 800470c:	f000 f930 	bl	8004970 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8004710:	238f      	movs	r3, #143	; 0x8f
 8004712:	703b      	strb	r3, [r7, #0]
 8004714:	23e5      	movs	r3, #229	; 0xe5
 8004716:	707b      	strb	r3, [r7, #1]
 8004718:	23b3      	movs	r3, #179	; 0xb3
 800471a:	70bb      	strb	r3, [r7, #2]
 800471c:	23d5      	movs	r3, #213	; 0xd5
 800471e:	70fb      	strb	r3, [r7, #3]
 8004720:	232e      	movs	r3, #46	; 0x2e
 8004722:	713b      	strb	r3, [r7, #4]
 8004724:	237f      	movs	r3, #127	; 0x7f
 8004726:	717b      	strb	r3, [r7, #5]
 8004728:	234a      	movs	r3, #74	; 0x4a
 800472a:	71bb      	strb	r3, [r7, #6]
 800472c:	2398      	movs	r3, #152	; 0x98
 800472e:	71fb      	strb	r3, [r7, #7]
 8004730:	232a      	movs	r3, #42	; 0x2a
 8004732:	723b      	strb	r3, [r7, #8]
 8004734:	2348      	movs	r3, #72	; 0x48
 8004736:	727b      	strb	r3, [r7, #9]
 8004738:	237a      	movs	r3, #122	; 0x7a
 800473a:	72bb      	strb	r3, [r7, #10]
 800473c:	23cc      	movs	r3, #204	; 0xcc
 800473e:	72fb      	strb	r3, [r7, #11]
 8004740:	2340      	movs	r3, #64	; 0x40
 8004742:	733b      	strb	r3, [r7, #12]
 8004744:	23fe      	movs	r3, #254	; 0xfe
 8004746:	737b      	strb	r3, [r7, #13]
 8004748:	2300      	movs	r3, #0
 800474a:	73bb      	strb	r3, [r7, #14]
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8004750:	4639      	mov	r1, r7
 8004752:	4b39      	ldr	r3, [pc, #228]	; (8004838 <P2PS_STM_Init+0x134>)
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	2308      	movs	r3, #8
 8004758:	2201      	movs	r2, #1
 800475a:	2002      	movs	r0, #2
 800475c:	f7ff fb33 	bl	8003dc6 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8004760:	2319      	movs	r3, #25
 8004762:	703b      	strb	r3, [r7, #0]
 8004764:	23ed      	movs	r3, #237	; 0xed
 8004766:	707b      	strb	r3, [r7, #1]
 8004768:	2382      	movs	r3, #130	; 0x82
 800476a:	70bb      	strb	r3, [r7, #2]
 800476c:	23ae      	movs	r3, #174	; 0xae
 800476e:	70fb      	strb	r3, [r7, #3]
 8004770:	23ed      	movs	r3, #237	; 0xed
 8004772:	713b      	strb	r3, [r7, #4]
 8004774:	2321      	movs	r3, #33	; 0x21
 8004776:	717b      	strb	r3, [r7, #5]
 8004778:	234c      	movs	r3, #76	; 0x4c
 800477a:	71bb      	strb	r3, [r7, #6]
 800477c:	239d      	movs	r3, #157	; 0x9d
 800477e:	71fb      	strb	r3, [r7, #7]
 8004780:	2341      	movs	r3, #65	; 0x41
 8004782:	723b      	strb	r3, [r7, #8]
 8004784:	2345      	movs	r3, #69	; 0x45
 8004786:	727b      	strb	r3, [r7, #9]
 8004788:	2322      	movs	r3, #34	; 0x22
 800478a:	72bb      	strb	r3, [r7, #10]
 800478c:	238e      	movs	r3, #142	; 0x8e
 800478e:	72fb      	strb	r3, [r7, #11]
 8004790:	2341      	movs	r3, #65	; 0x41
 8004792:	733b      	strb	r3, [r7, #12]
 8004794:	23fe      	movs	r3, #254	; 0xfe
 8004796:	737b      	strb	r3, [r7, #13]
 8004798:	2300      	movs	r3, #0
 800479a:	73bb      	strb	r3, [r7, #14]
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80047a0:	4b25      	ldr	r3, [pc, #148]	; (8004838 <P2PS_STM_Init+0x134>)
 80047a2:	8818      	ldrh	r0, [r3, #0]
 80047a4:	463a      	mov	r2, r7
 80047a6:	4b25      	ldr	r3, [pc, #148]	; (800483c <P2PS_STM_Init+0x138>)
 80047a8:	9305      	str	r3, [sp, #20]
 80047aa:	2301      	movs	r3, #1
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	230a      	movs	r3, #10
 80047b0:	9303      	str	r3, [sp, #12]
 80047b2:	2301      	movs	r3, #1
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	2300      	movs	r3, #0
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	2306      	movs	r3, #6
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2302      	movs	r3, #2
 80047c0:	2102      	movs	r1, #2
 80047c2:	f7ff fbaf 	bl	8003f24 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80047c6:	2319      	movs	r3, #25
 80047c8:	703b      	strb	r3, [r7, #0]
 80047ca:	23ed      	movs	r3, #237	; 0xed
 80047cc:	707b      	strb	r3, [r7, #1]
 80047ce:	2382      	movs	r3, #130	; 0x82
 80047d0:	70bb      	strb	r3, [r7, #2]
 80047d2:	23ae      	movs	r3, #174	; 0xae
 80047d4:	70fb      	strb	r3, [r7, #3]
 80047d6:	23ed      	movs	r3, #237	; 0xed
 80047d8:	713b      	strb	r3, [r7, #4]
 80047da:	2321      	movs	r3, #33	; 0x21
 80047dc:	717b      	strb	r3, [r7, #5]
 80047de:	234c      	movs	r3, #76	; 0x4c
 80047e0:	71bb      	strb	r3, [r7, #6]
 80047e2:	239d      	movs	r3, #157	; 0x9d
 80047e4:	71fb      	strb	r3, [r7, #7]
 80047e6:	2341      	movs	r3, #65	; 0x41
 80047e8:	723b      	strb	r3, [r7, #8]
 80047ea:	2345      	movs	r3, #69	; 0x45
 80047ec:	727b      	strb	r3, [r7, #9]
 80047ee:	2322      	movs	r3, #34	; 0x22
 80047f0:	72bb      	strb	r3, [r7, #10]
 80047f2:	238e      	movs	r3, #142	; 0x8e
 80047f4:	72fb      	strb	r3, [r7, #11]
 80047f6:	2342      	movs	r3, #66	; 0x42
 80047f8:	733b      	strb	r3, [r7, #12]
 80047fa:	23fe      	movs	r3, #254	; 0xfe
 80047fc:	737b      	strb	r3, [r7, #13]
 80047fe:	2300      	movs	r3, #0
 8004800:	73bb      	strb	r3, [r7, #14]
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <P2PS_STM_Init+0x134>)
 8004808:	8818      	ldrh	r0, [r3, #0]
 800480a:	463a      	mov	r2, r7
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <P2PS_STM_Init+0x13c>)
 800480e:	9305      	str	r3, [sp, #20]
 8004810:	2301      	movs	r3, #1
 8004812:	9304      	str	r3, [sp, #16]
 8004814:	230a      	movs	r3, #10
 8004816:	9303      	str	r3, [sp, #12]
 8004818:	2301      	movs	r3, #1
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	2300      	movs	r3, #0
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	2310      	movs	r3, #16
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2302      	movs	r3, #2
 8004826:	2102      	movs	r1, #2
 8004828:	f7ff fb7c 	bl	8003f24 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800482c:	bf00      	nop
}
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	08004641 	.word	0x08004641
 8004838:	200000c4 	.word	0x200000c4
 800483c:	200000c6 	.word	0x200000c6
 8004840:	200000c8 	.word	0x200000c8

08004844 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return;
 8004848:	bf00      	nop
}
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  return;
 8004856:	bf00      	nop
}
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <DIS_Init>:
__weak void DIS_Init( void )
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return;
 8004864:	bf00      	nop
}
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800486e:	b480      	push	{r7}
 8004870:	af00      	add	r7, sp, #0
  return;
 8004872:	bf00      	nop
}
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return;
 8004880:	bf00      	nop
}
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HRS_Init>:
__weak void HRS_Init( void )
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  return;
 800488e:	bf00      	nop
}
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HTS_Init>:
__weak void HTS_Init( void )
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return;
 800489c:	bf00      	nop
}
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <IAS_Init>:
__weak void IAS_Init( void )
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0
  return;
 80048aa:	bf00      	nop
}
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LLS_Init>:
__weak void LLS_Init( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return;
 80048b8:	bf00      	nop
}
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <TPS_Init>:
__weak void TPS_Init( void )
{
 80048c2:	b480      	push	{r7}
 80048c4:	af00      	add	r7, sp, #0
  return;
 80048c6:	bf00      	nop
}
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return;
 80048d4:	bf00      	nop
}
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
  return;
 80048e2:	bf00      	nop
}
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <MESH_Init>:
__weak void MESH_Init( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return;
 80048f0:	bf00      	nop
}
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
  return;
 80048fe:	bf00      	nop
}
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800490c:	4b04      	ldr	r3, [pc, #16]	; (8004920 <SVCCTL_Init+0x18>)
 800490e:	2200      	movs	r2, #0
 8004910:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8004912:	4b04      	ldr	r3, [pc, #16]	; (8004924 <SVCCTL_Init+0x1c>)
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8004918:	f000 f806 	bl	8004928 <SVCCTL_SvcInit>

  return;
 800491c:	bf00      	nop
}
 800491e:	bd80      	pop	{r7, pc}
 8004920:	200000cc 	.word	0x200000cc
 8004924:	200000ec 	.word	0x200000ec

08004928 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  BLS_Init();
 800492c:	f7ff ff8a 	bl	8004844 <BLS_Init>

  CRS_STM_Init();
 8004930:	f7ff ff8f 	bl	8004852 <CRS_STM_Init>

  DIS_Init();
 8004934:	f7ff ff94 	bl	8004860 <DIS_Init>

  EDS_STM_Init();
 8004938:	f7ff ff99 	bl	800486e <EDS_STM_Init>

  HIDS_Init();
 800493c:	f7ff ff9e 	bl	800487c <HIDS_Init>

  HRS_Init();
 8004940:	f7ff ffa3 	bl	800488a <HRS_Init>

  HTS_Init();
 8004944:	f7ff ffa8 	bl	8004898 <HTS_Init>

  IAS_Init();
 8004948:	f7ff ffad 	bl	80048a6 <IAS_Init>

  LLS_Init();
 800494c:	f7ff ffb2 	bl	80048b4 <LLS_Init>

  TPS_Init();
 8004950:	f7ff ffb7 	bl	80048c2 <TPS_Init>

  MOTENV_STM_Init();
 8004954:	f7ff ffbc 	bl	80048d0 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8004958:	f7ff fed4 	bl	8004704 <P2PS_STM_Init>

  OTAS_STM_Init();
 800495c:	f7ff ffbf 	bl	80048de <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8004960:	f7ff ffcb 	bl	80048fa <BVOPUS_STM_Init>

  MESH_Init();
 8004964:	f7ff ffc2 	bl	80048ec <MESH_Init>

  SVCCTL_InitCustomSvc();
 8004968:	f001 fa0c 	bl	8005d84 <SVCCTL_InitCustomSvc>
  
  return;
 800496c:	bf00      	nop
}
 800496e:	bd80      	pop	{r7, pc}

08004970 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800497a:	7f1b      	ldrb	r3, [r3, #28]
 800497c:	4619      	mov	r1, r3
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8004988:	7f1b      	ldrb	r3, [r3, #28]
 800498a:	3301      	adds	r3, #1
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8004990:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8004992:	bf00      	nop
}
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	200000cc 	.word	0x200000cc

080049a4 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3301      	adds	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2bff      	cmp	r3, #255	; 0xff
 80049bc:	d000      	beq.n	80049c0 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 80049be:	e025      	b.n	8004a0c <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	3302      	adds	r3, #2
 80049c4:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80049d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d4:	d000      	beq.n	80049d8 <SVCCTL_UserEvtRx+0x34>
          break;
 80049d6:	e018      	b.n	8004a0a <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80049d8:	2300      	movs	r3, #0
 80049da:	757b      	strb	r3, [r7, #21]
 80049dc:	e00d      	b.n	80049fa <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80049de:	7d7b      	ldrb	r3, [r7, #21]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <SVCCTL_UserEvtRx+0xa0>)
 80049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	4798      	blx	r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d108      	bne.n	8004a06 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80049f4:	7d7b      	ldrb	r3, [r7, #21]
 80049f6:	3301      	adds	r3, #1
 80049f8:	757b      	strb	r3, [r7, #21]
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <SVCCTL_UserEvtRx+0xa0>)
 80049fc:	7f1b      	ldrb	r3, [r3, #28]
 80049fe:	7d7a      	ldrb	r2, [r7, #21]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d3ec      	bcc.n	80049de <SVCCTL_UserEvtRx+0x3a>
          break;
 8004a04:	e000      	b.n	8004a08 <SVCCTL_UserEvtRx+0x64>
              break;
 8004a06:	bf00      	nop
          break;
 8004a08:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8004a0a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d009      	beq.n	8004a26 <SVCCTL_UserEvtRx+0x82>
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d00a      	beq.n	8004a2c <SVCCTL_UserEvtRx+0x88>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 febe 	bl	800579c <SVCCTL_App_Notification>
 8004a20:	4603      	mov	r3, r0
 8004a22:	75bb      	strb	r3, [r7, #22]
      break;
 8004a24:	e008      	b.n	8004a38 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75bb      	strb	r3, [r7, #22]
      break;
 8004a2a:	e005      	b.n	8004a38 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	75bb      	strb	r3, [r7, #22]
      break;
 8004a30:	e002      	b.n	8004a38 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75bb      	strb	r3, [r7, #22]
      break;
 8004a36:	bf00      	nop
  }

  return (return_status);
 8004a38:	7dbb      	ldrb	r3, [r7, #22]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200000cc 	.word	0x200000cc

08004a48 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004a50:	f107 030c 	add.w	r3, r7, #12
 8004a54:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2121      	movs	r1, #33	; 0x21
 8004a60:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8004a64:	f000 fa5e 	bl	8004f24 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	330b      	adds	r3, #11
 8004a6c:	78db      	ldrb	r3, [r3, #3]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b088      	sub	sp, #32
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004a7e:	f107 030c 	add.w	r3, r7, #12
 8004a82:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	210f      	movs	r1, #15
 8004a8e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8004a92:	f000 fa47 	bl	8004f24 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	330b      	adds	r3, #11
 8004a9a:	78db      	ldrb	r3, [r3, #3]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <hci_init+0x30>)
 8004ab4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8004ab6:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <hci_init+0x34>)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8004abc:	4806      	ldr	r0, [pc, #24]	; (8004ad8 <hci_init+0x34>)
 8004abe:	f000 f9af 	bl	8004e20 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f8dc 	bl	8004c84 <TlInit>

  return;
 8004acc:	bf00      	nop
}
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000208 	.word	0x20000208
 8004ad8:	200001e0 	.word	0x200001e0

08004adc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8004ae2:	4824      	ldr	r0, [pc, #144]	; (8004b74 <hci_user_evt_proc+0x98>)
 8004ae4:	f000 fd2a 	bl	800553c <LST_is_empty>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d12f      	bne.n	8004b4e <hci_user_evt_proc+0x72>
 8004aee:	4b22      	ldr	r3, [pc, #136]	; (8004b78 <hci_user_evt_proc+0x9c>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d02b      	beq.n	8004b4e <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004af6:	f107 030c 	add.w	r3, r7, #12
 8004afa:	4619      	mov	r1, r3
 8004afc:	481d      	ldr	r0, [pc, #116]	; (8004b74 <hci_user_evt_proc+0x98>)
 8004afe:	f000 fda4 	bl	800564a <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f97b 	bl	8004e00 <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <hci_user_evt_proc+0xa0>)
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00c      	beq.n	8004b2c <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8004b16:	2301      	movs	r3, #1
 8004b18:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004b1a:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <hci_user_evt_proc+0xa0>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	1d3a      	adds	r2, r7, #4
 8004b20:	4610      	mov	r0, r2
 8004b22:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8004b24:	793a      	ldrb	r2, [r7, #4]
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <hci_user_evt_proc+0x9c>)
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e002      	b.n	8004b32 <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004b2c:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <hci_user_evt_proc+0x9c>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <hci_user_evt_proc+0x9c>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fc41 	bl	80053c4 <TL_MM_EvtDone>
 8004b42:	e004      	b.n	8004b4e <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4619      	mov	r1, r3
 8004b48:	480a      	ldr	r0, [pc, #40]	; (8004b74 <hci_user_evt_proc+0x98>)
 8004b4a:	f000 fd17 	bl	800557c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8004b4e:	4809      	ldr	r0, [pc, #36]	; (8004b74 <hci_user_evt_proc+0x98>)
 8004b50:	f000 fcf4 	bl	800553c <LST_is_empty>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <hci_user_evt_proc+0x8e>
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <hci_user_evt_proc+0x9c>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8004b62:	4804      	ldr	r0, [pc, #16]	; (8004b74 <hci_user_evt_proc+0x98>)
 8004b64:	f001 f887 	bl	8005c76 <hci_notify_asynch_evt>
  }


  return;
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
}
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200000f4 	.word	0x200000f4
 8004b78:	20000100 	.word	0x20000100
 8004b7c:	200001e0 	.word	0x200001e0

08004b80 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f000 f8d5 	bl	8004d3c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8004b92:	2300      	movs	r3, #0
 8004b94:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	885b      	ldrh	r3, [r3, #2]
 8004b9a:	b21b      	sxth	r3, r3
 8004b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba0:	b21a      	sxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	029b      	lsls	r3, r3, #10
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	4313      	orrs	r3, r2
 8004bac:	b21b      	sxth	r3, r3
 8004bae:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	b2d9      	uxtb	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	8bbb      	ldrh	r3, [r7, #28]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f891 	bl	8004ce4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8004bc2:	e052      	b.n	8004c6a <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8004bc4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004bc8:	f001 f86c 	bl	8005ca4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8004bcc:	e047      	b.n	8004c5e <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	482a      	ldr	r0, [pc, #168]	; (8004c80 <hci_send_req+0x100>)
 8004bd6:	f000 fd38 	bl	800564a <LST_remove_head>

      OutputRspTrace(pevtpacket);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f8fb 	bl	8004dd8 <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	7a5b      	ldrb	r3, [r3, #9]
 8004be6:	2b0f      	cmp	r3, #15
 8004be8:	d114      	bne.n	8004c14 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	330b      	adds	r3, #11
 8004bee:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	885b      	ldrh	r3, [r3, #2]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	8bba      	ldrh	r2, [r7, #28]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d104      	bne.n	8004c06 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	7812      	ldrb	r2, [r2, #0]
 8004c04:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d027      	beq.n	8004c5e <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e024      	b.n	8004c5e <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	330b      	adds	r3, #11
 8004c18:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	8bba      	ldrh	r2, [r7, #28]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d114      	bne.n	8004c52 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	7a9b      	ldrb	r3, [r3, #10]
 8004c2c:	3b03      	subs	r3, #3
 8004c2e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	bfa8      	it	ge
 8004c3a:	461a      	movge	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6918      	ldr	r0, [r3, #16]
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1cd9      	adds	r1, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f001 fe4b 	bl	80068e8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8004c5e:	4808      	ldr	r0, [pc, #32]	; (8004c80 <hci_send_req+0x100>)
 8004c60:	f000 fc6c 	bl	800553c <LST_is_empty>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0b1      	beq.n	8004bce <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8004c6a:	7ffb      	ldrb	r3, [r7, #31]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0a9      	beq.n	8004bc4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8004c70:	2001      	movs	r0, #1
 8004c72:	f000 f863 	bl	8004d3c <NotifyCmdStatus>

  return 0;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000200 	.word	0x20000200

08004c84 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8004c8c:	480f      	ldr	r0, [pc, #60]	; (8004ccc <TlInit+0x48>)
 8004c8e:	f000 fc45 	bl	800551c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8004c92:	4a0f      	ldr	r2, [pc, #60]	; (8004cd0 <TlInit+0x4c>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8004c98:	480e      	ldr	r0, [pc, #56]	; (8004cd4 <TlInit+0x50>)
 8004c9a:	f000 fc3f 	bl	800551c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <TlInit+0x54>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <TlInit+0x58>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <TlInit+0x5c>)
 8004cb2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <TlInit+0x58>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f107 0208 	add.w	r2, r7, #8
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4798      	blx	r3
  }

  return;
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
}
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000200 	.word	0x20000200
 8004cd0:	200000fc 	.word	0x200000fc
 8004cd4:	200000f4 	.word	0x200000f4
 8004cd8:	20000100 	.word	0x20000100
 8004cdc:	200001e0 	.word	0x200001e0
 8004ce0:	08004d7d 	.word	0x08004d7d

08004ce4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	603a      	str	r2, [r7, #0]
 8004cee:	80fb      	strh	r3, [r7, #6]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004cf4:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <SendCmd+0x50>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	88fa      	ldrh	r2, [r7, #6]
 8004cfa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <SendCmd+0x50>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	797a      	ldrb	r2, [r7, #5]
 8004d04:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <SendCmd+0x50>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	797a      	ldrb	r2, [r7, #5]
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fde9 	bl	80068e8 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <SendCmd+0x50>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f852 	bl	8004dc4 <OutputCmdTrace>

  hciContext.io.Send(0,0);
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <SendCmd+0x54>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2100      	movs	r1, #0
 8004d26:	2000      	movs	r0, #0
 8004d28:	4798      	blx	r3

  return;
 8004d2a:	bf00      	nop
}
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	200000fc 	.word	0x200000fc
 8004d38:	200001e0 	.word	0x200001e0

08004d3c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d108      	bne.n	8004d5e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <NotifyCmdStatus+0x3c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00d      	beq.n	8004d70 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <NotifyCmdStatus+0x3c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2000      	movs	r0, #0
 8004d5a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8004d5c:	e008      	b.n	8004d70 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <NotifyCmdStatus+0x3c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d004      	beq.n	8004d70 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <NotifyCmdStatus+0x3c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	4798      	blx	r3
  return;
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
}
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000208 	.word	0x20000208

08004d7c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7a5b      	ldrb	r3, [r3, #9]
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d003      	beq.n	8004d94 <TlEvtReceived+0x18>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7a5b      	ldrb	r3, [r3, #9]
 8004d90:	2b0e      	cmp	r3, #14
 8004d92:	d107      	bne.n	8004da4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4809      	ldr	r0, [pc, #36]	; (8004dbc <TlEvtReceived+0x40>)
 8004d98:	f000 fc14 	bl	80055c4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f000 ff76 	bl	8005c8e <hci_cmd_resp_release>
 8004da2:	e006      	b.n	8004db2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4806      	ldr	r0, [pc, #24]	; (8004dc0 <TlEvtReceived+0x44>)
 8004da8:	f000 fc0c 	bl	80055c4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004dac:	4804      	ldr	r0, [pc, #16]	; (8004dc0 <TlEvtReceived+0x44>)
 8004dae:	f000 ff62 	bl	8005c76 <hci_notify_asynch_evt>
  }

  return;
 8004db2:	bf00      	nop
}
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000200 	.word	0x20000200
 8004dc0:	200000f4 	.word	0x200000f4

08004dc4 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8004dcc:	bf00      	nop
}
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	7a5b      	ldrb	r3, [r3, #9]
 8004de4:	2b0e      	cmp	r3, #14
 8004de6:	d002      	beq.n	8004dee <OutputRspTrace+0x16>
 8004de8:	2b0f      	cmp	r3, #15
 8004dea:	d002      	beq.n	8004df2 <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 8004dec:	e002      	b.n	8004df4 <OutputRspTrace+0x1c>
      break;
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <OutputRspTrace+0x1c>
      break;
 8004df2:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8004df4:	bf00      	nop
}
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7a5b      	ldrb	r3, [r3, #9]
 8004e0c:	2bff      	cmp	r3, #255	; 0xff
 8004e0e:	d100      	bne.n	8004e12 <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
}
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a05      	ldr	r2, [pc, #20]	; (8004e40 <hci_register_io_bus+0x20>)
 8004e2c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <hci_register_io_bus+0x24>)
 8004e32:	611a      	str	r2, [r3, #16]

  return;
 8004e34:	bf00      	nop
}
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	0800519d 	.word	0x0800519d
 8004e44:	08005205 	.word	0x08005205

08004e48 <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <shci_init+0x30>)
 8004e58:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8004e5a:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <shci_init+0x34>)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8004e60:	4806      	ldr	r0, [pc, #24]	; (8004e7c <shci_init+0x34>)
 8004e62:	f000 f947 	bl	80050f4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f8a0 	bl	8004fb0 <TlInit>

  return;
 8004e70:	bf00      	nop
}
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	2000022c 	.word	0x2000022c
 8004e7c:	2000020c 	.word	0x2000020c

08004e80 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004e86:	4824      	ldr	r0, [pc, #144]	; (8004f18 <shci_user_evt_proc+0x98>)
 8004e88:	f000 fb58 	bl	800553c <LST_is_empty>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d12f      	bne.n	8004ef2 <shci_user_evt_proc+0x72>
 8004e92:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <shci_user_evt_proc+0x9c>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02b      	beq.n	8004ef2 <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	481d      	ldr	r0, [pc, #116]	; (8004f18 <shci_user_evt_proc+0x98>)
 8004ea2:	f000 fbd2 	bl	800564a <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f913 	bl	80050d4 <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <shci_user_evt_proc+0xa0>)
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004ebe:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <shci_user_evt_proc+0xa0>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	1d3a      	adds	r2, r7, #4
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8004ec8:	793a      	ldrb	r2, [r7, #4]
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <shci_user_evt_proc+0x9c>)
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e002      	b.n	8004ed6 <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <shci_user_evt_proc+0x9c>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <shci_user_evt_proc+0x9c>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fa6f 	bl	80053c4 <TL_MM_EvtDone>
 8004ee6:	e004      	b.n	8004ef2 <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4619      	mov	r1, r3
 8004eec:	480a      	ldr	r0, [pc, #40]	; (8004f18 <shci_user_evt_proc+0x98>)
 8004eee:	f000 fb45 	bl	800557c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004ef2:	4809      	ldr	r0, [pc, #36]	; (8004f18 <shci_user_evt_proc+0x98>)
 8004ef4:	f000 fb22 	bl	800553c <LST_is_empty>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <shci_user_evt_proc+0x8e>
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <shci_user_evt_proc+0x9c>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8004f06:	4804      	ldr	r0, [pc, #16]	; (8004f18 <shci_user_evt_proc+0x98>)
 8004f08:	f7fb fa07 	bl	800031a <shci_notify_asynch_evt>
  }


  return;
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
}
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	2000010c 	.word	0x2000010c
 8004f1c:	2000011c 	.word	0x2000011c
 8004f20:	2000020c 	.word	0x2000020c

08004f24 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60ba      	str	r2, [r7, #8]
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	4603      	mov	r3, r0
 8004f30:	81fb      	strh	r3, [r7, #14]
 8004f32:	460b      	mov	r3, r1
 8004f34:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8004f36:	2000      	movs	r0, #0
 8004f38:	f000 f86c 	bl	8005014 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <shci_send+0x84>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	89fa      	ldrh	r2, [r7, #14]
 8004f42:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8004f46:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <shci_send+0x84>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	7b7a      	ldrb	r2, [r7, #13]
 8004f4c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004f4e:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <shci_send+0x84>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	7b7a      	ldrb	r2, [r7, #13]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 fcc5 	bl	80068e8 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <shci_send+0x84>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f89c 	bl	80050a0 <OutputCmdTrace>

  shciContext.io.Send(0,0);
 8004f68:	4b10      	ldr	r3, [pc, #64]	; (8004fac <shci_send+0x88>)
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	2000      	movs	r0, #0
 8004f70:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8004f72:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004f76:	f7fb f9e7 	bl	8000348 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f103 0008 	add.w	r0, r3, #8
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <shci_send+0x84>)
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <shci_send+0x84>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	789b      	ldrb	r3, [r3, #2]
 8004f8a:	3303      	adds	r3, #3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f001 fcab 	bl	80068e8 <memcpy>

  OutputRspTrace(p_rsp);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f88e 	bl	80050b4 <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f000 f83b 	bl	8005014 <Cmd_SetStatus>

  return;
 8004f9e:	bf00      	nop
}
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000118 	.word	0x20000118
 8004fac:	2000020c 	.word	0x2000020c

08004fb0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8004fb8:	4a10      	ldr	r2, [pc, #64]	; (8004ffc <TlInit+0x4c>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8004fbe:	4810      	ldr	r0, [pc, #64]	; (8005000 <TlInit+0x50>)
 8004fc0:	f000 faac 	bl	800551c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f000 f825 	bl	8005014 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004fca:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <TlInit+0x54>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <TlInit+0x58>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00c      	beq.n	8004ff2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <TlInit+0x5c>)
 8004fde:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <TlInit+0x60>)
 8004fe2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8004fe4:	4b08      	ldr	r3, [pc, #32]	; (8005008 <TlInit+0x58>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f107 020c 	add.w	r2, r7, #12
 8004fec:	4610      	mov	r0, r2
 8004fee:	4798      	blx	r3
  }

  return;
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
}
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000118 	.word	0x20000118
 8005000:	2000010c 	.word	0x2000010c
 8005004:	2000011c 	.word	0x2000011c
 8005008:	2000020c 	.word	0x2000020c
 800500c:	08005065 	.word	0x08005065
 8005010:	0800507d 	.word	0x0800507d

08005014 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005024:	4b0d      	ldr	r3, [pc, #52]	; (800505c <Cmd_SetStatus+0x48>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <Cmd_SetStatus+0x48>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <Cmd_SetStatus+0x4c>)
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800503a:	e00b      	b.n	8005054 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800503c:	4b08      	ldr	r3, [pc, #32]	; (8005060 <Cmd_SetStatus+0x4c>)
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <Cmd_SetStatus+0x48>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800504a:	4b04      	ldr	r3, [pc, #16]	; (800505c <Cmd_SetStatus+0x48>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2001      	movs	r0, #1
 8005050:	4798      	blx	r3
  return;
 8005052:	bf00      	nop
 8005054:	bf00      	nop
}
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	2000022c 	.word	0x2000022c
 8005060:	20000114 	.word	0x20000114

08005064 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800506c:	2000      	movs	r0, #0
 800506e:	f7fb f960 	bl	8000332 <shci_cmd_resp_release>

  return;
 8005072:	bf00      	nop
}
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4805      	ldr	r0, [pc, #20]	; (800509c <TlUserEvtReceived+0x20>)
 8005088:	f000 fa9c 	bl	80055c4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800508c:	4803      	ldr	r0, [pc, #12]	; (800509c <TlUserEvtReceived+0x20>)
 800508e:	f7fb f944 	bl	800031a <shci_notify_asynch_evt>

  return;
 8005092:	bf00      	nop
}
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	2000010c 	.word	0x2000010c

080050a0 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 80050a8:	bf00      	nop
}
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7a5b      	ldrb	r3, [r3, #9]
 80050c0:	2b0e      	cmp	r3, #14
 80050c2:	d000      	beq.n	80050c6 <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 80050c4:	e000      	b.n	80050c8 <OutputRspTrace+0x14>
      break;
 80050c6:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 80050c8:	bf00      	nop
}
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	7a5b      	ldrb	r3, [r3, #9]
 80050e0:	2bff      	cmp	r3, #255	; 0xff
 80050e2:	d100      	bne.n	80050e6 <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
}
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a05      	ldr	r2, [pc, #20]	; (8005114 <shci_register_io_bus+0x20>)
 8005100:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a04      	ldr	r2, [pc, #16]	; (8005118 <shci_register_io_bus+0x24>)
 8005106:	611a      	str	r2, [r3, #16]

  return;
 8005108:	bf00      	nop
}
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	08005279 	.word	0x08005279
 8005118:	080052cd 	.word	0x080052cd

0800511c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005120:	f001 f8a2 	bl	8006268 <HW_IPCC_Enable>

  return;
 8005124:	bf00      	nop
}
 8005126:	bd80      	pop	{r7, pc}

08005128 <TL_Init>:


void TL_Init( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <TL_Init+0x48>)
 800512e:	4a11      	ldr	r2, [pc, #68]	; (8005174 <TL_Init+0x4c>)
 8005130:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005132:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <TL_Init+0x48>)
 8005134:	4a10      	ldr	r2, [pc, #64]	; (8005178 <TL_Init+0x50>)
 8005136:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <TL_Init+0x48>)
 800513a:	4a10      	ldr	r2, [pc, #64]	; (800517c <TL_Init+0x54>)
 800513c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <TL_Init+0x48>)
 8005140:	4a0f      	ldr	r2, [pc, #60]	; (8005180 <TL_Init+0x58>)
 8005142:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <TL_Init+0x48>)
 8005146:	4a0f      	ldr	r2, [pc, #60]	; (8005184 <TL_Init+0x5c>)
 8005148:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800514a:	4b09      	ldr	r3, [pc, #36]	; (8005170 <TL_Init+0x48>)
 800514c:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <TL_Init+0x60>)
 800514e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <TL_Init+0x48>)
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <TL_Init+0x64>)
 8005154:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <TL_Init+0x48>)
 8005158:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <TL_Init+0x68>)
 800515a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <TL_Init+0x48>)
 800515e:	4a0d      	ldr	r2, [pc, #52]	; (8005194 <TL_Init+0x6c>)
 8005160:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005162:	4b03      	ldr	r3, [pc, #12]	; (8005170 <TL_Init+0x48>)
 8005164:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <TL_Init+0x70>)
 8005166:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005168:	f001 f88e 	bl	8006288 <HW_IPCC_Init>

  return;
 800516c:	bf00      	nop
}
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20030000 	.word	0x20030000
 8005174:	20030028 	.word	0x20030028
 8005178:	20030048 	.word	0x20030048
 800517c:	20030058 	.word	0x20030058
 8005180:	20030064 	.word	0x20030064
 8005184:	2003006c 	.word	0x2003006c
 8005188:	20030074 	.word	0x20030074
 800518c:	2003007c 	.word	0x2003007c
 8005190:	20030098 	.word	0x20030098
 8005194:	2003009c 	.word	0x2003009c
 8005198:	200300a8 	.word	0x200300a8

0800519c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80051a8:	4811      	ldr	r0, [pc, #68]	; (80051f0 <TL_BLE_Init+0x54>)
 80051aa:	f000 f9b7 	bl	800551c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <TL_BLE_Init+0x58>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <TL_BLE_Init+0x5c>)
 80051c8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <TL_BLE_Init+0x54>)
 80051ce:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80051d0:	f001 f870 	bl	80062b4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a08      	ldr	r2, [pc, #32]	; (80051fc <TL_BLE_Init+0x60>)
 80051da:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a07      	ldr	r2, [pc, #28]	; (8005200 <TL_BLE_Init+0x64>)
 80051e2:	6013      	str	r3, [r2, #0]

  return 0;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	200300c4 	.word	0x200300c4
 80051f4:	20030000 	.word	0x20030000
 80051f8:	20030a48 	.word	0x20030a48
 80051fc:	20000238 	.word	0x20000238
 8005200:	2000023c 	.word	0x2000023c

08005204 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <TL_BLE_SendCmd+0x24>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800521a:	f001 f855 	bl	80062c8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20030000 	.word	0x20030000

0800522c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005232:	e009      	b.n	8005248 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4808      	ldr	r0, [pc, #32]	; (800525c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800523a:	f000 fa06 	bl	800564a <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <HW_IPCC_BLE_RxEvtNot+0x34>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4610      	mov	r0, r2
 8005246:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005248:	4804      	ldr	r0, [pc, #16]	; (800525c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800524a:	f000 f977 	bl	800553c <LST_is_empty>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ef      	beq.n	8005234 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005254:	bf00      	nop
}
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	200300c4 	.word	0x200300c4
 8005260:	20000238 	.word	0x20000238

08005264 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005268:	4b02      	ldr	r3, [pc, #8]	; (8005274 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4798      	blx	r3

  return;
 800526e:	bf00      	nop
}
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2000023c 	.word	0x2000023c

08005278 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005284:	480d      	ldr	r0, [pc, #52]	; (80052bc <TL_SYS_Init+0x44>)
 8005286:	f000 f949 	bl	800551c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <TL_SYS_Init+0x48>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4a08      	ldr	r2, [pc, #32]	; (80052bc <TL_SYS_Init+0x44>)
 800529c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800529e:	f001 f835 	bl	800630c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <TL_SYS_Init+0x4c>)
 80052a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4a06      	ldr	r2, [pc, #24]	; (80052c8 <TL_SYS_Init+0x50>)
 80052b0:	6013      	str	r3, [r2, #0]

  return 0;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	200300cc 	.word	0x200300cc
 80052c0:	20030000 	.word	0x20030000
 80052c4:	20000240 	.word	0x20000240
 80052c8:	20000244 	.word	0x20000244

080052cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <TL_SYS_SendCmd+0x24>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2210      	movs	r2, #16
 80052e0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 80052e2:	f001 f81d 	bl	8006320 <HW_IPCC_SYS_SendCmd>

  return 0;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20030000 	.word	0x20030000

080052f4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <HW_IPCC_SYS_CmdEvtNot+0x18>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 80052fe:	68d2      	ldr	r2, [r2, #12]
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	4610      	mov	r0, r2
 8005304:	4798      	blx	r3

  return;
 8005306:	bf00      	nop
}
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000240 	.word	0x20000240
 8005310:	20030000 	.word	0x20030000

08005314 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800531a:	e009      	b.n	8005330 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800531c:	1d3b      	adds	r3, r7, #4
 800531e:	4619      	mov	r1, r3
 8005320:	4808      	ldr	r0, [pc, #32]	; (8005344 <HW_IPCC_SYS_EvtNot+0x30>)
 8005322:	f000 f992 	bl	800564a <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005326:	4b08      	ldr	r3, [pc, #32]	; (8005348 <HW_IPCC_SYS_EvtNot+0x34>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005330:	4804      	ldr	r0, [pc, #16]	; (8005344 <HW_IPCC_SYS_EvtNot+0x30>)
 8005332:	f000 f903 	bl	800553c <LST_is_empty>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0ef      	beq.n	800531c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800533c:	bf00      	nop
}
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	200300cc 	.word	0x200300cc
 8005348:	20000244 	.word	0x20000244

0800534c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005354:	4817      	ldr	r0, [pc, #92]	; (80053b4 <TL_MM_Init+0x68>)
 8005356:	f000 f8e1 	bl	800551c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800535a:	4817      	ldr	r0, [pc, #92]	; (80053b8 <TL_MM_Init+0x6c>)
 800535c:	f000 f8de 	bl	800551c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005360:	4b16      	ldr	r3, [pc, #88]	; (80053bc <TL_MM_Init+0x70>)
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <TL_MM_Init+0x74>)
 8005366:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <TL_MM_Init+0x74>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6892      	ldr	r2, [r2, #8]
 8005370:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005372:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <TL_MM_Init+0x74>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68d2      	ldr	r2, [r2, #12]
 800537a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <TL_MM_Init+0x74>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0c      	ldr	r2, [pc, #48]	; (80053b4 <TL_MM_Init+0x68>)
 8005382:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005384:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <TL_MM_Init+0x74>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <TL_MM_Init+0x74>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6852      	ldr	r2, [r2, #4]
 8005396:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005398:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <TL_MM_Init+0x74>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6912      	ldr	r2, [r2, #16]
 80053a0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <TL_MM_Init+0x74>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6952      	ldr	r2, [r2, #20]
 80053aa:	619a      	str	r2, [r3, #24]

  return;
 80053ac:	bf00      	nop
}
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200300b4 	.word	0x200300b4
 80053b8:	20000230 	.word	0x20000230
 80053bc:	20030000 	.word	0x20030000
 80053c0:	20000248 	.word	0x20000248

080053c4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4806      	ldr	r0, [pc, #24]	; (80053e8 <TL_MM_EvtDone+0x24>)
 80053d0:	f000 f8f8 	bl	80055c4 <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f82b 	bl	8005430 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80053da:	4804      	ldr	r0, [pc, #16]	; (80053ec <TL_MM_EvtDone+0x28>)
 80053dc:	f000 ffc6 	bl	800636c <HW_IPCC_MM_SendFreeBuf>

  return;
 80053e0:	bf00      	nop
}
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000230 	.word	0x20000230
 80053ec:	080053f1 	.word	0x080053f1

080053f0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80053f6:	e00c      	b.n	8005412 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	480a      	ldr	r0, [pc, #40]	; (8005428 <SendFreeBuf+0x38>)
 80053fe:	f000 f924 	bl	800564a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <SendFreeBuf+0x3c>)
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	4611      	mov	r1, r2
 800540c:	4618      	mov	r0, r3
 800540e:	f000 f8d9 	bl	80055c4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005412:	4805      	ldr	r0, [pc, #20]	; (8005428 <SendFreeBuf+0x38>)
 8005414:	f000 f892 	bl	800553c <LST_is_empty>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0ec      	beq.n	80053f8 <SendFreeBuf+0x8>
  }

  return;
 800541e:	bf00      	nop
}
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000230 	.word	0x20000230
 800542c:	20030000 	.word	0x20030000

08005430 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	7a5b      	ldrb	r3, [r3, #9]
 800543c:	2b0f      	cmp	r3, #15
 800543e:	d004      	beq.n	800544a <OutputMemReleaseTrace+0x1a>
 8005440:	2bff      	cmp	r3, #255	; 0xff
 8005442:	d004      	beq.n	800544e <OutputMemReleaseTrace+0x1e>
 8005444:	2b0e      	cmp	r3, #14
 8005446:	d004      	beq.n	8005452 <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 8005448:	e004      	b.n	8005454 <OutputMemReleaseTrace+0x24>
      break;
 800544a:	bf00      	nop
 800544c:	e002      	b.n	8005454 <OutputMemReleaseTrace+0x24>
      break;
 800544e:	bf00      	nop
 8005450:	e000      	b.n	8005454 <OutputMemReleaseTrace+0x24>
      break;
 8005452:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 8005454:	bf00      	nop
}
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005464:	4805      	ldr	r0, [pc, #20]	; (800547c <TL_TRACES_Init+0x1c>)
 8005466:	f000 f859 	bl	800551c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <TL_TRACES_Init+0x20>)
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	4a03      	ldr	r2, [pc, #12]	; (800547c <TL_TRACES_Init+0x1c>)
 8005470:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005472:	f000 ffb1 	bl	80063d8 <HW_IPCC_TRACES_Init>

  return;
 8005476:	bf00      	nop
}
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	200300bc 	.word	0x200300bc
 8005480:	20030000 	.word	0x20030000

08005484 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800548a:	e008      	b.n	800549e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800548c:	1d3b      	adds	r3, r7, #4
 800548e:	4619      	mov	r1, r3
 8005490:	4808      	ldr	r0, [pc, #32]	; (80054b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005492:	f000 f8da 	bl	800564a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f80d 	bl	80054b8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800549e:	4805      	ldr	r0, [pc, #20]	; (80054b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80054a0:	f000 f84c 	bl	800553c <LST_is_empty>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80054aa:	bf00      	nop
}
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200300bc 	.word	0x200300bc

080054b8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <OTP_Read+0x48>)
 80054d8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80054da:	e002      	b.n	80054e2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b08      	subs	r3, #8
 80054e0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3307      	adds	r3, #7
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	79fa      	ldrb	r2, [r7, #7]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d003      	beq.n	80054f6 <OTP_Read+0x2a>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a09      	ldr	r2, [pc, #36]	; (8005518 <OTP_Read+0x4c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d1f2      	bne.n	80054dc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3307      	adds	r3, #7
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	79fa      	ldrb	r2, [r7, #7]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d001      	beq.n	8005506 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8005506:	68fb      	ldr	r3, [r7, #12]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	1fff73f8 	.word	0x1fff73f8
 8005518:	1fff7000 	.word	0x1fff7000

0800551c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005544:	f3ef 8310 	mrs	r3, PRIMASK
 8005548:	60fb      	str	r3, [r7, #12]
  return(result);
 800554a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800554c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800554e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d102      	bne.n	8005560 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800555a:	2301      	movs	r3, #1
 800555c:	75fb      	strb	r3, [r7, #23]
 800555e:	e001      	b.n	8005564 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	75fb      	strb	r3, [r7, #23]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005586:	f3ef 8310 	mrs	r3, PRIMASK
 800558a:	60fb      	str	r3, [r7, #12]
  return(result);
 800558c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800558e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005590:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ce:	f3ef 8310 	mrs	r3, PRIMASK
 80055d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80055d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80055d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80055d8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005600:	bf00      	nop
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005614:	f3ef 8310 	mrs	r3, PRIMASK
 8005618:	60fb      	str	r3, [r7, #12]
  return(result);
 800561a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800561c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800561e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6852      	ldr	r2, [r2, #4]
 8005632:	605a      	str	r2, [r3, #4]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b086      	sub	sp, #24
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8310 	mrs	r3, PRIMASK
 8005658:	60fb      	str	r3, [r7, #12]
  return(result);
 800565a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800565c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800565e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ffcd 	bl	800560c <LST_remove_node>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800567c:	bf00      	nop
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <LL_FLASH_GetUDN+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	1fff7580 	.word	0x1fff7580

0800569c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80056a0:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <LL_FLASH_GetDeviceID+0x14>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	b2db      	uxtb	r3, r3
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	1fff7584 	.word	0x1fff7584

080056b4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80056b8:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <LL_FLASH_GetSTCompanyID+0x14>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	0a1b      	lsrs	r3, r3, #8
}
 80056be:	4618      	mov	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	1fff7584 	.word	0x1fff7584

080056cc <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80056cc:	b5b0      	push	{r4, r5, r7, lr}
 80056ce:	b08c      	sub	sp, #48	; 0x30
 80056d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80056d2:	4b28      	ldr	r3, [pc, #160]	; (8005774 <APP_BLE_Init+0xa8>)
 80056d4:	463c      	mov	r4, r7
 80056d6:	461d      	mov	r5, r3
 80056d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80056e4:	c407      	stmia	r4!, {r0, r1, r2}
 80056e6:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80056e8:	f000 f8f6 	bl	80058d8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80056ec:	2101      	movs	r1, #1
 80056ee:	2002      	movs	r0, #2
 80056f0:	f000 fe9a 	bl	8006428 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80056f4:	4a20      	ldr	r2, [pc, #128]	; (8005778 <APP_BLE_Init+0xac>)
 80056f6:	2100      	movs	r1, #0
 80056f8:	2004      	movs	r0, #4
 80056fa:	f000 ffa3 	bl	8006644 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80056fe:	463b      	mov	r3, r7
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff f9a1 	bl	8004a48 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8005706:	f000 f8fd 	bl	8005904 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800570a:	f7ff f8fd 	bl	8004908 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <APP_BLE_Init+0xb0>)
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8005716:	4b19      	ldr	r3, [pc, #100]	; (800577c <APP_BLE_Init+0xb0>)
 8005718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800571c:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800571e:	4a18      	ldr	r2, [pc, #96]	; (8005780 <APP_BLE_Init+0xb4>)
 8005720:	2100      	movs	r1, #0
 8005722:	2001      	movs	r0, #1
 8005724:	f000 ff8e 	bl	8006644 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8005728:	2006      	movs	r0, #6
 800572a:	f7fe fe2c 	bl	8004386 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800572e:	f000 fc23 	bl	8005f78 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8005732:	4b14      	ldr	r3, [pc, #80]	; (8005784 <APP_BLE_Init+0xb8>)
 8005734:	2200      	movs	r2, #0
 8005736:	4914      	ldr	r1, [pc, #80]	; (8005788 <APP_BLE_Init+0xbc>)
 8005738:	2000      	movs	r0, #0
 800573a:	f7fb fb17 	bl	8000d6c <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <APP_BLE_Init+0xc0>)
 8005740:	2200      	movs	r2, #0
 8005742:	4913      	ldr	r1, [pc, #76]	; (8005790 <APP_BLE_Init+0xc4>)
 8005744:	2000      	movs	r0, #0
 8005746:	f7fb fb11 	bl	8000d6c <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <APP_BLE_Init+0xb0>)
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <APP_BLE_Init+0xb0>)
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800575a:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <APP_BLE_Init+0xc8>)
 800575c:	2280      	movs	r2, #128	; 0x80
 800575e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <APP_BLE_Init+0xcc>)
 8005762:	22a0      	movs	r2, #160	; 0xa0
 8005764:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8005766:	2001      	movs	r0, #1
 8005768:	f000 f9a6 	bl	8005ab8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800576c:	bf00      	nop
}
 800576e:	3730      	adds	r7, #48	; 0x30
 8005770:	46bd      	mov	sp, r7
 8005772:	bdb0      	pop	{r4, r5, r7, pc}
 8005774:	08006964 	.word	0x08006964
 8005778:	08004add 	.word	0x08004add
 800577c:	20000120 	.word	0x20000120
 8005780:	08005c25 	.word	0x08005c25
 8005784:	08005c59 	.word	0x08005c59
 8005788:	200001b1 	.word	0x200001b1
 800578c:	08005c69 	.word	0x08005c69
 8005790:	200001b2 	.word	0x200001b2
 8005794:	200001b4 	.word	0x200001b4
 8005798:	200001b6 	.word	0x200001b6

0800579c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80057a4:	2342      	movs	r3, #66	; 0x42
 80057a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3301      	adds	r3, #1
 80057ae:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b3e      	cmp	r3, #62	; 0x3e
 80057b6:	d024      	beq.n	8005802 <SVCCTL_App_Notification+0x66>
 80057b8:	2bff      	cmp	r3, #255	; 0xff
 80057ba:	d070      	beq.n	800589e <SVCCTL_App_Notification+0x102>
 80057bc:	2b05      	cmp	r3, #5
 80057be:	d000      	beq.n	80057c2 <SVCCTL_App_Notification+0x26>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 80057c0:	e080      	b.n	80058c4 <SVCCTL_App_Notification+0x128>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	3302      	adds	r3, #2
 80057c6:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	4b3f      	ldr	r3, [pc, #252]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 80057d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d106      	bne.n	80057e6 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80057d8:	4b3d      	ldr	r3, [pc, #244]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 80057da:	2200      	movs	r2, #0
 80057dc:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80057de:	4b3c      	ldr	r3, [pc, #240]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 80057e6:	2001      	movs	r0, #1
 80057e8:	f000 f966 	bl	8005ab8 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80057ec:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <SVCCTL_App_Notification+0x138>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80057f2:	4b37      	ldr	r3, [pc, #220]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 80057f4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80057f6:	4b37      	ldr	r3, [pc, #220]	; (80058d4 <SVCCTL_App_Notification+0x138>)
 80057f8:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 80057fa:	4836      	ldr	r0, [pc, #216]	; (80058d4 <SVCCTL_App_Notification+0x138>)
 80057fc:	f000 fba8 	bl	8005f50 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8005800:	e060      	b.n	80058c4 <SVCCTL_App_Notification+0x128>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	3302      	adds	r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d042      	beq.n	8005896 <SVCCTL_App_Notification+0xfa>
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d002      	beq.n	800581a <SVCCTL_App_Notification+0x7e>
 8005814:	2b01      	cmp	r3, #1
 8005816:	d016      	beq.n	8005846 <SVCCTL_App_Notification+0xaa>
          break;
 8005818:	e040      	b.n	800589c <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	3301      	adds	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 8005822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005824:	f107 020a 	add.w	r2, r7, #10
 8005828:	f107 010b 	add.w	r1, r7, #11
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe fe18 	bl	8004462 <hci_le_read_phy>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8005838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800583c:	2b00      	cmp	r3, #0
 800583e:	d12c      	bne.n	800589a <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8005840:	7afb      	ldrb	r3, [r7, #11]
 8005842:	2b02      	cmp	r3, #2
          break;
 8005844:	e029      	b.n	800589a <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	3301      	adds	r3, #1
 800584a:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800584c:	4b20      	ldr	r3, [pc, #128]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 800584e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005852:	4618      	mov	r0, r3
 8005854:	f7fb fb00 	bl	8000e58 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8005858:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 800585a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800585e:	2b04      	cmp	r3, #4
 8005860:	d104      	bne.n	800586c <SVCCTL_App_Notification+0xd0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8005862:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 8005864:	2206      	movs	r2, #6
 8005866:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800586a:	e003      	b.n	8005874 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800586c:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 800586e:	2205      	movs	r2, #5
 8005870:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800587a:	b29a      	uxth	r2, r3
 800587c:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 800587e:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8005880:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <SVCCTL_App_Notification+0x138>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005886:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <SVCCTL_App_Notification+0x134>)
 8005888:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800588a:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <SVCCTL_App_Notification+0x138>)
 800588c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800588e:	4811      	ldr	r0, [pc, #68]	; (80058d4 <SVCCTL_App_Notification+0x138>)
 8005890:	f000 fb5e 	bl	8005f50 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8005894:	e002      	b.n	800589c <SVCCTL_App_Notification+0x100>
          break;
 8005896:	bf00      	nop
 8005898:	e014      	b.n	80058c4 <SVCCTL_App_Notification+0x128>
          break;
 800589a:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800589c:	e012      	b.n	80058c4 <SVCCTL_App_Notification+0x128>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	3302      	adds	r3, #2
 80058a2:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f240 4207 	movw	r2, #1031	; 0x407
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <SVCCTL_App_Notification+0x120>
 80058b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b6:	d003      	beq.n	80058c0 <SVCCTL_App_Notification+0x124>
 80058b8:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 80058ba:	e002      	b.n	80058c2 <SVCCTL_App_Notification+0x126>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 80058bc:	bf00      	nop
 80058be:	e000      	b.n	80058c2 <SVCCTL_App_Notification+0x126>
      break;
 80058c0:	bf00      	nop
      break; /* EVT_VENDOR */
 80058c2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80058c4:	2301      	movs	r3, #1
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3728      	adds	r7, #40	; 0x28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000120 	.word	0x20000120
 80058d4:	20000328 	.word	0x20000328

080058d8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <Ble_Tl_Init+0x20>)
 80058e0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <Ble_Tl_Init+0x24>)
 80058e4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80058e6:	463b      	mov	r3, r7
 80058e8:	4619      	mov	r1, r3
 80058ea:	4805      	ldr	r0, [pc, #20]	; (8005900 <Ble_Tl_Init+0x28>)
 80058ec:	f7ff f8da 	bl	8004aa4 <hci_init>

  return;
 80058f0:	bf00      	nop
}
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200300d4 	.word	0x200300d4
 80058fc:	08005cf3 	.word	0x08005cf3
 8005900:	08005cbb 	.word	0x08005cbb

08005904 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8005904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005906:	b091      	sub	sp, #68	; 0x44
 8005908:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800590a:	2300      	movs	r3, #0
 800590c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800590e:	f7fe fd84 	bl	800441a <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8005912:	f000 f943 	bl	8005b9c <BleGetBdAddress>
 8005916:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	2106      	movs	r1, #6
 800591c:	2000      	movs	r0, #0
 800591e:	f7fe fc72 	bl	8004206 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	795a      	ldrb	r2, [r3, #5]
 8005926:	4b5e      	ldr	r3, [pc, #376]	; (8005aa0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005928:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	791a      	ldrb	r2, [r3, #4]
 800592e:	4b5c      	ldr	r3, [pc, #368]	; (8005aa0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005930:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	78da      	ldrb	r2, [r3, #3]
 8005936:	4b5a      	ldr	r3, [pc, #360]	; (8005aa0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005938:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	789a      	ldrb	r2, [r3, #2]
 800593e:	4b58      	ldr	r3, [pc, #352]	; (8005aa0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005940:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	785a      	ldrb	r2, [r3, #1]
 8005946:	4b56      	ldr	r3, [pc, #344]	; (8005aa0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005948:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	4b54      	ldr	r3, [pc, #336]	; (8005aa0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005950:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8005952:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8005956:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8005958:	f7ff fe94 	bl	8005684 <LL_FLASH_GetUDN>
 800595c:	4603      	mov	r3, r0
 800595e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8005960:	f107 0308 	add.w	r3, r7, #8
 8005964:	461a      	mov	r2, r3
 8005966:	2106      	movs	r1, #6
 8005968:	202e      	movs	r0, #46	; 0x2e
 800596a:	f7fe fc4c 	bl	8004206 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800596e:	4a4d      	ldr	r2, [pc, #308]	; (8005aa4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8005970:	2110      	movs	r1, #16
 8005972:	2018      	movs	r0, #24
 8005974:	f7fe fc47 	bl	8004206 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8005978:	4a4b      	ldr	r2, [pc, #300]	; (8005aa8 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800597a:	2110      	movs	r1, #16
 800597c:	2008      	movs	r0, #8
 800597e:	f7fe fc42 	bl	8004206 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005982:	2118      	movs	r1, #24
 8005984:	2001      	movs	r0, #1
 8005986:	f7fe fca7 	bl	80042d8 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800598a:	f7fe f9f7 	bl	8003d7c <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8005992:	7ffb      	ldrb	r3, [r7, #31]
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800599a:	7ffb      	ldrb	r3, [r7, #31]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01e      	beq.n	80059de <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "hukam";
 80059a0:	4b42      	ldr	r3, [pc, #264]	; (8005aac <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 80059a2:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 80059a4:	f107 0216 	add.w	r2, r7, #22
 80059a8:	7ff8      	ldrb	r0, [r7, #31]
 80059aa:	f107 0312 	add.w	r3, r7, #18
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	f107 0314 	add.w	r3, r7, #20
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	4613      	mov	r3, r2
 80059b8:	2207      	movs	r2, #7
 80059ba:	2100      	movs	r1, #0
 80059bc:	f7fe f8d3 	bl	8003b66 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80059c0:	8afc      	ldrh	r4, [r7, #22]
 80059c2:	8abd      	ldrh	r5, [r7, #20]
 80059c4:	69b8      	ldr	r0, [r7, #24]
 80059c6:	f7fa fbd9 	bl	800017c <strlen>
 80059ca:	4603      	mov	r3, r0
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	4613      	mov	r3, r2
 80059d4:	2200      	movs	r2, #0
 80059d6:	4629      	mov	r1, r5
 80059d8:	4620      	mov	r0, r4
 80059da:	f7fe fb8d 	bl	80040f8 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80059de:	8af8      	ldrh	r0, [r7, #22]
 80059e0:	8a79      	ldrh	r1, [r7, #18]
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2302      	movs	r3, #2
 80059e8:	2200      	movs	r2, #0
 80059ea:	f7fe fb85 	bl	80040f8 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80059ee:	2202      	movs	r2, #2
 80059f0:	2102      	movs	r1, #2
 80059f2:	2000      	movs	r0, #0
 80059f4:	f7fe fd9d 	bl	8004532 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80059f8:	4b2d      	ldr	r3, [pc, #180]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80059fe:	4b2c      	ldr	r3, [pc, #176]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fd ffbd 	bl	8003982 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8005a08:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8005a0e:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8005a14:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a16:	2208      	movs	r2, #8
 8005a18:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8005a1a:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a1c:	2210      	movs	r2, #16
 8005a1e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8005a20:	4b23      	ldr	r3, [pc, #140]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8005a26:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a28:	4a22      	ldr	r2, [pc, #136]	; (8005ab4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8005a2a:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8005a2c:	4b20      	ldr	r3, [pc, #128]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a38:	e00b      	b.n	8005a52 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8005a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a40:	4413      	add	r3, r2
 8005a42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a46:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8005a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a56:	2b0f      	cmp	r3, #15
 8005a58:	d9ef      	bls.n	8005a3a <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a5c:	789d      	ldrb	r5, [r3, #2]
 8005a5e:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a60:	785e      	ldrb	r6, [r3, #1]
 8005a62:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a64:	7d5b      	ldrb	r3, [r3, #21]
 8005a66:	4a12      	ldr	r2, [pc, #72]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a68:	7d92      	ldrb	r2, [r2, #22]
 8005a6a:	4911      	ldr	r1, [pc, #68]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a6c:	7d09      	ldrb	r1, [r1, #20]
 8005a6e:	4810      	ldr	r0, [pc, #64]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a70:	6980      	ldr	r0, [r0, #24]
 8005a72:	2400      	movs	r4, #0
 8005a74:	9404      	str	r4, [sp, #16]
 8005a76:	9003      	str	r0, [sp, #12]
 8005a78:	9102      	str	r1, [sp, #8]
 8005a7a:	9201      	str	r2, [sp, #4]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2201      	movs	r2, #1
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	f7fd ffc6 	bl	8003a16 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005a8c:	789b      	ldrb	r3, [r3, #2]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 8005a92:	f7fe f94f 	bl	8003d34 <aci_gap_configure_whitelist>
   }
}
 8005a96:	bf00      	nop
 8005a98:	372c      	adds	r7, #44	; 0x2c
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000010 	.word	0x20000010
 8005aa4:	08006b34 	.word	0x08006b34
 8005aa8:	08006b44 	.word	0x08006b44
 8005aac:	08006994 	.word	0x08006994
 8005ab0:	20000120 	.word	0x20000120
 8005ab4:	0001b207 	.word	0x0001b207

08005ab8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af08      	add	r7, sp, #32
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005ac2:	2342      	movs	r3, #66	; 0x42
 8005ac4:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d106      	bne.n	8005ada <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8005acc:	4b2c      	ldr	r3, [pc, #176]	; (8005b80 <Adv_Request+0xc8>)
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8005ad2:	4b2c      	ldr	r3, [pc, #176]	; (8005b84 <Adv_Request+0xcc>)
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	81bb      	strh	r3, [r7, #12]
 8005ad8:	e005      	b.n	8005ae6 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8005ada:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8005ade:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8005ae0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005ae4:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8005ae6:	4b28      	ldr	r3, [pc, #160]	; (8005b88 <Adv_Request+0xd0>)
 8005ae8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fb f9b3 	bl	8000e58 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d10d      	bne.n	8005b14 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8005af8:	4b23      	ldr	r3, [pc, #140]	; (8005b88 <Adv_Request+0xd0>)
 8005afa:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d004      	beq.n	8005b0c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8005b02:	4b21      	ldr	r3, [pc, #132]	; (8005b88 <Adv_Request+0xd0>)
 8005b04:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d103      	bne.n	8005b14 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8005b0c:	f7fd fe37 	bl	800377e <aci_gap_set_non_discoverable>
 8005b10:	4603      	mov	r3, r0
 8005b12:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8005b14:	4a1c      	ldr	r2, [pc, #112]	; (8005b88 <Adv_Request+0xd0>)
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8005b1c:	4b1a      	ldr	r3, [pc, #104]	; (8005b88 <Adv_Request+0xd0>)
 8005b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b22:	89b8      	ldrh	r0, [r7, #12]
 8005b24:	89f9      	ldrh	r1, [r7, #14]
 8005b26:	2200      	movs	r2, #0
 8005b28:	9206      	str	r2, [sp, #24]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	9205      	str	r2, [sp, #20]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <Adv_Request+0xd4>)
 8005b30:	9204      	str	r2, [sp, #16]
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <Adv_Request+0xd8>)
 8005b36:	9302      	str	r3, [sp, #8]
 8005b38:	2306      	movs	r3, #6
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	2300      	movs	r3, #0
 8005b42:	4602      	mov	r2, r0
 8005b44:	2000      	movs	r0, #0
 8005b46:	f7fd fe3e 	bl	80037c6 <aci_gap_set_discoverable>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8005b4e:	4911      	ldr	r1, [pc, #68]	; (8005b94 <Adv_Request+0xdc>)
 8005b50:	200e      	movs	r0, #14
 8005b52:	f7fe f893 	bl	8003c7c <aci_gap_update_adv_data>
 8005b56:	4603      	mov	r3, r0
 8005b58:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d107      	bne.n	8005b76 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8005b66:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <Adv_Request+0xd0>)
 8005b68:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005b6c:	490a      	ldr	r1, [pc, #40]	; (8005b98 <Adv_Request+0xe0>)
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fb f9fc 	bl	8000f6c <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
}
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	200001b4 	.word	0x200001b4
 8005b84:	200001b6 	.word	0x200001b6
 8005b88:	20000120 	.word	0x20000120
 8005b8c:	20000149 	.word	0x20000149
 8005b90:	08006b54 	.word	0x08006b54
 8005b94:	20000010 	.word	0x20000010
 8005b98:	0001e046 	.word	0x0001e046

08005b9c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8005ba2:	f7ff fd6f 	bl	8005684 <LL_FLASH_GetUDN>
 8005ba6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bae:	d023      	beq.n	8005bf8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8005bb0:	f7ff fd80 	bl	80056b4 <LL_FLASH_GetSTCompanyID>
 8005bb4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8005bb6:	f7ff fd71 	bl	800569c <LL_FLASH_GetDeviceID>
 8005bba:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <BleGetBdAddress+0x80>)
 8005bc2:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <BleGetBdAddress+0x80>)
 8005bcc:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <BleGetBdAddress+0x80>)
 8005bd6:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <BleGetBdAddress+0x80>)
 8005bde:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <BleGetBdAddress+0x80>)
 8005be6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <BleGetBdAddress+0x80>)
 8005bf0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <BleGetBdAddress+0x80>)
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e00b      	b.n	8005c10 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f7ff fc67 	bl	80054cc <OTP_Read>
 8005bfe:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e001      	b.n	8005c10 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8005c0c:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <BleGetBdAddress+0x84>)
 8005c0e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8005c10:	697b      	ldr	r3, [r7, #20]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2000024c 	.word	0x2000024c
 8005c20:	08006b2c 	.word	0x08006b2c

08005c24 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <Adv_Cancel+0x30>)
 8005c2c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d00a      	beq.n	8005c4a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8005c34:	2300      	movs	r3, #0
 8005c36:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8005c38:	f7fd fda1 	bl	800377e <aci_gap_set_non_discoverable>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <Adv_Cancel+0x30>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
}
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000120 	.word	0x20000120

08005c58 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f000 fd10 	bl	8006684 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8005c64:	bf00      	nop
}
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8005c7e:	2100      	movs	r1, #0
 8005c80:	2004      	movs	r0, #4
 8005c82:	f000 fcff 	bl	8006684 <UTIL_SEQ_SetTask>
  return;
 8005c86:	bf00      	nop
}
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005c96:	2001      	movs	r0, #1
 8005c98:	f000 fd5a 	bl	8006750 <UTIL_SEQ_SetEvt>
  return;
 8005c9c:	bf00      	nop
}
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005cac:	2001      	movs	r0, #1
 8005cae:	f000 fd6d 	bl	800678c <UTIL_SEQ_WaitEvt>
  return;
 8005cb2:	bf00      	nop
}
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fe69 	bl	80049a4 <SVCCTL_UserEvtRx>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8005cd6:	7afb      	ldrb	r3, [r7, #11]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8005ce2:	e002      	b.n	8005cea <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <BLE_StatusNot+0x16>
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d006      	beq.n	8005d14 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8005d06:	e00b      	b.n	8005d20 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005d08:	2307      	movs	r3, #7
 8005d0a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fce3 	bl	80066d8 <UTIL_SEQ_PauseTask>
      break;
 8005d12:	e005      	b.n	8005d20 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005d14:	2307      	movs	r3, #7
 8005d16:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fcfb 	bl	8006714 <UTIL_SEQ_ResumeTask>
      break;
 8005d1e:	bf00      	nop
  }
  return;
 8005d20:	bf00      	nop
}
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
/* USER CODE BEGIN Custom_STM_Event_Handler_1 */

/* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8005d30:	2300      	movs	r3, #0
 8005d32:	75fb      	strb	r3, [r7, #23]
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3301      	adds	r3, #1
 8005d38:	613b      	str	r3, [r7, #16]

  switch(event_pckt->evt)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2bff      	cmp	r3, #255	; 0xff
 8005d40:	d000      	beq.n	8005d44 <Custom_STM_Event_Handler+0x1c>
    /* USER CODE BEGIN EVENT_PCKT_CASES*/

    /* USER CODE END EVENT_PCKT_CASES*/

    default:
      break;
 8005d42:	e018      	b.n	8005d76 <Custom_STM_Event_Handler+0x4e>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	3302      	adds	r3, #2
 8005d48:	60fb      	str	r3, [r7, #12]
      switch(blue_evt->ecode)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f640 4213 	movw	r2, #3091	; 0xc13
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d008      	beq.n	8005d6a <Custom_STM_Event_Handler+0x42>
 8005d58:	f640 4214 	movw	r2, #3092	; 0xc14
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d006      	beq.n	8005d6e <Custom_STM_Event_Handler+0x46>
 8005d60:	f640 4201 	movw	r2, #3073	; 0xc01
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <Custom_STM_Event_Handler+0x4a>
          break;
 8005d68:	e004      	b.n	8005d74 <Custom_STM_Event_Handler+0x4c>
          break;
 8005d6a:	bf00      	nop
 8005d6c:	e002      	b.n	8005d74 <Custom_STM_Event_Handler+0x4c>
          break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <Custom_STM_Event_Handler+0x4c>
          break;
 8005d72:	bf00      	nop
      break; /* EVT_VENDOR */
 8005d74:	bf00      	nop

/* USER CODE BEGIN Custom_STM_Event_Handler_2 */

/* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
}/* end Custom_STM_Event_Handler */
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af06      	add	r7, sp, #24
/* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8005d8a:	4860      	ldr	r0, [pc, #384]	; (8005f0c <SVCCTL_InitCustomSvc+0x188>)
 8005d8c:	f7fe fdf0 	bl	8004970 <SVCCTL_RegisterSvcHandler>
     *                                2 for sw_no +
     *                                1 for sw_no configuration descriptor +
     *                              = 4
     */

    COPY_SW_STATUS_UUID(uuid.Char_UUID_128);
 8005d90:	238f      	movs	r3, #143	; 0x8f
 8005d92:	703b      	strb	r3, [r7, #0]
 8005d94:	23e5      	movs	r3, #229	; 0xe5
 8005d96:	707b      	strb	r3, [r7, #1]
 8005d98:	23b3      	movs	r3, #179	; 0xb3
 8005d9a:	70bb      	strb	r3, [r7, #2]
 8005d9c:	23d5      	movs	r3, #213	; 0xd5
 8005d9e:	70fb      	strb	r3, [r7, #3]
 8005da0:	232e      	movs	r3, #46	; 0x2e
 8005da2:	713b      	strb	r3, [r7, #4]
 8005da4:	237f      	movs	r3, #127	; 0x7f
 8005da6:	717b      	strb	r3, [r7, #5]
 8005da8:	234a      	movs	r3, #74	; 0x4a
 8005daa:	71bb      	strb	r3, [r7, #6]
 8005dac:	2398      	movs	r3, #152	; 0x98
 8005dae:	71fb      	strb	r3, [r7, #7]
 8005db0:	232a      	movs	r3, #42	; 0x2a
 8005db2:	723b      	strb	r3, [r7, #8]
 8005db4:	2348      	movs	r3, #72	; 0x48
 8005db6:	727b      	strb	r3, [r7, #9]
 8005db8:	237a      	movs	r3, #122	; 0x7a
 8005dba:	72bb      	strb	r3, [r7, #10]
 8005dbc:	23cc      	movs	r3, #204	; 0xcc
 8005dbe:	72fb      	strb	r3, [r7, #11]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	733b      	strb	r3, [r7, #12]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	737b      	strb	r3, [r7, #13]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	73bb      	strb	r3, [r7, #14]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <SVCCTL_InitCustomSvc+0x18c>)
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	2201      	movs	r2, #1
 8005dda:	2002      	movs	r0, #2
 8005ddc:	f7fd fff3 	bl	8003dc6 <aci_gatt_add_service>
                      &(CustomContext.CustomSw_StatusHdle));

    /**
     *  sw_no
     */
    COPY_SW_NO_UUID(uuid.Char_UUID_128);
 8005de0:	2319      	movs	r3, #25
 8005de2:	703b      	strb	r3, [r7, #0]
 8005de4:	23ed      	movs	r3, #237	; 0xed
 8005de6:	707b      	strb	r3, [r7, #1]
 8005de8:	2382      	movs	r3, #130	; 0x82
 8005dea:	70bb      	strb	r3, [r7, #2]
 8005dec:	23ae      	movs	r3, #174	; 0xae
 8005dee:	70fb      	strb	r3, [r7, #3]
 8005df0:	23ed      	movs	r3, #237	; 0xed
 8005df2:	713b      	strb	r3, [r7, #4]
 8005df4:	2321      	movs	r3, #33	; 0x21
 8005df6:	717b      	strb	r3, [r7, #5]
 8005df8:	234c      	movs	r3, #76	; 0x4c
 8005dfa:	71bb      	strb	r3, [r7, #6]
 8005dfc:	239d      	movs	r3, #157	; 0x9d
 8005dfe:	71fb      	strb	r3, [r7, #7]
 8005e00:	2341      	movs	r3, #65	; 0x41
 8005e02:	723b      	strb	r3, [r7, #8]
 8005e04:	2345      	movs	r3, #69	; 0x45
 8005e06:	727b      	strb	r3, [r7, #9]
 8005e08:	2322      	movs	r3, #34	; 0x22
 8005e0a:	72bb      	strb	r3, [r7, #10]
 8005e0c:	238e      	movs	r3, #142	; 0x8e
 8005e0e:	72fb      	strb	r3, [r7, #11]
 8005e10:	2300      	movs	r3, #0
 8005e12:	733b      	strb	r3, [r7, #12]
 8005e14:	2300      	movs	r3, #0
 8005e16:	737b      	strb	r3, [r7, #13]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	73bb      	strb	r3, [r7, #14]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(CustomContext.CustomSw_StatusHdle,
 8005e20:	4b3b      	ldr	r3, [pc, #236]	; (8005f10 <SVCCTL_InitCustomSvc+0x18c>)
 8005e22:	8818      	ldrh	r0, [r3, #0]
 8005e24:	2301      	movs	r3, #1
 8005e26:	b299      	uxth	r1, r3
 8005e28:	463a      	mov	r2, r7
 8005e2a:	4b3a      	ldr	r3, [pc, #232]	; (8005f14 <SVCCTL_InitCustomSvc+0x190>)
 8005e2c:	9305      	str	r3, [sp, #20]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9304      	str	r3, [sp, #16]
 8005e32:	2310      	movs	r3, #16
 8005e34:	9303      	str	r3, [sp, #12]
 8005e36:	2304      	movs	r3, #4
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	2307      	movs	r3, #7
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	2312      	movs	r3, #18
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	460b      	mov	r3, r1
 8005e44:	2102      	movs	r1, #2
 8005e46:	f7fe f86d 	bl	8003f24 <aci_gatt_add_char>
     *                                2 for pin_no +
     *                                1 for pin_no configuration descriptor +
     *                              = 4
     */

    COPY_UPDATE_SW_UUID(uuid.Char_UUID_128);
 8005e4a:	238f      	movs	r3, #143	; 0x8f
 8005e4c:	703b      	strb	r3, [r7, #0]
 8005e4e:	23e5      	movs	r3, #229	; 0xe5
 8005e50:	707b      	strb	r3, [r7, #1]
 8005e52:	23b3      	movs	r3, #179	; 0xb3
 8005e54:	70bb      	strb	r3, [r7, #2]
 8005e56:	23d5      	movs	r3, #213	; 0xd5
 8005e58:	70fb      	strb	r3, [r7, #3]
 8005e5a:	232e      	movs	r3, #46	; 0x2e
 8005e5c:	713b      	strb	r3, [r7, #4]
 8005e5e:	237f      	movs	r3, #127	; 0x7f
 8005e60:	717b      	strb	r3, [r7, #5]
 8005e62:	234a      	movs	r3, #74	; 0x4a
 8005e64:	71bb      	strb	r3, [r7, #6]
 8005e66:	2398      	movs	r3, #152	; 0x98
 8005e68:	71fb      	strb	r3, [r7, #7]
 8005e6a:	232a      	movs	r3, #42	; 0x2a
 8005e6c:	723b      	strb	r3, [r7, #8]
 8005e6e:	2348      	movs	r3, #72	; 0x48
 8005e70:	727b      	strb	r3, [r7, #9]
 8005e72:	237a      	movs	r3, #122	; 0x7a
 8005e74:	72bb      	strb	r3, [r7, #10]
 8005e76:	23cc      	movs	r3, #204	; 0xcc
 8005e78:	72fb      	strb	r3, [r7, #11]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	733b      	strb	r3, [r7, #12]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	737b      	strb	r3, [r7, #13]
 8005e82:	2300      	movs	r3, #0
 8005e84:	73bb      	strb	r3, [r7, #14]
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	4b22      	ldr	r3, [pc, #136]	; (8005f18 <SVCCTL_InitCustomSvc+0x194>)
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2304      	movs	r3, #4
 8005e92:	2201      	movs	r2, #1
 8005e94:	2002      	movs	r0, #2
 8005e96:	f7fd ff96 	bl	8003dc6 <aci_gatt_add_service>
                      &(CustomContext.CustomUpdate_SwHdle));

    /**
     *  pin_no
     */
    COPY_PIN_NO_UUID(uuid.Char_UUID_128);
 8005e9a:	2319      	movs	r3, #25
 8005e9c:	703b      	strb	r3, [r7, #0]
 8005e9e:	23ed      	movs	r3, #237	; 0xed
 8005ea0:	707b      	strb	r3, [r7, #1]
 8005ea2:	2382      	movs	r3, #130	; 0x82
 8005ea4:	70bb      	strb	r3, [r7, #2]
 8005ea6:	23ae      	movs	r3, #174	; 0xae
 8005ea8:	70fb      	strb	r3, [r7, #3]
 8005eaa:	23ed      	movs	r3, #237	; 0xed
 8005eac:	713b      	strb	r3, [r7, #4]
 8005eae:	2321      	movs	r3, #33	; 0x21
 8005eb0:	717b      	strb	r3, [r7, #5]
 8005eb2:	234c      	movs	r3, #76	; 0x4c
 8005eb4:	71bb      	strb	r3, [r7, #6]
 8005eb6:	239d      	movs	r3, #157	; 0x9d
 8005eb8:	71fb      	strb	r3, [r7, #7]
 8005eba:	2341      	movs	r3, #65	; 0x41
 8005ebc:	723b      	strb	r3, [r7, #8]
 8005ebe:	2345      	movs	r3, #69	; 0x45
 8005ec0:	727b      	strb	r3, [r7, #9]
 8005ec2:	2322      	movs	r3, #34	; 0x22
 8005ec4:	72bb      	strb	r3, [r7, #10]
 8005ec6:	238e      	movs	r3, #142	; 0x8e
 8005ec8:	72fb      	strb	r3, [r7, #11]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	733b      	strb	r3, [r7, #12]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	737b      	strb	r3, [r7, #13]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73bb      	strb	r3, [r7, #14]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(CustomContext.CustomUpdate_SwHdle,
 8005eda:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <SVCCTL_InitCustomSvc+0x18c>)
 8005edc:	8898      	ldrh	r0, [r3, #4]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	b299      	uxth	r1, r3
 8005ee2:	463a      	mov	r2, r7
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <SVCCTL_InitCustomSvc+0x198>)
 8005ee6:	9305      	str	r3, [sp, #20]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9304      	str	r3, [sp, #16]
 8005eec:	2310      	movs	r3, #16
 8005eee:	9303      	str	r3, [sp, #12]
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	9302      	str	r3, [sp, #8]
 8005ef4:	233f      	movs	r3, #63	; 0x3f
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	233a      	movs	r3, #58	; 0x3a
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	460b      	mov	r3, r1
 8005efe:	2102      	movs	r1, #2
 8005f00:	f7fe f810 	bl	8003f24 <aci_gatt_add_char>

/* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

/* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8005f04:	bf00      	nop
}
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	08005d29 	.word	0x08005d29
 8005f10:	20000104 	.word	0x20000104
 8005f14:	20000106 	.word	0x20000106
 8005f18:	20000108 	.word	0x20000108
 8005f1c:	2000010a 	.word	0x2000010a

08005f20 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d004      	beq.n	8005f3a <P2PS_STM_App_Notification+0x1a>
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d004      	beq.n	8005f3e <P2PS_STM_App_Notification+0x1e>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8005f38:	e004      	b.n	8005f44 <P2PS_STM_App_Notification+0x24>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e002      	b.n	8005f44 <P2PS_STM_App_Notification+0x24>
      break;
 8005f3e:	bf00      	nop
 8005f40:	e000      	b.n	8005f44 <P2PS_STM_App_Notification+0x24>
      break;
 8005f42:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8005f44:	bf00      	nop
}
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <P2PS_APP_Notification+0x16>
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d002      	beq.n	8005f6a <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8005f64:	e002      	b.n	8005f6c <P2PS_APP_Notification+0x1c>
    break;
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <P2PS_APP_Notification+0x1c>
    break;
 8005f6a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8005f6c:	bf00      	nop
}
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8005f7c:	bf00      	nop
}
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <LL_PWR_EnableBootC2>:
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <LL_PWR_EnableBootC2+0x1c>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <LL_PWR_EnableBootC2+0x1c>)
 8005f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f96:	60d3      	str	r3, [r2, #12]
}
 8005f98:	bf00      	nop
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	58000400 	.word	0x58000400

08005fa8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8005fb0:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005fb2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005fb6:	4905      	ldr	r1, [pc, #20]	; (8005fcc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	58000800 	.word	0x58000800

08005fd0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	620b      	str	r3, [r1, #32]
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	58000800 	.word	0x58000800

08005ff4 <LL_AHB3_GRP1_EnableClock>:
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4313      	orrs	r3, r2
 800600a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800600c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4013      	ands	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006018:	68fb      	ldr	r3, [r7, #12]
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f043 0201 	orr.w	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	43db      	mvns	r3, r3
 800607a:	401a      	ands	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	605a      	str	r2, [r3, #4]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	43db      	mvns	r3, r3
 80060c2:	401a      	ands	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	605a      	str	r2, [r3, #4]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	609a      	str	r2, [r3, #8]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	041a      	lsls	r2, r3, #16
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	4013      	ands	r3, r2
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d101      	bne.n	800612a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69da      	ldr	r2, [r3, #28]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	4013      	ands	r3, r2
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d101      	bne.n	8006154 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006168:	2102      	movs	r1, #2
 800616a:	4819      	ldr	r0, [pc, #100]	; (80061d0 <HW_IPCC_Rx_Handler+0x6c>)
 800616c:	f7ff ffe4 	bl	8006138 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HW_IPCC_Rx_Handler+0x26>
 8006176:	4b16      	ldr	r3, [pc, #88]	; (80061d0 <HW_IPCC_Rx_Handler+0x6c>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	43db      	mvns	r3, r3
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006184:	f000 f8e6 	bl	8006354 <HW_IPCC_SYS_EvtHandler>
 8006188:	e01f      	b.n	80061ca <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800618a:	2101      	movs	r1, #1
 800618c:	4810      	ldr	r0, [pc, #64]	; (80061d0 <HW_IPCC_Rx_Handler+0x6c>)
 800618e:	f7ff ffd3 	bl	8006138 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HW_IPCC_Rx_Handler+0x46>
 8006198:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <HW_IPCC_Rx_Handler+0x6c>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80061a4:	f000 f89a 	bl	80062dc <HW_IPCC_BLE_EvtHandler>
 80061a8:	e00f      	b.n	80061ca <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80061aa:	2108      	movs	r1, #8
 80061ac:	4808      	ldr	r0, [pc, #32]	; (80061d0 <HW_IPCC_Rx_Handler+0x6c>)
 80061ae:	f7ff ffc3 	bl	8006138 <LL_C2_IPCC_IsActiveFlag_CHx>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d009      	beq.n	80061cc <HW_IPCC_Rx_Handler+0x68>
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <HW_IPCC_Rx_Handler+0x6c>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	43db      	mvns	r3, r3
 80061be:	f003 0308 	and.w	r3, r3, #8
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80061c6:	f000 f911 	bl	80063ec <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
}
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	58000c00 	.word	0x58000c00

080061d4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80061d8:	2102      	movs	r1, #2
 80061da:	4822      	ldr	r0, [pc, #136]	; (8006264 <HW_IPCC_Tx_Handler+0x90>)
 80061dc:	f7ff ff97 	bl	800610e <LL_C1_IPCC_IsActiveFlag_CHx>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <HW_IPCC_Tx_Handler+0x26>
 80061e6:	4b1f      	ldr	r3, [pc, #124]	; (8006264 <HW_IPCC_Tx_Handler+0x90>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	43db      	mvns	r3, r3
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80061f4:	f000 f8a2 	bl	800633c <HW_IPCC_SYS_CmdEvtHandler>
 80061f8:	e031      	b.n	800625e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80061fa:	2102      	movs	r1, #2
 80061fc:	4819      	ldr	r0, [pc, #100]	; (8006264 <HW_IPCC_Tx_Handler+0x90>)
 80061fe:	f7ff ff86 	bl	800610e <LL_C1_IPCC_IsActiveFlag_CHx>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d109      	bne.n	800621c <HW_IPCC_Tx_Handler+0x48>
 8006208:	4b16      	ldr	r3, [pc, #88]	; (8006264 <HW_IPCC_Tx_Handler+0x90>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	43db      	mvns	r3, r3
 800620e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006216:	f000 f891 	bl	800633c <HW_IPCC_SYS_CmdEvtHandler>
 800621a:	e020      	b.n	800625e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800621c:	2108      	movs	r1, #8
 800621e:	4811      	ldr	r0, [pc, #68]	; (8006264 <HW_IPCC_Tx_Handler+0x90>)
 8006220:	f7ff ff75 	bl	800610e <LL_C1_IPCC_IsActiveFlag_CHx>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <HW_IPCC_Tx_Handler+0x6a>
 800622a:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <HW_IPCC_Tx_Handler+0x90>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	43db      	mvns	r3, r3
 8006230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006238:	f000 f8ba 	bl	80063b0 <HW_IPCC_MM_FreeBufHandler>
 800623c:	e00f      	b.n	800625e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800623e:	2120      	movs	r1, #32
 8006240:	4808      	ldr	r0, [pc, #32]	; (8006264 <HW_IPCC_Tx_Handler+0x90>)
 8006242:	f7ff ff64 	bl	800610e <LL_C1_IPCC_IsActiveFlag_CHx>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d109      	bne.n	8006260 <HW_IPCC_Tx_Handler+0x8c>
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <HW_IPCC_Tx_Handler+0x90>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	43db      	mvns	r3, r3
 8006252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800625a:	f000 f84b 	bl	80062f4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800625e:	bf00      	nop
 8006260:	bf00      	nop
}
 8006262:	bd80      	pop	{r7, pc}
 8006264:	58000c00 	.word	0x58000c00

08006268 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800626c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006270:	f7ff fe9a 	bl	8005fa8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006274:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006278:	f7ff feaa 	bl	8005fd0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800627c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800627e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006280:	f7ff fe82 	bl	8005f88 <LL_PWR_EnableBootC2>

  return;
 8006284:	bf00      	nop
}
 8006286:	bd80      	pop	{r7, pc}

08006288 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800628c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006290:	f7ff feb0 	bl	8005ff4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006294:	4806      	ldr	r0, [pc, #24]	; (80062b0 <HW_IPCC_Init+0x28>)
 8006296:	f7ff fed6 	bl	8006046 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800629a:	4805      	ldr	r0, [pc, #20]	; (80062b0 <HW_IPCC_Init+0x28>)
 800629c:	f7ff fec3 	bl	8006026 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80062a0:	202c      	movs	r0, #44	; 0x2c
 80062a2:	f7fb fc36 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80062a6:	202d      	movs	r0, #45	; 0x2d
 80062a8:	f7fb fc33 	bl	8001b12 <HAL_NVIC_EnableIRQ>

  return;
 80062ac:	bf00      	nop
}
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	58000c00 	.word	0x58000c00

080062b4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80062b8:	2101      	movs	r1, #1
 80062ba:	4802      	ldr	r0, [pc, #8]	; (80062c4 <HW_IPCC_BLE_Init+0x10>)
 80062bc:	f7ff fef8 	bl	80060b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80062c0:	bf00      	nop
}
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	58000c00 	.word	0x58000c00

080062c8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80062cc:	2101      	movs	r1, #1
 80062ce:	4802      	ldr	r0, [pc, #8]	; (80062d8 <HW_IPCC_BLE_SendCmd+0x10>)
 80062d0:	f7ff ff0e 	bl	80060f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80062d4:	bf00      	nop
}
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	58000c00 	.word	0x58000c00

080062dc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80062e0:	f7fe ffa4 	bl	800522c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80062e4:	2101      	movs	r1, #1
 80062e6:	4802      	ldr	r0, [pc, #8]	; (80062f0 <HW_IPCC_BLE_EvtHandler+0x14>)
 80062e8:	f7ff fef4 	bl	80060d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80062ec:	bf00      	nop
}
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	58000c00 	.word	0x58000c00

080062f4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80062f8:	2120      	movs	r1, #32
 80062fa:	4803      	ldr	r0, [pc, #12]	; (8006308 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80062fc:	f7ff fec6 	bl	800608c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006300:	f7fe ffb0 	bl	8005264 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006304:	bf00      	nop
}
 8006306:	bd80      	pop	{r7, pc}
 8006308:	58000c00 	.word	0x58000c00

0800630c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006310:	2102      	movs	r1, #2
 8006312:	4802      	ldr	r0, [pc, #8]	; (800631c <HW_IPCC_SYS_Init+0x10>)
 8006314:	f7ff fecc 	bl	80060b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006318:	bf00      	nop
}
 800631a:	bd80      	pop	{r7, pc}
 800631c:	58000c00 	.word	0x58000c00

08006320 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006324:	2102      	movs	r1, #2
 8006326:	4804      	ldr	r0, [pc, #16]	; (8006338 <HW_IPCC_SYS_SendCmd+0x18>)
 8006328:	f7ff fee2 	bl	80060f0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800632c:	2102      	movs	r1, #2
 800632e:	4802      	ldr	r0, [pc, #8]	; (8006338 <HW_IPCC_SYS_SendCmd+0x18>)
 8006330:	f7ff fe99 	bl	8006066 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006334:	bf00      	nop
}
 8006336:	bd80      	pop	{r7, pc}
 8006338:	58000c00 	.word	0x58000c00

0800633c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006340:	2102      	movs	r1, #2
 8006342:	4803      	ldr	r0, [pc, #12]	; (8006350 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006344:	f7ff fea2 	bl	800608c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006348:	f7fe ffd4 	bl	80052f4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800634c:	bf00      	nop
}
 800634e:	bd80      	pop	{r7, pc}
 8006350:	58000c00 	.word	0x58000c00

08006354 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006358:	f7fe ffdc 	bl	8005314 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800635c:	2102      	movs	r1, #2
 800635e:	4802      	ldr	r0, [pc, #8]	; (8006368 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006360:	f7ff feb8 	bl	80060d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006364:	bf00      	nop
}
 8006366:	bd80      	pop	{r7, pc}
 8006368:	58000c00 	.word	0x58000c00

0800636c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006374:	2108      	movs	r1, #8
 8006376:	480c      	ldr	r0, [pc, #48]	; (80063a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006378:	f7ff fec9 	bl	800610e <LL_C1_IPCC_IsActiveFlag_CHx>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006382:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006388:	2108      	movs	r1, #8
 800638a:	4807      	ldr	r0, [pc, #28]	; (80063a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800638c:	f7ff fe6b 	bl	8006066 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006390:	e006      	b.n	80063a0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006396:	2108      	movs	r1, #8
 8006398:	4803      	ldr	r0, [pc, #12]	; (80063a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800639a:	f7ff fea9 	bl	80060f0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800639e:	bf00      	nop
}
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	58000c00 	.word	0x58000c00
 80063ac:	20000254 	.word	0x20000254

080063b0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80063b4:	2108      	movs	r1, #8
 80063b6:	4806      	ldr	r0, [pc, #24]	; (80063d0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80063b8:	f7ff fe68 	bl	800608c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80063c2:	2108      	movs	r1, #8
 80063c4:	4802      	ldr	r0, [pc, #8]	; (80063d0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80063c6:	f7ff fe93 	bl	80060f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80063ca:	bf00      	nop
}
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	58000c00 	.word	0x58000c00
 80063d4:	20000254 	.word	0x20000254

080063d8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80063dc:	2108      	movs	r1, #8
 80063de:	4802      	ldr	r0, [pc, #8]	; (80063e8 <HW_IPCC_TRACES_Init+0x10>)
 80063e0:	f7ff fe66 	bl	80060b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80063e4:	bf00      	nop
}
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	58000c00 	.word	0x58000c00

080063ec <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80063f0:	f7ff f848 	bl	8005484 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80063f4:	2108      	movs	r1, #8
 80063f6:	4802      	ldr	r0, [pc, #8]	; (8006400 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80063f8:	f7ff fe6c 	bl	80060d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80063fc:	bf00      	nop
}
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	58000c00 	.word	0x58000c00

08006404 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <UTIL_LPM_Init+0x1c>)
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <UTIL_LPM_Init+0x20>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000258 	.word	0x20000258
 8006424:	2000025c 	.word	0x2000025c

08006428 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006434:	f3ef 8310 	mrs	r3, PRIMASK
 8006438:	613b      	str	r3, [r7, #16]
  return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800643c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800643e:	b672      	cpsid	i
  
  switch(state)
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <UTIL_LPM_SetOffMode+0x32>
 8006446:	2b01      	cmp	r3, #1
 8006448:	d000      	beq.n	800644c <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800644a:	e00e      	b.n	800646a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800644c:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <UTIL_LPM_SetOffMode+0x58>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4313      	orrs	r3, r2
 8006454:	4a0a      	ldr	r2, [pc, #40]	; (8006480 <UTIL_LPM_SetOffMode+0x58>)
 8006456:	6013      	str	r3, [r2, #0]
      break;
 8006458:	e007      	b.n	800646a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	43da      	mvns	r2, r3
 800645e:	4b08      	ldr	r3, [pc, #32]	; (8006480 <UTIL_LPM_SetOffMode+0x58>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4013      	ands	r3, r2
 8006464:	4a06      	ldr	r2, [pc, #24]	; (8006480 <UTIL_LPM_SetOffMode+0x58>)
 8006466:	6013      	str	r3, [r2, #0]
      break;
 8006468:	bf00      	nop
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	2000025c 	.word	0x2000025c

08006484 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08c      	sub	sp, #48	; 0x30
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800648c:	4b65      	ldr	r3, [pc, #404]	; (8006624 <UTIL_SEQ_Run+0x1a0>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006492:	4b64      	ldr	r3, [pc, #400]	; (8006624 <UTIL_SEQ_Run+0x1a0>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4013      	ands	r3, r2
 800649a:	4a62      	ldr	r2, [pc, #392]	; (8006624 <UTIL_SEQ_Run+0x1a0>)
 800649c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800649e:	e081      	b.n	80065a4 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80064a4:	e002      	b.n	80064ac <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	3301      	adds	r3, #1
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80064ac:	4a5e      	ldr	r2, [pc, #376]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80064b4:	4b5d      	ldr	r3, [pc, #372]	; (800662c <UTIL_SEQ_Run+0x1a8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	401a      	ands	r2, r3
 80064ba:	4b5a      	ldr	r3, [pc, #360]	; (8006624 <UTIL_SEQ_Run+0x1a0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4013      	ands	r3, r2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0f0      	beq.n	80064a6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80064c4:	4a58      	ldr	r2, [pc, #352]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80064cc:	4b57      	ldr	r3, [pc, #348]	; (800662c <UTIL_SEQ_Run+0x1a8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	401a      	ands	r2, r3
 80064d2:	4b54      	ldr	r3, [pc, #336]	; (8006624 <UTIL_SEQ_Run+0x1a0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4013      	ands	r3, r2
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80064da:	4a53      	ldr	r2, [pc, #332]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4413      	add	r3, r2
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80064ec:	4a4e      	ldr	r2, [pc, #312]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4413      	add	r3, r2
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80064fa:	4a4b      	ldr	r2, [pc, #300]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4413      	add	r3, r2
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	4013      	ands	r3, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f98f 	bl	800682c <SEQ_BitPosition>
 800650e:	4603      	mov	r3, r0
 8006510:	461a      	mov	r2, r3
 8006512:	4b47      	ldr	r3, [pc, #284]	; (8006630 <UTIL_SEQ_Run+0x1ac>)
 8006514:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8006516:	4a44      	ldr	r2, [pc, #272]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4413      	add	r3, r2
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	4b43      	ldr	r3, [pc, #268]	; (8006630 <UTIL_SEQ_Run+0x1ac>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2101      	movs	r1, #1
 8006526:	fa01 f303 	lsl.w	r3, r1, r3
 800652a:	43db      	mvns	r3, r3
 800652c:	401a      	ands	r2, r3
 800652e:	493e      	ldr	r1, [pc, #248]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	440b      	add	r3, r1
 8006536:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006538:	f3ef 8310 	mrs	r3, PRIMASK
 800653c:	61bb      	str	r3, [r7, #24]
  return(result);
 800653e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006542:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006544:	4b3a      	ldr	r3, [pc, #232]	; (8006630 <UTIL_SEQ_Run+0x1ac>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2201      	movs	r2, #1
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	43da      	mvns	r2, r3
 8006550:	4b38      	ldr	r3, [pc, #224]	; (8006634 <UTIL_SEQ_Run+0x1b0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4013      	ands	r3, r2
 8006556:	4a37      	ldr	r2, [pc, #220]	; (8006634 <UTIL_SEQ_Run+0x1b0>)
 8006558:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800655a:	2302      	movs	r3, #2
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655e:	e013      	b.n	8006588 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	3b01      	subs	r3, #1
 8006564:	4a30      	ldr	r2, [pc, #192]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 8006566:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800656a:	4b31      	ldr	r3, [pc, #196]	; (8006630 <UTIL_SEQ_Run+0x1ac>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	43da      	mvns	r2, r3
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	3b01      	subs	r3, #1
 800657a:	400a      	ands	r2, r1
 800657c:	492a      	ldr	r1, [pc, #168]	; (8006628 <UTIL_SEQ_Run+0x1a4>)
 800657e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	3b01      	subs	r3, #1
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e8      	bne.n	8006560 <UTIL_SEQ_Run+0xdc>
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <UTIL_SEQ_Run+0x1ac>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a26      	ldr	r2, [pc, #152]	; (8006638 <UTIL_SEQ_Run+0x1b4>)
 800659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a2:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80065a4:	4b23      	ldr	r3, [pc, #140]	; (8006634 <UTIL_SEQ_Run+0x1b0>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	4b20      	ldr	r3, [pc, #128]	; (800662c <UTIL_SEQ_Run+0x1a8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	401a      	ands	r2, r3
 80065ae:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <UTIL_SEQ_Run+0x1a0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <UTIL_SEQ_Run+0x144>
 80065b8:	4b20      	ldr	r3, [pc, #128]	; (800663c <UTIL_SEQ_Run+0x1b8>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b20      	ldr	r3, [pc, #128]	; (8006640 <UTIL_SEQ_Run+0x1bc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f43f af6c 	beq.w	80064a0 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80065c8:	4b19      	ldr	r3, [pc, #100]	; (8006630 <UTIL_SEQ_Run+0x1ac>)
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80065d0:	f000 f91e 	bl	8006810 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d4:	f3ef 8310 	mrs	r3, PRIMASK
 80065d8:	613b      	str	r3, [r7, #16]
  return(result);
 80065da:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80065dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80065de:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80065e0:	4b14      	ldr	r3, [pc, #80]	; (8006634 <UTIL_SEQ_Run+0x1b0>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	4b11      	ldr	r3, [pc, #68]	; (800662c <UTIL_SEQ_Run+0x1a8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	401a      	ands	r2, r3
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <UTIL_SEQ_Run+0x1a0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d108      	bne.n	8006606 <UTIL_SEQ_Run+0x182>
 80065f4:	4b11      	ldr	r3, [pc, #68]	; (800663c <UTIL_SEQ_Run+0x1b8>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b11      	ldr	r3, [pc, #68]	; (8006640 <UTIL_SEQ_Run+0x1bc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 8006602:	f7f9 fe76 	bl	80002f2 <UTIL_SEQ_Idle>
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8006610:	f000 f905 	bl	800681e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8006614:	4a03      	ldr	r2, [pc, #12]	; (8006624 <UTIL_SEQ_Run+0x1a0>)
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	6013      	str	r3, [r2, #0]

  return;
 800661a:	bf00      	nop
}
 800661c:	3730      	adds	r7, #48	; 0x30
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000024 	.word	0x20000024
 8006628:	200002f0 	.word	0x200002f0
 800662c:	20000020 	.word	0x20000020
 8006630:	2000026c 	.word	0x2000026c
 8006634:	20000260 	.word	0x20000260
 8006638:	20000270 	.word	0x20000270
 800663c:	20000264 	.word	0x20000264
 8006640:	20000268 	.word	0x20000268

08006644 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006650:	f3ef 8310 	mrs	r3, PRIMASK
 8006654:	617b      	str	r3, [r7, #20]
  return(result);
 8006656:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8006658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800665a:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f8e5 	bl	800682c <SEQ_BitPosition>
 8006662:	4603      	mov	r3, r0
 8006664:	4619      	mov	r1, r3
 8006666:	4a06      	ldr	r2, [pc, #24]	; (8006680 <UTIL_SEQ_RegTask+0x3c>)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006678:	bf00      	nop
}
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000270 	.word	0x20000270

08006684 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668e:	f3ef 8310 	mrs	r3, PRIMASK
 8006692:	60fb      	str	r3, [r7, #12]
  return(result);
 8006694:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006696:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006698:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <UTIL_SEQ_SetTask+0x4c>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	4a0b      	ldr	r2, [pc, #44]	; (80066d0 <UTIL_SEQ_SetTask+0x4c>)
 80066a4:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80066a6:	4a0b      	ldr	r2, [pc, #44]	; (80066d4 <UTIL_SEQ_SetTask+0x50>)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	4908      	ldr	r1, [pc, #32]	; (80066d4 <UTIL_SEQ_SetTask+0x50>)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80066c4:	bf00      	nop
}
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20000260 	.word	0x20000260
 80066d4:	200002f0 	.word	0x200002f0

080066d8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80066e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80066ea:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	43da      	mvns	r2, r3
 80066f0:	4b07      	ldr	r3, [pc, #28]	; (8006710 <UTIL_SEQ_PauseTask+0x38>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4013      	ands	r3, r2
 80066f6:	4a06      	ldr	r2, [pc, #24]	; (8006710 <UTIL_SEQ_PauseTask+0x38>)
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006704:	bf00      	nop
}
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000020 	.word	0x20000020

08006714 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671c:	f3ef 8310 	mrs	r3, PRIMASK
 8006720:	60fb      	str	r3, [r7, #12]
  return(result);
 8006722:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006724:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006726:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 8006728:	4b08      	ldr	r3, [pc, #32]	; (800674c <UTIL_SEQ_ResumeTask+0x38>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4313      	orrs	r3, r2
 8006730:	4a06      	ldr	r2, [pc, #24]	; (800674c <UTIL_SEQ_ResumeTask+0x38>)
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800673e:	bf00      	nop
}
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	20000020 	.word	0x20000020

08006750 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006758:	f3ef 8310 	mrs	r3, PRIMASK
 800675c:	60fb      	str	r3, [r7, #12]
  return(result);
 800675e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006762:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 8006764:	4b08      	ldr	r3, [pc, #32]	; (8006788 <UTIL_SEQ_SetEvt+0x38>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4313      	orrs	r3, r2
 800676c:	4a06      	ldr	r2, [pc, #24]	; (8006788 <UTIL_SEQ_SetEvt+0x38>)
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800677a:	bf00      	nop
}
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20000264 	.word	0x20000264

0800678c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8006794:	4b1b      	ldr	r3, [pc, #108]	; (8006804 <UTIL_SEQ_WaitEvt+0x78>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <UTIL_SEQ_WaitEvt+0x78>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a2:	d102      	bne.n	80067aa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e005      	b.n	80067b6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80067aa:	4b16      	ldr	r3, [pc, #88]	; (8006804 <UTIL_SEQ_WaitEvt+0x78>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2201      	movs	r2, #1
 80067b0:	fa02 f303 	lsl.w	r3, r2, r3
 80067b4:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <UTIL_SEQ_WaitEvt+0x7c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 80067bc:	4a12      	ldr	r2, [pc, #72]	; (8006808 <UTIL_SEQ_WaitEvt+0x7c>)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80067c2:	e005      	b.n	80067d0 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80067c4:	4b10      	ldr	r3, [pc, #64]	; (8006808 <UTIL_SEQ_WaitEvt+0x7c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4619      	mov	r1, r3
 80067ca:	6978      	ldr	r0, [r7, #20]
 80067cc:	f7f9 fd98 	bl	8000300 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80067d0:	4b0e      	ldr	r3, [pc, #56]	; (800680c <UTIL_SEQ_WaitEvt+0x80>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <UTIL_SEQ_WaitEvt+0x7c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4013      	ands	r3, r2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0f2      	beq.n	80067c4 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <UTIL_SEQ_WaitEvt+0x78>)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 80067e4:	4b08      	ldr	r3, [pc, #32]	; (8006808 <UTIL_SEQ_WaitEvt+0x7c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	43da      	mvns	r2, r3
 80067ea:	4b08      	ldr	r3, [pc, #32]	; (800680c <UTIL_SEQ_WaitEvt+0x80>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4013      	ands	r3, r2
 80067f0:	4a06      	ldr	r2, [pc, #24]	; (800680c <UTIL_SEQ_WaitEvt+0x80>)
 80067f2:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 80067f4:	4a04      	ldr	r2, [pc, #16]	; (8006808 <UTIL_SEQ_WaitEvt+0x7c>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6013      	str	r3, [r2, #0]

  return;
 80067fa:	bf00      	nop
}
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	2000026c 	.word	0x2000026c
 8006808:	20000268 	.word	0x20000268
 800680c:	20000264 	.word	0x20000264

08006810 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006814:	bf00      	nop
}
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800681e:	b480      	push	{r7}
 8006820:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006822:	bf00      	nop
}
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	0c1b      	lsrs	r3, r3, #16
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <SEQ_BitPosition+0x20>
 8006842:	2310      	movs	r3, #16
 8006844:	73fb      	strb	r3, [r7, #15]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	041b      	lsls	r3, r3, #16
 800684a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d105      	bne.n	8006862 <SEQ_BitPosition+0x36>
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	3308      	adds	r3, #8
 800685a:	73fb      	strb	r3, [r7, #15]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	021b      	lsls	r3, r3, #8
 8006860:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <SEQ_BitPosition+0x4c>
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	3304      	adds	r3, #4
 8006870:	73fb      	strb	r3, [r7, #15]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	0f1b      	lsrs	r3, r3, #28
 800687c:	4a07      	ldr	r2, [pc, #28]	; (800689c <SEQ_BitPosition+0x70>)
 800687e:	5cd2      	ldrb	r2, [r2, r3]
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	4413      	add	r3, r2
 8006884:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	f1c3 031f 	rsb	r3, r3, #31
 800688c:	b2db      	uxtb	r3, r3
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	08006b5c 	.word	0x08006b5c

080068a0 <__libc_init_array>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	4e0d      	ldr	r6, [pc, #52]	; (80068d8 <__libc_init_array+0x38>)
 80068a4:	4c0d      	ldr	r4, [pc, #52]	; (80068dc <__libc_init_array+0x3c>)
 80068a6:	1ba4      	subs	r4, r4, r6
 80068a8:	10a4      	asrs	r4, r4, #2
 80068aa:	2500      	movs	r5, #0
 80068ac:	42a5      	cmp	r5, r4
 80068ae:	d109      	bne.n	80068c4 <__libc_init_array+0x24>
 80068b0:	4e0b      	ldr	r6, [pc, #44]	; (80068e0 <__libc_init_array+0x40>)
 80068b2:	4c0c      	ldr	r4, [pc, #48]	; (80068e4 <__libc_init_array+0x44>)
 80068b4:	f000 f82c 	bl	8006910 <_init>
 80068b8:	1ba4      	subs	r4, r4, r6
 80068ba:	10a4      	asrs	r4, r4, #2
 80068bc:	2500      	movs	r5, #0
 80068be:	42a5      	cmp	r5, r4
 80068c0:	d105      	bne.n	80068ce <__libc_init_array+0x2e>
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c8:	4798      	blx	r3
 80068ca:	3501      	adds	r5, #1
 80068cc:	e7ee      	b.n	80068ac <__libc_init_array+0xc>
 80068ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068d2:	4798      	blx	r3
 80068d4:	3501      	adds	r5, #1
 80068d6:	e7f2      	b.n	80068be <__libc_init_array+0x1e>
 80068d8:	08006b6c 	.word	0x08006b6c
 80068dc:	08006b6c 	.word	0x08006b6c
 80068e0:	08006b6c 	.word	0x08006b6c
 80068e4:	08006b70 	.word	0x08006b70

080068e8 <memcpy>:
 80068e8:	b510      	push	{r4, lr}
 80068ea:	1e43      	subs	r3, r0, #1
 80068ec:	440a      	add	r2, r1
 80068ee:	4291      	cmp	r1, r2
 80068f0:	d100      	bne.n	80068f4 <memcpy+0xc>
 80068f2:	bd10      	pop	{r4, pc}
 80068f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068fc:	e7f7      	b.n	80068ee <memcpy+0x6>

080068fe <memset>:
 80068fe:	4402      	add	r2, r0
 8006900:	4603      	mov	r3, r0
 8006902:	4293      	cmp	r3, r2
 8006904:	d100      	bne.n	8006908 <memset+0xa>
 8006906:	4770      	bx	lr
 8006908:	f803 1b01 	strb.w	r1, [r3], #1
 800690c:	e7f9      	b.n	8006902 <memset+0x4>
	...

08006910 <_init>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr

0800691c <_fini>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	bf00      	nop
 8006920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006922:	bc08      	pop	{r3}
 8006924:	469e      	mov	lr, r3
 8006926:	4770      	bx	lr
