
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008838  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08008974  08008974  00018974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008bfc  08008bfc  00018bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000008  08008c04  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000044  08008c40  00020044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 00000090  200000e0  08008cd9  000200e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  20000170  08008d69  00020170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200001b0  08008da6  000201b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003a4  200001c4  08008db7  000201c4  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20000568  08008db7  00020568  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201c1  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0003f96c  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006d61  00000000  00000000  0005fb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002840  00000000  00000000  000668c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000025a8  00000000  00000000  00069100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002cc58  00000000  00000000  0006b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002c544  00000000  00000000  00098300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f8a6c  00000000  00000000  000c4844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001bd2b0  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a68c  00000000  00000000  001bd304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001c4 	.word	0x200001c4
 8000158:	00000000 	.word	0x00000000
 800015c:	0800895c 	.word	0x0800895c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001c8 	.word	0x200001c8
 8000178:	0800895c 	.word	0x0800895c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4313      	orrs	r3, r2
 80001a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr
 80001b0:	58000800 	.word	0x58000800

080001b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4013      	ands	r3, r2
 80001d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d8:	68fb      	ldr	r3, [r7, #12]
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000222:	f002 feb7 	bl	8002f94 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000226:	f002 febb 	bl	8002fa0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800022a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800022e:	f7ff ffad 	bl	800018c <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000232:	f000 f821 	bl	8000278 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000236:	f000 f8c3 	bl	80003c0 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <APPD_EnableCPU2+0x34>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	c403      	stmia	r4!, {r0, r1}
 8000256:	8022      	strh	r2, [r4, #0]
 8000258:	3402      	adds	r4, #2
 800025a:	0c13      	lsrs	r3, r2, #16
 800025c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800025e:	f008 f847 	bl	80082f0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f007 fa9c 	bl	80077a2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800026a:	bf00      	nop
}
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	08008974 	.word	0x08008974

08000278 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000298:	2300      	movs	r3, #0
 800029a:	77fb      	strb	r3, [r7, #31]
 800029c:	e038      	b.n	8000310 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800029e:	7ffb      	ldrb	r3, [r7, #31]
 80002a0:	4a44      	ldr	r2, [pc, #272]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	4413      	add	r3, r2
 80002a6:	799b      	ldrb	r3, [r3, #6]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d02b      	beq.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002ac:	7ffb      	ldrb	r3, [r7, #31]
 80002ae:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002b4:	4a40      	ldr	r2, [pc, #256]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d01b      	beq.n	80002f2 <APPD_SetCPU2GpioConfig+0x7a>
 80002ba:	4a3f      	ldr	r2, [pc, #252]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d823      	bhi.n	8000308 <APPD_SetCPU2GpioConfig+0x90>
 80002c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002c4:	d003      	beq.n	80002ce <APPD_SetCPU2GpioConfig+0x56>
 80002c6:	4a3d      	ldr	r2, [pc, #244]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d009      	beq.n	80002e0 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80002cc:	e01c      	b.n	8000308 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
 80002d0:	4a38      	ldr	r2, [pc, #224]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4413      	add	r3, r2
 80002d6:	889a      	ldrh	r2, [r3, #4]
 80002d8:	8bbb      	ldrh	r3, [r7, #28]
 80002da:	4313      	orrs	r3, r2
 80002dc:	83bb      	strh	r3, [r7, #28]
          break;
 80002de:	e014      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002e0:	7ffb      	ldrb	r3, [r7, #31]
 80002e2:	4a34      	ldr	r2, [pc, #208]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4413      	add	r3, r2
 80002e8:	889a      	ldrh	r2, [r3, #4]
 80002ea:	8b7b      	ldrh	r3, [r7, #26]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	837b      	strh	r3, [r7, #26]
          break;
 80002f0:	e00b      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80002f2:	7ffb      	ldrb	r3, [r7, #31]
 80002f4:	4a2f      	ldr	r2, [pc, #188]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	889a      	ldrh	r2, [r3, #4]
 80002fc:	8b3b      	ldrh	r3, [r7, #24]
 80002fe:	4313      	orrs	r3, r2
 8000300:	833b      	strh	r3, [r7, #24]
          break;
 8000302:	e002      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000304:	bf00      	nop
 8000306:	e000      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000308:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800030a:	7ffb      	ldrb	r3, [r7, #31]
 800030c:	3301      	adds	r3, #1
 800030e:	77fb      	strb	r3, [r7, #31]
 8000310:	7ffb      	ldrb	r3, [r7, #31]
 8000312:	2b25      	cmp	r3, #37	; 0x25
 8000314:	d9c3      	bls.n	800029e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800031e:	2303      	movs	r3, #3
 8000320:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000322:	8bbb      	ldrh	r3, [r7, #28]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d014      	beq.n	8000352 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000328:	8bbb      	ldrh	r3, [r7, #28]
 800032a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff41 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000332:	2001      	movs	r0, #1
 8000334:	f7ff ff57 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f003 f93a 	bl	80035b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000344:	8bbb      	ldrh	r3, [r7, #28]
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034e:	f003 faa3 	bl	8003898 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000352:	8b7b      	ldrh	r3, [r7, #26]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d012      	beq.n	800037e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000358:	8b7b      	ldrh	r3, [r7, #26]
 800035a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	2002      	movs	r0, #2
 800035e:	f7ff ff29 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000362:	2002      	movs	r0, #2
 8000364:	f7ff ff3f 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 800036e:	f003 f923 	bl	80035b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000372:	8b7b      	ldrh	r3, [r7, #26]
 8000374:	2200      	movs	r2, #0
 8000376:	4619      	mov	r1, r3
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 800037a:	f003 fa8d 	bl	8003898 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800037e:	8b3b      	ldrh	r3, [r7, #24]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d013      	beq.n	80003ac <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000384:	8b3b      	ldrh	r3, [r7, #24]
 8000386:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000388:	2004      	movs	r0, #4
 800038a:	f7ff ff13 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800038e:	2004      	movs	r0, #4
 8000390:	f7ff ff29 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 800039a:	f003 f90d 	bl	80035b8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800039e:	8b3b      	ldrh	r3, [r7, #24]
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80003a6:	f003 fa77 	bl	8003898 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
}
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	080089f8 	.word	0x080089f8
 80003b8:	48000800 	.word	0x48000800
 80003bc:	48000400 	.word	0x48000400

080003c0 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003c4:	bf00      	nop
}
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <LL_C2_PWR_SetPowerMode+0x28>)
 80003da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003de:	f023 0207 	bic.w	r2, r3, #7
 80003e2:	4905      	ldr	r1, [pc, #20]	; (80003f8 <LL_C2_PWR_SetPowerMode+0x28>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	58000400 	.word	0x58000400

080003fc <LL_EXTI_EnableIT_32_63>:
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <LL_EXTI_EnableIT_32_63+0x24>)
 8000406:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800040a:	4905      	ldr	r1, [pc, #20]	; (8000420 <LL_EXTI_EnableIT_32_63+0x24>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4313      	orrs	r3, r2
 8000410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	58000800 	.word	0x58000800

08000424 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800042c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000432:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800043a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800043e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	021b      	lsls	r3, r3, #8
 8000446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800044a:	4313      	orrs	r3, r2
 800044c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	cafecafe 	.word	0xcafecafe

08000460 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4313      	orrs	r3, r2
 800047a:	608b      	str	r3, [r1, #8]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800049c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80004d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80004e0:	d101      	bne.n	80004e6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80004e2:	2301      	movs	r3, #1
 80004e4:	e000      	b.n	80004e8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80004f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000506:	d101      	bne.n	800050c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000508:	2301      	movs	r3, #1
 800050a:	e000      	b.n	800050e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <LL_AHB3_GRP1_EnableClock>:
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4313      	orrs	r3, r2
 800052e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4013      	ands	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053c:	68fb      	ldr	r3, [r7, #12]
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <LL_DBGMCU_GetRevisionID+0x18>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	0c1b      	lsrs	r3, r3, #16
 8000556:	b29b      	uxth	r3, r3
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e0042000 	.word	0xe0042000

08000568 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	041b      	lsls	r3, r3, #16
 800057a:	431a      	orrs	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	431a      	orrs	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	605a      	str	r2, [r3, #4]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	041b      	lsls	r3, r3, #16
 80005c0:	431a      	orrs	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	615a      	str	r2, [r3, #20]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	695a      	ldr	r2, [r3, #20]
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	431a      	orrs	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	615a      	str	r2, [r3, #20]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	609a      	str	r2, [r3, #8]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	619a      	str	r2, [r3, #24]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <LL_LPM_EnableSleep+0x1c>)
 8000632:	691b      	ldr	r3, [r3, #16]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <LL_LPM_EnableSleep+0x1c>)
 8000636:	f023 0304 	bic.w	r3, r3, #4
 800063a:	6113      	str	r3, [r2, #16]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	22ca      	movs	r2, #202	; 0xca
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2253      	movs	r2, #83	; 0x53
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f023 0207 	bic.w	r2, r3, #7
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	609a      	str	r2, [r3, #8]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <MX_APPE_Config+0x18>)
 80006b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006b6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80006b8:	f000 f82e 	bl	8000718 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80006bc:	f000 f86e 	bl	800079c <Config_HSE>

  return;
 80006c0:	bf00      	nop
}
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	58004000 	.word	0x58004000

080006c8 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 80006cc:	f000 f87a 	bl	80007c4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80006d0:	f000 f892 	bl	80007f8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80006d4:	4908      	ldr	r1, [pc, #32]	; (80006f8 <MX_APPE_Init+0x30>)
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fe2c 	bl	8001334 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80006dc:	f7ff fd9f 	bl	800021e <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80006e0:	2101      	movs	r1, #1
 80006e2:	2001      	movs	r0, #1
 80006e4:	f007 fea2 	bl	800842c <UTIL_LPM_SetOffMode>

  Led_Init();
 80006e8:	f000 f959 	bl	800099e <Led_Init>

  Button_Init();
 80006ec:	f000 f967 	bl	80009be <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80006f0:	f000 f890 	bl	8000814 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80006f4:	bf00      	nop
}
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200004c8 	.word	0x200004c8

080006fc <Init_Smps>:

void Init_Smps( void )
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000700:	bf00      	nop
}
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <Init_Exti>:

void Init_Exti( void )
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fe74 	bl	80003fc <LL_EXTI_EnableIT_32_63>

  return;
 8000714:	bf00      	nop
}
 8000716:	bd80      	pop	{r7, pc}

08000718 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 800071c:	f000 f804 	bl	8000728 <Reset_BackupDomain>

  Reset_IPCC();
 8000720:	f000 f81a 	bl	8000758 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000724:	bf00      	nop
}
 8000726:	bd80      	pop	{r7, pc}

08000728 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800072c:	f7ff fece 	bl	80004cc <LL_RCC_IsActiveFlag_PINRST>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00d      	beq.n	8000752 <Reset_BackupDomain+0x2a>
 8000736:	f7ff fedc 	bl	80004f2 <LL_RCC_IsActiveFlag_SFTRST>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d108      	bne.n	8000752 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000740:	f003 f984 	bl	8003a4c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000744:	f003 f982 	bl	8003a4c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000748:	f7ff fe9e 	bl	8000488 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800074c:	f7ff fead 	bl	80004aa <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000750:	bf00      	nop
 8000752:	bf00      	nop
}
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800075c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000760:	f7ff feda 	bl	8000518 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000764:	213f      	movs	r1, #63	; 0x3f
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <Reset_IPCC+0x40>)
 8000768:	f7ff ff44 	bl	80005f4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800076c:	213f      	movs	r1, #63	; 0x3f
 800076e:	480a      	ldr	r0, [pc, #40]	; (8000798 <Reset_IPCC+0x40>)
 8000770:	f7ff ff4e 	bl	8000610 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000774:	213f      	movs	r1, #63	; 0x3f
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <Reset_IPCC+0x40>)
 8000778:	f7ff fef6 	bl	8000568 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800077c:	213f      	movs	r1, #63	; 0x3f
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <Reset_IPCC+0x40>)
 8000780:	f7ff ff15 	bl	80005ae <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000784:	213f      	movs	r1, #63	; 0x3f
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <Reset_IPCC+0x40>)
 8000788:	f7ff ff00 	bl	800058c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800078c:	213f      	movs	r1, #63	; 0x3f
 800078e:	4802      	ldr	r0, [pc, #8]	; (8000798 <Reset_IPCC+0x40>)
 8000790:	f7ff ff1f 	bl	80005d2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000794:	bf00      	nop
}
 8000796:	bd80      	pop	{r7, pc}
 8000798:	58000c00 	.word	0x58000c00

0800079c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f006 fe98 	bl	80074d8 <OTP_Read>
 80007a8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d005      	beq.n	80007bc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	799b      	ldrb	r3, [r3, #6]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fe35 	bl	8000424 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
}
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <System_Init>:

static void System_Init( void )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  Init_Smps( );
 80007c8:	f7ff ff98 	bl	80006fc <Init_Smps>

  Init_Exti( );
 80007cc:	f7ff ff9d 	bl	800070a <Init_Exti>

  Init_Rtc( );
 80007d0:	f000 f802 	bl	80007d8 <Init_Rtc>

  return;
 80007d4:	bf00      	nop
}
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <Init_Rtc>:

static void Init_Rtc( void )
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <Init_Rtc+0x1c>)
 80007de:	f7ff ff42 	bl	8000666 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80007e2:	2100      	movs	r1, #0
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <Init_Rtc+0x1c>)
 80007e6:	f7ff ff4e 	bl	8000686 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80007ea:	4802      	ldr	r0, [pc, #8]	; (80007f4 <Init_Rtc+0x1c>)
 80007ec:	f7ff ff2e 	bl	800064c <LL_RTC_EnableWriteProtection>

  return;
 80007f0:	bf00      	nop
}
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40002800 	.word	0x40002800

080007f8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80007fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000800:	f7ff fe2e 	bl	8000460 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000804:	f007 fe00 	bl	8008408 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff fde1 	bl	80003d0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800080e:	bf00      	nop
}
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800081a:	f007 fbb3 	bl	8007f84 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <appe_Tl_Init+0x50>)
 8000820:	2100      	movs	r1, #0
 8000822:	2020      	movs	r0, #32
 8000824:	f007 ff1c 	bl	8008660 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <appe_Tl_Init+0x54>)
 800082a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <appe_Tl_Init+0x58>)
 800082e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	480e      	ldr	r0, [pc, #56]	; (8000870 <appe_Tl_Init+0x5c>)
 8000836:	f007 f88f 	bl	8007958 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <appe_Tl_Init+0x60>)
 800083c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <appe_Tl_Init+0x64>)
 8000840:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <appe_Tl_Init+0x68>)
 8000844:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000846:	f240 533c 	movw	r3, #1340	; 0x53c
 800084a:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4618      	mov	r0, r3
 8000852:	f007 fcd9 	bl	8008208 <TL_MM_Init>

  TL_Enable();
 8000856:	f007 fb8f 	bl	8007f78 <TL_Enable>

  return;
 800085a:	bf00      	nop
}
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	08007991 	.word	0x08007991
 8000868:	20030724 	.word	0x20030724
 800086c:	08000881 	.word	0x08000881
 8000870:	08000899 	.word	0x08000899
 8000874:	2003093c 	.word	0x2003093c
 8000878:	20030830 	.word	0x20030830
 800087c:	200301e8 	.word	0x200301e8

08000880 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800088a:	bf00      	nop
}
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	330b      	adds	r3, #11
 80008a6:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4618      	mov	r0, r3
 80008ae:	f006 ffa5 	bl	80077fc <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80008bc:	2b07      	cmp	r3, #7
 80008be:	d81b      	bhi.n	80008f8 <APPE_SysUserEvtRx+0x60>
 80008c0:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <APPE_SysUserEvtRx+0x30>)
 80008c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c6:	bf00      	nop
 80008c8:	080008e9 	.word	0x080008e9
 80008cc:	080008f1 	.word	0x080008f1
 80008d0:	080008f9 	.word	0x080008f9
 80008d4:	080008f9 	.word	0x080008f9
 80008d8:	080008f9 	.word	0x080008f9
 80008dc:	080008f9 	.word	0x080008f9
 80008e0:	080008f9 	.word	0x080008f9
 80008e4:	080008f9 	.word	0x080008f9
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f81c 	bl	8000926 <APPE_SysEvtReadyProcessing>
    break;
 80008ee:	e004      	b.n	80008fa <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 f807 	bl	8000904 <APPE_SysEvtError>
    break;
 80008f6:	e000      	b.n	80008fa <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 80008f8:	bf00      	nop
  }

  return;
 80008fa:	bf00      	nop
}
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop

08000904 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	330b      	adds	r3, #11
 8000912:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3302      	adds	r3, #2
 8000918:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800091a:	bf00      	nop
}
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b08a      	sub	sp, #40	; 0x28
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	330b      	adds	r3, #11
 8000946:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000948:	6a3b      	ldr	r3, [r7, #32]
 800094a:	3302      	adds	r3, #2
 800094c:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d117      	bne.n	8000986 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000956:	f7ff fc73 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800095a:	230d      	movs	r3, #13
 800095c:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800095e:	237f      	movs	r3, #127	; 0x7f
 8000960:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000962:	f7ff fdf3 	bl	800054c <LL_DBGMCU_GetRevisionID>
 8000966:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	b29b      	uxth	r3, r3
 800096c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4618      	mov	r0, r3
 8000974:	f006 ff2c 	bl	80077d0 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000978:	f001 fa62 	bl	8001e40 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800097c:	2100      	movs	r1, #0
 800097e:	2001      	movs	r0, #1
 8000980:	f007 fd54 	bl	800842c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000984:	e007      	b.n	8000996 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d103      	bne.n	8000996 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
  return;
 8000994:	bf00      	nop
 8000996:	bf00      	nop
}
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f002 f910 	bl	8002bc8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f002 f90d 	bl	8002bc8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009ae:	2002      	movs	r0, #2
 80009b0:	f002 f90a 	bl	8002bc8 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f002 f941 	bl	8002c3c <BSP_LED_On>
#endif

  return;
 80009ba:	bf00      	nop
}
 80009bc:	bd80      	pop	{r7, pc}

080009be <Button_Init>:

static void Button_Init( void )
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80009c2:	2101      	movs	r1, #1
 80009c4:	2000      	movs	r0, #0
 80009c6:	f002 f96d 	bl	8002ca4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80009ca:	2101      	movs	r1, #1
 80009cc:	2001      	movs	r0, #1
 80009ce:	f002 f969 	bl	8002ca4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80009d2:	2101      	movs	r1, #1
 80009d4:	2002      	movs	r0, #2
 80009d6:	f002 f965 	bl	8002ca4 <BSP_PB_Init>
#endif

  return;
 80009da:	bf00      	nop
}
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e6:	f002 fab1 	bl	8002f4c <HAL_GetTick>
 80009ea:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009f6:	d00a      	beq.n	8000a0e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80009f8:	f002 fac0 	bl	8002f7c <HAL_GetTickFreq>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a06:	e002      	b.n	8000a0e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000a08:	f7ff fe10 	bl	800062c <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000a0c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000a0e:	f002 fa9d 	bl	8002f4c <HAL_GetTick>
 8000a12:	4602      	mov	r2, r0
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d8f4      	bhi.n	8000a08 <HAL_Delay+0x2a>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a30:	f007 fd2c 	bl	800848c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000a3c:	bf00      	nop
}
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	f007 fd1a 	bl	800848c <UTIL_SEQ_Run>

  return;
 8000a58:	bf00      	nop
}
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2020      	movs	r0, #32
 8000a6c:	f007 fe1a 	bl	80086a4 <UTIL_SEQ_SetTask>
  return;
 8000a70:	bf00      	nop
}
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000a80:	2002      	movs	r0, #2
 8000a82:	f007 fe7b 	bl	800877c <UTIL_SEQ_SetEvt>
  return;
 8000a86:	bf00      	nop
}
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000a96:	2002      	movs	r0, #2
 8000a98:	f007 fe90 	bl	80087bc <UTIL_SEQ_WaitEvt>
  return;
 8000a9c:	bf00      	nop
}
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	2b10      	cmp	r3, #16
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x1e>
 8000ab4:	2b10      	cmp	r3, #16
 8000ab6:	dc0d      	bgt.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x30>
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d005      	beq.n	8000ac8 <HAL_GPIO_EXTI_Callback+0x24>
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000ac0:	e008      	b.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000ac2:	f001 fb0f 	bl	80020e4 <APP_BLE_Key_Button1_Action>
      break; 
 8000ac6:	e006      	b.n	8000ad6 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8000ac8:	f001 fb12 	bl	80020f0 <APP_BLE_Key_Button2_Action>
      break; 
 8000acc:	e003      	b.n	8000ad6 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8000ace:	f001 fb16 	bl	80020fe <APP_BLE_Key_Button3_Action>
      break;
 8000ad2:	e000      	b.n	8000ad6 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000ad4:	bf00      	nop

  }
  return;
 8000ad6:	bf00      	nop
}
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <LL_EXTI_EnableIT_0_31>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <LL_EXTI_EnableIT_0_31+0x24>)
 8000aea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000aee:	4905      	ldr	r1, [pc, #20]	; (8000b04 <LL_EXTI_EnableIT_0_31+0x24>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	58000800 	.word	0x58000800

08000b08 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4904      	ldr	r1, [pc, #16]	; (8000b28 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	600b      	str	r3, [r1, #0]

}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	58000800 	.word	0x58000800

08000b2c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <ReadRtcSsrValue+0x3c>)
 8000b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <ReadRtcSsrValue+0x3c>)
 8000b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000b42:	e005      	b.n	8000b50 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <ReadRtcSsrValue+0x3c>)
 8000b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d1f5      	bne.n	8000b44 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000b58:	683b      	ldr	r3, [r7, #0]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40002800 	.word	0x40002800

08000b6c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000b7c:	79ba      	ldrb	r2, [r7, #6]
 8000b7e:	491d      	ldr	r1, [pc, #116]	; (8000bf4 <LinkTimerAfter+0x88>)
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	440b      	add	r3, r1
 8000b8a:	3315      	adds	r3, #21
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d009      	beq.n	8000baa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	4916      	ldr	r1, [pc, #88]	; (8000bf4 <LinkTimerAfter+0x88>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3314      	adds	r3, #20
 8000ba6:	79fa      	ldrb	r2, [r7, #7]
 8000ba8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	4911      	ldr	r1, [pc, #68]	; (8000bf4 <LinkTimerAfter+0x88>)
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	440b      	add	r3, r1
 8000bb8:	3315      	adds	r3, #21
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000bbe:	79fa      	ldrb	r2, [r7, #7]
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <LinkTimerAfter+0x88>)
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
 8000bcc:	3314      	adds	r3, #20
 8000bce:	79ba      	ldrb	r2, [r7, #6]
 8000bd0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000bd2:	79ba      	ldrb	r2, [r7, #6]
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <LinkTimerAfter+0x88>)
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	440b      	add	r3, r1
 8000be0:	3315      	adds	r3, #21
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	701a      	strb	r2, [r3, #0]

  return;
 8000be6:	bf00      	nop
}
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000044 	.word	0x20000044

08000bf8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	460a      	mov	r2, r1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	4613      	mov	r3, r2
 8000c06:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <LinkTimerBefore+0xb8>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d032      	beq.n	8000c7a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000c14:	79ba      	ldrb	r2, [r7, #6]
 8000c16:	4927      	ldr	r1, [pc, #156]	; (8000cb4 <LinkTimerBefore+0xbc>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	440b      	add	r3, r1
 8000c22:	3314      	adds	r3, #20
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	4922      	ldr	r1, [pc, #136]	; (8000cb4 <LinkTimerBefore+0xbc>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	440b      	add	r3, r1
 8000c36:	3315      	adds	r3, #21
 8000c38:	79fa      	ldrb	r2, [r7, #7]
 8000c3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	491d      	ldr	r1, [pc, #116]	; (8000cb4 <LinkTimerBefore+0xbc>)
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	440b      	add	r3, r1
 8000c4a:	3315      	adds	r3, #21
 8000c4c:	79ba      	ldrb	r2, [r7, #6]
 8000c4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000c50:	79fa      	ldrb	r2, [r7, #7]
 8000c52:	4918      	ldr	r1, [pc, #96]	; (8000cb4 <LinkTimerBefore+0xbc>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	3314      	adds	r3, #20
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c64:	79ba      	ldrb	r2, [r7, #6]
 8000c66:	4913      	ldr	r1, [pc, #76]	; (8000cb4 <LinkTimerBefore+0xbc>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3314      	adds	r3, #20
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000c78:	e014      	b.n	8000ca4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	490d      	ldr	r1, [pc, #52]	; (8000cb4 <LinkTimerBefore+0xbc>)
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	440b      	add	r3, r1
 8000c88:	3315      	adds	r3, #21
 8000c8a:	79ba      	ldrb	r2, [r7, #6]
 8000c8c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c8e:	79ba      	ldrb	r2, [r7, #6]
 8000c90:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <LinkTimerBefore+0xbc>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3314      	adds	r3, #20
 8000c9e:	79fa      	ldrb	r2, [r7, #7]
 8000ca0:	701a      	strb	r2, [r3, #0]
  return;
 8000ca2:	bf00      	nop
}
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000d4 	.word	0x200000d4
 8000cb4:	20000044 	.word	0x20000044

08000cb8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc2:	4b4e      	ldr	r3, [pc, #312]	; (8000dfc <linkTimer+0x144>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	d118      	bne.n	8000cfe <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ccc:	4b4b      	ldr	r3, [pc, #300]	; (8000dfc <linkTimer+0x144>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <linkTimer+0x148>)
 8000cd4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000cd6:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <linkTimer+0x144>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	4949      	ldr	r1, [pc, #292]	; (8000e04 <linkTimer+0x14c>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	3315      	adds	r3, #21
 8000cec:	2206      	movs	r2, #6
 8000cee:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000cf0:	4b45      	ldr	r3, [pc, #276]	; (8000e08 <linkTimer+0x150>)
 8000cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	81fb      	strh	r3, [r7, #14]
 8000cfc:	e078      	b.n	8000df0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000cfe:	f000 f909 	bl	8000f14 <ReturnTimeElapsed>
 8000d02:	4603      	mov	r3, r0
 8000d04:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000d06:	79fa      	ldrb	r2, [r7, #7]
 8000d08:	493e      	ldr	r1, [pc, #248]	; (8000e04 <linkTimer+0x14c>)
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	3308      	adds	r3, #8
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	79fa      	ldrb	r2, [r7, #7]
 8000d1c:	4419      	add	r1, r3
 8000d1e:	4839      	ldr	r0, [pc, #228]	; (8000e04 <linkTimer+0x14c>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4403      	add	r3, r0
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000d2e:	79fa      	ldrb	r2, [r7, #7]
 8000d30:	4934      	ldr	r1, [pc, #208]	; (8000e04 <linkTimer+0x14c>)
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <linkTimer+0x144>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4a2e      	ldr	r2, [pc, #184]	; (8000e04 <linkTimer+0x14c>)
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	440b      	add	r3, r1
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	4413      	add	r3, r2
 8000d56:	3308      	adds	r3, #8
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d337      	bcc.n	8000dd0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <linkTimer+0x144>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000d66:	7b7a      	ldrb	r2, [r7, #13]
 8000d68:	4926      	ldr	r1, [pc, #152]	; (8000e04 <linkTimer+0x14c>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	3315      	adds	r3, #21
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d7a:	e013      	b.n	8000da4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000d7c:	7b7a      	ldrb	r2, [r7, #13]
 8000d7e:	4921      	ldr	r1, [pc, #132]	; (8000e04 <linkTimer+0x14c>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	3315      	adds	r3, #21
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000d90:	7b7a      	ldrb	r2, [r7, #13]
 8000d92:	491c      	ldr	r1, [pc, #112]	; (8000e04 <linkTimer+0x14c>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3315      	adds	r3, #21
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000da4:	7b3b      	ldrb	r3, [r7, #12]
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d00b      	beq.n	8000dc2 <linkTimer+0x10a>
 8000daa:	7b3a      	ldrb	r2, [r7, #12]
 8000dac:	4915      	ldr	r1, [pc, #84]	; (8000e04 <linkTimer+0x14c>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	3308      	adds	r3, #8
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d2dc      	bcs.n	8000d7c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000dc2:	7b7a      	ldrb	r2, [r7, #13]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fecf 	bl	8000b6c <LinkTimerAfter>
 8000dce:	e00f      	b.n	8000df0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <linkTimer+0x144>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff0c 	bl	8000bf8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <linkTimer+0x144>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <linkTimer+0x148>)
 8000de8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <linkTimer+0x144>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000df0:	89fb      	ldrh	r3, [r7, #14]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000d4 	.word	0x200000d4
 8000e00:	200000d5 	.word	0x200000d5
 8000e04:	20000044 	.word	0x20000044
 8000e08:	200000d8 	.word	0x200000d8

08000e0c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	460a      	mov	r2, r1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <UnlinkTimer+0xf8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d111      	bne.n	8000e4c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <UnlinkTimer+0xf8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <UnlinkTimer+0xfc>)
 8000e30:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000e32:	79fa      	ldrb	r2, [r7, #7]
 8000e34:	4935      	ldr	r1, [pc, #212]	; (8000f0c <UnlinkTimer+0x100>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3315      	adds	r3, #21
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <UnlinkTimer+0xf8>)
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e03e      	b.n	8000eca <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	492f      	ldr	r1, [pc, #188]	; (8000f0c <UnlinkTimer+0x100>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	3314      	adds	r3, #20
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000e60:	79fa      	ldrb	r2, [r7, #7]
 8000e62:	492a      	ldr	r1, [pc, #168]	; (8000f0c <UnlinkTimer+0x100>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3315      	adds	r3, #21
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000e74:	79f9      	ldrb	r1, [r7, #7]
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	4824      	ldr	r0, [pc, #144]	; (8000f0c <UnlinkTimer+0x100>)
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	440b      	add	r3, r1
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4403      	add	r3, r0
 8000e84:	3315      	adds	r3, #21
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2d8      	uxtb	r0, r3
 8000e8a:	4920      	ldr	r1, [pc, #128]	; (8000f0c <UnlinkTimer+0x100>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	440b      	add	r3, r1
 8000e96:	3315      	adds	r3, #21
 8000e98:	4602      	mov	r2, r0
 8000e9a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d013      	beq.n	8000eca <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000ea2:	79f9      	ldrb	r1, [r7, #7]
 8000ea4:	7bba      	ldrb	r2, [r7, #14]
 8000ea6:	4819      	ldr	r0, [pc, #100]	; (8000f0c <UnlinkTimer+0x100>)
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	440b      	add	r3, r1
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4403      	add	r3, r0
 8000eb2:	3314      	adds	r3, #20
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2d8      	uxtb	r0, r3
 8000eb8:	4914      	ldr	r1, [pc, #80]	; (8000f0c <UnlinkTimer+0x100>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3314      	adds	r3, #20
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000eca:	79fa      	ldrb	r2, [r7, #7]
 8000ecc:	490f      	ldr	r1, [pc, #60]	; (8000f0c <UnlinkTimer+0x100>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	330c      	adds	r3, #12
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <UnlinkTimer+0xf8>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	d107      	bne.n	8000ef8 <UnlinkTimer+0xec>
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d104      	bne.n	8000ef8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <UnlinkTimer+0x104>)
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
}
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	200000d4 	.word	0x200000d4
 8000f08:	200000d5 	.word	0x200000d5
 8000f0c:	20000044 	.word	0x20000044
 8000f10:	200000d8 	.word	0x200000d8

08000f14 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <ReturnTimeElapsed+0x70>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f22:	d026      	beq.n	8000f72 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000f24:	f7ff fe02 	bl	8000b2c <ReadRtcSsrValue>
 8000f28:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <ReturnTimeElapsed+0x70>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d805      	bhi.n	8000f40 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <ReturnTimeElapsed+0x70>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	e00a      	b.n	8000f56 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <ReturnTimeElapsed+0x74>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <ReturnTimeElapsed+0x70>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <ReturnTimeElapsed+0x78>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <ReturnTimeElapsed+0x7c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	40d3      	lsrs	r3, r2
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	e001      	b.n	8000f76 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	b29b      	uxth	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000d8 	.word	0x200000d8
 8000f88:	200001e6 	.word	0x200001e6
 8000f8c:	200001e5 	.word	0x200001e5
 8000f90:	200001e4 	.word	0x200001e4

08000f94 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d108      	bne.n	8000fb6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000fa4:	f7ff fdc2 	bl	8000b2c <ReadRtcSsrValue>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a24      	ldr	r2, [pc, #144]	; (800103c <RestartWakeupCounter+0xa8>)
 8000fac:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f002 f979 	bl	80032a6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000fb4:	e03e      	b.n	8001034 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d803      	bhi.n	8000fc4 <RestartWakeupCounter+0x30>
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <RestartWakeupCounter+0xac>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d002      	beq.n	8000fca <RestartWakeupCounter+0x36>
      Value -= 1;
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fca:	bf00      	nop
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <RestartWakeupCounter+0xb0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f7      	beq.n	8000fcc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <RestartWakeupCounter+0xb0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <RestartWakeupCounter+0xb0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ff0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <RestartWakeupCounter+0xb4>)
 8000ff4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f002 f961 	bl	80032c2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <RestartWakeupCounter+0xb8>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	0c1b      	lsrs	r3, r3, #16
 8001006:	041b      	lsls	r3, r3, #16
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	4910      	ldr	r1, [pc, #64]	; (800104c <RestartWakeupCounter+0xb8>)
 800100c:	4313      	orrs	r3, r2
 800100e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001010:	f7ff fd8c 	bl	8000b2c <ReadRtcSsrValue>
 8001014:	4603      	mov	r3, r0
 8001016:	4a09      	ldr	r2, [pc, #36]	; (800103c <RestartWakeupCounter+0xa8>)
 8001018:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <RestartWakeupCounter+0xb0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <RestartWakeupCounter+0xb0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800102c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800102e:	f3af 8000 	nop.w
  return ;
 8001032:	bf00      	nop
}
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000d8 	.word	0x200000d8
 8001040:	200001e4 	.word	0x200001e4
 8001044:	200001e0 	.word	0x200001e0
 8001048:	58000800 	.word	0x58000800
 800104c:	40002800 	.word	0x40002800

08001050 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <RescheduleTimerList+0x124>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d108      	bne.n	8001076 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001064:	bf00      	nop
 8001066:	4b44      	ldr	r3, [pc, #272]	; (8001178 <RescheduleTimerList+0x128>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f7      	bne.n	8001066 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <RescheduleTimerList+0x128>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <RescheduleTimerList+0x128>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001088:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <RescheduleTimerList+0x12c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	493b      	ldr	r1, [pc, #236]	; (8001180 <RescheduleTimerList+0x130>)
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	3308      	adds	r3, #8
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80010a4:	f7ff ff36 	bl	8000f14 <ReturnTimeElapsed>
 80010a8:	4603      	mov	r3, r0
 80010aa:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d205      	bcs.n	80010c0 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010b8:	4b32      	ldr	r3, [pc, #200]	; (8001184 <RescheduleTimerList+0x134>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e04d      	b.n	800115c <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	4a31      	ldr	r2, [pc, #196]	; (8001188 <RescheduleTimerList+0x138>)
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	b292      	uxth	r2, r2
 80010c8:	4413      	add	r3, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d906      	bls.n	80010e0 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <RescheduleTimerList+0x138>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <RescheduleTimerList+0x134>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e03d      	b.n	800115c <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <RescheduleTimerList+0x134>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010f0:	e034      	b.n	800115c <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	4922      	ldr	r1, [pc, #136]	; (8001180 <RescheduleTimerList+0x130>)
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	3308      	adds	r3, #8
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	429a      	cmp	r2, r3
 8001108:	d20a      	bcs.n	8001120 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	491c      	ldr	r1, [pc, #112]	; (8001180 <RescheduleTimerList+0x130>)
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	3308      	adds	r3, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e013      	b.n	8001148 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	4917      	ldr	r1, [pc, #92]	; (8001180 <RescheduleTimerList+0x130>)
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	3308      	adds	r3, #8
 8001130:	6819      	ldr	r1, [r3, #0]
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	1ac9      	subs	r1, r1, r3
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <RescheduleTimerList+0x130>)
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4403      	add	r3, r0
 8001144:	3308      	adds	r3, #8
 8001146:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	490d      	ldr	r1, [pc, #52]	; (8001180 <RescheduleTimerList+0x130>)
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	3315      	adds	r3, #21
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b06      	cmp	r3, #6
 8001160:	d1c7      	bne.n	80010f2 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff15 	bl	8000f94 <RestartWakeupCounter>

  return ;
 800116a:	bf00      	nop
}
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40002800 	.word	0x40002800
 8001178:	200001e0 	.word	0x200001e0
 800117c:	200000d4 	.word	0x200000d4
 8001180:	20000044 	.word	0x20000044
 8001184:	200000dc 	.word	0x200000dc
 8001188:	200001e8 	.word	0x200001e8

0800118c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001192:	f3ef 8310 	mrs	r3, PRIMASK
 8001196:	617b      	str	r3, [r7, #20]
  return(result);
 8001198:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011a0:	4b5f      	ldr	r3, [pc, #380]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	22ca      	movs	r2, #202	; 0xca
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24
 80011aa:	4b5d      	ldr	r3, [pc, #372]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2253      	movs	r2, #83	; 0x53
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80011b4:	4b5a      	ldr	r3, [pc, #360]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	4b58      	ldr	r3, [pc, #352]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011c6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80011c8:	4b56      	ldr	r3, [pc, #344]	; (8001324 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80011d0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011d4:	4954      	ldr	r1, [pc, #336]	; (8001328 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	330c      	adds	r3, #12
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d172      	bne.n	80012d0 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80011ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011ee:	494e      	ldr	r1, [pc, #312]	; (8001328 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80011fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001202:	4949      	ldr	r1, [pc, #292]	; (8001328 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	3310      	adds	r3, #16
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d050      	beq.n	80012c0 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800121e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001222:	4941      	ldr	r1, [pc, #260]	; (8001328 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	330d      	adds	r3, #13
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d126      	bne.n	8001286 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800123c:	2101      	movs	r1, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fde4 	bl	8000e0c <UnlinkTimer>
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	f383 8810 	msr	PRIMASK, r3
}
 800124e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001250:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001254:	4934      	ldr	r1, [pc, #208]	; (8001328 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	440b      	add	r3, r1
 8001260:	3304      	adds	r3, #4
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fa4e 	bl	800170c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	22ca      	movs	r2, #202	; 0xca
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2253      	movs	r2, #83	; 0x53
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
 8001284:	e014      	b.n	80012b0 <HW_TS_RTC_Wakeup_Handler+0x124>
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f383 8810 	msr	PRIMASK, r3
}
 8001290:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f9ac 	bl	80015f4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	22ca      	movs	r2, #202	; 0xca
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2253      	movs	r2, #83	; 0x53
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80012b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	4619      	mov	r1, r3
 80012b8:	69b8      	ldr	r0, [r7, #24]
 80012ba:	f000 faaf 	bl	800181c <HW_TS_RTC_Int_AppNot>
 80012be:	e025      	b.n	800130c <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 80012c0:	f7ff fec6 	bl	8001050 <RescheduleTimerList>
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f383 8810 	msr	PRIMASK, r3
}
 80012ce:	e01d      	b.n	800130c <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80012d0:	bf00      	nop
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f7      	beq.n	80012d2 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012f6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80012fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f383 8810 	msr	PRIMASK, r3
}
 800130a:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	22ff      	movs	r2, #255	; 0xff
 8001314:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001316:	bf00      	nop
}
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200001e0 	.word	0x200001e0
 8001324:	200000d4 	.word	0x200000d4
 8001328:	20000044 	.word	0x20000044
 800132c:	200000dc 	.word	0x200000dc
 8001330:	58000800 	.word	0x58000800

08001334 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001340:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <HW_TS_Init+0x1a0>)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001346:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HW_TS_Init+0x1a0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	22ca      	movs	r2, #202	; 0xca
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
 8001350:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <HW_TS_Init+0x1a0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2253      	movs	r2, #83	; 0x53
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <HW_TS_Init+0x1a4>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HW_TS_Init+0x1a4>)
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <HW_TS_Init+0x1a4>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f1c3 0304 	rsb	r3, r3, #4
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HW_TS_Init+0x1a8>)
 800137a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800137c:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <HW_TS_Init+0x1a4>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001384:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001388:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	fa92 f2a2 	rbit	r2, r2
 8001390:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	2a00      	cmp	r2, #0
 800139a:	d101      	bne.n	80013a0 <HW_TS_Init+0x6c>
  {
    return 32U;
 800139c:	2220      	movs	r2, #32
 800139e:	e003      	b.n	80013a8 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	40d3      	lsrs	r3, r2
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b4b      	ldr	r3, [pc, #300]	; (80014e0 <HW_TS_Init+0x1ac>)
 80013b2:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80013b4:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <HW_TS_Init+0x1a4>)
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HW_TS_Init+0x1b0>)
 80013c6:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <HW_TS_Init+0x1b0>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	4a44      	ldr	r2, [pc, #272]	; (80014e0 <HW_TS_Init+0x1ac>)
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80013da:	4a40      	ldr	r2, [pc, #256]	; (80014dc <HW_TS_Init+0x1a8>)
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	40d3      	lsrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d904      	bls.n	80013f6 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80013ec:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <HW_TS_Init+0x1b4>)
 80013ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f2:	801a      	strh	r2, [r3, #0]
 80013f4:	e003      	b.n	80013fe <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HW_TS_Init+0x1b4>)
 80013fc:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001402:	f7ff fb81 	bl	8000b08 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001406:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800140a:	f7ff fb69 	bl	8000ae0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d143      	bne.n	800149c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001414:	4b35      	ldr	r3, [pc, #212]	; (80014ec <HW_TS_Init+0x1b8>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800141a:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <HW_TS_Init+0x1bc>)
 800141c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001420:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001422:	2300      	movs	r3, #0
 8001424:	77fb      	strb	r3, [r7, #31]
 8001426:	e00c      	b.n	8001442 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001428:	7ffa      	ldrb	r2, [r7, #31]
 800142a:	4932      	ldr	r1, [pc, #200]	; (80014f4 <HW_TS_Init+0x1c0>)
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	330c      	adds	r3, #12
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	3301      	adds	r3, #1
 8001440:	77fb      	strb	r3, [r7, #31]
 8001442:	7ffb      	ldrb	r3, [r7, #31]
 8001444:	2b05      	cmp	r3, #5
 8001446:	d9ef      	bls.n	8001428 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HW_TS_Init+0x1c4>)
 800144a:	2206      	movs	r2, #6
 800144c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <HW_TS_Init+0x1a0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HW_TS_Init+0x1a0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001460:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HW_TS_Init+0x1a0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HW_TS_Init+0x1a0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001476:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HW_TS_Init+0x1c8>)
 800147a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800147e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001480:	2003      	movs	r0, #3
 8001482:	f001 ff1e 	bl	80032c2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HW_TS_Init+0x1a0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HW_TS_Init+0x1a0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	e00a      	b.n	80014b2 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HW_TS_Init+0x1a0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f001 fefa 	bl	80032a6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HW_TS_Init+0x1a0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	22ff      	movs	r2, #255	; 0xff
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80014bc:	2200      	movs	r2, #0
 80014be:	2103      	movs	r1, #3
 80014c0:	2003      	movs	r0, #3
 80014c2:	f001 feae 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014c6:	2003      	movs	r0, #3
 80014c8:	f001 fec5 	bl	8003256 <HAL_NVIC_EnableIRQ>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200001e0 	.word	0x200001e0
 80014d8:	40002800 	.word	0x40002800
 80014dc:	200001e4 	.word	0x200001e4
 80014e0:	200001e5 	.word	0x200001e5
 80014e4:	200001e6 	.word	0x200001e6
 80014e8:	200001e8 	.word	0x200001e8
 80014ec:	200000dc 	.word	0x200000dc
 80014f0:	200000d8 	.word	0x200000d8
 80014f4:	20000044 	.word	0x20000044
 80014f8:	200000d4 	.word	0x200000d4
 80014fc:	58000800 	.word	0x58000800

08001500 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001500:	b480      	push	{r7}
 8001502:	b08b      	sub	sp, #44	; 0x2c
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001516:	f3ef 8310 	mrs	r3, PRIMASK
 800151a:	61fb      	str	r3, [r7, #28]
  return(result);
 800151c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800151e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001524:	e004      	b.n	8001530 <HW_TS_Create+0x30>
  {
    loop++;
 8001526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800152a:	3301      	adds	r3, #1
 800152c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001534:	2b05      	cmp	r3, #5
 8001536:	d80c      	bhi.n	8001552 <HW_TS_Create+0x52>
 8001538:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800153c:	492c      	ldr	r1, [pc, #176]	; (80015f0 <HW_TS_Create+0xf0>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	330c      	adds	r3, #12
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1e9      	bne.n	8001526 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001552:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001556:	2b06      	cmp	r3, #6
 8001558:	d038      	beq.n	80015cc <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800155a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800155e:	4924      	ldr	r1, [pc, #144]	; (80015f0 <HW_TS_Create+0xf0>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	330c      	adds	r3, #12
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	f383 8810 	msr	PRIMASK, r3
}
 800157a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800157c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001580:	491b      	ldr	r1, [pc, #108]	; (80015f0 <HW_TS_Create+0xf0>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	3310      	adds	r3, #16
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001592:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001596:	4916      	ldr	r1, [pc, #88]	; (80015f0 <HW_TS_Create+0xf0>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	330d      	adds	r3, #13
 80015a4:	79fa      	ldrb	r2, [r7, #7]
 80015a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80015a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015ac:	4910      	ldr	r1, [pc, #64]	; (80015f0 <HW_TS_Create+0xf0>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015c2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015ca:	e008      	b.n	80015de <HW_TS_Create+0xde>
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f383 8810 	msr	PRIMASK, r3
}
 80015d6:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80015d8:	2301      	movs	r3, #1
 80015da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80015de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	372c      	adds	r7, #44	; 0x2c
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000044 	.word	0x20000044

080015f4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001602:	60fb      	str	r3, [r7, #12]
  return(result);
 8001604:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800160c:	2003      	movs	r0, #3
 800160e:	f001 fe30 	bl	8003272 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HW_TS_Stop+0x100>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	22ca      	movs	r2, #202	; 0xca
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HW_TS_Stop+0x100>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2253      	movs	r2, #83	; 0x53
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	4933      	ldr	r1, [pc, #204]	; (80016f8 <HW_TS_Stop+0x104>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	330c      	adds	r3, #12
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d148      	bne.n	80016d0 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fbe2 	bl	8000e0c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001648:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <HW_TS_Stop+0x108>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800164e:	7cfb      	ldrb	r3, [r7, #19]
 8001650:	2b06      	cmp	r3, #6
 8001652:	d135      	bne.n	80016c0 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HW_TS_Stop+0x10c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001660:	d108      	bne.n	8001674 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001662:	bf00      	nop
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HW_TS_Stop+0x100>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f7      	bne.n	8001664 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HW_TS_Stop+0x100>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HW_TS_Stop+0x100>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001686:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001688:	bf00      	nop
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HW_TS_Stop+0x100>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f7      	beq.n	800168a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HW_TS_Stop+0x100>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HW_TS_Stop+0x100>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016ae:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HW_TS_Stop+0x110>)
 80016b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016b6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80016b8:	2003      	movs	r0, #3
 80016ba:	f001 fe02 	bl	80032c2 <HAL_NVIC_ClearPendingIRQ>
 80016be:	e007      	b.n	80016d0 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HW_TS_Stop+0x114>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	7cfa      	ldrb	r2, [r7, #19]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80016cc:	f7ff fcc0 	bl	8001050 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HW_TS_Stop+0x100>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	22ff      	movs	r2, #255	; 0xff
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016da:	2003      	movs	r0, #3
 80016dc:	f001 fdbb 	bl	8003256 <HAL_NVIC_EnableIRQ>
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f383 8810 	msr	PRIMASK, r3
}
 80016ea:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016ec:	bf00      	nop
}
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200001e0 	.word	0x200001e0
 80016f8:	20000044 	.word	0x20000044
 80016fc:	200000d4 	.word	0x200000d4
 8001700:	40002800 	.word	0x40002800
 8001704:	58000800 	.word	0x58000800
 8001708:	200000d5 	.word	0x200000d5

0800170c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001718:	79fa      	ldrb	r2, [r7, #7]
 800171a:	493c      	ldr	r1, [pc, #240]	; (800180c <HW_TS_Start+0x100>)
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	330c      	adds	r3, #12
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d103      	bne.n	8001738 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff5e 	bl	80015f4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001738:	f3ef 8310 	mrs	r3, PRIMASK
 800173c:	60fb      	str	r3, [r7, #12]
  return(result);
 800173e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001742:	b672      	cpsid	i
}
 8001744:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001746:	2003      	movs	r0, #3
 8001748:	f001 fd93 	bl	8003272 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HW_TS_Start+0x104>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	22ca      	movs	r2, #202	; 0xca
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HW_TS_Start+0x104>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2253      	movs	r2, #83	; 0x53
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001760:	79fa      	ldrb	r2, [r7, #7]
 8001762:	492a      	ldr	r1, [pc, #168]	; (800180c <HW_TS_Start+0x100>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	330c      	adds	r3, #12
 8001770:	2202      	movs	r2, #2
 8001772:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	4925      	ldr	r1, [pc, #148]	; (800180c <HW_TS_Start+0x100>)
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	3308      	adds	r3, #8
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	4920      	ldr	r1, [pc, #128]	; (800180c <HW_TS_Start+0x100>)
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3304      	adds	r3, #4
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fa8a 	bl	8000cb8 <linkTimer>
 80017a4:	4603      	mov	r3, r0
 80017a6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HW_TS_Start+0x108>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <HW_TS_Start+0x10c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	7c7a      	ldrb	r2, [r7, #17]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d002      	beq.n	80017c0 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80017ba:	f7ff fc49 	bl	8001050 <RescheduleTimerList>
 80017be:	e013      	b.n	80017e8 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	4912      	ldr	r1, [pc, #72]	; (800180c <HW_TS_Start+0x100>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3308      	adds	r3, #8
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	8a7b      	ldrh	r3, [r7, #18]
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	1ac9      	subs	r1, r1, r3
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <HW_TS_Start+0x100>)
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4403      	add	r3, r0
 80017e4:	3308      	adds	r3, #8
 80017e6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HW_TS_Start+0x104>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	22ff      	movs	r2, #255	; 0xff
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017f2:	2003      	movs	r0, #3
 80017f4:	f001 fd2f 	bl	8003256 <HAL_NVIC_EnableIRQ>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f383 8810 	msr	PRIMASK, r3
}
 8001802:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001804:	bf00      	nop
}
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000044 	.word	0x20000044
 8001810:	200001e0 	.word	0x200001e0
 8001814:	200000d4 	.word	0x200000d4
 8001818:	200000d5 	.word	0x200000d5

0800181c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	460b      	mov	r3, r1
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4798      	blx	r3

  return;
 800182e:	bf00      	nop
}
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
            }
            break;
#endif

        default:
            break;
 800183e:	bf00      	nop
    }

    return;
 8001840:	bf00      	nop
}
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_RCC_LSE_SetDriveCapability>:
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185c:	f023 0218 	bic.w	r2, r3, #24
 8001860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4313      	orrs	r3, r2
 8001868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_AHB1_GRP1_EnableClock>:
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_AHB2_GRP1_EnableClock>:
{
 80018aa:	b480      	push	{r7}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4313      	orrs	r3, r2
 80018c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4013      	ands	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e0:	f001 fac6 	bl	8002e70 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80018e4:	f7fe fee2 	bl	80006ac <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e8:	f000 f814 	bl	8001914 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80018ec:	f000 f870 	bl	80019d0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80018f0:	f000 f88e 	bl	8001a10 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f4:	f000 f90f 	bl	8001b16 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f8:	f000 f8f0 	bl	8001adc <MX_DMA_Init>
  MX_RF_Init();
 80018fc:	f000 f89c 	bl	8001a38 <MX_RF_Init>
  MX_RTC_Init();
 8001900:	f000 f8b8 	bl	8001a74 <MX_RTC_Init>
  MX_RNG_Init();
 8001904:	f000 f8a0 	bl	8001a48 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001908:	f7fe fede 	bl	80006c8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800190c:	f7ff f88c 	bl	8000a28 <MX_APPE_Process>
 8001910:	e7fc      	b.n	800190c <main+0x30>
	...

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b09a      	sub	sp, #104	; 0x68
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2248      	movs	r2, #72	; 0x48
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f007 f812 	bl	800894c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800193a:	f002 f887 	bl	8003a4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff ff84 	bl	800184c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <SystemClock_Config+0xb8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <SystemClock_Config+0xb8>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <SystemClock_Config+0xb8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001960:	2347      	movs	r3, #71	; 0x47
 8001962:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800196a:	2301      	movs	r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800196e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001978:	2340      	movs	r3, #64	; 0x40
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800197c:	2300      	movs	r3, #0
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4618      	mov	r0, r3
 8001986:	f002 fbdd 	bl	8004144 <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001990:	f000 f8ce 	bl	8001b30 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001994:	236f      	movs	r3, #111	; 0x6f
 8001996:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001998:	2302      	movs	r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 ff51 	bl	800485c <HAL_RCC_ClockConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80019c0:	f000 f8b6 	bl	8001b30 <Error_Handler>
  }
}
 80019c4:	bf00      	nop
 80019c6:	3768      	adds	r7, #104	; 0x68
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58000400 	.word	0x58000400

080019d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d6:	463b      	mov	r3, r7
 80019d8:	2250      	movs	r2, #80	; 0x50
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f006 ffb5 	bl	800894c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80019e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019e6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80019e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ec:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80019ee:	2302      	movs	r3, #2
 80019f0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80019f2:	2310      	movs	r3, #16
 80019f4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fb44 	bl	8005086 <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001a04:	f000 f894 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001a08:	bf00      	nop
 8001a0a:	3750      	adds	r7, #80	; 0x50
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_IPCC_Init+0x20>)
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <MX_IPCC_Init+0x24>)
 8001a18:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_IPCC_Init+0x20>)
 8001a1c:	f001 ff90 	bl	8003940 <HAL_IPCC_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a26:	f000 f883 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000030c 	.word	0x2000030c
 8001a34:	58000c00 	.word	0x58000c00

08001a38 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <MX_RNG_Init+0x24>)
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <MX_RNG_Init+0x28>)
 8001a50:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_RNG_Init+0x24>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_RNG_Init+0x24>)
 8001a5a:	f003 fd9b 	bl	8005594 <HAL_RNG_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001a64:	f000 f864 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000054c 	.word	0x2000054c
 8001a70:	58001000 	.word	0x58001000

08001a74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <MX_RTC_Init+0x64>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001a86:	220f      	movs	r2, #15
 8001a88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001a8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aaa:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001aac:	f003 fda7 	bl	80055fe <HAL_RTC_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ab6:	f000 f83b 	bl	8001b30 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_RTC_Init+0x60>)
 8001ac0:	f003 fe8c 	bl	80057dc <HAL_RTCEx_SetWakeUpTimer_IT>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001aca:	f000 f831 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200004c8 	.word	0x200004c8
 8001ad8:	40002800 	.word	0x40002800

08001adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7ff fec9 	bl	8001878 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff fec6 	bl	8001878 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7ff fec3 	bl	8001878 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	210f      	movs	r1, #15
 8001af6:	200e      	movs	r0, #14
 8001af8:	f001 fb93 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001afc:	200e      	movs	r0, #14
 8001afe:	f001 fbaa 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	210f      	movs	r1, #15
 8001b06:	203a      	movs	r0, #58	; 0x3a
 8001b08:	f001 fb8b 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001b0c:	203a      	movs	r0, #58	; 0x3a
 8001b0e:	f001 fba2 	bl	8003256 <HAL_NVIC_EnableIRQ>

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	2004      	movs	r0, #4
 8001b1c:	f7ff fec5 	bl	80018aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff fec2 	bl	80018aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2002      	movs	r0, #2
 8001b28:	f7ff febf 	bl	80018aa <LL_AHB2_GRP1_EnableClock>

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_RCC_EnableRTC>:
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_AHB3_GRP1_EnableClock>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b84:	68fb      	ldr	r3, [r7, #12]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_APB1_GRP1_EnableClock>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001bc8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001bcc:	f7ff ffc8 	bl	8001b60 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	202e      	movs	r0, #46	; 0x2e
 8001bd6:	f001 fb24 	bl	8003222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001bda:	202e      	movs	r0, #46	; 0x2e
 8001bdc:	f001 fb3b 	bl	8003256 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_IPCC_MspInit+0x44>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d113      	bne.n	8001c1e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001bf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001bfa:	f7ff ffb1 	bl	8001b60 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	202c      	movs	r0, #44	; 0x2c
 8001c04:	f001 fb0d 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001c08:	202c      	movs	r0, #44	; 0x2c
 8001c0a:	f001 fb24 	bl	8003256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	202d      	movs	r0, #45	; 0x2d
 8001c14:	f001 fb05 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001c18:	202d      	movs	r0, #45	; 0x2d
 8001c1a:	f001 fb1c 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	58000c00 	.word	0x58000c00

08001c2c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b096      	sub	sp, #88	; 0x58
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	2250      	movs	r2, #80	; 0x50
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f006 fe85 	bl	800894c <memset>
  if(hrng->Instance==RNG)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_RNG_MspInit+0x50>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d113      	bne.n	8001c74 <HAL_RNG_MspInit+0x48>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c50:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fa12 	bl	8005086 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001c68:	f7ff ff62 	bl	8001b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c6c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c70:	f7ff ff76 	bl	8001b60 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	3758      	adds	r7, #88	; 0x58
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	58001000 	.word	0x58001000

08001c80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b096      	sub	sp, #88	; 0x58
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	2250      	movs	r2, #80	; 0x50
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f006 fe5b 	bl	800894c <memset>
  if(hrtc->Instance==RTC)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_RTC_MspInit+0x6c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d120      	bne.n	8001ce2 <HAL_RTC_MspInit+0x62>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 f9e8 	bl	8005086 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001cbc:	f7ff ff38 	bl	8001b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cc0:	f7ff ff3d 	bl	8001b3e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001cc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cc8:	f7ff ff63 	bl	8001b92 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f001 faa6 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	f001 fabd 	bl	8003256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f003 fe39 	bl	8005954 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3758      	adds	r7, #88	; 0x58
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40002800 	.word	0x40002800

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d44:	f001 f8ee 	bl	8002f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d50:	f7ff fa1c 	bl	800118c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA1_Channel4_IRQHandler+0x10>)
 8001d5e:	f001 fb7c 	bl	800345a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200004ec 	.word	0x200004ec

08001d6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <USART1_IRQHandler+0x10>)
 8001d72:	f003 fe25 	bl	80059c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000438 	.word	0x20000438

08001d80 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <LPUART1_IRQHandler+0x10>)
 8001d86:	f003 fe1b 	bl	80059c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000348 	.word	0x20000348

08001d94 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001d98:	f000 fd82 	bl	80028a0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001da4:	f000 fdb4 	bl	8002910 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001db0:	f001 fda2 	bl	80038f8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA2_Channel4_IRQHandler+0x10>)
 8001dbe:	f001 fb4c 	bl	800345a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200003d8 	.word	0x200003d8

08001dcc <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8001dd0:	2010      	movs	r0, #16
 8001dd2:	f001 fd79 	bl	80038c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f001 fd72 	bl	80038c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8001dec:	2002      	movs	r0, #2
 8001dee:	f001 fd6b 	bl	80038c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <LL_FLASH_GetUDN+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	1fff7580 	.word	0x1fff7580

08001e10 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <LL_FLASH_GetDeviceID+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	1fff7584 	.word	0x1fff7584

08001e28 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <LL_FLASH_GetSTCompanyID+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0a1b      	lsrs	r3, r3, #8
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	1fff7584 	.word	0x1fff7584

08001e40 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b08e      	sub	sp, #56	; 0x38
 8001e44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <APP_BLE_Init+0xb0>)
 8001e48:	1d3c      	adds	r4, r7, #4
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8001e5c:	f000 f956 	bl	800210c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8001e60:	2101      	movs	r1, #1
 8001e62:	2002      	movs	r0, #2
 8001e64:	f006 fae2 	bl	800842c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8001e68:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <APP_BLE_Init+0xb4>)
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f006 fbf7 	bl	8008660 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f005 fc7d 	bl	8007774 <SHCI_C2_BLE_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8001e80:	f7ff fe56 	bl	8001b30 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8001e84:	f000 f958 	bl	8002138 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8001e88:	f005 ffd0 	bl	8007e2c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <APP_BLE_Init+0xb8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <APP_BLE_Init+0xb8>)
 8001e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e9a:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8001e9c:	4a17      	ldr	r2, [pc, #92]	; (8001efc <APP_BLE_Init+0xbc>)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f006 fbdd 	bl	8008660 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8001ea6:	2006      	movs	r0, #6
 8001ea8:	f005 f822 	bl	8006ef0 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8001eac:	f000 fba0 	bl	80025f0 <P2PS_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <APP_BLE_Init+0xc0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4913      	ldr	r1, [pc, #76]	; (8001f04 <APP_BLE_Init+0xc4>)
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fb22 	bl	8001500 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <APP_BLE_Init+0xc8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4912      	ldr	r1, [pc, #72]	; (8001f0c <APP_BLE_Init+0xcc>)
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fb1c 	bl	8001500 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <APP_BLE_Init+0xb8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <APP_BLE_Init+0xb8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <APP_BLE_Init+0xd0>)
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <APP_BLE_Init+0xd4>)
 8001edc:	22a0      	movs	r2, #160	; 0xa0
 8001ede:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f000 f9dd 	bl	80022a0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8001ee6:	bf00      	nop
}
 8001ee8:	3738      	adds	r7, #56	; 0x38
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bdb0      	pop	{r4, r5, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	08008990 	.word	0x08008990
 8001ef4:	080071a5 	.word	0x080071a5
 8001ef8:	200000e0 	.word	0x200000e0
 8001efc:	08002409 	.word	0x08002409
 8001f00:	08002441 	.word	0x08002441
 8001f04:	20000161 	.word	0x20000161
 8001f08:	08002451 	.word	0x08002451
 8001f0c:	20000162 	.word	0x20000162
 8001f10:	20000164 	.word	0x20000164
 8001f14:	20000166 	.word	0x20000166

08001f18 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	; 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8001f20:	2392      	movs	r3, #146	; 0x92
 8001f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2bff      	cmp	r3, #255	; 0xff
 8001f32:	d076      	beq.n	8002022 <SVCCTL_App_Notification+0x10a>
 8001f34:	2bff      	cmp	r3, #255	; 0xff
 8001f36:	f300 80c9 	bgt.w	80020cc <SVCCTL_App_Notification+0x1b4>
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d002      	beq.n	8001f44 <SVCCTL_App_Notification+0x2c>
 8001f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f40:	d020      	beq.n	8001f84 <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8001f42:	e0c3      	b.n	80020cc <SVCCTL_App_Notification+0x1b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	3302      	adds	r3, #2
 8001f48:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b62      	ldr	r3, [pc, #392]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001f54:	8adb      	ldrh	r3, [r3, #22]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d106      	bne.n	8001f68 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8001f5a:	4b60      	ldr	r3, [pc, #384]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001f60:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f000 f999 	bl	80022a0 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <SVCCTL_App_Notification+0x1c8>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001f76:	8ada      	ldrh	r2, [r3, #22]
 8001f78:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <SVCCTL_App_Notification+0x1c8>)
 8001f7a:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8001f7c:	4858      	ldr	r0, [pc, #352]	; (80020e0 <SVCCTL_App_Notification+0x1c8>)
 8001f7e:	f000 fb23 	bl	80025c8 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8001f82:	e0a6      	b.n	80020d2 <SVCCTL_App_Notification+0x1ba>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	3302      	adds	r3, #2
 8001f88:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d005      	beq.n	8001f9e <SVCCTL_App_Notification+0x86>
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	dc41      	bgt.n	800201a <SVCCTL_App_Notification+0x102>
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d017      	beq.n	8001fca <SVCCTL_App_Notification+0xb2>
 8001f9a:	2b03      	cmp	r3, #3
          break;
 8001f9c:	e03d      	b.n	800201a <SVCCTL_App_Notification+0x102>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8001fa4:	4b4d      	ldr	r3, [pc, #308]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001fa6:	8adb      	ldrh	r3, [r3, #22]
 8001fa8:	f107 020e 	add.w	r2, r7, #14
 8001fac:	f107 010f 	add.w	r1, r7, #15
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f005 f80b 	bl	8006fcc <hci_le_read_phy>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8001fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d12c      	bne.n	800201e <SVCCTL_App_Notification+0x106>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b02      	cmp	r3, #2
          break;
 8001fc8:	e029      	b.n	800201e <SVCCTL_App_Notification+0x106>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001fd0:	4b42      	ldr	r3, [pc, #264]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001fd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fb0c 	bl	80015f4 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001fde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d104      	bne.n	8001ff0 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001fe8:	2206      	movs	r2, #6
 8001fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001fee:	e003      	b.n	8001ff8 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8001ff0:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b36      	ldr	r3, [pc, #216]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 8002002:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002004:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <SVCCTL_App_Notification+0x1c8>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 800200c:	8ada      	ldrh	r2, [r3, #22]
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <SVCCTL_App_Notification+0x1c8>)
 8002010:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8002012:	4833      	ldr	r0, [pc, #204]	; (80020e0 <SVCCTL_App_Notification+0x1c8>)
 8002014:	f000 fad8 	bl	80025c8 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002018:	e002      	b.n	8002020 <SVCCTL_App_Notification+0x108>
          break;
 800201a:	bf00      	nop
 800201c:	e059      	b.n	80020d2 <SVCCTL_App_Notification+0x1ba>
          break;
 800201e:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8002020:	e057      	b.n	80020d2 <SVCCTL_App_Notification+0x1ba>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	3302      	adds	r3, #2
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002032:	d047      	beq.n	80020c4 <SVCCTL_App_Notification+0x1ac>
 8002034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002038:	dc4a      	bgt.n	80020d0 <SVCCTL_App_Notification+0x1b8>
 800203a:	2b04      	cmp	r3, #4
 800203c:	d037      	beq.n	80020ae <SVCCTL_App_Notification+0x196>
 800203e:	2b04      	cmp	r3, #4
 8002040:	db46      	blt.n	80020d0 <SVCCTL_App_Notification+0x1b8>
 8002042:	f240 420a 	movw	r2, #1034	; 0x40a
 8002046:	4293      	cmp	r3, r2
 8002048:	dc42      	bgt.n	80020d0 <SVCCTL_App_Notification+0x1b8>
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	db3f      	blt.n	80020d0 <SVCCTL_App_Notification+0x1b8>
 8002050:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002054:	2b0a      	cmp	r3, #10
 8002056:	d83b      	bhi.n	80020d0 <SVCCTL_App_Notification+0x1b8>
 8002058:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <SVCCTL_App_Notification+0x148>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	080020c9 	.word	0x080020c9
 8002064:	080020a7 	.word	0x080020a7
 8002068:	080020c9 	.word	0x080020c9
 800206c:	080020c9 	.word	0x080020c9
 8002070:	080020c9 	.word	0x080020c9
 8002074:	0800208d 	.word	0x0800208d
 8002078:	080020d1 	.word	0x080020d1
 800207c:	080020c9 	.word	0x080020c9
 8002080:	080020c9 	.word	0x080020c9
 8002084:	08002099 	.word	0x08002099
 8002088:	080020c9 	.word	0x080020c9
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 800208e:	8adb      	ldrh	r3, [r3, #22]
 8002090:	4618      	mov	r0, r3
 8002092:	f004 fb87 	bl	80067a4 <aci_gap_allow_rebond>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8002096:	e018      	b.n	80020ca <SVCCTL_App_Notification+0x1b2>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 800209a:	8adb      	ldrh	r3, [r3, #22]
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 fbca 	bl	8006838 <aci_gap_numeric_comparison_value_confirm_yesno>
      break;
 80020a4:	e011      	b.n	80020ca <SVCCTL_App_Notification+0x1b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	3302      	adds	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
           break;    
 80020ac:	e00d      	b.n	80020ca <SVCCTL_App_Notification+0x1b2>
          BSP_LED_On(LED_GREEN);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f000 fdc4 	bl	8002c3c <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <SVCCTL_App_Notification+0x1c4>)
 80020b6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80020ba:	210a      	movs	r1, #10
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fb25 	bl	800170c <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80020c2:	e002      	b.n	80020ca <SVCCTL_App_Notification+0x1b2>
      break;
 80020c4:	bf00      	nop
 80020c6:	e003      	b.n	80020d0 <SVCCTL_App_Notification+0x1b8>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 80020c8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80020ca:	e001      	b.n	80020d0 <SVCCTL_App_Notification+0x1b8>
      break;
 80020cc:	bf00      	nop
 80020ce:	e000      	b.n	80020d2 <SVCCTL_App_Notification+0x1ba>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80020d0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3730      	adds	r7, #48	; 0x30
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200000e0 	.word	0x200000e0
 80020e0:	20000560 	.word	0x20000560

080020e4 <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 80020e8:	f000 faaa 	bl	8002640 <P2PS_APP_SW1_Button_Action>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
#endif
  
  return;
 80020f4:	bf00      	nop
}
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <Ble_Tl_Init+0x20>)
 8002114:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <Ble_Tl_Init+0x24>)
 8002118:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800211a:	463b      	mov	r3, r7
 800211c:	4619      	mov	r1, r3
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <Ble_Tl_Init+0x28>)
 8002120:	f005 f824 	bl	800716c <hci_init>

  return;
 8002124:	bf00      	nop
}
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20030028 	.word	0x20030028
 8002130:	080024db 	.word	0x080024db
 8002134:	080024a3 	.word	0x080024a3

08002138 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	b08d      	sub	sp, #52	; 0x34
 800213c:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800213e:	2300      	movs	r3, #0
 8002140:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8002142:	f004 ff1f 	bl	8006f84 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8002146:	f000 f91b 	bl	8002380 <BleGetBdAddress>
 800214a:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	2106      	movs	r1, #6
 8002150:	2000      	movs	r0, #0
 8002152:	f004 fe0d 	bl	8006d70 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	795a      	ldrb	r2, [r3, #5]
 800215a:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800215c:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	791a      	ldrb	r2, [r3, #4]
 8002162:	4b49      	ldr	r3, [pc, #292]	; (8002288 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002164:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	78da      	ldrb	r2, [r3, #3]
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800216c:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	789a      	ldrb	r2, [r3, #2]
 8002172:	4b45      	ldr	r3, [pc, #276]	; (8002288 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002174:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	785a      	ldrb	r2, [r3, #1]
 800217a:	4b43      	ldr	r3, [pc, #268]	; (8002288 <Ble_Hci_Gap_Gatt_Init+0x150>)
 800217c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b41      	ldr	r3, [pc, #260]	; (8002288 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002184:	735a      	strb	r2, [r3, #13]
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002186:	4a41      	ldr	r2, [pc, #260]	; (800228c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8002188:	2110      	movs	r1, #16
 800218a:	2018      	movs	r0, #24
 800218c:	f004 fdf0 	bl	8006d70 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002190:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8002192:	2110      	movs	r1, #16
 8002194:	2008      	movs	r0, #8
 8002196:	f004 fdeb 	bl	8006d70 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800219a:	2118      	movs	r1, #24
 800219c:	2001      	movs	r0, #1
 800219e:	f004 fe50 	bl	8006e42 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80021a2:	f004 fba0 	bl	80068e6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01d      	beq.n	80021f4 <Ble_Hci_Gap_Gatt_Init+0xbc>
  {
    const char *name = "P2PSRV1";
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80021ba:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 80021bc:	f107 020a 	add.w	r2, r7, #10
 80021c0:	7cf8      	ldrb	r0, [r7, #19]
 80021c2:	1dbb      	adds	r3, r7, #6
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	2207      	movs	r2, #7
 80021d0:	2100      	movs	r1, #0
 80021d2:	f004 f9dc 	bl	800658e <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80021d6:	897c      	ldrh	r4, [r7, #10]
 80021d8:	893d      	ldrh	r5, [r7, #8]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7fd ffce 	bl	800017c <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	4629      	mov	r1, r5
 80021ee:	4620      	mov	r0, r4
 80021f0:	f004 fd37 	bl	8006c62 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80021f4:	8978      	ldrh	r0, [r7, #10]
 80021f6:	88f9      	ldrh	r1, [r7, #6]
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2302      	movs	r3, #2
 80021fe:	2200      	movs	r2, #0
 8002200:	f004 fd2f 	bl	8006c62 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002204:	2202      	movs	r2, #2
 8002206:	2102      	movs	r1, #2
 8002208:	2000      	movs	r0, #0
 800220a:	f004 ff47 	bl	800709c <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f004 f8c6 	bl	80063aa <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002220:	2201      	movs	r2, #1
 8002222:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002226:	2208      	movs	r2, #8
 8002228:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800222c:	2210      	movs	r2, #16
 800222e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002232:	2200      	movs	r2, #0
 8002234:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <Ble_Hci_Gap_Gatt_Init+0x164>)
 800223a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800223e:	2201      	movs	r2, #1
 8002240:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002244:	789c      	ldrb	r4, [r3, #2]
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002248:	785d      	ldrb	r5, [r3, #1]
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800224c:	791b      	ldrb	r3, [r3, #4]
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002250:	7952      	ldrb	r2, [r2, #5]
 8002252:	4911      	ldr	r1, [pc, #68]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002254:	78c9      	ldrb	r1, [r1, #3]
 8002256:	4810      	ldr	r0, [pc, #64]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002258:	6880      	ldr	r0, [r0, #8]
 800225a:	2600      	movs	r6, #0
 800225c:	9604      	str	r6, [sp, #16]
 800225e:	9003      	str	r0, [sp, #12]
 8002260:	9102      	str	r1, [sp, #8]
 8002262:	9201      	str	r2, [sp, #4]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	2201      	movs	r2, #1
 800226a:	4629      	mov	r1, r5
 800226c:	4620      	mov	r0, r4
 800226e:	f004 f8e6 	bl	800643e <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002274:	789b      	ldrb	r3, [r3, #2]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <Ble_Hci_Gap_Gatt_Init+0x146>
   {
     aci_gap_configure_whitelist();
 800227a:	f004 fa6f 	bl	800675c <aci_gap_configure_whitelist>
   }
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	08008b30 	.word	0x08008b30
 8002290:	08008b40 	.word	0x08008b40
 8002294:	080089c4 	.word	0x080089c4
 8002298:	200000e0 	.word	0x200000e0
 800229c:	0001b207 	.word	0x0001b207

080022a0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af08      	add	r7, sp, #32
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80022aa:	2392      	movs	r3, #146	; 0x92
 80022ac:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <Adv_Request+0xc4>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <Adv_Request+0xc8>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	81bb      	strh	r3, [r7, #12]
 80022c0:	e005      	b.n	80022ce <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80022c2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80022c6:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80022c8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80022cc:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <Adv_Request+0xcc>)
 80022d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f98d 	bl	80015f4 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d10d      	bne.n	80022fc <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <Adv_Request+0xcc>)
 80022e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d004      	beq.n	80022f4 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <Adv_Request+0xcc>)
 80022ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d103      	bne.n	80022fc <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80022f4:	f003 ff57 	bl	80061a6 <aci_gap_set_non_discoverable>
 80022f8:	4603      	mov	r3, r0
 80022fa:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <Adv_Request+0xcc>)
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <Adv_Request+0xcc>)
 8002306:	7e1b      	ldrb	r3, [r3, #24]
 8002308:	89ba      	ldrh	r2, [r7, #12]
 800230a:	89f9      	ldrh	r1, [r7, #14]
 800230c:	2000      	movs	r0, #0
 800230e:	9006      	str	r0, [sp, #24]
 8002310:	2000      	movs	r0, #0
 8002312:	9005      	str	r0, [sp, #20]
 8002314:	4816      	ldr	r0, [pc, #88]	; (8002370 <Adv_Request+0xd0>)
 8002316:	9004      	str	r0, [sp, #16]
 8002318:	9303      	str	r3, [sp, #12]
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <Adv_Request+0xd4>)
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	2308      	movs	r3, #8
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	2300      	movs	r3, #0
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	2000      	movs	r0, #0
 800232a:	f003 ff60 	bl	80061ee <aci_gap_set_discoverable>
 800232e:	4603      	mov	r3, r0
 8002330:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8002332:	4911      	ldr	r1, [pc, #68]	; (8002378 <Adv_Request+0xd8>)
 8002334:	200e      	movs	r0, #14
 8002336:	f004 f9b5 	bl	80066a4 <aci_gap_update_adv_data>
 800233a:	4603      	mov	r3, r0
 800233c:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800233e:	7afb      	ldrb	r3, [r7, #11]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <Adv_Request+0xcc>)
 800234c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002350:	490a      	ldr	r1, [pc, #40]	; (800237c <Adv_Request+0xdc>)
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f9da 	bl	800170c <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8002358:	bf00      	nop
 800235a:	bf00      	nop
}
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000164 	.word	0x20000164
 8002368:	20000166 	.word	0x20000166
 800236c:	200000e0 	.word	0x200000e0
 8002370:	200000f9 	.word	0x200000f9
 8002374:	08008b50 	.word	0x08008b50
 8002378:	20000008 	.word	0x20000008
 800237c:	0001e046 	.word	0x0001e046

08002380 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002386:	f7ff fd37 	bl	8001df8 <LL_FLASH_GetUDN>
 800238a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002392:	d023      	beq.n	80023dc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002394:	f7ff fd48 	bl	8001e28 <LL_FLASH_GetSTCompanyID>
 8002398:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800239a:	f7ff fd39 	bl	8001e10 <LL_FLASH_GetDeviceID>
 800239e:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b16      	ldr	r3, [pc, #88]	; (8002400 <BleGetBdAddress+0x80>)
 80023a6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <BleGetBdAddress+0x80>)
 80023b0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <BleGetBdAddress+0x80>)
 80023b8:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <BleGetBdAddress+0x80>)
 80023c0:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <BleGetBdAddress+0x80>)
 80023ca:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <BleGetBdAddress+0x80>)
 80023d4:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <BleGetBdAddress+0x80>)
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e00b      	b.n	80023f4 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80023dc:	2000      	movs	r0, #0
 80023de:	f005 f87b 	bl	80074d8 <OTP_Read>
 80023e2:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e001      	b.n	80023f4 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <BleGetBdAddress+0x84>)
 80023f2:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 80023f4:	697b      	ldr	r3, [r7, #20]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200001ec 	.word	0x200001ec
 8002404:	08008b28 	.word	0x08008b28

08002408 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 800240e:	2001      	movs	r0, #1
 8002410:	f000 fc2e 	bl	8002c70 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <Adv_Cancel+0x34>)
 8002416:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800241a:	2b05      	cmp	r3, #5
 800241c:	d00a      	beq.n	8002434 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 800241e:	2300      	movs	r3, #0
 8002420:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8002422:	f003 fec0 	bl	80061a6 <aci_gap_set_non_discoverable>
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <Adv_Cancel+0x34>)
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8002432:	bf00      	nop
 8002434:	bf00      	nop
}
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200000e0 	.word	0x200000e0

08002440 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8002444:	2100      	movs	r1, #0
 8002446:	2001      	movs	r0, #1
 8002448:	f006 f92c 	bl	80086a4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800244c:	bf00      	nop
}
 800244e:	bd80      	pop	{r7, pc}

08002450 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8002454:	2001      	movs	r0, #1
 8002456:	f000 fc0b 	bl	8002c70 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}

0800245e <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002466:	2100      	movs	r1, #0
 8002468:	2002      	movs	r0, #2
 800246a:	f006 f91b 	bl	80086a4 <UTIL_SEQ_SetTask>
  return;
 800246e:	bf00      	nop
}
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800247e:	2001      	movs	r0, #1
 8002480:	f006 f97c 	bl	800877c <UTIL_SEQ_SetEvt>
  return;
 8002484:	bf00      	nop
}
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002494:	2001      	movs	r0, #1
 8002496:	f006 f991 	bl	80087bc <UTIL_SEQ_WaitEvt>
  return;
 800249a:	bf00      	nop
}
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	3308      	adds	r3, #8
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 fd0b 	bl	8007ed0 <SVCCTL_UserEvtRx>
 80024ba:	4603      	mov	r3, r0
 80024bc:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80024ca:	e003      	b.n	80024d4 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
  return;
 80024d2:	bf00      	nop
}
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <BLE_StatusNot+0x16>
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d006      	beq.n	80024fc <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 80024ee:	e00b      	b.n	8002508 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80024f0:	231f      	movs	r3, #31
 80024f2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f006 f901 	bl	80086fc <UTIL_SEQ_PauseTask>
      break;
 80024fa:	e005      	b.n	8002508 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80024fc:	231f      	movs	r3, #31
 80024fe:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f006 f91b 	bl	800873c <UTIL_SEQ_ResumeTask>
      break;
 8002506:	bf00      	nop
  }
  return;
 8002508:	bf00      	nop
}
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d00e      	beq.n	800253e <P2PS_STM_App_Notification+0x2e>
 8002520:	2b03      	cmp	r3, #3
 8002522:	dc47      	bgt.n	80025b4 <P2PS_STM_App_Notification+0xa4>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <P2PS_STM_App_Notification+0x1e>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d004      	beq.n	8002536 <P2PS_STM_App_Notification+0x26>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800252c:	e042      	b.n	80025b4 <P2PS_STM_App_Notification+0xa4>
      P2P_Server_App_Context.Notification_Status = 1;
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <P2PS_STM_App_Notification+0xb4>)
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
      break;
 8002534:	e041      	b.n	80025ba <P2PS_STM_App_Notification+0xaa>
      P2P_Server_App_Context.Notification_Status = 0;
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <P2PS_STM_App_Notification+0xb4>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
      break;
 800253c:	e03d      	b.n	80025ba <P2PS_STM_App_Notification+0xaa>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d117      	bne.n	8002578 <P2PS_STM_App_Notification+0x68>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	3301      	adds	r3, #1
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <P2PS_STM_App_Notification+0x50>
          BSP_LED_On(LED_BLUE);
 8002554:	2000      	movs	r0, #0
 8002556:	f000 fb71 	bl	8002c3c <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <P2PS_STM_App_Notification+0xb4>)
 800255c:	2201      	movs	r2, #1
 800255e:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	3301      	adds	r3, #1
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <P2PS_STM_App_Notification+0x68>
          BSP_LED_Off(LED_BLUE);
 800256c:	2000      	movs	r0, #0
 800256e:	f000 fb7f 	bl	8002c70 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <P2PS_STM_App_Notification+0xb4>)
 8002574:	2200      	movs	r2, #0
 8002576:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d11a      	bne.n	80025b8 <P2PS_STM_App_Notification+0xa8>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	3301      	adds	r3, #1
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <P2PS_STM_App_Notification+0x8a>
          BSP_LED_On(LED_BLUE);
 800258e:	2000      	movs	r0, #0
 8002590:	f000 fb54 	bl	8002c3c <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <P2PS_STM_App_Notification+0xb4>)
 8002596:	2201      	movs	r2, #1
 8002598:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	3301      	adds	r3, #1
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <P2PS_STM_App_Notification+0xa8>
          BSP_LED_Off(LED_BLUE);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f000 fb62 	bl	8002c70 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <P2PS_STM_App_Notification+0xb4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	709a      	strb	r2, [r3, #2]
      break;
 80025b2:	e001      	b.n	80025b8 <P2PS_STM_App_Notification+0xa8>
      break;
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <P2PS_STM_App_Notification+0xaa>
      break;
 80025b8:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80025ba:	bf00      	nop
}
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000168 	.word	0x20000168

080025c8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <P2PS_APP_Notification+0x1c>
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d000      	beq.n	80025de <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80025dc:	e003      	b.n	80025e6 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 80025de:	f000 f819 	bl	8002614 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 80025e2:	e000      	b.n	80025e6 <P2PS_APP_Notification+0x1e>
    break;
 80025e4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80025e6:	bf00      	nop
}
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 80025f4:	4a05      	ldr	r2, [pc, #20]	; (800260c <P2PS_APP_Init+0x1c>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	2004      	movs	r0, #4
 80025fa:	f006 f831 	bl	8008660 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <P2PS_APP_Init+0x20>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8002604:	f000 f806 	bl	8002614 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8002608:	bf00      	nop
}
 800260a:	bd80      	pop	{r7, pc}
 800260c:	08002651 	.word	0x08002651
 8002610:	20000168 	.word	0x20000168

08002614 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8002618:	2000      	movs	r0, #0
 800261a:	f000 fb29 	bl	8002c70 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002620:	2201      	movs	r2, #1
 8002622:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002626:	2200      	movs	r2, #0
 8002628:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 800262a:	4b04      	ldr	r3, [pc, #16]	; (800263c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800262c:	2201      	movs	r2, #1
 800262e:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8002630:	4b02      	ldr	r3, [pc, #8]	; (800263c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002632:	2200      	movs	r2, #0
 8002634:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000168 	.word	0x20000168

08002640 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8002644:	2100      	movs	r1, #0
 8002646:	2004      	movs	r0, #4
 8002648:	f006 f82c 	bl	80086a4 <UTIL_SEQ_SetTask>

  return;
 800264c:	bf00      	nop
}
 800264e:	bd80      	pop	{r7, pc}

08002650 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <P2PS_Send_Notification+0x34>)
 8002656:	791b      	ldrb	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <P2PS_Send_Notification+0x34>)
 800265e:	2201      	movs	r2, #1
 8002660:	711a      	strb	r2, [r3, #4]
 8002662:	e002      	b.n	800266a <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <P2PS_Send_Notification+0x34>)
 8002666:	2200      	movs	r2, #0
 8002668:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <P2PS_Send_Notification+0x34>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <P2PS_Send_Notification+0x2e>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8002672:	4905      	ldr	r1, [pc, #20]	; (8002688 <P2PS_Send_Notification+0x38>)
 8002674:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8002678:	f005 f85a 	bl	8007730 <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 800267c:	bf00      	nop
 800267e:	bf00      	nop
}
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000168 	.word	0x20000168
 8002688:	2000016b 	.word	0x2000016b

0800268c <LL_PWR_EnableBootC2>:
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <LL_PWR_EnableBootC2+0x1c>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <LL_PWR_EnableBootC2+0x1c>)
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	58000400 	.word	0x58000400

080026ac <LL_C2_EXTI_EnableEvent_32_63>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80026b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80026ba:	4905      	ldr	r1, [pc, #20]	; (80026d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	58000800 	.word	0x58000800

080026d4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	620b      	str	r3, [r1, #32]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	58000800 	.word	0x58000800

080026f8 <LL_AHB3_GRP1_EnableClock>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4313      	orrs	r3, r2
 800270e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800271c:	68fb      	ldr	r3, [r7, #12]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800273a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002754:	68fb      	ldr	r3, [r7, #12]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_C1_IPCC_EnableIT_TXF>:
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_C1_IPCC_EnableIT_RXO>:
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	605a      	str	r2, [r3, #4]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_C1_IPCC_EnableReceiveChannel>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	605a      	str	r2, [r3, #4]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_C1_IPCC_SetFlag_CHx>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4013      	ands	r3, r2
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d101      	bne.n	8002866 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	4013      	ands	r3, r2
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d101      	bne.n	8002890 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80028a4:	2102      	movs	r1, #2
 80028a6:	4819      	ldr	r0, [pc, #100]	; (800290c <HW_IPCC_Rx_Handler+0x6c>)
 80028a8:	f7ff ffe4 	bl	8002874 <LL_C2_IPCC_IsActiveFlag_CHx>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HW_IPCC_Rx_Handler+0x26>
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <HW_IPCC_Rx_Handler+0x6c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80028c0:	f000 f8da 	bl	8002a78 <HW_IPCC_SYS_EvtHandler>
 80028c4:	e01f      	b.n	8002906 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80028c6:	2101      	movs	r1, #1
 80028c8:	4810      	ldr	r0, [pc, #64]	; (800290c <HW_IPCC_Rx_Handler+0x6c>)
 80028ca:	f7ff ffd3 	bl	8002874 <LL_C2_IPCC_IsActiveFlag_CHx>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HW_IPCC_Rx_Handler+0x46>
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HW_IPCC_Rx_Handler+0x6c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80028e0:	f000 f88e 	bl	8002a00 <HW_IPCC_BLE_EvtHandler>
 80028e4:	e00f      	b.n	8002906 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80028e6:	2108      	movs	r1, #8
 80028e8:	4808      	ldr	r0, [pc, #32]	; (800290c <HW_IPCC_Rx_Handler+0x6c>)
 80028ea:	f7ff ffc3 	bl	8002874 <LL_C2_IPCC_IsActiveFlag_CHx>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HW_IPCC_Rx_Handler+0x68>
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HW_IPCC_Rx_Handler+0x6c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8002902:	f000 f905 	bl	8002b10 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8002906:	bf00      	nop
 8002908:	bf00      	nop
}
 800290a:	bd80      	pop	{r7, pc}
 800290c:	58000c00 	.word	0x58000c00

08002910 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8002914:	2102      	movs	r1, #2
 8002916:	481a      	ldr	r0, [pc, #104]	; (8002980 <HW_IPCC_Tx_Handler+0x70>)
 8002918:	f7ff ff97 	bl	800284a <LL_C1_IPCC_IsActiveFlag_CHx>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HW_IPCC_Tx_Handler+0x26>
 8002922:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HW_IPCC_Tx_Handler+0x70>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	43db      	mvns	r3, r3
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8002930:	f000 f896 	bl	8002a60 <HW_IPCC_SYS_CmdEvtHandler>
 8002934:	e020      	b.n	8002978 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8002936:	2108      	movs	r1, #8
 8002938:	4811      	ldr	r0, [pc, #68]	; (8002980 <HW_IPCC_Tx_Handler+0x70>)
 800293a:	f7ff ff86 	bl	800284a <LL_C1_IPCC_IsActiveFlag_CHx>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HW_IPCC_Tx_Handler+0x48>
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HW_IPCC_Tx_Handler+0x70>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	43db      	mvns	r3, r3
 800294a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8002952:	f000 f8bf 	bl	8002ad4 <HW_IPCC_MM_FreeBufHandler>
 8002956:	e00f      	b.n	8002978 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8002958:	2120      	movs	r1, #32
 800295a:	4809      	ldr	r0, [pc, #36]	; (8002980 <HW_IPCC_Tx_Handler+0x70>)
 800295c:	f7ff ff75 	bl	800284a <LL_C1_IPCC_IsActiveFlag_CHx>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HW_IPCC_Tx_Handler+0x6a>
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HW_IPCC_Tx_Handler+0x70>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	43db      	mvns	r3, r3
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8002974:	f000 f850 	bl	8002a18 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8002978:	bf00      	nop
 800297a:	bf00      	nop
}
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	58000c00 	.word	0x58000c00

08002984 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8002988:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800298c:	f7ff fecd 	bl	800272a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8002990:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002994:	f7ff fe8a 	bl	80026ac <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8002998:	f44f 7000 	mov.w	r0, #512	; 0x200
 800299c:	f7ff fe9a 	bl	80026d4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80029a0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80029a2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80029a4:	f7ff fe72 	bl	800268c <LL_PWR_EnableBootC2>

  return;
 80029a8:	bf00      	nop
}
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80029b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80029b4:	f7ff fea0 	bl	80026f8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80029b8:	4806      	ldr	r0, [pc, #24]	; (80029d4 <HW_IPCC_Init+0x28>)
 80029ba:	f7ff fee2 	bl	8002782 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <HW_IPCC_Init+0x28>)
 80029c0:	f7ff fecf 	bl	8002762 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80029c4:	202c      	movs	r0, #44	; 0x2c
 80029c6:	f000 fc46 	bl	8003256 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80029ca:	202d      	movs	r0, #45	; 0x2d
 80029cc:	f000 fc43 	bl	8003256 <HAL_NVIC_EnableIRQ>

  return;
 80029d0:	bf00      	nop
}
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	58000c00 	.word	0x58000c00

080029d8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80029dc:	2101      	movs	r1, #1
 80029de:	4802      	ldr	r0, [pc, #8]	; (80029e8 <HW_IPCC_BLE_Init+0x10>)
 80029e0:	f7ff ff04 	bl	80027ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80029e4:	bf00      	nop
}
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	58000c00 	.word	0x58000c00

080029ec <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80029f0:	2101      	movs	r1, #1
 80029f2:	4802      	ldr	r0, [pc, #8]	; (80029fc <HW_IPCC_BLE_SendCmd+0x10>)
 80029f4:	f7ff ff1a 	bl	800282c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80029f8:	bf00      	nop
}
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58000c00 	.word	0x58000c00

08002a00 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8002a04:	f005 fb48 	bl	8008098 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4802      	ldr	r0, [pc, #8]	; (8002a14 <HW_IPCC_BLE_EvtHandler+0x14>)
 8002a0c:	f7ff ff00 	bl	8002810 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002a10:	bf00      	nop
}
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	58000c00 	.word	0x58000c00

08002a18 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8002a1c:	2120      	movs	r1, #32
 8002a1e:	4803      	ldr	r0, [pc, #12]	; (8002a2c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8002a20:	f7ff fed2 	bl	80027c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8002a24:	f005 fb68 	bl	80080f8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8002a28:	bf00      	nop
}
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	58000c00 	.word	0x58000c00

08002a30 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002a34:	2102      	movs	r1, #2
 8002a36:	4802      	ldr	r0, [pc, #8]	; (8002a40 <HW_IPCC_SYS_Init+0x10>)
 8002a38:	f7ff fed8 	bl	80027ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002a3c:	bf00      	nop
}
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	58000c00 	.word	0x58000c00

08002a44 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4804      	ldr	r0, [pc, #16]	; (8002a5c <HW_IPCC_SYS_SendCmd+0x18>)
 8002a4c:	f7ff feee 	bl	800282c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002a50:	2102      	movs	r1, #2
 8002a52:	4802      	ldr	r0, [pc, #8]	; (8002a5c <HW_IPCC_SYS_SendCmd+0x18>)
 8002a54:	f7ff fea5 	bl	80027a2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8002a58:	bf00      	nop
}
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	58000c00 	.word	0x58000c00

08002a60 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002a64:	2102      	movs	r1, #2
 8002a66:	4803      	ldr	r0, [pc, #12]	; (8002a74 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8002a68:	f7ff feae 	bl	80027c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8002a6c:	f005 fb94 	bl	8008198 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8002a70:	bf00      	nop
}
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	58000c00 	.word	0x58000c00

08002a78 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8002a7c:	f005 fba2 	bl	80081c4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002a80:	2102      	movs	r1, #2
 8002a82:	4802      	ldr	r0, [pc, #8]	; (8002a8c <HW_IPCC_SYS_EvtHandler+0x14>)
 8002a84:	f7ff fec4 	bl	8002810 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002a88:	bf00      	nop
}
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	58000c00 	.word	0x58000c00

08002a90 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8002a98:	2108      	movs	r1, #8
 8002a9a:	480c      	ldr	r0, [pc, #48]	; (8002acc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002a9c:	f7ff fed5 	bl	800284a <LL_C1_IPCC_IsActiveFlag_CHx>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002aac:	2108      	movs	r1, #8
 8002aae:	4807      	ldr	r0, [pc, #28]	; (8002acc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002ab0:	f7ff fe77 	bl	80027a2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8002ab4:	e006      	b.n	8002ac4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002aba:	2108      	movs	r1, #8
 8002abc:	4803      	ldr	r0, [pc, #12]	; (8002acc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002abe:	f7ff feb5 	bl	800282c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8002ac2:	bf00      	nop
}
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	58000c00 	.word	0x58000c00
 8002ad0:	200001f4 	.word	0x200001f4

08002ad4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002ad8:	2108      	movs	r1, #8
 8002ada:	4806      	ldr	r0, [pc, #24]	; (8002af4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002adc:	f7ff fe74 	bl	80027c8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002ae6:	2108      	movs	r1, #8
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8002aea:	f7ff fe9f 	bl	800282c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8002aee:	bf00      	nop
}
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	58000c00 	.word	0x58000c00
 8002af8:	200001f4 	.word	0x200001f4

08002afc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002b00:	2108      	movs	r1, #8
 8002b02:	4802      	ldr	r0, [pc, #8]	; (8002b0c <HW_IPCC_TRACES_Init+0x10>)
 8002b04:	f7ff fe72 	bl	80027ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002b08:	bf00      	nop
}
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	58000c00 	.word	0x58000c00

08002b10 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8002b14:	f005 fbfe 	bl	8008314 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8002b18:	2108      	movs	r1, #8
 8002b1a:	4802      	ldr	r0, [pc, #8]	; (8002b24 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8002b1c:	f7ff fe78 	bl	8002810 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8002b20:	bf00      	nop
}
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	58000c00 	.word	0x58000c00

08002b28 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002b28:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b2a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2c:	3304      	adds	r3, #4

08002b2e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b2e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b30:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002b32:	d3f9      	bcc.n	8002b28 <CopyDataInit>
  bx lr
 8002b34:	4770      	bx	lr

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002b36:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002b38:	3004      	adds	r0, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002b3a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>
  bx lr
 8002b3e:	4770      	bx	lr

08002b40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b40:	480c      	ldr	r0, [pc, #48]	; (8002b74 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002b42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002b44:	480c      	ldr	r0, [pc, #48]	; (8002b78 <LoopForever+0x8>)
 8002b46:	490d      	ldr	r1, [pc, #52]	; (8002b7c <LoopForever+0xc>)
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <LoopForever+0x10>)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f7ff ffef 	bl	8002b2e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <LoopForever+0x14>)
 8002b52:	490d      	ldr	r1, [pc, #52]	; (8002b88 <LoopForever+0x18>)
 8002b54:	2300      	movs	r3, #0
 8002b56:	f7ff fff0 	bl	8002b3a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002b5a:	480c      	ldr	r0, [pc, #48]	; (8002b8c <LoopForever+0x1c>)
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <LoopForever+0x20>)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f7ff ffeb 	bl	8002b3a <LoopFillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b64:	f000 f90e 	bl	8002d84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b68:	f005 febe 	bl	80088e8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002b6c:	f7fe feb6 	bl	80018dc <main>

08002b70 <LoopForever>:

LoopForever:
  b LoopForever
 8002b70:	e7fe      	b.n	8002b70 <LoopForever>
 8002b72:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002b74:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	20000044 	.word	0x20000044
 8002b80:	08008c04 	.word	0x08008c04
  INIT_BSS _sbss, _ebss
 8002b84:	200001c4 	.word	0x200001c4
 8002b88:	20000568 	.word	0x20000568
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002b8c:	200301e0 	.word	0x200301e0
 8002b90:	20030a57 	.word	0x20030a57

08002b94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC1_IRQHandler>

08002b96 <LL_AHB2_GRP1_EnableClock>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002be2:	2002      	movs	r0, #2
 8002be4:	f7ff ffd7 	bl	8002b96 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <BSP_LED_Init+0x6c>)
 8002bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bf0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <BSP_LED_Init+0x70>)
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	f107 020c 	add.w	r2, r7, #12
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fcd3 	bl	80035b8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <BSP_LED_Init+0x70>)
 8002c16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <BSP_LED_Init+0x6c>)
 8002c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c22:	2200      	movs	r2, #0
 8002c24:	4619      	mov	r1, r3
 8002c26:	f000 fe37 	bl	8003898 <HAL_GPIO_WritePin>
}
 8002c2a:	bf00      	nop
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	08008b58 	.word	0x08008b58
 8002c38:	20000018 	.word	0x20000018

08002c3c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <BSP_LED_On+0x2c>)
 8002c4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <BSP_LED_On+0x30>)
 8002c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f000 fe1d 	bl	8003898 <HAL_GPIO_WritePin>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000018 	.word	0x20000018
 8002c6c:	08008b58 	.word	0x08008b58

08002c70 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <BSP_LED_Off+0x2c>)
 8002c7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <BSP_LED_Off+0x30>)
 8002c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f000 fe03 	bl	8003898 <HAL_GPIO_WritePin>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000018 	.word	0x20000018
 8002ca0:	08008b58 	.word	0x08008b58

08002ca4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	460a      	mov	r2, r1
 8002cae:	71fb      	strb	r3, [r7, #7]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <BSP_PB_Init+0x2e>
 8002cca:	2004      	movs	r0, #4
 8002ccc:	f7ff ff63 	bl	8002b96 <LL_AHB2_GRP1_EnableClock>
 8002cd0:	e00c      	b.n	8002cec <BSP_PB_Init+0x48>
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d103      	bne.n	8002ce0 <BSP_PB_Init+0x3c>
 8002cd8:	2008      	movs	r0, #8
 8002cda:	f7ff ff5c 	bl	8002b96 <LL_AHB2_GRP1_EnableClock>
 8002cde:	e005      	b.n	8002cec <BSP_PB_Init+0x48>
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d102      	bne.n	8002cec <BSP_PB_Init+0x48>
 8002ce6:	2008      	movs	r0, #8
 8002ce8:	f7ff ff55 	bl	8002b96 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002cec:	79bb      	ldrb	r3, [r7, #6]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d117      	bne.n	8002d22 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <BSP_PB_Init+0xd4>)
 8002cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cfa:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002d00:	2301      	movs	r3, #1
 8002d02:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d04:	2302      	movs	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <BSP_PB_Init+0xd8>)
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	f107 020c 	add.w	r2, r7, #12
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fc4e 	bl	80035b8 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7fd fe5e 	bl	80009de <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002d22:	79bb      	ldrb	r3, [r7, #6]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d123      	bne.n	8002d70 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <BSP_PB_Init+0xd4>)
 8002d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d30:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8002d36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d3a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <BSP_PB_Init+0xd8>)
 8002d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d44:	f107 020c 	add.w	r2, r7, #12
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fc34 	bl	80035b8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <BSP_PB_Init+0xdc>)
 8002d54:	5cd3      	ldrb	r3, [r2, r3]
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	2200      	movs	r2, #0
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fa60 	bl	8003222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	4a06      	ldr	r2, [pc, #24]	; (8002d80 <BSP_PB_Init+0xdc>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fa73 	bl	8003256 <HAL_NVIC_EnableIRQ>
  }
}
 8002d70:	bf00      	nop
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	08008b60 	.word	0x08008b60
 8002d7c:	20000024 	.word	0x20000024
 8002d80:	08008b68 	.word	0x08008b68

08002d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <SystemInit+0xa0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <SystemInit+0xa0>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	4a23      	ldr	r2, [pc, #140]	; (8002e24 <SystemInit+0xa0>)
 8002d96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002db6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <SystemInit+0xa4>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd4:	f023 0305 	bic.w	r3, r3, #5
 8002dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <SystemInit+0xa8>)
 8002df6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <SystemInit+0xa8>)
 8002dfe:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	faf6fefb 	.word	0xfaf6fefb
 8002e2c:	22041000 	.word	0x22041000

08002e30 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6053      	str	r3, [r2, #4]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e0042000 	.word	0xe0042000

08002e50 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	6053      	str	r3, [r2, #4]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e0042000 	.word	0xe0042000

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_Init+0x3c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_Init+0x3c>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e86:	2003      	movs	r0, #3
 8002e88:	f000 f9c0 	bl	800320c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f000 f80f 	bl	8002eb0 <HAL_InitTick>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	71fb      	strb	r3, [r7, #7]
 8002e9c:	e001      	b.n	8002ea2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e9e:	f7fe fe91 	bl	8001bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	58004000 	.word	0x58004000

08002eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002ebc:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <HAL_InitTick+0x6c>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d024      	beq.n	8002f0e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ec4:	f001 fe76 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_InitTick+0x6c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f9d6 	bl	800328e <HAL_SYSTICK_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10f      	bne.n	8002f08 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	d809      	bhi.n	8002f02 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef6:	f000 f994 	bl	8003222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002efa:	4a09      	ldr	r2, [pc, #36]	; (8002f20 <HAL_InitTick+0x70>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e007      	b.n	8002f12 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e004      	b.n	8002f12 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e001      	b.n	8002f12 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000038 	.word	0x20000038
 8002f20:	20000034 	.word	0x20000034

08002f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x20>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_IncTick+0x24>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_IncTick+0x24>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000038 	.word	0x20000038
 8002f48:	20000564 	.word	0x20000564

08002f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_GetTick+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000564 	.word	0x20000564

08002f64 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <HAL_GetTickPrio+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000034 	.word	0x20000034

08002f7c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_GetTickFreq+0x14>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000038 	.word	0x20000038

08002f94 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002f98:	f7ff ff4a 	bl	8002e30 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002fa4:	f7ff ff54 	bl	8002e50 <LL_DBGMCU_EnableDBGStopMode>
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <__NVIC_EnableIRQ+0x38>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000e100 	.word	0xe000e100

0800304c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db12      	blt.n	8003084 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	490a      	ldr	r1, [pc, #40]	; (8003090 <__NVIC_DisableIRQ+0x44>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	3320      	adds	r3, #32
 8003074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003078:	f3bf 8f4f 	dsb	sy
}
 800307c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800307e:	f3bf 8f6f 	isb	sy
}
 8003082:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	db0c      	blt.n	80030c0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4907      	ldr	r1, [pc, #28]	; (80030cc <__NVIC_SetPendingIRQ+0x38>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	2001      	movs	r0, #1
 80030b6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ba:	3340      	adds	r3, #64	; 0x40
 80030bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100

080030d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db0c      	blt.n	80030fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	4907      	ldr	r1, [pc, #28]	; (8003108 <__NVIC_ClearPendingIRQ+0x38>)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2001      	movs	r0, #1
 80030f2:	fa00 f202 	lsl.w	r2, r0, r2
 80030f6:	3360      	adds	r3, #96	; 0x60
 80030f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100

0800310c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311c:	2b00      	cmp	r3, #0
 800311e:	db0a      	blt.n	8003136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	490c      	ldr	r1, [pc, #48]	; (8003158 <__NVIC_SetPriority+0x4c>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	0112      	lsls	r2, r2, #4
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	440b      	add	r3, r1
 8003130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003134:	e00a      	b.n	800314c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4908      	ldr	r1, [pc, #32]	; (800315c <__NVIC_SetPriority+0x50>)
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	3b04      	subs	r3, #4
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	440b      	add	r3, r1
 800314a:	761a      	strb	r2, [r3, #24]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f1c3 0307 	rsb	r3, r3, #7
 800317a:	2b04      	cmp	r3, #4
 800317c:	bf28      	it	cs
 800317e:	2304      	movcs	r3, #4
 8003180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3304      	adds	r3, #4
 8003186:	2b06      	cmp	r3, #6
 8003188:	d902      	bls.n	8003190 <NVIC_EncodePriority+0x30>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3b03      	subs	r3, #3
 800318e:	e000      	b.n	8003192 <NVIC_EncodePriority+0x32>
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	401a      	ands	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43d9      	mvns	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	4313      	orrs	r3, r2
         );
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3724      	adds	r7, #36	; 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d8:	d301      	bcc.n	80031de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031da:	2301      	movs	r3, #1
 80031dc:	e00f      	b.n	80031fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <SysTick_Config+0x40>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e6:	210f      	movs	r1, #15
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ec:	f7ff ff8e 	bl	800310c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <SysTick_Config+0x40>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <SysTick_Config+0x40>)
 80031f8:	2207      	movs	r2, #7
 80031fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000e010 	.word	0xe000e010

0800320c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fec9 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003230:	f7ff fee0 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 8003234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff90 	bl	8003160 <NVIC_EncodePriority>
 8003240:	4602      	mov	r2, r0
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff5f 	bl	800310c <__NVIC_SetPriority>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fed3 	bl	8003010 <__NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fee3 	bl	800304c <__NVIC_DisableIRQ>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff96 	bl	80031c8 <SysTick_Config>
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff feed 	bl	8003094 <__NVIC_SetPendingIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fefd 	bl	80030d0 <__NVIC_ClearPendingIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e04f      	b.n	8003390 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d008      	beq.n	800330e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2204      	movs	r2, #4
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e040      	b.n	8003390 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 020e 	bic.w	r2, r2, #14
 800331c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f003 021c 	and.w	r2, r3, #28
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800335a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00c      	beq.n	800337e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003372:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800337c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d005      	beq.n	80033c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2204      	movs	r2, #4
 80033b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e047      	b.n	8003450 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 020e 	bic.w	r2, r2, #14
 80033ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 021c 	and.w	r2, r3, #28
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800340c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003424:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800342e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
    }
  }
  return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f003 031c 	and.w	r3, r3, #28
 800347a:	2204      	movs	r2, #4
 800347c:	409a      	lsls	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d026      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x7a>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d021      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0204 	bic.w	r2, r2, #4
 80034ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f003 021c 	and.w	r2, r3, #28
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2104      	movs	r1, #4
 80034bc:	fa01 f202 	lsl.w	r2, r1, r2
 80034c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d071      	beq.n	80035ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034d2:	e06c      	b.n	80035ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	f003 031c 	and.w	r3, r3, #28
 80034dc:	2202      	movs	r2, #2
 80034de:	409a      	lsls	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02e      	beq.n	8003546 <HAL_DMA_IRQHandler+0xec>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d029      	beq.n	8003546 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 020a 	bic.w	r2, r2, #10
 800350e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f003 021c 	and.w	r2, r3, #28
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	2102      	movs	r1, #2
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d038      	beq.n	80035ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003544:	e033      	b.n	80035ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f003 031c 	and.w	r3, r3, #28
 800354e:	2208      	movs	r2, #8
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02a      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x156>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d025      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 020e 	bic.w	r2, r2, #14
 8003572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	f003 021c 	and.w	r2, r3, #28
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
}
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c6:	e14c      	b.n	8003862 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2101      	movs	r1, #1
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 813e 	beq.w	800385c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d005      	beq.n	80035f8 <HAL_GPIO_Init+0x40>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d130      	bne.n	800365a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800362e:	2201      	movs	r2, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0201 	and.w	r2, r3, #1
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d017      	beq.n	8003696 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	2203      	movs	r2, #3
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d123      	bne.n	80036ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	08da      	lsrs	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3208      	adds	r2, #8
 80036aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	2203      	movs	r2, #3
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0203 	and.w	r2, r3, #3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8098 	beq.w	800385c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800372c:	4a54      	ldr	r2, [pc, #336]	; (8003880 <HAL_GPIO_Init+0x2c8>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	220f      	movs	r2, #15
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003756:	d019      	beq.n	800378c <HAL_GPIO_Init+0x1d4>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <HAL_GPIO_Init+0x2cc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_GPIO_Init+0x1d0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a49      	ldr	r2, [pc, #292]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00d      	beq.n	8003784 <HAL_GPIO_Init+0x1cc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a48      	ldr	r2, [pc, #288]	; (800388c <HAL_GPIO_Init+0x2d4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <HAL_GPIO_Init+0x1c8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a47      	ldr	r2, [pc, #284]	; (8003890 <HAL_GPIO_Init+0x2d8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_GPIO_Init+0x1c4>
 8003778:	2304      	movs	r3, #4
 800377a:	e008      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 800377c:	2307      	movs	r3, #7
 800377e:	e006      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 8003780:	2303      	movs	r3, #3
 8003782:	e004      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 8003784:	2302      	movs	r3, #2
 8003786:	e002      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_GPIO_Init+0x1d6>
 800378c:	2300      	movs	r3, #0
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	f002 0203 	and.w	r2, r2, #3
 8003794:	0092      	lsls	r2, r2, #2
 8003796:	4093      	lsls	r3, r2
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800379e:	4938      	ldr	r1, [pc, #224]	; (8003880 <HAL_GPIO_Init+0x2c8>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	3302      	adds	r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d0:	4a30      	ldr	r2, [pc, #192]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037d6:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037fa:	4a26      	ldr	r2, [pc, #152]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003826:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	43db      	mvns	r3, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_GPIO_Init+0x2dc>)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3301      	adds	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f aeab 	bne.w	80035c8 <HAL_GPIO_Init+0x10>
  }
}
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40010000 	.word	0x40010000
 8003884:	48000400 	.word	0x48000400
 8003888:	48000800 	.word	0x48000800
 800388c:	48000c00 	.word	0x48000c00
 8003890:	48001000 	.word	0x48001000
 8003894:	58000800 	.word	0x58000800

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038de:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd f8dc 	bl	8000aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	58000800 	.word	0x58000800

080038f8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_HSEM_IRQHandler+0x30>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_HSEM_IRQHandler+0x30>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	43db      	mvns	r3, r3
 800390c:	4906      	ldr	r1, [pc, #24]	; (8003928 <HAL_HSEM_IRQHandler+0x30>)
 800390e:	4013      	ands	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <HAL_HSEM_IRQHandler+0x30>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f807 	bl	800392c <HAL_HSEM_FreeCallback>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	58001500 	.word	0x58001500

0800392c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01e      	beq.n	8003990 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <HAL_IPCC_Init+0x60>)
 8003954:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe f93e 	bl	8001be4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003968:	68b8      	ldr	r0, [r7, #8]
 800396a:	f000 f85b 	bl	8003a24 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f82c 	bl	80039d8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800398e:	e001      	b.n	8003994 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	58000c00 	.word	0x58000c00

080039a4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e00f      	b.n	8003a06 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <IPCC_SetDefaultCallbacks+0x44>)
 80039f0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3306      	adds	r3, #6
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <IPCC_SetDefaultCallbacks+0x48>)
 80039fe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3301      	adds	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d9ec      	bls.n	80039e6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	080039a5 	.word	0x080039a5
 8003a20:	080039bf 	.word	0x080039bf

08003a24 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003a38:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	223f      	movs	r2, #63	; 0x3f
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5a:	6013      	str	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	58000400 	.word	0x58000400

08003a6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	58000400 	.word	0x58000400

08003a88 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9a:	d101      	bne.n	8003aa0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_HSE_Enable>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_HSE_Disable>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_HSE_IsReady>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003afa:	d101      	bne.n	8003b00 <LL_RCC_HSE_IsReady+0x18>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <LL_RCC_HSE_IsReady+0x1a>
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <LL_RCC_HSI_Enable>:
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_HSI_Disable>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_HSI_IsReady>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5a:	d101      	bne.n	8003b60 <LL_RCC_HSI_IsReady+0x18>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <LL_RCC_HSI_IsReady+0x1a>
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_RCC_HSI_SetCalibTrimming>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_RCC_HSI48_Enable>:
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003bae:	bf00      	nop
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <LL_RCC_HSI48_Disable>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <LL_RCC_HSI48_IsReady>:
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d101      	bne.n	8003bf2 <LL_RCC_HSI48_IsReady+0x18>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <LL_RCC_HSI48_IsReady+0x1a>
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_RCC_LSE_Enable>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_RCC_LSE_Disable>:
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_RCC_LSE_EnableBypass>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c5a:	bf00      	nop
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_RCC_LSE_DisableBypass>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_RCC_LSE_IsReady>:
{
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d101      	bne.n	8003c9e <LL_RCC_LSE_IsReady+0x18>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <LL_RCC_LSE_IsReady+0x1a>
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <LL_RCC_LSI1_Enable>:
{
 8003caa:	b480      	push	{r7}
 8003cac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cc2:	bf00      	nop
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_RCC_LSI1_Disable>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_RCC_LSI1_IsReady>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d101      	bne.n	8003d06 <LL_RCC_LSI1_IsReady+0x18>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <LL_RCC_LSI1_IsReady+0x1a>
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_LSI2_Enable>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d22:	f043 0304 	orr.w	r3, r3, #4
 8003d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_RCC_LSI2_Disable>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_RCC_LSI2_IsReady>:
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d101      	bne.n	8003d6e <LL_RCC_LSI2_IsReady+0x18>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <LL_RCC_LSI2_IsReady+0x1a>
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_LSI2_SetTrimming>:
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_MSI_Enable>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6013      	str	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_MSI_Disable>:
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_RCC_MSI_IsReady>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d101      	bne.n	8003dfa <LL_RCC_MSI_IsReady+0x16>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_RCC_MSI_IsReady+0x18>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_RCC_MSI_SetRange>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_RCC_MSI_GetRange>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2bb0      	cmp	r3, #176	; 0xb0
 8003e44:	d901      	bls.n	8003e4a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003e46:	23b0      	movs	r3, #176	; 0xb0
 8003e48:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003e4a:	687b      	ldr	r3, [r7, #4]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_RCC_SetSysClkSource>:
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 0203 	bic.w	r2, r3, #3
 8003e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_GetSysClkSource>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_RCC_SetAHBPrescaler>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_C2_RCC_SetAHBPrescaler>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_SetAHB4Prescaler>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f26:	f023 020f 	bic.w	r2, r3, #15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_SetAPB1Prescaler>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <LL_RCC_SetAPB2Prescaler>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_RCC_GetAHBPrescaler>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_GetAHB4Prescaler>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_RCC_PLL_Enable>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <LL_RCC_PLL_Disable>:
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff8:	6013      	str	r3, [r2, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_RCC_PLL_IsReady>:
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004016:	d101      	bne.n	800401c <LL_RCC_PLL_IsReady+0x18>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <LL_RCC_PLL_IsReady+0x1a>
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_PLL_GetN>:
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_RCC_PLL_GetR>:
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_PLL_GetDivider>:
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_PLL_GetMainSource>:
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0303 	and.w	r3, r3, #3
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_RCC_IsActiveFlag_HPRE>:
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d101      	bne.n	80040a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c2:	d101      	bne.n	80040c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d101      	bne.n	80040ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_IsActiveFlag_PPRE1>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800410c:	d101      	bne.n	8004112 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004130:	d101      	bne.n	8004136 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b08d      	sub	sp, #52	; 0x34
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e37e      	b.n	8004854 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 8092 	beq.w	8004288 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004164:	f7ff fea1 	bl	8003eaa <LL_RCC_GetSysClkSource>
 8004168:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416a:	f7ff ff82 	bl	8004072 <LL_RCC_PLL_GetMainSource>
 800416e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_RCC_OscConfig+0x3e>
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d14c      	bne.n	8004216 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	2b01      	cmp	r3, #1
 8004180:	d149      	bne.n	8004216 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004182:	f7ff fe2f 	bl	8003de4 <LL_RCC_MSI_IsReady>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_OscConfig+0x54>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e35d      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800419c:	f7ff fe47 	bl	8003e2e <LL_RCC_MSI_GetRange>
 80041a0:	4603      	mov	r3, r0
 80041a2:	429c      	cmp	r4, r3
 80041a4:	d914      	bls.n	80041d0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fd16 	bl	8004bdc <RCC_SetFlashLatencyFromMSIRange>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e34c      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fe21 	bl	8003e06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fe45 	bl	8003e58 <LL_RCC_MSI_SetCalibTrimming>
 80041ce:	e013      	b.n	80041f8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fe16 	bl	8003e06 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fe3a 	bl	8003e58 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fcf7 	bl	8004bdc <RCC_SetFlashLatencyFromMSIRange>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e32d      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041f8:	f000 fcdc 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 80041fc:	4603      	mov	r3, r0
 80041fe:	4ab3      	ldr	r2, [pc, #716]	; (80044cc <HAL_RCC_OscConfig+0x388>)
 8004200:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004202:	4bb3      	ldr	r3, [pc, #716]	; (80044d0 <HAL_RCC_OscConfig+0x38c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fe52 	bl	8002eb0 <HAL_InitTick>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d039      	beq.n	8004286 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e31e      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01e      	beq.n	800425c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800421e:	f7ff fdc3 	bl	8003da8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004222:	f7fe fe93 	bl	8002f4c <HAL_GetTick>
 8004226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800422a:	f7fe fe8f 	bl	8002f4c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e30b      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800423c:	f7ff fdd2 	bl	8003de4 <LL_RCC_MSI_IsReady>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f1      	beq.n	800422a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fddb 	bl	8003e06 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fdff 	bl	8003e58 <LL_RCC_MSI_SetCalibTrimming>
 800425a:	e015      	b.n	8004288 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800425c:	f7ff fdb3 	bl	8003dc6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004260:	f7fe fe74 	bl	8002f4c <HAL_GetTick>
 8004264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004268:	f7fe fe70 	bl	8002f4c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e2ec      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800427a:	f7ff fdb3 	bl	8003de4 <LL_RCC_MSI_IsReady>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f1      	bne.n	8004268 <HAL_RCC_OscConfig+0x124>
 8004284:	e000      	b.n	8004288 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004286:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d04e      	beq.n	8004332 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004294:	f7ff fe09 	bl	8003eaa <LL_RCC_GetSysClkSource>
 8004298:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800429a:	f7ff feea 	bl	8004072 <LL_RCC_PLL_GetMainSource>
 800429e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d005      	beq.n	80042b2 <HAL_RCC_OscConfig+0x16e>
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	2b0c      	cmp	r3, #12
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d10a      	bne.n	80042c8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b2:	f7ff fc19 	bl	8003ae8 <LL_RCC_HSE_IsReady>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d039      	beq.n	8004330 <HAL_RCC_OscConfig+0x1ec>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d135      	bne.n	8004330 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e2c5      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_OscConfig+0x194>
 80042d2:	f7ff fbeb 	bl	8003aac <LL_RCC_HSE_Enable>
 80042d6:	e001      	b.n	80042dc <HAL_RCC_OscConfig+0x198>
 80042d8:	f7ff fbf7 	bl	8003aca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fe fe32 	bl	8002f4c <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fe fe2e 	bl	8002f4c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e2aa      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80042fe:	f7ff fbf3 	bl	8003ae8 <LL_RCC_HSE_IsReady>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f1      	beq.n	80042ec <HAL_RCC_OscConfig+0x1a8>
 8004308:	e013      	b.n	8004332 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe fe1f 	bl	8002f4c <HAL_GetTick>
 800430e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004312:	f7fe fe1b 	bl	8002f4c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b64      	cmp	r3, #100	; 0x64
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e297      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004324:	f7ff fbe0 	bl	8003ae8 <LL_RCC_HSE_IsReady>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f1      	bne.n	8004312 <HAL_RCC_OscConfig+0x1ce>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d051      	beq.n	80043e2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433e:	f7ff fdb4 	bl	8003eaa <LL_RCC_GetSysClkSource>
 8004342:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004344:	f7ff fe95 	bl	8004072 <LL_RCC_PLL_GetMainSource>
 8004348:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d005      	beq.n	800435c <HAL_RCC_OscConfig+0x218>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d113      	bne.n	800437e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d110      	bne.n	800437e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800435c:	f7ff fbf4 	bl	8003b48 <LL_RCC_HSI_IsReady>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x22e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e270      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fbf8 	bl	8003b6c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800437c:	e031      	b.n	80043e2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d019      	beq.n	80043ba <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004386:	f7ff fbc1 	bl	8003b0c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fe fddf 	bl	8002f4c <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004392:	f7fe fddb 	bl	8002f4c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e257      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80043a4:	f7ff fbd0 	bl	8003b48 <LL_RCC_HSI_IsReady>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f1      	beq.n	8004392 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fbda 	bl	8003b6c <LL_RCC_HSI_SetCalibTrimming>
 80043b8:	e013      	b.n	80043e2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	f7ff fbb6 	bl	8003b2a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fe fdc5 	bl	8002f4c <HAL_GetTick>
 80043c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fe fdc1 	bl	8002f4c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e23d      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80043d8:	f7ff fbb6 	bl	8003b48 <LL_RCC_HSI_IsReady>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f1      	bne.n	80043c6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80a3 	beq.w	8004542 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d076      	beq.n	80044f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d046      	beq.n	800449e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004410:	f7ff fc6d 	bl	8003cee <LL_RCC_LSI1_IsReady>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d113      	bne.n	8004442 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800441a:	f7ff fc46 	bl	8003caa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800441e:	f7fe fd95 	bl	8002f4c <HAL_GetTick>
 8004422:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004426:	f7fe fd91 	bl	8002f4c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e20d      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004438:	f7ff fc59 	bl	8003cee <LL_RCC_LSI1_IsReady>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f1      	beq.n	8004426 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004442:	f7ff fc66 	bl	8003d12 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fe fd81 	bl	8002f4c <HAL_GetTick>
 800444a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800444e:	f7fe fd7d 	bl	8002f4c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b03      	cmp	r3, #3
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e1f9      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004460:	f7ff fc79 	bl	8003d56 <LL_RCC_LSI2_IsReady>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f1      	beq.n	800444e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fc83 	bl	8003d7a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004474:	f7ff fc2a 	bl	8003ccc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe fd68 	bl	8002f4c <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004480:	f7fe fd64 	bl	8002f4c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e1e0      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004492:	f7ff fc2c 	bl	8003cee <LL_RCC_LSI1_IsReady>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f1      	bne.n	8004480 <HAL_RCC_OscConfig+0x33c>
 800449c:	e051      	b.n	8004542 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800449e:	f7ff fc04 	bl	8003caa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fe fd53 	bl	8002f4c <HAL_GetTick>
 80044a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044aa:	f7fe fd4f 	bl	8002f4c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1cb      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044bc:	f7ff fc17 	bl	8003cee <LL_RCC_LSI1_IsReady>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f1      	beq.n	80044aa <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80044c6:	f7ff fc35 	bl	8003d34 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044ca:	e00c      	b.n	80044e6 <HAL_RCC_OscConfig+0x3a2>
 80044cc:	20000030 	.word	0x20000030
 80044d0:	20000034 	.word	0x20000034
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044d4:	f7fe fd3a 	bl	8002f4c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e1b6      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044e6:	f7ff fc36 	bl	8003d56 <LL_RCC_LSI2_IsReady>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f1      	bne.n	80044d4 <HAL_RCC_OscConfig+0x390>
 80044f0:	e027      	b.n	8004542 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80044f2:	f7ff fc1f 	bl	8003d34 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fe fd29 	bl	8002f4c <HAL_GetTick>
 80044fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044fe:	f7fe fd25 	bl	8002f4c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e1a1      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004510:	f7ff fc21 	bl	8003d56 <LL_RCC_LSI2_IsReady>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f1      	bne.n	80044fe <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800451a:	f7ff fbd7 	bl	8003ccc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fe fd15 	bl	8002f4c <HAL_GetTick>
 8004522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004526:	f7fe fd11 	bl	8002f4c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e18d      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004538:	f7ff fbd9 	bl	8003cee <LL_RCC_LSI1_IsReady>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f1      	bne.n	8004526 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d05b      	beq.n	8004606 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454e:	4bb5      	ldr	r3, [pc, #724]	; (8004824 <HAL_RCC_OscConfig+0x6e0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d114      	bne.n	8004584 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800455a:	f7ff fa77 	bl	8003a4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455e:	f7fe fcf5 	bl	8002f4c <HAL_GetTick>
 8004562:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004566:	f7fe fcf1 	bl	8002f4c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e16d      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004578:	4baa      	ldr	r3, [pc, #680]	; (8004824 <HAL_RCC_OscConfig+0x6e0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d102      	bne.n	8004592 <HAL_RCC_OscConfig+0x44e>
 800458c:	f7ff fb37 	bl	8003bfe <LL_RCC_LSE_Enable>
 8004590:	e00c      	b.n	80045ac <HAL_RCC_OscConfig+0x468>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b05      	cmp	r3, #5
 8004598:	d104      	bne.n	80045a4 <HAL_RCC_OscConfig+0x460>
 800459a:	f7ff fb52 	bl	8003c42 <LL_RCC_LSE_EnableBypass>
 800459e:	f7ff fb2e 	bl	8003bfe <LL_RCC_LSE_Enable>
 80045a2:	e003      	b.n	80045ac <HAL_RCC_OscConfig+0x468>
 80045a4:	f7ff fb3c 	bl	8003c20 <LL_RCC_LSE_Disable>
 80045a8:	f7ff fb5c 	bl	8003c64 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d014      	beq.n	80045de <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fe fcca 	bl	8002f4c <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fe fcc6 	bl	8002f4c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e140      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80045d2:	f7ff fb58 	bl	8003c86 <LL_RCC_LSE_IsReady>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ef      	beq.n	80045bc <HAL_RCC_OscConfig+0x478>
 80045dc:	e013      	b.n	8004606 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fe fcb5 	bl	8002f4c <HAL_GetTick>
 80045e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fe fcb1 	bl	8002f4c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e12b      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80045fc:	f7ff fb43 	bl	8003c86 <LL_RCC_LSE_IsReady>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ef      	bne.n	80045e6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02c      	beq.n	800466c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d014      	beq.n	8004644 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800461a:	f7ff fabc 	bl	8003b96 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461e:	f7fe fc95 	bl	8002f4c <HAL_GetTick>
 8004622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004626:	f7fe fc91 	bl	8002f4c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e10d      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004638:	f7ff facf 	bl	8003bda <LL_RCC_HSI48_IsReady>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f1      	beq.n	8004626 <HAL_RCC_OscConfig+0x4e2>
 8004642:	e013      	b.n	800466c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004644:	f7ff fab8 	bl	8003bb8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fe fc80 	bl	8002f4c <HAL_GetTick>
 800464c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004650:	f7fe fc7c 	bl	8002f4c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0f8      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004662:	f7ff faba 	bl	8003bda <LL_RCC_HSI48_IsReady>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f1      	bne.n	8004650 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80ee 	beq.w	8004852 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004676:	f7ff fc18 	bl	8003eaa <LL_RCC_GetSysClkSource>
 800467a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800467c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	2b02      	cmp	r3, #2
 800468a:	f040 80af 	bne.w	80047ec <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0203 	and.w	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	429a      	cmp	r2, r3
 800469a:	d123      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d11c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d114      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d10d      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d106      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d05d      	beq.n	80047a0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	d058      	beq.n	800479c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0ab      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046fc:	f7ff fc73 	bl	8003fe6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004700:	f7fe fc24 	bl	8002f4c <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004708:	f7fe fc20 	bl	8002f4c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e09c      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ef      	bne.n	8004708 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_RCC_OscConfig+0x6e4>)
 8004730:	4013      	ands	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800473a:	4311      	orrs	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004740:	0212      	lsls	r2, r2, #8
 8004742:	4311      	orrs	r1, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004748:	4311      	orrs	r1, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800474e:	4311      	orrs	r1, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004754:	430a      	orrs	r2, r1
 8004756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800475a:	4313      	orrs	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800475e:	f7ff fc33 	bl	8003fc8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004772:	f7fe fbeb 	bl	8002f4c <HAL_GetTick>
 8004776:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477a:	f7fe fbe7 	bl	8002f4c <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e063      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0ef      	beq.n	800477a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800479a:	e05a      	b.n	8004852 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e059      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d151      	bne.n	8004852 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047ae:	f7ff fc0b 	bl	8003fc8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047c2:	f7fe fbc3 	bl	8002f4c <HAL_GetTick>
 80047c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fe fbbf 	bl	8002f4c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e03b      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ef      	beq.n	80047ca <HAL_RCC_OscConfig+0x686>
 80047ea:	e032      	b.n	8004852 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d02d      	beq.n	800484e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f2:	f7ff fbf8 	bl	8003fe6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004800:	f023 0303 	bic.w	r3, r3, #3
 8004804:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004810:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004818:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fe fb97 	bl	8002f4c <HAL_GetTick>
 800481e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004820:	e00d      	b.n	800483e <HAL_RCC_OscConfig+0x6fa>
 8004822:	bf00      	nop
 8004824:	58000400 	.word	0x58000400
 8004828:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fe fb8e 	bl	8002f4c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ef      	bne.n	800482c <HAL_RCC_OscConfig+0x6e8>
 800484c:	e001      	b.n	8004852 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3734      	adds	r7, #52	; 0x34
 8004858:	46bd      	mov	sp, r7
 800485a:	bd90      	pop	{r4, r7, pc}

0800485c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e12d      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b98      	ldr	r3, [pc, #608]	; (8004ad4 <HAL_RCC_ClockConfig+0x278>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d91b      	bls.n	80048b6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b95      	ldr	r3, [pc, #596]	; (8004ad4 <HAL_RCC_ClockConfig+0x278>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 0207 	bic.w	r2, r3, #7
 8004886:	4993      	ldr	r1, [pc, #588]	; (8004ad4 <HAL_RCC_ClockConfig+0x278>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488e:	f7fe fb5d 	bl	8002f4c <HAL_GetTick>
 8004892:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004896:	f7fe fb59 	bl	8002f4c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e111      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a8:	4b8a      	ldr	r3, [pc, #552]	; (8004ad4 <HAL_RCC_ClockConfig+0x278>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d1ef      	bne.n	8004896 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fafb 	bl	8003ec2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048cc:	f7fe fb3e 	bl	8002f4c <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048d4:	f7fe fb3a 	bl	8002f4c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0f2      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048e6:	f7ff fbd0 	bl	800408a <LL_RCC_IsActiveFlag_HPRE>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f1      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d016      	beq.n	800492a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff faf2 	bl	8003eea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004906:	f7fe fb21 	bl	8002f4c <HAL_GetTick>
 800490a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800490e:	f7fe fb1d 	bl	8002f4c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0d5      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004920:	f7ff fbc5 	bl	80040ae <LL_RCC_IsActiveFlag_C2HPRE>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f1      	beq.n	800490e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d016      	beq.n	8004964 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff faeb 	bl	8003f16 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004940:	f7fe fb04 	bl	8002f4c <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004948:	f7fe fb00 	bl	8002f4c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0b8      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800495a:	f7ff fbbb 	bl	80040d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f1      	beq.n	8004948 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d016      	beq.n	800499e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fae5 	bl	8003f44 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800497a:	f7fe fae7 	bl	8002f4c <HAL_GetTick>
 800497e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004982:	f7fe fae3 	bl	8002f4c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e09b      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004994:	f7ff fbb1 	bl	80040fa <LL_RCC_IsActiveFlag_PPRE1>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f1      	beq.n	8004982 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d017      	beq.n	80049da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fadb 	bl	8003f6c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049b6:	f7fe fac9 	bl	8002f4c <HAL_GetTick>
 80049ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049be:	f7fe fac5 	bl	8002f4c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e07d      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049d0:	f7ff fba5 	bl	800411e <LL_RCC_IsActiveFlag_PPRE2>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f1      	beq.n	80049be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d043      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d106      	bne.n	80049fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80049ee:	f7ff f87b 	bl	8003ae8 <LL_RCC_HSE_IsReady>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d11e      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e067      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a04:	f7ff fafe 	bl	8004004 <LL_RCC_PLL_IsReady>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d113      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e05c      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a1a:	f7ff f9e3 	bl	8003de4 <LL_RCC_MSI_IsReady>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d108      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e051      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a28:	f7ff f88e 	bl	8003b48 <LL_RCC_HSI_IsReady>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e04a      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fa21 	bl	8003e82 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fe fa84 	bl	8002f4c <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fe fa80 	bl	8002f4c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e036      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	f7ff fa24 	bl	8003eaa <LL_RCC_GetSysClkSource>
 8004a62:	4602      	mov	r2, r0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d1ec      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6e:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <HAL_RCC_ClockConfig+0x278>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d21b      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7c:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <HAL_RCC_ClockConfig+0x278>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 0207 	bic.w	r2, r3, #7
 8004a84:	4913      	ldr	r1, [pc, #76]	; (8004ad4 <HAL_RCC_ClockConfig+0x278>)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fe fa5e 	bl	8002f4c <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a94:	f7fe fa5a 	bl	8002f4c <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e012      	b.n	8004acc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_RCC_ClockConfig+0x278>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1ef      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ab4:	f000 f87e 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <HAL_RCC_ClockConfig+0x27c>)
 8004abc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004abe:	f7fe fa51 	bl	8002f64 <HAL_GetTickPrio>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe f9f3 	bl	8002eb0 <HAL_InitTick>
 8004aca:	4603      	mov	r3, r0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	58004000 	.word	0x58004000
 8004ad8:	20000030 	.word	0x20000030

08004adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004adc:	b590      	push	{r4, r7, lr}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ae2:	f7ff f9e2 	bl	8003eaa <LL_RCC_GetSysClkSource>
 8004ae6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004aee:	f7ff f99e 	bl	8003e2e <LL_RCC_MSI_GetRange>
 8004af2:	4603      	mov	r3, r0
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	4a2b      	ldr	r2, [pc, #172]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e04b      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d102      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b0a:	4b28      	ldr	r3, [pc, #160]	; (8004bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e045      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d10a      	bne.n	8004b2c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b16:	f7fe ffb7 	bl	8003a88 <LL_RCC_HSE_IsEnabledDiv2>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d102      	bne.n	8004b26 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b20:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e03a      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004b26:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e037      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004b2c:	f7ff faa1 	bl	8004072 <LL_RCC_PLL_GetMainSource>
 8004b30:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d003      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x64>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d003      	beq.n	8004b46 <HAL_RCC_GetSysClockFreq+0x6a>
 8004b3e:	e00d      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004b40:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b42:	60bb      	str	r3, [r7, #8]
        break;
 8004b44:	e015      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b46:	f7fe ff9f 	bl	8003a88 <LL_RCC_HSE_IsEnabledDiv2>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d102      	bne.n	8004b56 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b50:	4b16      	ldr	r3, [pc, #88]	; (8004bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b52:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b54:	e00d      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b56:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b58:	60bb      	str	r3, [r7, #8]
        break;
 8004b5a:	e00a      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b5c:	f7ff f967 	bl	8003e2e <LL_RCC_MSI_GetRange>
 8004b60:	4603      	mov	r3, r0
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	4a0f      	ldr	r2, [pc, #60]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6e:	60bb      	str	r3, [r7, #8]
        break;
 8004b70:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004b72:	f7ff fa59 	bl	8004028 <LL_RCC_PLL_GetN>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	fb03 f402 	mul.w	r4, r3, r2
 8004b7e:	f7ff fa6c 	bl	800405a <LL_RCC_PLL_GetDivider>
 8004b82:	4603      	mov	r3, r0
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	3301      	adds	r3, #1
 8004b88:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b8c:	f7ff fa59 	bl	8004042 <LL_RCC_PLL_GetR>
 8004b90:	4603      	mov	r3, r0
 8004b92:	0f5b      	lsrs	r3, r3, #29
 8004b94:	3301      	adds	r3, #1
 8004b96:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd90      	pop	{r4, r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	08008bac 	.word	0x08008bac
 8004bac:	00f42400 	.word	0x00f42400
 8004bb0:	01e84800 	.word	0x01e84800

08004bb4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb4:	b598      	push	{r3, r4, r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004bb8:	f7ff ff90 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	f7ff f9e9 	bl	8003f94 <LL_RCC_GetAHBPrescaler>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	4a03      	ldr	r2, [pc, #12]	; (8004bd8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd98      	pop	{r3, r4, r7, pc}
 8004bd8:	08008b6c 	.word	0x08008b6c

08004bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2bb0      	cmp	r3, #176	; 0xb0
 8004be8:	d903      	bls.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e007      	b.n	8004c02 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004c02:	f7ff f9d3 	bl	8003fac <LL_RCC_GetAHB4Prescaler>
 8004c06:	4603      	mov	r3, r0
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	0c9c      	lsrs	r4, r3, #18
 8004c26:	f7fe ff21 	bl	8003a6c <HAL_PWREx_GetVoltageRange>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f000 f80c 	bl	8004c4c <RCC_SetFlashLatency>
 8004c34:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd90      	pop	{r4, r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	08008bac 	.word	0x08008bac
 8004c44:	08008b6c 	.word	0x08008b6c
 8004c48:	431bde83 	.word	0x431bde83

08004c4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b093      	sub	sp, #76	; 0x4c
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c56:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <RCC_SetFlashLatency+0xf0>)
 8004c58:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c62:	4a37      	ldr	r2, [pc, #220]	; (8004d40 <RCC_SetFlashLatency+0xf4>)
 8004c64:	f107 031c 	add.w	r3, r7, #28
 8004c68:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c6e:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <RCC_SetFlashLatency+0xf8>)
 8004c70:	f107 040c 	add.w	r4, r7, #12
 8004c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d11c      	bne.n	8004cc0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8a:	e015      	b.n	8004cb8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c94:	4413      	add	r3, r2
 8004c96:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d808      	bhi.n	8004cb2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ca8:	4413      	add	r3, r2
 8004caa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004cae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004cb0:	e022      	b.n	8004cf8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d9e6      	bls.n	8004c8c <RCC_SetFlashLatency+0x40>
 8004cbe:	e01b      	b.n	8004cf8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc4:	e015      	b.n	8004cf2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004cce:	4413      	add	r3, r2
 8004cd0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d808      	bhi.n	8004cec <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ce8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004cea:	e005      	b.n	8004cf8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cee:	3301      	adds	r3, #1
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d9e6      	bls.n	8004cc6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <RCC_SetFlashLatency+0xfc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f023 0207 	bic.w	r2, r3, #7
 8004d00:	4911      	ldr	r1, [pc, #68]	; (8004d48 <RCC_SetFlashLatency+0xfc>)
 8004d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d08:	f7fe f920 	bl	8002f4c <HAL_GetTick>
 8004d0c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d0e:	e008      	b.n	8004d22 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d10:	f7fe f91c 	bl	8002f4c <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e007      	b.n	8004d32 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <RCC_SetFlashLatency+0xfc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1ef      	bne.n	8004d10 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	374c      	adds	r7, #76	; 0x4c
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd90      	pop	{r4, r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	080089cc 	.word	0x080089cc
 8004d40:	080089dc 	.word	0x080089dc
 8004d44:	080089e8 	.word	0x080089e8
 8004d48:	58004000 	.word	0x58004000

08004d4c <LL_RCC_LSE_IsEnabled>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <LL_RCC_LSE_IsEnabled+0x18>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <LL_RCC_LSE_IsEnabled+0x1a>
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_RCC_LSE_IsReady>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d101      	bne.n	8004d88 <LL_RCC_LSE_IsReady+0x18>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <LL_RCC_LSE_IsReady+0x1a>
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_RCC_SetRFWKPClockSource>:
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_RCC_SetSMPSClockSource>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	f023 0203 	bic.w	r2, r3, #3
 8004dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_RCC_SetSMPSPrescaler>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_RCC_SetUSARTClockSource>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f023 0203 	bic.w	r2, r3, #3
 8004e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_RCC_SetLPUARTClockSource>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_RCC_SetI2CClockSource>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e80:	43db      	mvns	r3, r3
 8004e82:	401a      	ands	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <LL_RCC_SetLPTIMClockSource>:
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	041b      	lsls	r3, r3, #16
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	401a      	ands	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_SetSAIClockSource>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <LL_RCC_SetRNGClockSource>:
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <LL_RCC_SetCLK48ClockSource>:
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <LL_RCC_SetUSBClockSource>:
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff ffe3 	bl	8004f2e <LL_RCC_SetCLK48ClockSource>
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <LL_RCC_SetADCClockSource>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <LL_RCC_SetRTCClockSource>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_RCC_GetRTCClockSource>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <LL_RCC_ForceBackupDomainReset>:
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ffa:	bf00      	nop
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_RCC_PLLSAI1_Enable>:
{
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005034:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005038:	6013      	str	r3, [r2, #0]
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <LL_RCC_PLLSAI1_Disable>:
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005056:	6013      	str	r3, [r2, #0]
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <LL_RCC_PLLSAI1_IsReady>:
{
 8005062:	b480      	push	{r7}
 8005064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005074:	d101      	bne.n	800507a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b088      	sub	sp, #32
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800508e:	2300      	movs	r3, #0
 8005090:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005092:	2300      	movs	r3, #0
 8005094:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d034      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050aa:	d021      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80050ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050b0:	d81b      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050b6:	d01d      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80050b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050bc:	d815      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x54>
 80050c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c6:	d110      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80050d8:	e00d      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3304      	adds	r3, #4
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f947 	bl	8005372 <RCCEx_PLLSAI1_ConfigNP>
 80050e4:	4603      	mov	r3, r0
 80050e6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050e8:	e005      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	77fb      	strb	r3, [r7, #31]
        break;
 80050ee:	e002      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050f0:	bf00      	nop
 80050f2:	e000      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f6:	7ffb      	ldrb	r3, [r7, #31]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fee8 	bl	8004ed6 <LL_RCC_SetSAIClockSource>
 8005106:	e001      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	7ffb      	ldrb	r3, [r7, #31]
 800510a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005114:	2b00      	cmp	r3, #0
 8005116:	d046      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005118:	f7ff ff56 	bl	8004fc8 <LL_RCC_GetRTCClockSource>
 800511c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d03c      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005128:	f7fe fc90 	bl	8003a4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff ff30 	bl	8004f9c <LL_RCC_SetRTCClockSource>
 800513c:	e02e      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005148:	f7ff ff4b 	bl	8004fe2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800514c:	f7ff ff5a 	bl	8005004 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800515e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005168:	f7ff fdf0 	bl	8004d4c <LL_RCC_LSE_IsEnabled>
 800516c:	4603      	mov	r3, r0
 800516e:	2b01      	cmp	r3, #1
 8005170:	d114      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005172:	f7fd feeb 	bl	8002f4c <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005178:	e00b      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fd fee7 	bl	8002f4c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	; 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d902      	bls.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	77fb      	strb	r3, [r7, #31]
              break;
 8005190:	e004      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005192:	f7ff fded 	bl	8004d70 <LL_RCC_LSE_IsReady>
 8005196:	4603      	mov	r3, r0
 8005198:	2b01      	cmp	r3, #1
 800519a:	d1ee      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800519c:	7ffb      	ldrb	r3, [r7, #31]
 800519e:	77bb      	strb	r3, [r7, #30]
 80051a0:	e001      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a2:	7ffb      	ldrb	r3, [r7, #31]
 80051a4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fe2a 	bl	8004e10 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fe35 	bl	8004e3c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fe5d 	bl	8004ea2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fe52 	bl	8004ea2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fe2a 	bl	8004e68 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fe1f 	bl	8004e68 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d022      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fe8d 	bl	8004f5a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005248:	d107      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005258:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005262:	d10b      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f8dd 	bl	8005428 <RCCEx_PLLSAI1_ConfigNQ>
 800526e:	4603      	mov	r3, r0
 8005270:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005272:	7ffb      	ldrb	r3, [r7, #31]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005278:	7ffb      	ldrb	r3, [r7, #31]
 800527a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02b      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d008      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529a:	d003      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fe2a 	bl	8004f02 <LL_RCC_SetRNGClockSource>
 80052ae:	e00a      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	2000      	movs	r0, #0
 80052bc:	f7ff fe21 	bl	8004f02 <LL_RCC_SetRNGClockSource>
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff fe34 	bl	8004f2e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80052ce:	d107      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d022      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fe3d 	bl	8004f70 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fe:	d107      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800530a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005318:	d10b      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f8dd 	bl	80054de <RCCEx_PLLSAI1_ConfigNR>
 8005324:	4603      	mov	r3, r0
 8005326:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005328:	7ffb      	ldrb	r3, [r7, #31]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800532e:	7ffb      	ldrb	r3, [r7, #31]
 8005330:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff fd26 	bl	8004d94 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fd45 	bl	8004de8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fd2c 	bl	8004dc0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005368:	7fbb      	ldrb	r3, [r7, #30]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800537e:	f7ff fe61 	bl	8005044 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005382:	f7fd fde3 	bl	8002f4c <HAL_GetTick>
 8005386:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005388:	e009      	b.n	800539e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800538a:	f7fd fddf 	bl	8002f4c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d902      	bls.n	800539e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	73fb      	strb	r3, [r7, #15]
      break;
 800539c:	e004      	b.n	80053a8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800539e:	f7ff fe60 	bl	8005062 <LL_RCC_PLLSAI1_IsReady>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1f0      	bne.n	800538a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d137      	bne.n	800541e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80053c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053d8:	4313      	orrs	r3, r2
 80053da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80053dc:	f7ff fe23 	bl	8005026 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e0:	f7fd fdb4 	bl	8002f4c <HAL_GetTick>
 80053e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053e6:	e009      	b.n	80053fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053e8:	f7fd fdb0 	bl	8002f4c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d902      	bls.n	80053fc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	73fb      	strb	r3, [r7, #15]
        break;
 80053fa:	e004      	b.n	8005406 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053fc:	f7ff fe31 	bl	8005062 <LL_RCC_PLLSAI1_IsReady>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d1f0      	bne.n	80053e8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d108      	bne.n	800541e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800540c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541a:	4313      	orrs	r3, r2
 800541c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005434:	f7ff fe06 	bl	8005044 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005438:	f7fd fd88 	bl	8002f4c <HAL_GetTick>
 800543c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800543e:	e009      	b.n	8005454 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005440:	f7fd fd84 	bl	8002f4c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d902      	bls.n	8005454 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	73fb      	strb	r3, [r7, #15]
      break;
 8005452:	e004      	b.n	800545e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005454:	f7ff fe05 	bl	8005062 <LL_RCC_PLLSAI1_IsReady>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d137      	bne.n	80054d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005478:	4313      	orrs	r3, r2
 800547a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800547c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800548e:	4313      	orrs	r3, r2
 8005490:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005492:	f7ff fdc8 	bl	8005026 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005496:	f7fd fd59 	bl	8002f4c <HAL_GetTick>
 800549a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800549c:	e009      	b.n	80054b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800549e:	f7fd fd55 	bl	8002f4c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d902      	bls.n	80054b2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	73fb      	strb	r3, [r7, #15]
        break;
 80054b0:	e004      	b.n	80054bc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054b2:	f7ff fdd6 	bl	8005062 <LL_RCC_PLLSAI1_IsReady>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d1f0      	bne.n	800549e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d108      	bne.n	80054d4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80054c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054d0:	4313      	orrs	r3, r2
 80054d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054ea:	f7ff fdab 	bl	8005044 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054ee:	f7fd fd2d 	bl	8002f4c <HAL_GetTick>
 80054f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054f4:	e009      	b.n	800550a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054f6:	f7fd fd29 	bl	8002f4c <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d902      	bls.n	800550a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	73fb      	strb	r3, [r7, #15]
      break;
 8005508:	e004      	b.n	8005514 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800550a:	f7ff fdaa 	bl	8005062 <LL_RCC_PLLSAI1_IsReady>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1f0      	bne.n	80054f6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d137      	bne.n	800558a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800552e:	4313      	orrs	r3, r2
 8005530:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005544:	4313      	orrs	r3, r2
 8005546:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005548:	f7ff fd6d 	bl	8005026 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554c:	f7fd fcfe 	bl	8002f4c <HAL_GetTick>
 8005550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005552:	e009      	b.n	8005568 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005554:	f7fd fcfa 	bl	8002f4c <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d902      	bls.n	8005568 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	73fb      	strb	r3, [r7, #15]
        break;
 8005566:	e004      	b.n	8005572 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005568:	f7ff fd7b 	bl	8005062 <LL_RCC_PLLSAI1_IsReady>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d1f0      	bne.n	8005554 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d108      	bne.n	800558a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e027      	b.n	80055f6 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	7a5b      	ldrb	r3, [r3, #9]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc fb38 	bl	8001c2c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f023 0120 	bic.w	r1, r3, #32
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0204 	orr.w	r2, r2, #4
 80055e6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e090      	b.n	8005732 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d106      	bne.n	800562a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fc fb2b 	bl	8001c80 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	22ca      	movs	r2, #202	; 0xca
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2253      	movs	r2, #83	; 0x53
 8005640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f89f 	bl	8005786 <RTC_EnterInitMode>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	22ff      	movs	r2, #255	; 0xff
 8005654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2204      	movs	r2, #4
 800565a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e067      	b.n	8005732 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005674:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6899      	ldr	r1, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68d2      	ldr	r2, [r2, #12]
 800569c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6919      	ldr	r1, [r3, #16]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	041a      	lsls	r2, r3, #16
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056c0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0203 	bic.w	r2, r2, #3
 80056d0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d113      	bne.n	8005720 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f81e 	bl	800573a <HAL_RTC_WaitForSynchro>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00d      	beq.n	8005720 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	22ff      	movs	r2, #255	; 0xff
 800570a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2204      	movs	r2, #4
 8005710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e008      	b.n	8005732 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	22ff      	movs	r2, #255	; 0xff
 8005726:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005730:	2300      	movs	r3, #0
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005750:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005752:	f7fd fbfb 	bl	8002f4c <HAL_GetTick>
 8005756:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005758:	e009      	b.n	800576e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800575a:	f7fd fbf7 	bl	8002f4c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005768:	d901      	bls.n	800576e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e007      	b.n	800577e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ee      	beq.n	800575a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d119      	bne.n	80057d0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057a4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80057a6:	f7fd fbd1 	bl	8002f4c <HAL_GetTick>
 80057aa:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057ac:	e009      	b.n	80057c2 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80057ae:	f7fd fbcd 	bl	8002f4c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057bc:	d901      	bls.n	80057c2 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e007      	b.n	80057d2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ee      	beq.n	80057ae <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e0a8      	b.n	8005948 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	22ca      	movs	r2, #202	; 0xca
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2253      	movs	r2, #83	; 0x53
 8005814:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005824:	f7fd fb92 	bl	8002f4c <HAL_GetTick>
 8005828:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800582a:	e015      	b.n	8005858 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800582c:	f7fd fb8e 	bl	8002f4c <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800583a:	d90d      	bls.n	8005858 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	22ff      	movs	r2, #255	; 0xff
 8005842:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2203      	movs	r2, #3
 8005848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e077      	b.n	8005948 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e2      	bne.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005874:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	b2da      	uxtb	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005886:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005888:	f7fd fb60 	bl	8002f4c <HAL_GetTick>
 800588c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800588e:	e015      	b.n	80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005890:	f7fd fb5c 	bl	8002f4c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589e:	d90d      	bls.n	80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	22ff      	movs	r2, #255	; 0xff
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2203      	movs	r2, #3
 80058ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e045      	b.n	8005948 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0e2      	beq.n	8005890 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0207 	bic.w	r2, r2, #7
 80058e0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6899      	ldr	r1, [r3, #8]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80058f2:	4b17      	ldr	r3, [pc, #92]	; (8005950 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f8:	4a15      	ldr	r2, [pc, #84]	; (8005950 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a12      	ldr	r2, [pc, #72]	; (8005950 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800590c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800592c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	58000800 	.word	0x58000800

08005954 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_RTCEx_EnableBypassShadow+0x16>
 8005966:	2302      	movs	r3, #2
 8005968:	e024      	b.n	80059b4 <HAL_RTCEx_EnableBypassShadow+0x60>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	22ca      	movs	r2, #202	; 0xca
 8005980:	625a      	str	r2, [r3, #36]	; 0x24
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2253      	movs	r2, #83	; 0x53
 8005988:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0220 	orr.w	r2, r2, #32
 8005998:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	22ff      	movs	r2, #255	; 0xff
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b0ba      	sub	sp, #232	; 0xe8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80059ee:	4013      	ands	r3, r2
 80059f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d11b      	bne.n	8005a34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d015      	beq.n	8005a34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 82d6 	beq.w	8005fd6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
      }
      return;
 8005a32:	e2d0      	b.n	8005fd6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 811f 	beq.w	8005c7c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a42:	4b8b      	ldr	r3, [pc, #556]	; (8005c70 <HAL_UART_IRQHandler+0x2b0>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a4e:	4b89      	ldr	r3, [pc, #548]	; (8005c74 <HAL_UART_IRQHandler+0x2b4>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8112 	beq.w	8005c7c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <HAL_UART_IRQHandler+0xc8>
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2201      	movs	r2, #1
 8005a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7e:	f043 0201 	orr.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xf8>
 8005a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aae:	f043 0204 	orr.w	r2, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d011      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x128>
 8005ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ade:	f043 0202 	orr.w	r2, r3, #2
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d017      	beq.n	8005b24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d105      	bne.n	8005b0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b04:	4b5a      	ldr	r3, [pc, #360]	; (8005c70 <HAL_UART_IRQHandler+0x2b0>)
 8005b06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2208      	movs	r2, #8
 8005b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b1a:	f043 0208 	orr.w	r2, r3, #8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <HAL_UART_IRQHandler+0x196>
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00c      	beq.n	8005b56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 823c 	beq.w	8005fda <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d013      	beq.n	8005b96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d105      	bne.n	8005b86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d005      	beq.n	8005bba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d04f      	beq.n	8005c5a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa2e 	bl	800601c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d141      	bne.n	8005c52 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1d9      	bne.n	8005bce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d013      	beq.n	8005c4a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c26:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <HAL_UART_IRQHandler+0x2b8>)
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fd fbb4 	bl	800339c <HAL_DMA_Abort_IT>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d017      	beq.n	8005c6a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005c44:	4610      	mov	r0, r2
 8005c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c48:	e00f      	b.n	8005c6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f9d0 	bl	8005ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	e00b      	b.n	8005c6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f9cc 	bl	8005ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c58:	e007      	b.n	8005c6a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9c8 	bl	8005ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005c68:	e1b7      	b.n	8005fda <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6a:	bf00      	nop
    return;
 8005c6c:	e1b5      	b.n	8005fda <HAL_UART_IRQHandler+0x61a>
 8005c6e:	bf00      	nop
 8005c70:	10000001 	.word	0x10000001
 8005c74:	04000120 	.word	0x04000120
 8005c78:	080060e9 	.word	0x080060e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	f040 814a 	bne.w	8005f1a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8143 	beq.w	8005f1a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 813c 	beq.w	8005f1a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb4:	2b40      	cmp	r3, #64	; 0x40
 8005cb6:	f040 80b5 	bne.w	8005e24 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8005cc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8187 	beq.w	8005fde <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	f080 817f 	bcs.w	8005fde <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ce6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 8086 	bne.w	8005e08 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1da      	bne.n	8005cfc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e1      	bne.n	8005d46 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e3      	bne.n	8005d82 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd8:	f023 0310 	bic.w	r3, r3, #16
 8005ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dea:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e4      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fd fa6b 	bl	80032de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f8f1 	bl	8006004 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e22:	e0dc      	b.n	8005fde <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80ce 	beq.w	8005fe2 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8005e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80c9 	beq.w	8005fe2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e72:	647b      	str	r3, [r7, #68]	; 0x44
 8005e74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e4      	bne.n	8005e50 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	623b      	str	r3, [r7, #32]
   return(result);
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eae:	633a      	str	r2, [r7, #48]	; 0x30
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e1      	bne.n	8005e86 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
 8005eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	69b9      	ldr	r1, [r7, #24]
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	617b      	str	r3, [r7, #20]
   return(result);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e4      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f876 	bl	8006004 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f18:	e063      	b.n	8005fe2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <HAL_UART_IRQHandler+0x584>
 8005f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f914 	bl	800616a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f42:	e051      	b.n	8005fe8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d014      	beq.n	8005f7a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d03a      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
    }
    return;
 8005f78:	e035      	b.n	8005fe6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <HAL_UART_IRQHandler+0x5da>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8be 	bl	8006114 <UART_EndTransmit_IT>
    return;
 8005f98:	e026      	b.n	8005fe8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <HAL_UART_IRQHandler+0x5fa>
 8005fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005faa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8ed 	bl	8006192 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fb8:	e016      	b.n	8005fe8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d010      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x628>
 8005fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da0c      	bge.n	8005fe8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8d5 	bl	800617e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fd4:	e008      	b.n	8005fe8 <HAL_UART_IRQHandler+0x628>
      return;
 8005fd6:	bf00      	nop
 8005fd8:	e006      	b.n	8005fe8 <HAL_UART_IRQHandler+0x628>
    return;
 8005fda:	bf00      	nop
 8005fdc:	e004      	b.n	8005fe8 <HAL_UART_IRQHandler+0x628>
      return;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <HAL_UART_IRQHandler+0x628>
      return;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_UART_IRQHandler+0x628>
    return;
 8005fe6:	bf00      	nop
  }
}
 8005fe8:	37e8      	adds	r7, #232	; 0xe8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop

08005ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b095      	sub	sp, #84	; 0x54
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
 8006044:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e6      	bne.n	8006024 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	61fb      	str	r3, [r7, #28]
   return(result);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	64bb      	str	r3, [r7, #72]	; 0x48
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800607a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e3      	bne.n	8006056 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d118      	bne.n	80060c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f023 0310 	bic.w	r3, r3, #16
 80060aa:	647b      	str	r3, [r7, #68]	; 0x44
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6979      	ldr	r1, [r7, #20]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	613b      	str	r3, [r7, #16]
   return(result);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e6      	bne.n	8006096 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	671a      	str	r2, [r3, #112]	; 0x70
}
 80060dc:	bf00      	nop
 80060de:	3754      	adds	r7, #84	; 0x54
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7ff ff72 	bl	8005ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800610c:	bf00      	nop
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	60bb      	str	r3, [r7, #8]
   return(result);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6979      	ldr	r1, [r7, #20]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	613b      	str	r3, [r7, #16]
   return(result);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e6      	bne.n	800611c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fb fb6a 	bl	8001836 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006162:	bf00      	nop
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b088      	sub	sp, #32
 80061aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061b0:	f107 0308 	add.w	r3, r7, #8
 80061b4:	2218      	movs	r2, #24
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 f97d 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80061be:	233f      	movs	r3, #63	; 0x3f
 80061c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80061c2:	2381      	movs	r3, #129	; 0x81
 80061c4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80061c6:	1dfb      	adds	r3, r7, #7
 80061c8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80061ca:	2301      	movs	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	2100      	movs	r1, #0
 80061d4:	4618      	mov	r0, r3
 80061d6:	f001 f833 	bl	8007240 <hci_send_req>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da01      	bge.n	80061e4 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80061e0:	23ff      	movs	r3, #255	; 0xff
 80061e2:	e000      	b.n	80061e6 <aci_gap_set_non_discoverable+0x40>
  return status;
 80061e4:	79fb      	ldrb	r3, [r7, #7]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80061ee:	b5b0      	push	{r4, r5, r7, lr}
 80061f0:	b0ce      	sub	sp, #312	; 0x138
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	4610      	mov	r0, r2
 80061fa:	4619      	mov	r1, r3
 80061fc:	1dfb      	adds	r3, r7, #7
 80061fe:	462a      	mov	r2, r5
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	1d3b      	adds	r3, r7, #4
 8006204:	4622      	mov	r2, r4
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	1cbb      	adds	r3, r7, #2
 800620a:	4602      	mov	r2, r0
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	1dbb      	adds	r3, r7, #6
 8006210:	460a      	mov	r2, r1
 8006212:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006214:	f107 0310 	add.w	r3, r7, #16
 8006218:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800621c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006220:	3308      	adds	r3, #8
 8006222:	f107 0210 	add.w	r2, r7, #16
 8006226:	4413      	add	r3, r2
 8006228:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800622c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006230:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006234:	4413      	add	r3, r2
 8006236:	3309      	adds	r3, #9
 8006238:	f107 0210 	add.w	r2, r7, #16
 800623c:	4413      	add	r3, r2
 800623e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006242:	f107 030f 	add.w	r3, r7, #15
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006254:	1dfa      	adds	r2, r7, #7
 8006256:	7812      	ldrb	r2, [r2, #0]
 8006258:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800625a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800625e:	3301      	adds	r3, #1
 8006260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006264:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006268:	1d3a      	adds	r2, r7, #4
 800626a:	8812      	ldrh	r2, [r2, #0]
 800626c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006274:	3302      	adds	r3, #2
 8006276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800627a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800627e:	1cba      	adds	r2, r7, #2
 8006280:	8812      	ldrh	r2, [r2, #0]
 8006282:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800628a:	3302      	adds	r3, #2
 800628c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006290:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006294:	1dba      	adds	r2, r7, #6
 8006296:	7812      	ldrb	r2, [r2, #0]
 8006298:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800629a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800629e:	3301      	adds	r3, #1
 80062a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80062a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062a8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80062ac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80062ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062b2:	3301      	adds	r3, #1
 80062b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80062b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062bc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80062c0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80062c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062c6:	3301      	adds	r3, #1
 80062c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80062cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062d0:	3308      	adds	r3, #8
 80062d2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80062d6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 f8dc 	bl	8007498 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80062e0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80062e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80062e8:	4413      	add	r3, r2
 80062ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80062ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062f2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80062f6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80062f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062fc:	3301      	adds	r3, #1
 80062fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006302:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006306:	3301      	adds	r3, #1
 8006308:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800630c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f8c1 	bl	8007498 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006316:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800631a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800631e:	4413      	add	r3, r2
 8006320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006328:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800632c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800632e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006332:	3302      	adds	r3, #2
 8006334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006340:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006342:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006346:	3302      	adds	r3, #2
 8006348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800634c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006350:	2218      	movs	r2, #24
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f001 f8af 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800635a:	233f      	movs	r3, #63	; 0x3f
 800635c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006360:	2383      	movs	r3, #131	; 0x83
 8006362:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006366:	f107 0310 	add.w	r3, r7, #16
 800636a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800636e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006372:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006376:	f107 030f 	add.w	r3, r7, #15
 800637a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800637e:	2301      	movs	r3, #1
 8006380:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006384:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f000 ff58 	bl	8007240 <hci_send_req>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	da01      	bge.n	800639a <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8006396:	23ff      	movs	r3, #255	; 0xff
 8006398:	e002      	b.n	80063a0 <aci_gap_set_discoverable+0x1b2>
  return status;
 800639a:	f107 030f 	add.w	r3, r7, #15
 800639e:	781b      	ldrb	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bdb0      	pop	{r4, r5, r7, pc}

080063aa <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b0cc      	sub	sp, #304	; 0x130
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	4602      	mov	r2, r0
 80063b2:	1dfb      	adds	r3, r7, #7
 80063b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80063b6:	f107 0310 	add.w	r3, r7, #16
 80063ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80063be:	f107 030f 	add.w	r3, r7, #15
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80063cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d0:	1dfa      	adds	r2, r7, #7
 80063d2:	7812      	ldrb	r2, [r2, #0]
 80063d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80063d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063da:	3301      	adds	r3, #1
 80063dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063e4:	2218      	movs	r2, #24
 80063e6:	2100      	movs	r1, #0
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f865 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80063ee:	233f      	movs	r3, #63	; 0x3f
 80063f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80063f4:	2385      	movs	r3, #133	; 0x85
 80063f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80063fa:	f107 0310 	add.w	r3, r7, #16
 80063fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006406:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800640a:	f107 030f 	add.w	r3, r7, #15
 800640e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006412:	2301      	movs	r3, #1
 8006414:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006418:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f000 ff0e 	bl	8007240 <hci_send_req>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	da01      	bge.n	800642e <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800642a:	23ff      	movs	r3, #255	; 0xff
 800642c:	e002      	b.n	8006434 <aci_gap_set_io_capability+0x8a>
  return status;
 800642e:	f107 030f 	add.w	r3, r7, #15
 8006432:	781b      	ldrb	r3, [r3, #0]
}
 8006434:	4618      	mov	r0, r3
 8006436:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800643e:	b5b0      	push	{r4, r5, r7, lr}
 8006440:	b0cc      	sub	sp, #304	; 0x130
 8006442:	af00      	add	r7, sp, #0
 8006444:	4605      	mov	r5, r0
 8006446:	460c      	mov	r4, r1
 8006448:	4610      	mov	r0, r2
 800644a:	4619      	mov	r1, r3
 800644c:	1dfb      	adds	r3, r7, #7
 800644e:	462a      	mov	r2, r5
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	1dbb      	adds	r3, r7, #6
 8006454:	4622      	mov	r2, r4
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	1d7b      	adds	r3, r7, #5
 800645a:	4602      	mov	r2, r0
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	460a      	mov	r2, r1
 8006462:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006464:	f107 0310 	add.w	r3, r7, #16
 8006468:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800646c:	f107 030f 	add.w	r3, r7, #15
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800647a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647e:	1dfa      	adds	r2, r7, #7
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006488:	3301      	adds	r3, #1
 800648a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800648e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006492:	1dba      	adds	r2, r7, #6
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006498:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800649c:	3301      	adds	r3, #1
 800649e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80064a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a6:	1d7a      	adds	r2, r7, #5
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80064ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064b0:	3301      	adds	r3, #1
 80064b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80064b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ba:	1d3a      	adds	r2, r7, #4
 80064bc:	7812      	ldrb	r2, [r2, #0]
 80064be:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80064c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064c4:	3301      	adds	r3, #1
 80064c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80064ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ce:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80064d2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80064d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064d8:	3301      	adds	r3, #1
 80064da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80064de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e2:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80064e6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80064e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064ec:	3301      	adds	r3, #1
 80064ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80064f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80064fa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80064fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006500:	3301      	adds	r3, #1
 8006502:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800650e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006512:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006516:	3304      	adds	r3, #4
 8006518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800651c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006520:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006524:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800652a:	3301      	adds	r3, #1
 800652c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006534:	2218      	movs	r2, #24
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f000 ffbd 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800653e:	233f      	movs	r3, #63	; 0x3f
 8006540:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006544:	2386      	movs	r3, #134	; 0x86
 8006546:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800654a:	f107 0310 	add.w	r3, r7, #16
 800654e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006556:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800655a:	f107 030f 	add.w	r3, r7, #15
 800655e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006562:	2301      	movs	r3, #1
 8006564:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006568:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fe66 	bl	8007240 <hci_send_req>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	da01      	bge.n	800657e <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800657a:	23ff      	movs	r3, #255	; 0xff
 800657c:	e002      	b.n	8006584 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800657e:	f107 030f 	add.w	r3, r7, #15
 8006582:	781b      	ldrb	r3, [r3, #0]
}
 8006584:	4618      	mov	r0, r3
 8006586:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800658a:	46bd      	mov	sp, r7
 800658c:	bdb0      	pop	{r4, r5, r7, pc}

0800658e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800658e:	b590      	push	{r4, r7, lr}
 8006590:	b0cd      	sub	sp, #308	; 0x134
 8006592:	af00      	add	r7, sp, #0
 8006594:	4604      	mov	r4, r0
 8006596:	4608      	mov	r0, r1
 8006598:	4611      	mov	r1, r2
 800659a:	463a      	mov	r2, r7
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	1dfb      	adds	r3, r7, #7
 80065a0:	4622      	mov	r2, r4
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	1dbb      	adds	r3, r7, #6
 80065a6:	4602      	mov	r2, r0
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	1d7b      	adds	r3, r7, #5
 80065ac:	460a      	mov	r2, r1
 80065ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80065b0:	f107 0310 	add.w	r3, r7, #16
 80065b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80065b8:	f107 0308 	add.w	r3, r7, #8
 80065bc:	2207      	movs	r2, #7
 80065be:	2100      	movs	r1, #0
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 ff79 	bl	80074b8 <Osal_MemSet>
  int index_input = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80065cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d0:	1dfa      	adds	r2, r7, #7
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80065d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065da:	3301      	adds	r3, #1
 80065dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80065e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e4:	1dba      	adds	r2, r7, #6
 80065e6:	7812      	ldrb	r2, [r2, #0]
 80065e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80065ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065ee:	3301      	adds	r3, #1
 80065f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80065f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f8:	1d7a      	adds	r2, r7, #5
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80065fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006602:	3301      	adds	r3, #1
 8006604:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006608:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800660c:	2218      	movs	r2, #24
 800660e:	2100      	movs	r1, #0
 8006610:	4618      	mov	r0, r3
 8006612:	f000 ff51 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006616:	233f      	movs	r3, #63	; 0x3f
 8006618:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800661c:	238a      	movs	r3, #138	; 0x8a
 800661e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006622:	f107 0310 	add.w	r3, r7, #16
 8006626:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800662a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800662e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006632:	f107 0308 	add.w	r3, r7, #8
 8006636:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800663a:	2307      	movs	r3, #7
 800663c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006644:	2100      	movs	r1, #0
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fdfa 	bl	8007240 <hci_send_req>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	da01      	bge.n	8006656 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8006652:	23ff      	movs	r3, #255	; 0xff
 8006654:	e021      	b.n	800669a <aci_gap_init+0x10c>
  if ( resp.Status )
 8006656:	f107 0308 	add.w	r3, r7, #8
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <aci_gap_init+0xda>
    return resp.Status;
 8006660:	f107 0308 	add.w	r3, r7, #8
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	e018      	b.n	800669a <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8006668:	f107 0308 	add.w	r3, r7, #8
 800666c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006670:	b29a      	uxth	r2, r3
 8006672:	463b      	mov	r3, r7
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006678:	f107 0308 	add.w	r3, r7, #8
 800667c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006680:	b29a      	uxth	r2, r3
 8006682:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006686:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006688:	f107 0308 	add.w	r3, r7, #8
 800668c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006690:	b29a      	uxth	r2, r3
 8006692:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006696:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd90      	pop	{r4, r7, pc}

080066a4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b0cc      	sub	sp, #304	; 0x130
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4602      	mov	r2, r0
 80066ac:	463b      	mov	r3, r7
 80066ae:	6019      	str	r1, [r3, #0]
 80066b0:	1dfb      	adds	r3, r7, #7
 80066b2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80066b4:	f107 0310 	add.w	r3, r7, #16
 80066b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80066bc:	f107 030f 	add.w	r3, r7, #15
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80066ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ce:	1dfa      	adds	r2, r7, #7
 80066d0:	7812      	ldrb	r2, [r2, #0]
 80066d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80066d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066d8:	3301      	adds	r3, #1
 80066da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80066de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e2:	1c58      	adds	r0, r3, #1
 80066e4:	1dfb      	adds	r3, r7, #7
 80066e6:	781a      	ldrb	r2, [r3, #0]
 80066e8:	463b      	mov	r3, r7
 80066ea:	6819      	ldr	r1, [r3, #0]
 80066ec:	f000 fed4 	bl	8007498 <Osal_MemCpy>
  index_input += AdvDataLen;
 80066f0:	1dfb      	adds	r3, r7, #7
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80066f8:	4413      	add	r3, r2
 80066fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006702:	2218      	movs	r2, #24
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fed6 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800670c:	233f      	movs	r3, #63	; 0x3f
 800670e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006712:	238e      	movs	r3, #142	; 0x8e
 8006714:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006718:	f107 0310 	add.w	r3, r7, #16
 800671c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006724:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006728:	f107 030f 	add.w	r3, r7, #15
 800672c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006730:	2301      	movs	r3, #1
 8006732:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fd7f 	bl	8007240 <hci_send_req>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	da01      	bge.n	800674c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8006748:	23ff      	movs	r3, #255	; 0xff
 800674a:	e002      	b.n	8006752 <aci_gap_update_adv_data+0xae>
  return status;
 800674c:	f107 030f 	add.w	r3, r7, #15
 8006750:	781b      	ldrb	r3, [r3, #0]
}
 8006752:	4618      	mov	r0, r3
 8006754:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006766:	f107 0308 	add.w	r3, r7, #8
 800676a:	2218      	movs	r2, #24
 800676c:	2100      	movs	r1, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fea2 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006774:	233f      	movs	r3, #63	; 0x3f
 8006776:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006778:	2392      	movs	r3, #146	; 0x92
 800677a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800677c:	1dfb      	adds	r3, r7, #7
 800677e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006780:	2301      	movs	r3, #1
 8006782:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fd58 	bl	8007240 <hci_send_req>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	da01      	bge.n	800679a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006796:	23ff      	movs	r3, #255	; 0xff
 8006798:	e000      	b.n	800679c <aci_gap_configure_whitelist+0x40>
  return status;
 800679a:	79fb      	ldrb	r3, [r7, #7]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b0cc      	sub	sp, #304	; 0x130
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4602      	mov	r2, r0
 80067ac:	1dbb      	adds	r3, r7, #6
 80067ae:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80067b0:	f107 0310 	add.w	r3, r7, #16
 80067b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80067b8:	f107 030f 	add.w	r3, r7, #15
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80067c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ca:	1dba      	adds	r2, r7, #6
 80067cc:	8812      	ldrh	r2, [r2, #0]
 80067ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80067d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067d4:	3302      	adds	r3, #2
 80067d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067de:	2218      	movs	r2, #24
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fe68 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80067e8:	233f      	movs	r3, #63	; 0x3f
 80067ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 80067ee:	2395      	movs	r3, #149	; 0x95
 80067f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067f4:	f107 0310 	add.w	r3, r7, #16
 80067f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80067fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006800:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006804:	f107 030f 	add.w	r3, r7, #15
 8006808:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800680c:	2301      	movs	r3, #1
 800680e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006812:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fd11 	bl	8007240 <hci_send_req>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	da01      	bge.n	8006828 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 8006824:	23ff      	movs	r3, #255	; 0xff
 8006826:	e002      	b.n	800682e <aci_gap_allow_rebond+0x8a>
  return status;
 8006828:	f107 030f 	add.w	r3, r7, #15
 800682c:	781b      	ldrb	r3, [r3, #0]
}
 800682e:	4618      	mov	r0, r3
 8006830:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b0cc      	sub	sp, #304	; 0x130
 800683c:	af00      	add	r7, sp, #0
 800683e:	4602      	mov	r2, r0
 8006840:	1dbb      	adds	r3, r7, #6
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	1d7b      	adds	r3, r7, #5
 8006846:	460a      	mov	r2, r1
 8006848:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800684a:	f107 0310 	add.w	r3, r7, #16
 800684e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006852:	f107 030f 	add.w	r3, r7, #15
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006864:	1dba      	adds	r2, r7, #6
 8006866:	8812      	ldrh	r2, [r2, #0]
 8006868:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800686a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800686e:	3302      	adds	r3, #2
 8006870:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006878:	1d7a      	adds	r2, r7, #5
 800687a:	7812      	ldrb	r2, [r2, #0]
 800687c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800687e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006882:	3301      	adds	r3, #1
 8006884:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006888:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800688c:	2218      	movs	r2, #24
 800688e:	2100      	movs	r1, #0
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fe11 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006896:	233f      	movs	r3, #63	; 0x3f
 8006898:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800689c:	23a5      	movs	r3, #165	; 0xa5
 800689e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80068a2:	f107 0310 	add.w	r3, r7, #16
 80068a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80068aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80068b2:	f107 030f 	add.w	r3, r7, #15
 80068b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068c4:	2100      	movs	r1, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fcba 	bl	8007240 <hci_send_req>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	da01      	bge.n	80068d6 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80068d2:	23ff      	movs	r3, #255	; 0xff
 80068d4:	e002      	b.n	80068dc <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80068d6:	f107 030f 	add.w	r3, r7, #15
 80068da:	781b      	ldrb	r3, [r3, #0]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b088      	sub	sp, #32
 80068ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	2218      	movs	r2, #24
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fddd 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80068fe:	233f      	movs	r3, #63	; 0x3f
 8006900:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006902:	f240 1301 	movw	r3, #257	; 0x101
 8006906:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006908:	1dfb      	adds	r3, r7, #7
 800690a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800690c:	2301      	movs	r3, #1
 800690e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006910:	f107 0308 	add.w	r3, r7, #8
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fc92 	bl	8007240 <hci_send_req>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	da01      	bge.n	8006926 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006922:	23ff      	movs	r3, #255	; 0xff
 8006924:	e000      	b.n	8006928 <aci_gatt_init+0x42>
  return status;
 8006926:	79fb      	ldrb	r3, [r7, #7]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b0cf      	sub	sp, #316	; 0x13c
 8006934:	af00      	add	r7, sp, #0
 8006936:	4604      	mov	r4, r0
 8006938:	4638      	mov	r0, r7
 800693a:	6001      	str	r1, [r0, #0]
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	1dfb      	adds	r3, r7, #7
 8006942:	4622      	mov	r2, r4
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	1dbb      	adds	r3, r7, #6
 8006948:	4602      	mov	r2, r0
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	1d7b      	adds	r3, r7, #5
 800694e:	460a      	mov	r2, r1
 8006950:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006952:	f107 0310 	add.w	r3, r7, #16
 8006956:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800695a:	1dfb      	adds	r3, r7, #7
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d007      	beq.n	8006972 <aci_gatt_add_service+0x42>
 8006962:	1dfb      	adds	r3, r7, #7
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d101      	bne.n	800696e <aci_gatt_add_service+0x3e>
 800696a:	2311      	movs	r3, #17
 800696c:	e002      	b.n	8006974 <aci_gatt_add_service+0x44>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <aci_gatt_add_service+0x44>
 8006972:	2303      	movs	r3, #3
 8006974:	f107 0210 	add.w	r2, r7, #16
 8006978:	4413      	add	r3, r2
 800697a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800697e:	f107 030c 	add.w	r3, r7, #12
 8006982:	2203      	movs	r2, #3
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fd96 	bl	80074b8 <Osal_MemSet>
  int index_input = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006992:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006996:	1dfa      	adds	r2, r7, #7
 8006998:	7812      	ldrb	r2, [r2, #0]
 800699a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800699c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069a0:	3301      	adds	r3, #1
 80069a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80069a6:	1dfb      	adds	r3, r7, #7
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d002      	beq.n	80069b4 <aci_gatt_add_service+0x84>
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d004      	beq.n	80069bc <aci_gatt_add_service+0x8c>
 80069b2:	e007      	b.n	80069c4 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80069b4:	2302      	movs	r3, #2
 80069b6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80069ba:	e005      	b.n	80069c8 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80069bc:	2310      	movs	r3, #16
 80069be:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80069c2:	e001      	b.n	80069c8 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80069c4:	2397      	movs	r3, #151	; 0x97
 80069c6:	e05d      	b.n	8006a84 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80069c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069cc:	1c58      	adds	r0, r3, #1
 80069ce:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80069d2:	463b      	mov	r3, r7
 80069d4:	6819      	ldr	r1, [r3, #0]
 80069d6:	f000 fd5f 	bl	8007498 <Osal_MemCpy>
    index_input += size;
 80069da:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80069de:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80069e2:	4413      	add	r3, r2
 80069e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80069e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ec:	1dba      	adds	r2, r7, #6
 80069ee:	7812      	ldrb	r2, [r2, #0]
 80069f0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80069f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069f6:	3301      	adds	r3, #1
 80069f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80069fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a00:	1d7a      	adds	r2, r7, #5
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a14:	2218      	movs	r2, #24
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fd4d 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a1e:	233f      	movs	r3, #63	; 0x3f
 8006a20:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006a24:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006a28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006a3c:	f107 030c 	add.w	r3, r7, #12
 8006a40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006a44:	2303      	movs	r3, #3
 8006a46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fbf5 	bl	8007240 <hci_send_req>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	da01      	bge.n	8006a60 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8006a5c:	23ff      	movs	r3, #255	; 0xff
 8006a5e:	e011      	b.n	8006a84 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8006a60:	f107 030c 	add.w	r3, r7, #12
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <aci_gatt_add_service+0x142>
    return resp.Status;
 8006a6a:	f107 030c 	add.w	r3, r7, #12
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	e008      	b.n	8006a84 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8006a72:	f107 030c 	add.w	r3, r7, #12
 8006a76:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006a80:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd90      	pop	{r4, r7, pc}

08006a8e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006a8e:	b590      	push	{r4, r7, lr}
 8006a90:	b0d1      	sub	sp, #324	; 0x144
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	4604      	mov	r4, r0
 8006a96:	4608      	mov	r0, r1
 8006a98:	f107 0108 	add.w	r1, r7, #8
 8006a9c:	600a      	str	r2, [r1, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f107 030e 	add.w	r3, r7, #14
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	f107 030d 	add.w	r3, r7, #13
 8006aac:	4602      	mov	r2, r0
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	1dbb      	adds	r3, r7, #6
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006ab6:	f107 0318 	add.w	r3, r7, #24
 8006aba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006abe:	f107 030d 	add.w	r3, r7, #13
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d008      	beq.n	8006ada <aci_gatt_add_char+0x4c>
 8006ac8:	f107 030d 	add.w	r3, r7, #13
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d101      	bne.n	8006ad6 <aci_gatt_add_char+0x48>
 8006ad2:	2313      	movs	r3, #19
 8006ad4:	e002      	b.n	8006adc <aci_gatt_add_char+0x4e>
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e000      	b.n	8006adc <aci_gatt_add_char+0x4e>
 8006ada:	2305      	movs	r3, #5
 8006adc:	f107 0218 	add.w	r2, r7, #24
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ae6:	f107 0314 	add.w	r3, r7, #20
 8006aea:	2203      	movs	r2, #3
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fce2 	bl	80074b8 <Osal_MemSet>
  int index_input = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8006afa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006afe:	f107 020e 	add.w	r2, r7, #14
 8006b02:	8812      	ldrh	r2, [r2, #0]
 8006b04:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006b06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006b10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b14:	f107 020d 	add.w	r2, r7, #13
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b20:	3301      	adds	r3, #1
 8006b22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006b26:	f107 030d 	add.w	r3, r7, #13
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d002      	beq.n	8006b36 <aci_gatt_add_char+0xa8>
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d004      	beq.n	8006b3e <aci_gatt_add_char+0xb0>
 8006b34:	e007      	b.n	8006b46 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8006b36:	2302      	movs	r3, #2
 8006b38:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006b3c:	e005      	b.n	8006b4a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8006b3e:	2310      	movs	r3, #16
 8006b40:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006b44:	e001      	b.n	8006b4a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8006b46:	2397      	movs	r3, #151	; 0x97
 8006b48:	e086      	b.n	8006c58 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006b4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b4e:	1cd8      	adds	r0, r3, #3
 8006b50:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006b54:	f107 0308 	add.w	r3, r7, #8
 8006b58:	6819      	ldr	r1, [r3, #0]
 8006b5a:	f000 fc9d 	bl	8007498 <Osal_MemCpy>
    index_input += size;
 8006b5e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006b62:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006b66:	4413      	add	r3, r2
 8006b68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b70:	1dba      	adds	r2, r7, #6
 8006b72:	8812      	ldrh	r2, [r2, #0]
 8006b74:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006b76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006b80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b84:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006b88:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006b8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b8e:	3301      	adds	r3, #1
 8006b90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b98:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006b9c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006b9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006ba8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bac:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006bb0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006bb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006bbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bc0:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006bc4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006bd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bd4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006bd8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bde:	3301      	adds	r3, #1
 8006be0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006be4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006be8:	2218      	movs	r2, #24
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fc63 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bf2:	233f      	movs	r3, #63	; 0x3f
 8006bf4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006bf8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006bfc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006c00:	f107 0318 	add.w	r3, r7, #24
 8006c04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006c10:	f107 0314 	add.w	r3, r7, #20
 8006c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006c18:	2303      	movs	r3, #3
 8006c1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fb0b 	bl	8007240 <hci_send_req>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da01      	bge.n	8006c34 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8006c30:	23ff      	movs	r3, #255	; 0xff
 8006c32:	e011      	b.n	8006c58 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8006c34:	f107 0314 	add.w	r3, r7, #20
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8006c3e:	f107 0314 	add.w	r3, r7, #20
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	e008      	b.n	8006c58 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8006c46:	f107 0314 	add.w	r3, r7, #20
 8006c4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006c54:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd90      	pop	{r4, r7, pc}

08006c62 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006c62:	b5b0      	push	{r4, r5, r7, lr}
 8006c64:	b0cc      	sub	sp, #304	; 0x130
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	4605      	mov	r5, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	1dbb      	adds	r3, r7, #6
 8006c72:	462a      	mov	r2, r5
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	1d3b      	adds	r3, r7, #4
 8006c78:	4622      	mov	r2, r4
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	1cfb      	adds	r3, r7, #3
 8006c7e:	4602      	mov	r2, r0
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	1cbb      	adds	r3, r7, #2
 8006c84:	460a      	mov	r2, r1
 8006c86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006c88:	f107 0310 	add.w	r3, r7, #16
 8006c8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c90:	f107 030f 	add.w	r3, r7, #15
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8006c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca2:	1dba      	adds	r2, r7, #6
 8006ca4:	8812      	ldrh	r2, [r2, #0]
 8006ca6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006ca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cac:	3302      	adds	r3, #2
 8006cae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8006cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb6:	1d3a      	adds	r2, r7, #4
 8006cb8:	8812      	ldrh	r2, [r2, #0]
 8006cba:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8006cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cca:	1cfa      	adds	r2, r7, #3
 8006ccc:	7812      	ldrb	r2, [r2, #0]
 8006cce:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006cd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cde:	1cba      	adds	r2, r7, #2
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ce8:	3301      	adds	r3, #1
 8006cea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf2:	1d98      	adds	r0, r3, #6
 8006cf4:	1cbb      	adds	r3, r7, #2
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006cfe:	f000 fbcb 	bl	8007498 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006d02:	1cbb      	adds	r3, r7, #2
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d14:	2218      	movs	r2, #24
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fbcd 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d1e:	233f      	movs	r3, #63	; 0x3f
 8006d20:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006d24:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006d28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006d2c:	f107 0310 	add.w	r3, r7, #16
 8006d30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d3c:	f107 030f 	add.w	r3, r7, #15
 8006d40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fa75 	bl	8007240 <hci_send_req>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da01      	bge.n	8006d60 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8006d5c:	23ff      	movs	r3, #255	; 0xff
 8006d5e:	e002      	b.n	8006d66 <aci_gatt_update_char_value+0x104>
  return status;
 8006d60:	f107 030f 	add.w	r3, r7, #15
 8006d64:	781b      	ldrb	r3, [r3, #0]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bdb0      	pop	{r4, r5, r7, pc}

08006d70 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b0cc      	sub	sp, #304	; 0x130
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	463b      	mov	r3, r7
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	1dfb      	adds	r3, r7, #7
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	1dbb      	adds	r3, r7, #6
 8006d82:	460a      	mov	r2, r1
 8006d84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006d86:	f107 0310 	add.w	r3, r7, #16
 8006d8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006d8e:	f107 030f 	add.w	r3, r7, #15
 8006d92:	2200      	movs	r2, #0
 8006d94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8006d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da0:	1dfa      	adds	r2, r7, #7
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006da6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006daa:	3301      	adds	r3, #1
 8006dac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8006db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db4:	1dba      	adds	r2, r7, #6
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006dba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc8:	1c98      	adds	r0, r3, #2
 8006dca:	1dbb      	adds	r3, r7, #6
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	463b      	mov	r3, r7
 8006dd0:	6819      	ldr	r1, [r3, #0]
 8006dd2:	f000 fb61 	bl	8007498 <Osal_MemCpy>
  index_input += Length;
 8006dd6:	1dbb      	adds	r3, r7, #6
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006dde:	4413      	add	r3, r2
 8006de0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006de4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006de8:	2218      	movs	r2, #24
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fb63 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006df2:	233f      	movs	r3, #63	; 0x3f
 8006df4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8006df8:	230c      	movs	r3, #12
 8006dfa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006dfe:	f107 0310 	add.w	r3, r7, #16
 8006e02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e0e:	f107 030f 	add.w	r3, r7, #15
 8006e12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e20:	2100      	movs	r1, #0
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fa0c 	bl	8007240 <hci_send_req>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da01      	bge.n	8006e32 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8006e2e:	23ff      	movs	r3, #255	; 0xff
 8006e30:	e002      	b.n	8006e38 <aci_hal_write_config_data+0xc8>
  return status;
 8006e32:	f107 030f 	add.w	r3, r7, #15
 8006e36:	781b      	ldrb	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b0cc      	sub	sp, #304	; 0x130
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	4602      	mov	r2, r0
 8006e4a:	1dfb      	adds	r3, r7, #7
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	1dbb      	adds	r3, r7, #6
 8006e50:	460a      	mov	r2, r1
 8006e52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006e54:	f107 0310 	add.w	r3, r7, #16
 8006e58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e5c:	f107 030f 	add.w	r3, r7, #15
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8006e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6e:	1dfa      	adds	r2, r7, #7
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e78:	3301      	adds	r3, #1
 8006e7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8006e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e82:	1dba      	adds	r2, r7, #6
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e96:	2218      	movs	r2, #24
 8006e98:	2100      	movs	r1, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fb0c 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ea0:	233f      	movs	r3, #63	; 0x3f
 8006ea2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006ea6:	230f      	movs	r3, #15
 8006ea8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006eac:	f107 0310 	add.w	r3, r7, #16
 8006eb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ebc:	f107 030f 	add.w	r3, r7, #15
 8006ec0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006eca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 f9b5 	bl	8007240 <hci_send_req>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	da01      	bge.n	8006ee0 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006edc:	23ff      	movs	r3, #255	; 0xff
 8006ede:	e002      	b.n	8006ee6 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8006ee0:	f107 030f 	add.w	r3, r7, #15
 8006ee4:	781b      	ldrb	r3, [r3, #0]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b0cc      	sub	sp, #304	; 0x130
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	1dbb      	adds	r3, r7, #6
 8006efa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006efc:	f107 0310 	add.w	r3, r7, #16
 8006f00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f04:	f107 030f 	add.w	r3, r7, #15
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f16:	1dba      	adds	r2, r7, #6
 8006f18:	8812      	ldrh	r2, [r2, #0]
 8006f1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f20:	3302      	adds	r3, #2
 8006f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f2a:	2218      	movs	r2, #24
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fac2 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f34:	233f      	movs	r3, #63	; 0x3f
 8006f36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006f3a:	2318      	movs	r3, #24
 8006f3c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f40:	f107 0310 	add.w	r3, r7, #16
 8006f44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006f50:	f107 030f 	add.w	r3, r7, #15
 8006f54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 f96b 	bl	8007240 <hci_send_req>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	da01      	bge.n	8006f74 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8006f70:	23ff      	movs	r3, #255	; 0xff
 8006f72:	e002      	b.n	8006f7a <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8006f74:	f107 030f 	add.w	r3, r7, #15
 8006f78:	781b      	ldrb	r3, [r3, #0]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f8e:	f107 0308 	add.w	r3, r7, #8
 8006f92:	2218      	movs	r2, #24
 8006f94:	2100      	movs	r1, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fa8e 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x03;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006fa4:	1dfb      	adds	r3, r7, #7
 8006fa6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006fac:	f107 0308 	add.w	r3, r7, #8
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f944 	bl	8007240 <hci_send_req>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da01      	bge.n	8006fc2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006fbe:	23ff      	movs	r3, #255	; 0xff
 8006fc0:	e000      	b.n	8006fc4 <hci_reset+0x40>
  return status;
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b0ce      	sub	sp, #312	; 0x138
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	f107 0308 	add.w	r3, r7, #8
 8006fd6:	6019      	str	r1, [r3, #0]
 8006fd8:	1d3b      	adds	r3, r7, #4
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f107 030e 	add.w	r3, r7, #14
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8006fe4:	f107 0318 	add.w	r3, r7, #24
 8006fe8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006fec:	f107 0310 	add.w	r3, r7, #16
 8006ff0:	2205      	movs	r2, #5
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fa5f 	bl	80074b8 <Osal_MemSet>
  int index_input = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007000:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007004:	f107 020e 	add.w	r2, r7, #14
 8007008:	8812      	ldrh	r2, [r2, #0]
 800700a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800700c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007010:	3302      	adds	r3, #2
 8007012:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007016:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800701a:	2218      	movs	r2, #24
 800701c:	2100      	movs	r1, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fa4a 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x08;
 8007024:	2308      	movs	r3, #8
 8007026:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800702a:	2330      	movs	r3, #48	; 0x30
 800702c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007030:	f107 0318 	add.w	r3, r7, #24
 8007034:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007038:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800703c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007040:	f107 0310 	add.w	r3, r7, #16
 8007044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007048:	2305      	movs	r3, #5
 800704a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800704e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f8f3 	bl	8007240 <hci_send_req>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	da01      	bge.n	8007064 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8007060:	23ff      	movs	r3, #255	; 0xff
 8007062:	e016      	b.n	8007092 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8007064:	f107 0310 	add.w	r3, r7, #16
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <hci_le_read_phy+0xaa>
    return resp.Status;
 800706e:	f107 0310 	add.w	r3, r7, #16
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	e00d      	b.n	8007092 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8007076:	f107 0310 	add.w	r3, r7, #16
 800707a:	78da      	ldrb	r2, [r3, #3]
 800707c:	f107 0308 	add.w	r3, r7, #8
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8007084:	f107 0310 	add.w	r3, r7, #16
 8007088:	791a      	ldrb	r2, [r3, #4]
 800708a:	1d3b      	adds	r3, r7, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800709c:	b590      	push	{r4, r7, lr}
 800709e:	b0cd      	sub	sp, #308	; 0x134
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	1dfb      	adds	r3, r7, #7
 80070aa:	4622      	mov	r2, r4
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	1dbb      	adds	r3, r7, #6
 80070b0:	4602      	mov	r2, r0
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	1d7b      	adds	r3, r7, #5
 80070b6:	460a      	mov	r2, r1
 80070b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80070ba:	f107 0310 	add.w	r3, r7, #16
 80070be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80070c2:	f107 030f 	add.w	r3, r7, #15
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80070d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d4:	1dfa      	adds	r2, r7, #7
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070de:	3301      	adds	r3, #1
 80070e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80070e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e8:	1dba      	adds	r2, r7, #6
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80070ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070f2:	3301      	adds	r3, #1
 80070f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80070f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fc:	1d7a      	adds	r2, r7, #5
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007106:	3301      	adds	r3, #1
 8007108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800710c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007110:	2218      	movs	r2, #24
 8007112:	2100      	movs	r1, #0
 8007114:	4618      	mov	r0, r3
 8007116:	f000 f9cf 	bl	80074b8 <Osal_MemSet>
  rq.ogf = 0x08;
 800711a:	2308      	movs	r3, #8
 800711c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007120:	2331      	movs	r3, #49	; 0x31
 8007122:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007126:	f107 0310 	add.w	r3, r7, #16
 800712a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800712e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007132:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007136:	f107 030f 	add.w	r3, r7, #15
 800713a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800713e:	2301      	movs	r3, #1
 8007140:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007144:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f878 	bl	8007240 <hci_send_req>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	da01      	bge.n	800715a <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8007156:	23ff      	movs	r3, #255	; 0xff
 8007158:	e002      	b.n	8007160 <hci_le_set_default_phy+0xc4>
  return status;
 800715a:	f107 030f 	add.w	r3, r7, #15
 800715e:	781b      	ldrb	r3, [r3, #0]
}
 8007160:	4618      	mov	r0, r3
 8007162:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007166:	46bd      	mov	sp, r7
 8007168:	bd90      	pop	{r4, r7, pc}
	...

0800716c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4a08      	ldr	r2, [pc, #32]	; (800719c <hci_init+0x30>)
 800717c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800717e:	4a08      	ldr	r2, [pc, #32]	; (80071a0 <hci_init+0x34>)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007184:	4806      	ldr	r0, [pc, #24]	; (80071a0 <hci_init+0x34>)
 8007186:	f000 f973 	bl	8007470 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 f8d4 	bl	800733c <TlInit>

  return;
 8007194:	bf00      	nop
}
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000220 	.word	0x20000220
 80071a0:	200001f8 	.word	0x200001f8

080071a4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80071aa:	4822      	ldr	r0, [pc, #136]	; (8007234 <hci_user_evt_proc+0x90>)
 80071ac:	f000 fd18 	bl	8007be0 <LST_is_empty>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d12b      	bne.n	800720e <hci_user_evt_proc+0x6a>
 80071b6:	4b20      	ldr	r3, [pc, #128]	; (8007238 <hci_user_evt_proc+0x94>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d027      	beq.n	800720e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	4619      	mov	r1, r3
 80071c4:	481b      	ldr	r0, [pc, #108]	; (8007234 <hci_user_evt_proc+0x90>)
 80071c6:	f000 fd9a 	bl	8007cfe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80071ca:	4b1c      	ldr	r3, [pc, #112]	; (800723c <hci_user_evt_proc+0x98>)
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00c      	beq.n	80071ec <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80071d6:	2301      	movs	r3, #1
 80071d8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80071da:	4b18      	ldr	r3, [pc, #96]	; (800723c <hci_user_evt_proc+0x98>)
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	1d3a      	adds	r2, r7, #4
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80071e4:	793a      	ldrb	r2, [r7, #4]
 80071e6:	4b14      	ldr	r3, [pc, #80]	; (8007238 <hci_user_evt_proc+0x94>)
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e002      	b.n	80071f2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80071ec:	4b12      	ldr	r3, [pc, #72]	; (8007238 <hci_user_evt_proc+0x94>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <hci_user_evt_proc+0x94>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 f83f 	bl	8008280 <TL_MM_EvtDone>
 8007202:	e004      	b.n	800720e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4619      	mov	r1, r3
 8007208:	480a      	ldr	r0, [pc, #40]	; (8007234 <hci_user_evt_proc+0x90>)
 800720a:	f000 fd0b 	bl	8007c24 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800720e:	4809      	ldr	r0, [pc, #36]	; (8007234 <hci_user_evt_proc+0x90>)
 8007210:	f000 fce6 	bl	8007be0 <LST_is_empty>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d107      	bne.n	800722a <hci_user_evt_proc+0x86>
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <hci_user_evt_proc+0x94>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007222:	4804      	ldr	r0, [pc, #16]	; (8007234 <hci_user_evt_proc+0x90>)
 8007224:	f7fb f91b 	bl	800245e <hci_notify_asynch_evt>
  }


  return;
 8007228:	bf00      	nop
 800722a:	bf00      	nop
}
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000174 	.word	0x20000174
 8007238:	20000180 	.word	0x20000180
 800723c:	200001f8 	.word	0x200001f8

08007240 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800724c:	2000      	movs	r0, #0
 800724e:	f000 f8cb 	bl	80073e8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007252:	2300      	movs	r3, #0
 8007254:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	b21b      	sxth	r3, r3
 800725c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007260:	b21a      	sxth	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	029b      	lsls	r3, r3, #10
 8007268:	b21b      	sxth	r3, r3
 800726a:	4313      	orrs	r3, r2
 800726c:	b21b      	sxth	r3, r3
 800726e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	8bbb      	ldrh	r3, [r7, #28]
 800727c:	4618      	mov	r0, r3
 800727e:	f000 f88d 	bl	800739c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007282:	e04e      	b.n	8007322 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007284:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007288:	f7fb f900 	bl	800248c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800728c:	e043      	b.n	8007316 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800728e:	f107 030c 	add.w	r3, r7, #12
 8007292:	4619      	mov	r1, r3
 8007294:	4828      	ldr	r0, [pc, #160]	; (8007338 <hci_send_req+0xf8>)
 8007296:	f000 fd32 	bl	8007cfe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	7a5b      	ldrb	r3, [r3, #9]
 800729e:	2b0f      	cmp	r3, #15
 80072a0:	d114      	bne.n	80072cc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	330b      	adds	r3, #11
 80072a6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	885b      	ldrh	r3, [r3, #2]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	8bba      	ldrh	r2, [r7, #28]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d104      	bne.n	80072be <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d027      	beq.n	8007316 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80072c6:	2301      	movs	r3, #1
 80072c8:	77fb      	strb	r3, [r7, #31]
 80072ca:	e024      	b.n	8007316 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	330b      	adds	r3, #11
 80072d0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	8bba      	ldrh	r2, [r7, #28]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d114      	bne.n	800730a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	7a9b      	ldrb	r3, [r3, #10]
 80072e4:	3b03      	subs	r3, #3
 80072e6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	bfa8      	it	ge
 80072f2:	461a      	movge	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6918      	ldr	r0, [r3, #16]
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	1cd9      	adds	r1, r3, #3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	461a      	mov	r2, r3
 8007306:	f001 fb13 	bl	8008930 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007312:	2301      	movs	r3, #1
 8007314:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007316:	4808      	ldr	r0, [pc, #32]	; (8007338 <hci_send_req+0xf8>)
 8007318:	f000 fc62 	bl	8007be0 <LST_is_empty>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0b5      	beq.n	800728e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007322:	7ffb      	ldrb	r3, [r7, #31]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0ad      	beq.n	8007284 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007328:	2001      	movs	r0, #1
 800732a:	f000 f85d 	bl	80073e8 <NotifyCmdStatus>

  return 0;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3720      	adds	r7, #32
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20000218 	.word	0x20000218

0800733c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007344:	480f      	ldr	r0, [pc, #60]	; (8007384 <TlInit+0x48>)
 8007346:	f000 fc3b 	bl	8007bc0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800734a:	4a0f      	ldr	r2, [pc, #60]	; (8007388 <TlInit+0x4c>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007350:	480e      	ldr	r0, [pc, #56]	; (800738c <TlInit+0x50>)
 8007352:	f000 fc35 	bl	8007bc0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007356:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <TlInit+0x54>)
 8007358:	2201      	movs	r2, #1
 800735a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800735c:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <TlInit+0x58>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007368:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <TlInit+0x5c>)
 800736a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800736c:	4b09      	ldr	r3, [pc, #36]	; (8007394 <TlInit+0x58>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f107 0208 	add.w	r2, r7, #8
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
  }

  return;
 8007378:	bf00      	nop
 800737a:	bf00      	nop
}
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000218 	.word	0x20000218
 8007388:	2000017c 	.word	0x2000017c
 800738c:	20000174 	.word	0x20000174
 8007390:	20000180 	.word	0x20000180
 8007394:	200001f8 	.word	0x200001f8
 8007398:	08007429 	.word	0x08007429

0800739c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	603a      	str	r2, [r7, #0]
 80073a6:	80fb      	strh	r3, [r7, #6]
 80073a8:	460b      	mov	r3, r1
 80073aa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80073ac:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <SendCmd+0x44>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	88fa      	ldrh	r2, [r7, #6]
 80073b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80073b6:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <SendCmd+0x44>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	797a      	ldrb	r2, [r7, #5]
 80073bc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80073be:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <SendCmd+0x44>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	330c      	adds	r3, #12
 80073c4:	797a      	ldrb	r2, [r7, #5]
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 fab1 	bl	8008930 <memcpy>

  hciContext.io.Send(0,0);
 80073ce:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <SendCmd+0x48>)
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2100      	movs	r1, #0
 80073d4:	2000      	movs	r0, #0
 80073d6:	4798      	blx	r3

  return;
 80073d8:	bf00      	nop
}
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	2000017c 	.word	0x2000017c
 80073e4:	200001f8 	.word	0x200001f8

080073e8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d108      	bne.n	800740a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <NotifyCmdStatus+0x3c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00d      	beq.n	800741c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007400:	4b08      	ldr	r3, [pc, #32]	; (8007424 <NotifyCmdStatus+0x3c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2000      	movs	r0, #0
 8007406:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007408:	e008      	b.n	800741c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800740a:	4b06      	ldr	r3, [pc, #24]	; (8007424 <NotifyCmdStatus+0x3c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007412:	4b04      	ldr	r3, [pc, #16]	; (8007424 <NotifyCmdStatus+0x3c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2001      	movs	r0, #1
 8007418:	4798      	blx	r3
  return;
 800741a:	bf00      	nop
 800741c:	bf00      	nop
}
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000220 	.word	0x20000220

08007428 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	7a5b      	ldrb	r3, [r3, #9]
 8007434:	2b0f      	cmp	r3, #15
 8007436:	d003      	beq.n	8007440 <TlEvtReceived+0x18>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7a5b      	ldrb	r3, [r3, #9]
 800743c:	2b0e      	cmp	r3, #14
 800743e:	d107      	bne.n	8007450 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4809      	ldr	r0, [pc, #36]	; (8007468 <TlEvtReceived+0x40>)
 8007444:	f000 fc14 	bl	8007c70 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007448:	2000      	movs	r0, #0
 800744a:	f7fb f814 	bl	8002476 <hci_cmd_resp_release>
 800744e:	e006      	b.n	800745e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4806      	ldr	r0, [pc, #24]	; (800746c <TlEvtReceived+0x44>)
 8007454:	f000 fc0c 	bl	8007c70 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007458:	4804      	ldr	r0, [pc, #16]	; (800746c <TlEvtReceived+0x44>)
 800745a:	f7fb f800 	bl	800245e <hci_notify_asynch_evt>
  }

  return;
 800745e:	bf00      	nop
}
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000218 	.word	0x20000218
 800746c:	20000174 	.word	0x20000174

08007470 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a05      	ldr	r2, [pc, #20]	; (8007490 <hci_register_io_bus+0x20>)
 800747c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a04      	ldr	r2, [pc, #16]	; (8007494 <hci_register_io_bus+0x24>)
 8007482:	611a      	str	r2, [r3, #16]

  return;
 8007484:	bf00      	nop
}
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	08007ff9 	.word	0x08007ff9
 8007494:	08008061 	.word	0x08008061

08007498 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 fa41 	bl	8008930 <memcpy>
 80074ae:	4603      	mov	r3, r0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f001 fa3f 	bl	800894c <memset>
 80074ce:	4603      	mov	r3, r0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80074e2:	4b0f      	ldr	r3, [pc, #60]	; (8007520 <OTP_Read+0x48>)
 80074e4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80074e6:	e002      	b.n	80074ee <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3b08      	subs	r3, #8
 80074ec:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3307      	adds	r3, #7
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	79fa      	ldrb	r2, [r7, #7]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d003      	beq.n	8007502 <OTP_Read+0x2a>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4a09      	ldr	r2, [pc, #36]	; (8007524 <OTP_Read+0x4c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d1f2      	bne.n	80074e8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3307      	adds	r3, #7
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	79fa      	ldrb	r2, [r7, #7]
 800750a:	429a      	cmp	r2, r3
 800750c:	d001      	beq.n	8007512 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007512:	68fb      	ldr	r3, [r7, #12]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	1fff73f8 	.word	0x1fff73f8
 8007524:	1fff7000 	.word	0x1fff7000

08007528 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	; 0x28
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3301      	adds	r3, #1
 800753a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2bff      	cmp	r3, #255	; 0xff
 8007542:	d14c      	bne.n	80075de <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	3302      	adds	r3, #2
 8007548:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	f640 4301 	movw	r3, #3073	; 0xc01
 8007556:	429a      	cmp	r2, r3
 8007558:	d13d      	bne.n	80075d6 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	3302      	adds	r3, #2
 800755e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	885b      	ldrh	r3, [r3, #2]
 8007564:	b29b      	uxth	r3, r3
 8007566:	461a      	mov	r2, r3
 8007568:	4b20      	ldr	r3, [pc, #128]	; (80075ec <PeerToPeer_Event_Handler+0xc4>)
 800756a:	889b      	ldrh	r3, [r3, #4]
 800756c:	3302      	adds	r3, #2
 800756e:	429a      	cmp	r2, r3
 8007570:	d118      	bne.n	80075a4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8007572:	2301      	movs	r3, #1
 8007574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	7a1b      	ldrb	r3, [r3, #8]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8007584:	2300      	movs	r3, #0
 8007586:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	4618      	mov	r0, r3
 800758e:	f7fa ffbf 	bl	8002510 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8007592:	e022      	b.n	80075da <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8007594:	2301      	movs	r3, #1
 8007596:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007598:	f107 0308 	add.w	r3, r7, #8
 800759c:	4618      	mov	r0, r3
 800759e:	f7fa ffb7 	bl	8002510 <P2PS_STM_App_Notification>
        break;
 80075a2:	e01a      	b.n	80075da <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	885b      	ldrh	r3, [r3, #2]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <PeerToPeer_Event_Handler+0xc4>)
 80075ae:	885b      	ldrh	r3, [r3, #2]
 80075b0:	3301      	adds	r3, #1
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d111      	bne.n	80075da <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	88db      	ldrh	r3, [r3, #6]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	3308      	adds	r3, #8
 80075c8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fa ff9e 	bl	8002510 <P2PS_STM_App_Notification>
        break;
 80075d4:	e001      	b.n	80075da <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80075d6:	bf00      	nop
 80075d8:	e002      	b.n	80075e0 <PeerToPeer_Event_Handler+0xb8>
        break;
 80075da:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80075dc:	e000      	b.n	80075e0 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80075de:	bf00      	nop
  }

  return(return_value);
 80075e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80075e4:	4618      	mov	r0, r3
 80075e6:	3728      	adds	r7, #40	; 0x28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000184 	.word	0x20000184

080075f0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80075f6:	484a      	ldr	r0, [pc, #296]	; (8007720 <P2PS_STM_Init+0x130>)
 80075f8:	f000 fc50 	bl	8007e9c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80075fc:	238f      	movs	r3, #143	; 0x8f
 80075fe:	703b      	strb	r3, [r7, #0]
 8007600:	23e5      	movs	r3, #229	; 0xe5
 8007602:	707b      	strb	r3, [r7, #1]
 8007604:	23b3      	movs	r3, #179	; 0xb3
 8007606:	70bb      	strb	r3, [r7, #2]
 8007608:	23d5      	movs	r3, #213	; 0xd5
 800760a:	70fb      	strb	r3, [r7, #3]
 800760c:	232e      	movs	r3, #46	; 0x2e
 800760e:	713b      	strb	r3, [r7, #4]
 8007610:	237f      	movs	r3, #127	; 0x7f
 8007612:	717b      	strb	r3, [r7, #5]
 8007614:	234a      	movs	r3, #74	; 0x4a
 8007616:	71bb      	strb	r3, [r7, #6]
 8007618:	2398      	movs	r3, #152	; 0x98
 800761a:	71fb      	strb	r3, [r7, #7]
 800761c:	232a      	movs	r3, #42	; 0x2a
 800761e:	723b      	strb	r3, [r7, #8]
 8007620:	2348      	movs	r3, #72	; 0x48
 8007622:	727b      	strb	r3, [r7, #9]
 8007624:	237a      	movs	r3, #122	; 0x7a
 8007626:	72bb      	strb	r3, [r7, #10]
 8007628:	23cc      	movs	r3, #204	; 0xcc
 800762a:	72fb      	strb	r3, [r7, #11]
 800762c:	2340      	movs	r3, #64	; 0x40
 800762e:	733b      	strb	r3, [r7, #12]
 8007630:	23fe      	movs	r3, #254	; 0xfe
 8007632:	737b      	strb	r3, [r7, #13]
 8007634:	2300      	movs	r3, #0
 8007636:	73bb      	strb	r3, [r7, #14]
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800763c:	4639      	mov	r1, r7
 800763e:	4b39      	ldr	r3, [pc, #228]	; (8007724 <P2PS_STM_Init+0x134>)
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	2308      	movs	r3, #8
 8007644:	2201      	movs	r2, #1
 8007646:	2002      	movs	r0, #2
 8007648:	f7ff f972 	bl	8006930 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800764c:	2319      	movs	r3, #25
 800764e:	703b      	strb	r3, [r7, #0]
 8007650:	23ed      	movs	r3, #237	; 0xed
 8007652:	707b      	strb	r3, [r7, #1]
 8007654:	2382      	movs	r3, #130	; 0x82
 8007656:	70bb      	strb	r3, [r7, #2]
 8007658:	23ae      	movs	r3, #174	; 0xae
 800765a:	70fb      	strb	r3, [r7, #3]
 800765c:	23ed      	movs	r3, #237	; 0xed
 800765e:	713b      	strb	r3, [r7, #4]
 8007660:	2321      	movs	r3, #33	; 0x21
 8007662:	717b      	strb	r3, [r7, #5]
 8007664:	234c      	movs	r3, #76	; 0x4c
 8007666:	71bb      	strb	r3, [r7, #6]
 8007668:	239d      	movs	r3, #157	; 0x9d
 800766a:	71fb      	strb	r3, [r7, #7]
 800766c:	2341      	movs	r3, #65	; 0x41
 800766e:	723b      	strb	r3, [r7, #8]
 8007670:	2345      	movs	r3, #69	; 0x45
 8007672:	727b      	strb	r3, [r7, #9]
 8007674:	2322      	movs	r3, #34	; 0x22
 8007676:	72bb      	strb	r3, [r7, #10]
 8007678:	238e      	movs	r3, #142	; 0x8e
 800767a:	72fb      	strb	r3, [r7, #11]
 800767c:	2341      	movs	r3, #65	; 0x41
 800767e:	733b      	strb	r3, [r7, #12]
 8007680:	23fe      	movs	r3, #254	; 0xfe
 8007682:	737b      	strb	r3, [r7, #13]
 8007684:	2300      	movs	r3, #0
 8007686:	73bb      	strb	r3, [r7, #14]
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800768c:	4b25      	ldr	r3, [pc, #148]	; (8007724 <P2PS_STM_Init+0x134>)
 800768e:	8818      	ldrh	r0, [r3, #0]
 8007690:	463a      	mov	r2, r7
 8007692:	4b25      	ldr	r3, [pc, #148]	; (8007728 <P2PS_STM_Init+0x138>)
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	2301      	movs	r3, #1
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	230a      	movs	r3, #10
 800769c:	9303      	str	r3, [sp, #12]
 800769e:	2301      	movs	r3, #1
 80076a0:	9302      	str	r3, [sp, #8]
 80076a2:	2300      	movs	r3, #0
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	2306      	movs	r3, #6
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	2302      	movs	r3, #2
 80076ac:	2102      	movs	r1, #2
 80076ae:	f7ff f9ee 	bl	8006a8e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80076b2:	2319      	movs	r3, #25
 80076b4:	703b      	strb	r3, [r7, #0]
 80076b6:	23ed      	movs	r3, #237	; 0xed
 80076b8:	707b      	strb	r3, [r7, #1]
 80076ba:	2382      	movs	r3, #130	; 0x82
 80076bc:	70bb      	strb	r3, [r7, #2]
 80076be:	23ae      	movs	r3, #174	; 0xae
 80076c0:	70fb      	strb	r3, [r7, #3]
 80076c2:	23ed      	movs	r3, #237	; 0xed
 80076c4:	713b      	strb	r3, [r7, #4]
 80076c6:	2321      	movs	r3, #33	; 0x21
 80076c8:	717b      	strb	r3, [r7, #5]
 80076ca:	234c      	movs	r3, #76	; 0x4c
 80076cc:	71bb      	strb	r3, [r7, #6]
 80076ce:	239d      	movs	r3, #157	; 0x9d
 80076d0:	71fb      	strb	r3, [r7, #7]
 80076d2:	2341      	movs	r3, #65	; 0x41
 80076d4:	723b      	strb	r3, [r7, #8]
 80076d6:	2345      	movs	r3, #69	; 0x45
 80076d8:	727b      	strb	r3, [r7, #9]
 80076da:	2322      	movs	r3, #34	; 0x22
 80076dc:	72bb      	strb	r3, [r7, #10]
 80076de:	238e      	movs	r3, #142	; 0x8e
 80076e0:	72fb      	strb	r3, [r7, #11]
 80076e2:	2342      	movs	r3, #66	; 0x42
 80076e4:	733b      	strb	r3, [r7, #12]
 80076e6:	23fe      	movs	r3, #254	; 0xfe
 80076e8:	737b      	strb	r3, [r7, #13]
 80076ea:	2300      	movs	r3, #0
 80076ec:	73bb      	strb	r3, [r7, #14]
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80076f2:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <P2PS_STM_Init+0x134>)
 80076f4:	8818      	ldrh	r0, [r3, #0]
 80076f6:	463a      	mov	r2, r7
 80076f8:	4b0c      	ldr	r3, [pc, #48]	; (800772c <P2PS_STM_Init+0x13c>)
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	2301      	movs	r3, #1
 80076fe:	9304      	str	r3, [sp, #16]
 8007700:	230a      	movs	r3, #10
 8007702:	9303      	str	r3, [sp, #12]
 8007704:	2301      	movs	r3, #1
 8007706:	9302      	str	r3, [sp, #8]
 8007708:	2300      	movs	r3, #0
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	2310      	movs	r3, #16
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	2302      	movs	r3, #2
 8007712:	2102      	movs	r1, #2
 8007714:	f7ff f9bb 	bl	8006a8e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8007718:	bf00      	nop
}
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	08007529 	.word	0x08007529
 8007724:	20000184 	.word	0x20000184
 8007728:	20000186 	.word	0x20000186
 800772c:	20000188 	.word	0x20000188

08007730 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af02      	add	r7, sp, #8
 8007736:	4603      	mov	r3, r0
 8007738:	6039      	str	r1, [r7, #0]
 800773a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800773c:	2392      	movs	r3, #146	; 0x92
 800773e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8007746:	4293      	cmp	r3, r2
 8007748:	d10c      	bne.n	8007764 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800774a:	4b09      	ldr	r3, [pc, #36]	; (8007770 <P2PS_STM_App_Update_Char+0x40>)
 800774c:	8818      	ldrh	r0, [r3, #0]
 800774e:	4b08      	ldr	r3, [pc, #32]	; (8007770 <P2PS_STM_App_Update_Char+0x40>)
 8007750:	8899      	ldrh	r1, [r3, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	2302      	movs	r3, #2
 8007758:	2200      	movs	r2, #0
 800775a:	f7ff fa82 	bl	8006c62 <aci_gatt_update_char_value>
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8007762:	e000      	b.n	8007766 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8007764:	bf00      	nop
  }

  return result;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000184 	.word	0x20000184

08007774 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800777c:	f107 030c 	add.w	r3, r7, #12
 8007780:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2125      	movs	r1, #37	; 0x25
 800778c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007790:	f000 f94c 	bl	8007a2c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	330b      	adds	r3, #11
 8007798:	78db      	ldrb	r3, [r3, #3]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b088      	sub	sp, #32
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80077aa:	f107 030c 	add.w	r3, r7, #12
 80077ae:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	210f      	movs	r1, #15
 80077ba:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80077be:	f000 f935 	bl	8007a2c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	330b      	adds	r3, #11
 80077c6:	78db      	ldrb	r3, [r3, #3]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80077d8:	f107 030c 	add.w	r3, r7, #12
 80077dc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	210e      	movs	r1, #14
 80077e4:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80077e8:	f000 f920 	bl	8007a2c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	330b      	adds	r3, #11
 80077f0:	78db      	ldrb	r3, [r3, #3]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b08b      	sub	sp, #44	; 0x2c
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007824:	4b4a      	ldr	r3, [pc, #296]	; (8007950 <SHCI_GetWirelessFwInfo+0x154>)
 8007826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007828:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800782c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007836:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a44      	ldr	r2, [pc, #272]	; (8007954 <SHCI_GetWirelessFwInfo+0x158>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d10f      	bne.n	8007868 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	e01a      	b.n	800789e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007870:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007874:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	0e1b      	lsrs	r3, r3, #24
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	0a1b      	lsrs	r3, r3, #8
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	091b      	lsrs	r3, r3, #4
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	0e1b      	lsrs	r3, r3, #24
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	0c1b      	lsrs	r3, r3, #16
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	0e1b      	lsrs	r3, r3, #24
 800790c:	b2da      	uxtb	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	0c1b      	lsrs	r3, r3, #16
 8007916:	b2da      	uxtb	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	b2da      	uxtb	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	0e1b      	lsrs	r3, r3, #24
 800792a:	b2da      	uxtb	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	b2da      	uxtb	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	b2da      	uxtb	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	372c      	adds	r7, #44	; 0x2c
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	58004000 	.word	0x58004000
 8007954:	a94656b9 	.word	0xa94656b9

08007958 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	4a08      	ldr	r2, [pc, #32]	; (8007988 <shci_init+0x30>)
 8007968:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800796a:	4a08      	ldr	r2, [pc, #32]	; (800798c <shci_init+0x34>)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007970:	4806      	ldr	r0, [pc, #24]	; (800798c <shci_init+0x34>)
 8007972:	f000 f911 	bl	8007b98 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f894 	bl	8007aa8 <TlInit>

  return;
 8007980:	bf00      	nop
}
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000244 	.word	0x20000244
 800798c:	20000224 	.word	0x20000224

08007990 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007996:	4822      	ldr	r0, [pc, #136]	; (8007a20 <shci_user_evt_proc+0x90>)
 8007998:	f000 f922 	bl	8007be0 <LST_is_empty>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d12b      	bne.n	80079fa <shci_user_evt_proc+0x6a>
 80079a2:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <shci_user_evt_proc+0x94>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d027      	beq.n	80079fa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80079aa:	f107 030c 	add.w	r3, r7, #12
 80079ae:	4619      	mov	r1, r3
 80079b0:	481b      	ldr	r0, [pc, #108]	; (8007a20 <shci_user_evt_proc+0x90>)
 80079b2:	f000 f9a4 	bl	8007cfe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80079b6:	4b1c      	ldr	r3, [pc, #112]	; (8007a28 <shci_user_evt_proc+0x98>)
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00c      	beq.n	80079d8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80079c2:	2301      	movs	r3, #1
 80079c4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80079c6:	4b18      	ldr	r3, [pc, #96]	; (8007a28 <shci_user_evt_proc+0x98>)
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	1d3a      	adds	r2, r7, #4
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80079d0:	793a      	ldrb	r2, [r7, #4]
 80079d2:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <shci_user_evt_proc+0x94>)
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e002      	b.n	80079de <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80079d8:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <shci_user_evt_proc+0x94>)
 80079da:	2201      	movs	r2, #1
 80079dc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80079de:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <shci_user_evt_proc+0x94>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fc49 	bl	8008280 <TL_MM_EvtDone>
 80079ee:	e004      	b.n	80079fa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4619      	mov	r1, r3
 80079f4:	480a      	ldr	r0, [pc, #40]	; (8007a20 <shci_user_evt_proc+0x90>)
 80079f6:	f000 f915 	bl	8007c24 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80079fa:	4809      	ldr	r0, [pc, #36]	; (8007a20 <shci_user_evt_proc+0x90>)
 80079fc:	f000 f8f0 	bl	8007be0 <LST_is_empty>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d107      	bne.n	8007a16 <shci_user_evt_proc+0x86>
 8007a06:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <shci_user_evt_proc+0x94>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007a0e:	4804      	ldr	r0, [pc, #16]	; (8007a20 <shci_user_evt_proc+0x90>)
 8007a10:	f7f9 f826 	bl	8000a60 <shci_notify_asynch_evt>
  }


  return;
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
}
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200001b0 	.word	0x200001b0
 8007a24:	200001c0 	.word	0x200001c0
 8007a28:	20000224 	.word	0x20000224

08007a2c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60ba      	str	r2, [r7, #8]
 8007a34:	607b      	str	r3, [r7, #4]
 8007a36:	4603      	mov	r3, r0
 8007a38:	81fb      	strh	r3, [r7, #14]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f000 f864 	bl	8007b0c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007a44:	4b16      	ldr	r3, [pc, #88]	; (8007aa0 <shci_send+0x74>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	89fa      	ldrh	r2, [r7, #14]
 8007a4a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007a4e:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <shci_send+0x74>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	7b7a      	ldrb	r2, [r7, #13]
 8007a54:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007a56:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <shci_send+0x74>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	330c      	adds	r3, #12
 8007a5c:	7b7a      	ldrb	r2, [r7, #13]
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 ff65 	bl	8008930 <memcpy>

  shciContext.io.Send(0,0);
 8007a66:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <shci_send+0x78>)
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007a70:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007a74:	f7f9 f80b 	bl	8000a8e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f103 0008 	add.w	r0, r3, #8
 8007a7e:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <shci_send+0x74>)
 8007a80:	6819      	ldr	r1, [r3, #0]
 8007a82:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <shci_send+0x74>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	789b      	ldrb	r3, [r3, #2]
 8007a88:	3303      	adds	r3, #3
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 ff50 	bl	8008930 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007a90:	2001      	movs	r0, #1
 8007a92:	f000 f83b 	bl	8007b0c <Cmd_SetStatus>

  return;
 8007a96:	bf00      	nop
}
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200001bc 	.word	0x200001bc
 8007aa4:	20000224 	.word	0x20000224

08007aa8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007ab0:	4a10      	ldr	r2, [pc, #64]	; (8007af4 <TlInit+0x4c>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007ab6:	4810      	ldr	r0, [pc, #64]	; (8007af8 <TlInit+0x50>)
 8007ab8:	f000 f882 	bl	8007bc0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007abc:	2001      	movs	r0, #1
 8007abe:	f000 f825 	bl	8007b0c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007ac2:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <TlInit+0x54>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <TlInit+0x58>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00c      	beq.n	8007aea <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007ad4:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <TlInit+0x5c>)
 8007ad6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007ad8:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <TlInit+0x60>)
 8007ada:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007adc:	4b08      	ldr	r3, [pc, #32]	; (8007b00 <TlInit+0x58>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f107 020c 	add.w	r2, r7, #12
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
  }

  return;
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
}
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	200001bc 	.word	0x200001bc
 8007af8:	200001b0 	.word	0x200001b0
 8007afc:	200001c0 	.word	0x200001c0
 8007b00:	20000224 	.word	0x20000224
 8007b04:	08007b5d 	.word	0x08007b5d
 8007b08:	08007b75 	.word	0x08007b75

08007b0c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10b      	bne.n	8007b34 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <Cmd_SetStatus+0x48>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007b24:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <Cmd_SetStatus+0x48>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2000      	movs	r0, #0
 8007b2a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <Cmd_SetStatus+0x4c>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007b32:	e00b      	b.n	8007b4c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007b34:	4b08      	ldr	r3, [pc, #32]	; (8007b58 <Cmd_SetStatus+0x4c>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <Cmd_SetStatus+0x48>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007b42:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <Cmd_SetStatus+0x48>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2001      	movs	r0, #1
 8007b48:	4798      	blx	r3
  return;
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
}
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000244 	.word	0x20000244
 8007b58:	200001b8 	.word	0x200001b8

08007b5c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007b64:	2000      	movs	r0, #0
 8007b66:	f7f8 ff87 	bl	8000a78 <shci_cmd_resp_release>

  return;
 8007b6a:	bf00      	nop
}
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	4805      	ldr	r0, [pc, #20]	; (8007b94 <TlUserEvtReceived+0x20>)
 8007b80:	f000 f876 	bl	8007c70 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007b84:	4803      	ldr	r0, [pc, #12]	; (8007b94 <TlUserEvtReceived+0x20>)
 8007b86:	f7f8 ff6b 	bl	8000a60 <shci_notify_asynch_evt>

  return;
 8007b8a:	bf00      	nop
}
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	200001b0 	.word	0x200001b0

08007b98 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a05      	ldr	r2, [pc, #20]	; (8007bb8 <shci_register_io_bus+0x20>)
 8007ba4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a04      	ldr	r2, [pc, #16]	; (8007bbc <shci_register_io_bus+0x24>)
 8007baa:	611a      	str	r2, [r3, #16]

  return;
 8007bac:	bf00      	nop
}
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	0800810d 	.word	0x0800810d
 8007bbc:	08008161 	.word	0x08008161

08007bc0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	605a      	str	r2, [r3, #4]
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007bf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bf2:	b672      	cpsid	i
}
 8007bf4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d102      	bne.n	8007c06 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
 8007c04:	e001      	b.n	8007c0a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	75fb      	strb	r3, [r7, #23]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f383 8810 	msr	PRIMASK, r3
}
 8007c14:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c32:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c34:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007c36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c38:	b672      	cpsid	i
}
 8007c3a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	605a      	str	r2, [r3, #4]
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f383 8810 	msr	PRIMASK, r3
}
 8007c62:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007c64:	bf00      	nop
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c80:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007c82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c84:	b672      	cpsid	i
}
 8007c86:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f383 8810 	msr	PRIMASK, r3
}
 8007cae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ccc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007cce:	b672      	cpsid	i
}
 8007cd0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6812      	ldr	r2, [r2, #0]
 8007cda:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	6852      	ldr	r2, [r2, #4]
 8007ce4:	605a      	str	r2, [r3, #4]
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f383 8810 	msr	PRIMASK, r3
}
 8007cf0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d08:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007d10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d12:	b672      	cpsid	i
}
 8007d14:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff ffca 	bl	8007cbc <LST_remove_node>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f383 8810 	msr	PRIMASK, r3
}
 8007d32:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007d34:	bf00      	nop
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  return;
 8007d40:	bf00      	nop
}
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <BLS_Init>:

__weak void BLS_Init( void )
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	af00      	add	r7, sp, #0
  return;
 8007d4e:	bf00      	nop
}
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  return;
 8007d5c:	bf00      	nop
}
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <DIS_Init>:
__weak void DIS_Init( void )
{
 8007d66:	b480      	push	{r7}
 8007d68:	af00      	add	r7, sp, #0
  return;
 8007d6a:	bf00      	nop
}
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
  return;
 8007d78:	bf00      	nop
}
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007d82:	b480      	push	{r7}
 8007d84:	af00      	add	r7, sp, #0
  return;
 8007d86:	bf00      	nop
}
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HRS_Init>:
__weak void HRS_Init( void )
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  return;
 8007d94:	bf00      	nop
}
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HTS_Init>:
__weak void HTS_Init( void )
{
 8007d9e:	b480      	push	{r7}
 8007da0:	af00      	add	r7, sp, #0
  return;
 8007da2:	bf00      	nop
}
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <IAS_Init>:
__weak void IAS_Init( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
  return;
 8007db0:	bf00      	nop
}
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <LLS_Init>:
__weak void LLS_Init( void )
{
 8007dba:	b480      	push	{r7}
 8007dbc:	af00      	add	r7, sp, #0
  return;
 8007dbe:	bf00      	nop
}
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <TPS_Init>:
__weak void TPS_Init( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  return;
 8007dcc:	bf00      	nop
}
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	af00      	add	r7, sp, #0
  return;
 8007dda:	bf00      	nop
}
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <ZDD_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void ZDD_STM_Init( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  return;
 8007de8:	bf00      	nop
}
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8007df2:	b480      	push	{r7}
 8007df4:	af00      	add	r7, sp, #0
  return;
 8007df6:	bf00      	nop
}
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <MESH_Init>:
__weak void MESH_Init( void )
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  return;
 8007e04:	bf00      	nop
}
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007e0e:	b480      	push	{r7}
 8007e10:	af00      	add	r7, sp, #0
  return;
 8007e12:	bf00      	nop
}
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
  return;
 8007e20:	bf00      	nop
}
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <SVCCTL_Init+0x18>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007e36:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <SVCCTL_Init+0x1c>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007e3c:	f000 f806 	bl	8007e4c <SVCCTL_SvcInit>

  return;
 8007e40:	bf00      	nop
}
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	2000018c 	.word	0x2000018c
 8007e48:	200001ac 	.word	0x200001ac

08007e4c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  BAS_Init();
 8007e50:	f7ff ff74 	bl	8007d3c <BAS_Init>

  BLS_Init();
 8007e54:	f7ff ff79 	bl	8007d4a <BLS_Init>

  CRS_STM_Init();
 8007e58:	f7ff ff7e 	bl	8007d58 <CRS_STM_Init>

  DIS_Init();
 8007e5c:	f7ff ff83 	bl	8007d66 <DIS_Init>

  EDS_STM_Init();
 8007e60:	f7ff ff88 	bl	8007d74 <EDS_STM_Init>

  HIDS_Init();
 8007e64:	f7ff ff8d 	bl	8007d82 <HIDS_Init>

  HRS_Init();
 8007e68:	f7ff ff92 	bl	8007d90 <HRS_Init>

  HTS_Init();
 8007e6c:	f7ff ff97 	bl	8007d9e <HTS_Init>

  IAS_Init();
 8007e70:	f7ff ff9c 	bl	8007dac <IAS_Init>

  LLS_Init();
 8007e74:	f7ff ffa1 	bl	8007dba <LLS_Init>

  TPS_Init();
 8007e78:	f7ff ffa6 	bl	8007dc8 <TPS_Init>

  MOTENV_STM_Init();
 8007e7c:	f7ff ffab 	bl	8007dd6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007e80:	f7ff fbb6 	bl	80075f0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007e84:	f7ff ffae 	bl	8007de4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007e88:	f7ff ffb3 	bl	8007df2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007e8c:	f7ff ffbf 	bl	8007e0e <BVOPUS_STM_Init>

  MESH_Init();
 8007e90:	f7ff ffb6 	bl	8007e00 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007e94:	f7ff ffc2 	bl	8007e1c <SVCCTL_InitCustomSvc>
  
  return;
 8007e98:	bf00      	nop
}
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <SVCCTL_RegisterSvcHandler+0x30>)
 8007ea6:	7f1b      	ldrb	r3, [r3, #28]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4a08      	ldr	r2, [pc, #32]	; (8007ecc <SVCCTL_RegisterSvcHandler+0x30>)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <SVCCTL_RegisterSvcHandler+0x30>)
 8007eb4:	7f1b      	ldrb	r3, [r3, #28]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <SVCCTL_RegisterSvcHandler+0x30>)
 8007ebc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007ebe:	bf00      	nop
}
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	2000018c 	.word	0x2000018c

08007ed0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3301      	adds	r3, #1
 8007edc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2bff      	cmp	r3, #255	; 0xff
 8007ee8:	d125      	bne.n	8007f36 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	3302      	adds	r3, #2
 8007eee:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007efa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007efe:	d118      	bne.n	8007f32 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007f00:	2300      	movs	r3, #0
 8007f02:	757b      	strb	r3, [r7, #21]
 8007f04:	e00d      	b.n	8007f22 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007f06:	7d7b      	ldrb	r3, [r7, #21]
 8007f08:	4a1a      	ldr	r2, [pc, #104]	; (8007f74 <SVCCTL_UserEvtRx+0xa4>)
 8007f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d108      	bne.n	8007f2e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007f1c:	7d7b      	ldrb	r3, [r7, #21]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	757b      	strb	r3, [r7, #21]
 8007f22:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <SVCCTL_UserEvtRx+0xa4>)
 8007f24:	7f1b      	ldrb	r3, [r3, #28]
 8007f26:	7d7a      	ldrb	r2, [r7, #21]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d3ec      	bcc.n	8007f06 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007f2c:	e002      	b.n	8007f34 <SVCCTL_UserEvtRx+0x64>
              break;
 8007f2e:	bf00      	nop
          break;
 8007f30:	e000      	b.n	8007f34 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007f32:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007f34:	e000      	b.n	8007f38 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007f36:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d00f      	beq.n	8007f5e <SVCCTL_UserEvtRx+0x8e>
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	dc10      	bgt.n	8007f64 <SVCCTL_UserEvtRx+0x94>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <SVCCTL_UserEvtRx+0x7c>
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d006      	beq.n	8007f58 <SVCCTL_UserEvtRx+0x88>
 8007f4a:	e00b      	b.n	8007f64 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7f9 ffe3 	bl	8001f18 <SVCCTL_App_Notification>
 8007f52:	4603      	mov	r3, r0
 8007f54:	75bb      	strb	r3, [r7, #22]
      break;
 8007f56:	e008      	b.n	8007f6a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	75bb      	strb	r3, [r7, #22]
      break;
 8007f5c:	e005      	b.n	8007f6a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75bb      	strb	r3, [r7, #22]
      break;
 8007f62:	e002      	b.n	8007f6a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007f64:	2301      	movs	r3, #1
 8007f66:	75bb      	strb	r3, [r7, #22]
      break;
 8007f68:	bf00      	nop
  }

  return (return_status);
 8007f6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	2000018c 	.word	0x2000018c

08007f78 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007f7c:	f7fa fd02 	bl	8002984 <HW_IPCC_Enable>

  return;
 8007f80:	bf00      	nop
}
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <TL_Init>:


void TL_Init( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007f88:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <TL_Init+0x48>)
 8007f8a:	4a11      	ldr	r2, [pc, #68]	; (8007fd0 <TL_Init+0x4c>)
 8007f8c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <TL_Init+0x48>)
 8007f90:	4a10      	ldr	r2, [pc, #64]	; (8007fd4 <TL_Init+0x50>)
 8007f92:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007f94:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <TL_Init+0x48>)
 8007f96:	4a10      	ldr	r2, [pc, #64]	; (8007fd8 <TL_Init+0x54>)
 8007f98:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <TL_Init+0x48>)
 8007f9c:	4a0f      	ldr	r2, [pc, #60]	; (8007fdc <TL_Init+0x58>)
 8007f9e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <TL_Init+0x48>)
 8007fa2:	4a0f      	ldr	r2, [pc, #60]	; (8007fe0 <TL_Init+0x5c>)
 8007fa4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <TL_Init+0x48>)
 8007fa8:	4a0e      	ldr	r2, [pc, #56]	; (8007fe4 <TL_Init+0x60>)
 8007faa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007fac:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <TL_Init+0x48>)
 8007fae:	4a0e      	ldr	r2, [pc, #56]	; (8007fe8 <TL_Init+0x64>)
 8007fb0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007fb2:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <TL_Init+0x48>)
 8007fb4:	4a0d      	ldr	r2, [pc, #52]	; (8007fec <TL_Init+0x68>)
 8007fb6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007fb8:	4b04      	ldr	r3, [pc, #16]	; (8007fcc <TL_Init+0x48>)
 8007fba:	4a0d      	ldr	r2, [pc, #52]	; (8007ff0 <TL_Init+0x6c>)
 8007fbc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007fbe:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <TL_Init+0x48>)
 8007fc0:	4a0c      	ldr	r2, [pc, #48]	; (8007ff4 <TL_Init+0x70>)
 8007fc2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007fc4:	f7fa fcf2 	bl	80029ac <HW_IPCC_Init>

  return;
 8007fc8:	bf00      	nop
}
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20030000 	.word	0x20030000
 8007fd0:	20030134 	.word	0x20030134
 8007fd4:	20030154 	.word	0x20030154
 8007fd8:	20030164 	.word	0x20030164
 8007fdc:	20030170 	.word	0x20030170
 8007fe0:	20030178 	.word	0x20030178
 8007fe4:	20030180 	.word	0x20030180
 8007fe8:	20030188 	.word	0x20030188
 8007fec:	200301a4 	.word	0x200301a4
 8007ff0:	200301a8 	.word	0x200301a8
 8007ff4:	200301b4 	.word	0x200301b4

08007ff8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008004:	4811      	ldr	r0, [pc, #68]	; (800804c <TL_BLE_Init+0x54>)
 8008006:	f7ff fddb 	bl	8007bc0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800800a:	4b11      	ldr	r3, [pc, #68]	; (8008050 <TL_BLE_Init+0x58>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4a0c      	ldr	r2, [pc, #48]	; (8008054 <TL_BLE_Init+0x5c>)
 8008024:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4a08      	ldr	r2, [pc, #32]	; (800804c <TL_BLE_Init+0x54>)
 800802a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800802c:	f7fa fcd4 	bl	80029d8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a08      	ldr	r2, [pc, #32]	; (8008058 <TL_BLE_Init+0x60>)
 8008036:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	4a07      	ldr	r2, [pc, #28]	; (800805c <TL_BLE_Init+0x64>)
 800803e:	6013      	str	r3, [r2, #0]

  return 0;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200301d0 	.word	0x200301d0
 8008050:	20030000 	.word	0x20030000
 8008054:	20030a48 	.word	0x20030a48
 8008058:	20000250 	.word	0x20000250
 800805c:	20000254 	.word	0x20000254

08008060 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <TL_BLE_SendCmd+0x34>)
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2201      	movs	r2, #1
 8008074:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008076:	4b07      	ldr	r3, [pc, #28]	; (8008094 <TL_BLE_SendCmd+0x34>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4619      	mov	r1, r3
 800807e:	2001      	movs	r0, #1
 8008080:	f000 f96c 	bl	800835c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008084:	f7fa fcb2 	bl	80029ec <HW_IPCC_BLE_SendCmd>

  return 0;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20030000 	.word	0x20030000

08008098 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800809e:	e01c      	b.n	80080da <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80080a0:	1d3b      	adds	r3, r7, #4
 80080a2:	4619      	mov	r1, r3
 80080a4:	4812      	ldr	r0, [pc, #72]	; (80080f0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80080a6:	f7ff fe2a 	bl	8007cfe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	7a5b      	ldrb	r3, [r3, #9]
 80080ae:	2b0f      	cmp	r3, #15
 80080b0:	d003      	beq.n	80080ba <HW_IPCC_BLE_RxEvtNot+0x22>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	7a5b      	ldrb	r3, [r3, #9]
 80080b6:	2b0e      	cmp	r3, #14
 80080b8:	d105      	bne.n	80080c6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4619      	mov	r1, r3
 80080be:	2002      	movs	r0, #2
 80080c0:	f000 f94c 	bl	800835c <OutputDbgTrace>
 80080c4:	e004      	b.n	80080d0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4619      	mov	r1, r3
 80080ca:	2003      	movs	r0, #3
 80080cc:	f000 f946 	bl	800835c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80080d0:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4610      	mov	r0, r2
 80080d8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80080da:	4805      	ldr	r0, [pc, #20]	; (80080f0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80080dc:	f7ff fd80 	bl	8007be0 <LST_is_empty>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0dc      	beq.n	80080a0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80080e6:	bf00      	nop
}
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	200301d0 	.word	0x200301d0
 80080f4:	20000250 	.word	0x20000250

080080f8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80080fc:	4b02      	ldr	r3, [pc, #8]	; (8008108 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4798      	blx	r3

  return;
 8008102:	bf00      	nop
}
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000254 	.word	0x20000254

0800810c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008118:	480d      	ldr	r0, [pc, #52]	; (8008150 <TL_SYS_Init+0x44>)
 800811a:	f7ff fd51 	bl	8007bc0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <TL_SYS_Init+0x48>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4a08      	ldr	r2, [pc, #32]	; (8008150 <TL_SYS_Init+0x44>)
 8008130:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008132:	f7fa fc7d 	bl	8002a30 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a07      	ldr	r2, [pc, #28]	; (8008158 <TL_SYS_Init+0x4c>)
 800813c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	4a06      	ldr	r2, [pc, #24]	; (800815c <TL_SYS_Init+0x50>)
 8008144:	6013      	str	r3, [r2, #0]

  return 0;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	200301d8 	.word	0x200301d8
 8008154:	20030000 	.word	0x20030000
 8008158:	20000258 	.word	0x20000258
 800815c:	2000025c 	.word	0x2000025c

08008160 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800816c:	4b09      	ldr	r3, [pc, #36]	; (8008194 <TL_SYS_SendCmd+0x34>)
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2210      	movs	r2, #16
 8008174:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008176:	4b07      	ldr	r3, [pc, #28]	; (8008194 <TL_SYS_SendCmd+0x34>)
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4619      	mov	r1, r3
 800817e:	2004      	movs	r0, #4
 8008180:	f000 f8ec 	bl	800835c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008184:	f7fa fc5e 	bl	8002a44 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20030000 	.word	0x20030000

08008198 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800819c:	4b07      	ldr	r3, [pc, #28]	; (80081bc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4619      	mov	r1, r3
 80081a4:	2005      	movs	r0, #5
 80081a6:	f000 f8d9 	bl	800835c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80081aa:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a03      	ldr	r2, [pc, #12]	; (80081bc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80081b0:	68d2      	ldr	r2, [r2, #12]
 80081b2:	6812      	ldr	r2, [r2, #0]
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3

  return;
 80081b8:	bf00      	nop
}
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20030000 	.word	0x20030000
 80081c0:	20000258 	.word	0x20000258

080081c4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80081ca:	e00e      	b.n	80081ea <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80081cc:	1d3b      	adds	r3, r7, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	480b      	ldr	r0, [pc, #44]	; (8008200 <HW_IPCC_SYS_EvtNot+0x3c>)
 80081d2:	f7ff fd94 	bl	8007cfe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4619      	mov	r1, r3
 80081da:	2006      	movs	r0, #6
 80081dc:	f000 f8be 	bl	800835c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80081e0:	4b08      	ldr	r3, [pc, #32]	; (8008204 <HW_IPCC_SYS_EvtNot+0x40>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	4610      	mov	r0, r2
 80081e8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80081ea:	4805      	ldr	r0, [pc, #20]	; (8008200 <HW_IPCC_SYS_EvtNot+0x3c>)
 80081ec:	f7ff fcf8 	bl	8007be0 <LST_is_empty>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0ea      	beq.n	80081cc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80081f6:	bf00      	nop
}
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	200301d8 	.word	0x200301d8
 8008204:	2000025c 	.word	0x2000025c

08008208 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008210:	4817      	ldr	r0, [pc, #92]	; (8008270 <TL_MM_Init+0x68>)
 8008212:	f7ff fcd5 	bl	8007bc0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008216:	4817      	ldr	r0, [pc, #92]	; (8008274 <TL_MM_Init+0x6c>)
 8008218:	f7ff fcd2 	bl	8007bc0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800821c:	4b16      	ldr	r3, [pc, #88]	; (8008278 <TL_MM_Init+0x70>)
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	4a16      	ldr	r2, [pc, #88]	; (800827c <TL_MM_Init+0x74>)
 8008222:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008224:	4b15      	ldr	r3, [pc, #84]	; (800827c <TL_MM_Init+0x74>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6892      	ldr	r2, [r2, #8]
 800822c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <TL_MM_Init+0x74>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	68d2      	ldr	r2, [r2, #12]
 8008236:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008238:	4b10      	ldr	r3, [pc, #64]	; (800827c <TL_MM_Init+0x74>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a0c      	ldr	r2, [pc, #48]	; (8008270 <TL_MM_Init+0x68>)
 800823e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008240:	4b0e      	ldr	r3, [pc, #56]	; (800827c <TL_MM_Init+0x74>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <TL_MM_Init+0x74>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6852      	ldr	r2, [r2, #4]
 8008252:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008254:	4b09      	ldr	r3, [pc, #36]	; (800827c <TL_MM_Init+0x74>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6912      	ldr	r2, [r2, #16]
 800825c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <TL_MM_Init+0x74>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	6952      	ldr	r2, [r2, #20]
 8008266:	619a      	str	r2, [r3, #24]

  return;
 8008268:	bf00      	nop
}
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	200301c0 	.word	0x200301c0
 8008274:	20000248 	.word	0x20000248
 8008278:	20030000 	.word	0x20030000
 800827c:	20000260 	.word	0x20000260

08008280 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4807      	ldr	r0, [pc, #28]	; (80082a8 <TL_MM_EvtDone+0x28>)
 800828c:	f7ff fcf0 	bl	8007c70 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	2000      	movs	r0, #0
 8008294:	f000 f862 	bl	800835c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008298:	4804      	ldr	r0, [pc, #16]	; (80082ac <TL_MM_EvtDone+0x2c>)
 800829a:	f7fa fbf9 	bl	8002a90 <HW_IPCC_MM_SendFreeBuf>

  return;
 800829e:	bf00      	nop
}
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000248 	.word	0x20000248
 80082ac:	080082b1 	.word	0x080082b1

080082b0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80082b6:	e00c      	b.n	80082d2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80082b8:	1d3b      	adds	r3, r7, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	480a      	ldr	r0, [pc, #40]	; (80082e8 <SendFreeBuf+0x38>)
 80082be:	f7ff fd1e 	bl	8007cfe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80082c2:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <SendFreeBuf+0x3c>)
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4611      	mov	r1, r2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fccf 	bl	8007c70 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80082d2:	4805      	ldr	r0, [pc, #20]	; (80082e8 <SendFreeBuf+0x38>)
 80082d4:	f7ff fc84 	bl	8007be0 <LST_is_empty>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0ec      	beq.n	80082b8 <SendFreeBuf+0x8>
  }

  return;
 80082de:	bf00      	nop
}
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000248 	.word	0x20000248
 80082ec:	20030000 	.word	0x20030000

080082f0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80082f4:	4805      	ldr	r0, [pc, #20]	; (800830c <TL_TRACES_Init+0x1c>)
 80082f6:	f7ff fc63 	bl	8007bc0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <TL_TRACES_Init+0x20>)
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4a03      	ldr	r2, [pc, #12]	; (800830c <TL_TRACES_Init+0x1c>)
 8008300:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008302:	f7fa fbfb 	bl	8002afc <HW_IPCC_TRACES_Init>

  return;
 8008306:	bf00      	nop
}
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200301c8 	.word	0x200301c8
 8008310:	20030000 	.word	0x20030000

08008314 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800831a:	e008      	b.n	800832e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800831c:	1d3b      	adds	r3, r7, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4808      	ldr	r0, [pc, #32]	; (8008344 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008322:	f7ff fcec 	bl	8007cfe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f80d 	bl	8008348 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800832e:	4805      	ldr	r0, [pc, #20]	; (8008344 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008330:	f7ff fc56 	bl	8007be0 <LST_is_empty>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0f0      	beq.n	800831c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800833a:	bf00      	nop
}
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200301c8 	.word	0x200301c8

08008348 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b06      	cmp	r3, #6
 800836c:	d845      	bhi.n	80083fa <OutputDbgTrace+0x9e>
 800836e:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <OutputDbgTrace+0x18>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	08008391 	.word	0x08008391
 8008378:	080083b5 	.word	0x080083b5
 800837c:	080083bb 	.word	0x080083bb
 8008380:	080083cf 	.word	0x080083cf
 8008384:	080083db 	.word	0x080083db
 8008388:	080083e1 	.word	0x080083e1
 800838c:	080083ef 	.word	0x080083ef
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	7a5b      	ldrb	r3, [r3, #9]
 8008398:	2bff      	cmp	r3, #255	; 0xff
 800839a:	d005      	beq.n	80083a8 <OutputDbgTrace+0x4c>
 800839c:	2bff      	cmp	r3, #255	; 0xff
 800839e:	dc05      	bgt.n	80083ac <OutputDbgTrace+0x50>
 80083a0:	2b0e      	cmp	r3, #14
 80083a2:	d005      	beq.n	80083b0 <OutputDbgTrace+0x54>
 80083a4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80083a6:	e001      	b.n	80083ac <OutputDbgTrace+0x50>
          break;
 80083a8:	bf00      	nop
 80083aa:	e027      	b.n	80083fc <OutputDbgTrace+0xa0>
          break;
 80083ac:	bf00      	nop
 80083ae:	e025      	b.n	80083fc <OutputDbgTrace+0xa0>
          break;
 80083b0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80083b2:	e023      	b.n	80083fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80083b8:	e020      	b.n	80083fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	7a5b      	ldrb	r3, [r3, #9]
 80083c2:	2b0e      	cmp	r3, #14
 80083c4:	d001      	beq.n	80083ca <OutputDbgTrace+0x6e>
 80083c6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80083c8:	e000      	b.n	80083cc <OutputDbgTrace+0x70>
          break;
 80083ca:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80083cc:	e016      	b.n	80083fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	7a5b      	ldrb	r3, [r3, #9]
 80083d6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80083d8:	e010      	b.n	80083fc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80083de:	e00d      	b.n	80083fc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	7a5b      	ldrb	r3, [r3, #9]
 80083e8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80083ea:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80083ec:	e006      	b.n	80083fc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	7a5b      	ldrb	r3, [r3, #9]
 80083f6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80083f8:	e000      	b.n	80083fc <OutputDbgTrace+0xa0>

    default:
      break;
 80083fa:	bf00      	nop
  }

  return;
 80083fc:	bf00      	nop
}
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <UTIL_LPM_Init+0x1c>)
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <UTIL_LPM_Init+0x20>)
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008418:	bf00      	nop
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	20000264 	.word	0x20000264
 8008428:	20000268 	.word	0x20000268

0800842c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008438:	f3ef 8310 	mrs	r3, PRIMASK
 800843c:	613b      	str	r3, [r7, #16]
  return(result);
 800843e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008442:	b672      	cpsid	i
}
 8008444:	bf00      	nop
  
  switch(state)
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d008      	beq.n	800845e <UTIL_LPM_SetOffMode+0x32>
 800844c:	2b01      	cmp	r3, #1
 800844e:	d10e      	bne.n	800846e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008450:	4b0d      	ldr	r3, [pc, #52]	; (8008488 <UTIL_LPM_SetOffMode+0x5c>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4313      	orrs	r3, r2
 8008458:	4a0b      	ldr	r2, [pc, #44]	; (8008488 <UTIL_LPM_SetOffMode+0x5c>)
 800845a:	6013      	str	r3, [r2, #0]
      break;
 800845c:	e008      	b.n	8008470 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	43da      	mvns	r2, r3
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <UTIL_LPM_SetOffMode+0x5c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4013      	ands	r3, r2
 8008468:	4a07      	ldr	r2, [pc, #28]	; (8008488 <UTIL_LPM_SetOffMode+0x5c>)
 800846a:	6013      	str	r3, [r2, #0]
      break;
 800846c:	e000      	b.n	8008470 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800846e:	bf00      	nop
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f383 8810 	msr	PRIMASK, r3
}
 800847a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800847c:	bf00      	nop
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	20000268 	.word	0x20000268

0800848c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08c      	sub	sp, #48	; 0x30
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008494:	4b6a      	ldr	r3, [pc, #424]	; (8008640 <UTIL_SEQ_Run+0x1b4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800849a:	4b69      	ldr	r3, [pc, #420]	; (8008640 <UTIL_SEQ_Run+0x1b4>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4013      	ands	r3, r2
 80084a2:	4a67      	ldr	r2, [pc, #412]	; (8008640 <UTIL_SEQ_Run+0x1b4>)
 80084a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80084a6:	4b67      	ldr	r3, [pc, #412]	; (8008644 <UTIL_SEQ_Run+0x1b8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80084ac:	e086      	b.n	80085bc <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80084b2:	e002      	b.n	80084ba <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	3301      	adds	r3, #1
 80084b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80084ba:	4a63      	ldr	r2, [pc, #396]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80084c2:	4b62      	ldr	r3, [pc, #392]	; (800864c <UTIL_SEQ_Run+0x1c0>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	401a      	ands	r2, r3
 80084c8:	4b5d      	ldr	r3, [pc, #372]	; (8008640 <UTIL_SEQ_Run+0x1b4>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4013      	ands	r3, r2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80084d2:	4a5d      	ldr	r2, [pc, #372]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80084da:	4b5c      	ldr	r3, [pc, #368]	; (800864c <UTIL_SEQ_Run+0x1c0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	401a      	ands	r2, r3
 80084e0:	4b57      	ldr	r3, [pc, #348]	; (8008640 <UTIL_SEQ_Run+0x1b4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4013      	ands	r3, r2
 80084e6:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80084e8:	4a57      	ldr	r2, [pc, #348]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	4413      	add	r3, r2
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	4013      	ands	r3, r2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80084fa:	4a53      	ldr	r2, [pc, #332]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008506:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008508:	4a4f      	ldr	r2, [pc, #316]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	4413      	add	r3, r2
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	4013      	ands	r3, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f000 f9ac 	bl	8008874 <SEQ_BitPosition>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	4b4b      	ldr	r3, [pc, #300]	; (8008650 <UTIL_SEQ_Run+0x1c4>)
 8008522:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008524:	4a48      	ldr	r2, [pc, #288]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	4413      	add	r3, r2
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	4b48      	ldr	r3, [pc, #288]	; (8008650 <UTIL_SEQ_Run+0x1c4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2101      	movs	r1, #1
 8008534:	fa01 f303 	lsl.w	r3, r1, r3
 8008538:	43db      	mvns	r3, r3
 800853a:	401a      	ands	r2, r3
 800853c:	4942      	ldr	r1, [pc, #264]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	00db      	lsls	r3, r3, #3
 8008542:	440b      	add	r3, r1
 8008544:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008546:	f3ef 8310 	mrs	r3, PRIMASK
 800854a:	617b      	str	r3, [r7, #20]
  return(result);
 800854c:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800854e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008550:	b672      	cpsid	i
}
 8008552:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008554:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <UTIL_SEQ_Run+0x1c4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2201      	movs	r2, #1
 800855a:	fa02 f303 	lsl.w	r3, r2, r3
 800855e:	43da      	mvns	r2, r3
 8008560:	4b38      	ldr	r3, [pc, #224]	; (8008644 <UTIL_SEQ_Run+0x1b8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4013      	ands	r3, r2
 8008566:	4a37      	ldr	r2, [pc, #220]	; (8008644 <UTIL_SEQ_Run+0x1b8>)
 8008568:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800856a:	2302      	movs	r3, #2
 800856c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800856e:	e013      	b.n	8008598 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008572:	3b01      	subs	r3, #1
 8008574:	4a34      	ldr	r2, [pc, #208]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 8008576:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800857a:	4b35      	ldr	r3, [pc, #212]	; (8008650 <UTIL_SEQ_Run+0x1c4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2201      	movs	r2, #1
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	43da      	mvns	r2, r3
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	3b01      	subs	r3, #1
 800858a:	400a      	ands	r2, r1
 800858c:	492e      	ldr	r1, [pc, #184]	; (8008648 <UTIL_SEQ_Run+0x1bc>)
 800858e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	3b01      	subs	r3, #1
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e8      	bne.n	8008570 <UTIL_SEQ_Run+0xe4>
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f383 8810 	msr	PRIMASK, r3
}
 80085a8:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80085aa:	4b29      	ldr	r3, [pc, #164]	; (8008650 <UTIL_SEQ_Run+0x1c4>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a29      	ldr	r2, [pc, #164]	; (8008654 <UTIL_SEQ_Run+0x1c8>)
 80085b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085b4:	4798      	blx	r3
    
    local_taskset = TaskSet;
 80085b6:	4b23      	ldr	r3, [pc, #140]	; (8008644 <UTIL_SEQ_Run+0x1b8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80085bc:	4b23      	ldr	r3, [pc, #140]	; (800864c <UTIL_SEQ_Run+0x1c0>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	401a      	ands	r2, r3
 80085c4:	4b1e      	ldr	r3, [pc, #120]	; (8008640 <UTIL_SEQ_Run+0x1b4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4013      	ands	r3, r2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <UTIL_SEQ_Run+0x152>
 80085ce:	4b22      	ldr	r3, [pc, #136]	; (8008658 <UTIL_SEQ_Run+0x1cc>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b22      	ldr	r3, [pc, #136]	; (800865c <UTIL_SEQ_Run+0x1d0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4013      	ands	r3, r2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f43f af68 	beq.w	80084ae <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80085de:	4b1c      	ldr	r3, [pc, #112]	; (8008650 <UTIL_SEQ_Run+0x1c4>)
 80085e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085e4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80085e6:	f000 f937 	bl	8008858 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ea:	f3ef 8310 	mrs	r3, PRIMASK
 80085ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80085f0:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80085f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80085f4:	b672      	cpsid	i
}
 80085f6:	bf00      	nop
  local_taskset = TaskSet;
 80085f8:	4b12      	ldr	r3, [pc, #72]	; (8008644 <UTIL_SEQ_Run+0x1b8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <UTIL_SEQ_Run+0x1c0>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	401a      	ands	r2, r3
 8008606:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <UTIL_SEQ_Run+0x1b4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4013      	ands	r3, r2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d108      	bne.n	8008622 <UTIL_SEQ_Run+0x196>
 8008610:	4b11      	ldr	r3, [pc, #68]	; (8008658 <UTIL_SEQ_Run+0x1cc>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	4b11      	ldr	r3, [pc, #68]	; (800865c <UTIL_SEQ_Run+0x1d0>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800861e:	f7f8 fa0b 	bl	8000a38 <UTIL_SEQ_Idle>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f383 8810 	msr	PRIMASK, r3
}
 800862c:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800862e:	f000 f91a 	bl	8008866 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008632:	4a03      	ldr	r2, [pc, #12]	; (8008640 <UTIL_SEQ_Run+0x1b4>)
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	6013      	str	r3, [r2, #0]

  return;
 8008638:	bf00      	nop
}
 800863a:	3730      	adds	r7, #48	; 0x30
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	20000040 	.word	0x20000040
 8008644:	2000026c 	.word	0x2000026c
 8008648:	200002fc 	.word	0x200002fc
 800864c:	2000003c 	.word	0x2000003c
 8008650:	20000278 	.word	0x20000278
 8008654:	2000027c 	.word	0x2000027c
 8008658:	20000270 	.word	0x20000270
 800865c:	20000274 	.word	0x20000274

08008660 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866c:	f3ef 8310 	mrs	r3, PRIMASK
 8008670:	617b      	str	r3, [r7, #20]
  return(result);
 8008672:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008676:	b672      	cpsid	i
}
 8008678:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f8fa 	bl	8008874 <SEQ_BitPosition>
 8008680:	4603      	mov	r3, r0
 8008682:	4619      	mov	r1, r3
 8008684:	4a06      	ldr	r2, [pc, #24]	; (80086a0 <UTIL_SEQ_RegTask+0x40>)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	f383 8810 	msr	PRIMASK, r3
}
 8008696:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008698:	bf00      	nop
}
 800869a:	3720      	adds	r7, #32
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	2000027c 	.word	0x2000027c

080086a4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ae:	f3ef 8310 	mrs	r3, PRIMASK
 80086b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80086b4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086b8:	b672      	cpsid	i
}
 80086ba:	bf00      	nop

  TaskSet |= TaskId_bm;
 80086bc:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <UTIL_SEQ_SetTask+0x50>)
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	4a0b      	ldr	r2, [pc, #44]	; (80086f4 <UTIL_SEQ_SetTask+0x50>)
 80086c6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80086c8:	4a0b      	ldr	r2, [pc, #44]	; (80086f8 <UTIL_SEQ_SetTask+0x54>)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	4908      	ldr	r1, [pc, #32]	; (80086f8 <UTIL_SEQ_SetTask+0x54>)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f383 8810 	msr	PRIMASK, r3
}
 80086e6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80086e8:	bf00      	nop
}
 80086ea:	371c      	adds	r7, #28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	2000026c 	.word	0x2000026c
 80086f8:	200002fc 	.word	0x200002fc

080086fc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008704:	f3ef 8310 	mrs	r3, PRIMASK
 8008708:	60fb      	str	r3, [r7, #12]
  return(result);
 800870a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800870c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800870e:	b672      	cpsid	i
}
 8008710:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	43da      	mvns	r2, r3
 8008716:	4b08      	ldr	r3, [pc, #32]	; (8008738 <UTIL_SEQ_PauseTask+0x3c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4013      	ands	r3, r2
 800871c:	4a06      	ldr	r2, [pc, #24]	; (8008738 <UTIL_SEQ_PauseTask+0x3c>)
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f383 8810 	msr	PRIMASK, r3
}
 800872a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800872c:	bf00      	nop
}
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	2000003c 	.word	0x2000003c

0800873c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008744:	f3ef 8310 	mrs	r3, PRIMASK
 8008748:	60fb      	str	r3, [r7, #12]
  return(result);
 800874a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800874c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800874e:	b672      	cpsid	i
}
 8008750:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <UTIL_SEQ_ResumeTask+0x3c>)
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4313      	orrs	r3, r2
 800875a:	4a07      	ldr	r2, [pc, #28]	; (8008778 <UTIL_SEQ_ResumeTask+0x3c>)
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f383 8810 	msr	PRIMASK, r3
}
 8008768:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800876a:	bf00      	nop
}
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	2000003c 	.word	0x2000003c

0800877c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008784:	f3ef 8310 	mrs	r3, PRIMASK
 8008788:	60fb      	str	r3, [r7, #12]
  return(result);
 800878a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800878c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800878e:	b672      	cpsid	i
}
 8008790:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008792:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <UTIL_SEQ_SetEvt+0x3c>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4313      	orrs	r3, r2
 800879a:	4a07      	ldr	r2, [pc, #28]	; (80087b8 <UTIL_SEQ_SetEvt+0x3c>)
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f383 8810 	msr	PRIMASK, r3
}
 80087a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80087aa:	bf00      	nop
}
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20000270 	.word	0x20000270

080087bc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80087c4:	4b21      	ldr	r3, [pc, #132]	; (800884c <UTIL_SEQ_WaitEvt+0x90>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80087ca:	4b20      	ldr	r3, [pc, #128]	; (800884c <UTIL_SEQ_WaitEvt+0x90>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d2:	d102      	bne.n	80087da <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61fb      	str	r3, [r7, #28]
 80087d8:	e005      	b.n	80087e6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80087da:	4b1c      	ldr	r3, [pc, #112]	; (800884c <UTIL_SEQ_WaitEvt+0x90>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2201      	movs	r2, #1
 80087e0:	fa02 f303 	lsl.w	r3, r2, r3
 80087e4:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80087e6:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <UTIL_SEQ_WaitEvt+0x94>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80087ec:	4a18      	ldr	r2, [pc, #96]	; (8008850 <UTIL_SEQ_WaitEvt+0x94>)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80087f2:	e005      	b.n	8008800 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80087f4:	4b16      	ldr	r3, [pc, #88]	; (8008850 <UTIL_SEQ_WaitEvt+0x94>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4619      	mov	r1, r3
 80087fa:	69f8      	ldr	r0, [r7, #28]
 80087fc:	f7f8 f923 	bl	8000a46 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8008800:	4b14      	ldr	r3, [pc, #80]	; (8008854 <UTIL_SEQ_WaitEvt+0x98>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4b12      	ldr	r3, [pc, #72]	; (8008850 <UTIL_SEQ_WaitEvt+0x94>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4013      	ands	r3, r2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f2      	beq.n	80087f4 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800880e:	4a0f      	ldr	r2, [pc, #60]	; (800884c <UTIL_SEQ_WaitEvt+0x90>)
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008814:	f3ef 8310 	mrs	r3, PRIMASK
 8008818:	60bb      	str	r3, [r7, #8]
  return(result);
 800881a:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800881c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800881e:	b672      	cpsid	i
}
 8008820:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <UTIL_SEQ_WaitEvt+0x94>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	43da      	mvns	r2, r3
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <UTIL_SEQ_WaitEvt+0x98>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4013      	ands	r3, r2
 800882e:	4a09      	ldr	r2, [pc, #36]	; (8008854 <UTIL_SEQ_WaitEvt+0x98>)
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f383 8810 	msr	PRIMASK, r3
}
 800883c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800883e:	4a04      	ldr	r2, [pc, #16]	; (8008850 <UTIL_SEQ_WaitEvt+0x94>)
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	6013      	str	r3, [r2, #0]

  return;
 8008844:	bf00      	nop
}
 8008846:	3720      	adds	r7, #32
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000278 	.word	0x20000278
 8008850:	20000274 	.word	0x20000274
 8008854:	20000270 	.word	0x20000270

08008858 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800885c:	bf00      	nop
}
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008866:	b480      	push	{r7}
 8008868:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800886a:	bf00      	nop
}
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	0c1b      	lsrs	r3, r3, #16
 8008884:	041b      	lsls	r3, r3, #16
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <SEQ_BitPosition+0x20>
 800888a:	2310      	movs	r3, #16
 800888c:	73fb      	strb	r3, [r7, #15]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	041b      	lsls	r3, r3, #16
 8008892:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <SEQ_BitPosition+0x36>
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	3308      	adds	r3, #8
 80088a2:	73fb      	strb	r3, [r7, #15]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d105      	bne.n	80088c0 <SEQ_BitPosition+0x4c>
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	3304      	adds	r3, #4
 80088b8:	73fb      	strb	r3, [r7, #15]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	0f1b      	lsrs	r3, r3, #28
 80088c4:	4a07      	ldr	r2, [pc, #28]	; (80088e4 <SEQ_BitPosition+0x70>)
 80088c6:	5cd2      	ldrb	r2, [r2, r3]
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	4413      	add	r3, r2
 80088cc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	f1c3 031f 	rsb	r3, r3, #31
 80088d4:	b2db      	uxtb	r3, r3
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	08008bec 	.word	0x08008bec

080088e8 <__libc_init_array>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	4d0d      	ldr	r5, [pc, #52]	; (8008920 <__libc_init_array+0x38>)
 80088ec:	4c0d      	ldr	r4, [pc, #52]	; (8008924 <__libc_init_array+0x3c>)
 80088ee:	1b64      	subs	r4, r4, r5
 80088f0:	10a4      	asrs	r4, r4, #2
 80088f2:	2600      	movs	r6, #0
 80088f4:	42a6      	cmp	r6, r4
 80088f6:	d109      	bne.n	800890c <__libc_init_array+0x24>
 80088f8:	4d0b      	ldr	r5, [pc, #44]	; (8008928 <__libc_init_array+0x40>)
 80088fa:	4c0c      	ldr	r4, [pc, #48]	; (800892c <__libc_init_array+0x44>)
 80088fc:	f000 f82e 	bl	800895c <_init>
 8008900:	1b64      	subs	r4, r4, r5
 8008902:	10a4      	asrs	r4, r4, #2
 8008904:	2600      	movs	r6, #0
 8008906:	42a6      	cmp	r6, r4
 8008908:	d105      	bne.n	8008916 <__libc_init_array+0x2e>
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008910:	4798      	blx	r3
 8008912:	3601      	adds	r6, #1
 8008914:	e7ee      	b.n	80088f4 <__libc_init_array+0xc>
 8008916:	f855 3b04 	ldr.w	r3, [r5], #4
 800891a:	4798      	blx	r3
 800891c:	3601      	adds	r6, #1
 800891e:	e7f2      	b.n	8008906 <__libc_init_array+0x1e>
 8008920:	08008bfc 	.word	0x08008bfc
 8008924:	08008bfc 	.word	0x08008bfc
 8008928:	08008bfc 	.word	0x08008bfc
 800892c:	08008c00 	.word	0x08008c00

08008930 <memcpy>:
 8008930:	440a      	add	r2, r1
 8008932:	4291      	cmp	r1, r2
 8008934:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008938:	d100      	bne.n	800893c <memcpy+0xc>
 800893a:	4770      	bx	lr
 800893c:	b510      	push	{r4, lr}
 800893e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008946:	4291      	cmp	r1, r2
 8008948:	d1f9      	bne.n	800893e <memcpy+0xe>
 800894a:	bd10      	pop	{r4, pc}

0800894c <memset>:
 800894c:	4402      	add	r2, r0
 800894e:	4603      	mov	r3, r0
 8008950:	4293      	cmp	r3, r2
 8008952:	d100      	bne.n	8008956 <memset+0xa>
 8008954:	4770      	bx	lr
 8008956:	f803 1b01 	strb.w	r1, [r3], #1
 800895a:	e7f9      	b.n	8008950 <memset+0x4>

0800895c <_init>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr

08008968 <_fini>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr
