
BLE_custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006f88  08006f88  00016f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  08006f90  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  08006fb4  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  0800704d  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800708a  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000088  20000118  0800709b  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001b0  200001a0  08007123  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  08007123  00020350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   00032787  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005aac  00000000  00000000  00052957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000020f8  00000000  00000000  00058408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001eb0  00000000  00000000  0005a500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002a771  00000000  00000000  0005c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00020c28  00000000  00000000  00086b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000ef401  00000000  00000000  000a7749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  00196b4a  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000877c  00000000  00000000  00196ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a0 	.word	0x200001a0
 8000158:	00000000 	.word	0x00000000
 800015c:	08006cfc 	.word	0x08006cfc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a4 	.word	0x200001a4
 8000178:	08006cfc 	.word	0x08006cfc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 fbcd 	bl	8005948 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f004 fe68 	bl	8004e86 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08006d14 	.word	0x08006d14

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800028c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80002d4:	d101      	bne.n	80002da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80002ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002fa:	d101      	bne.n	8000300 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800031a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000330:	68fb      	ldr	r3, [r7, #12]
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_DBGMCU_GetRevisionID+0x18>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	0c1b      	lsrs	r3, r3, #16
 800034a:	b29b      	uxth	r3, r3
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e0042000 	.word	0xe0042000

0800035c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685a      	ldr	r2, [r3, #4]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	041b      	lsls	r3, r3, #16
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	605a      	str	r2, [r3, #4]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685a      	ldr	r2, [r3, #4]
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	431a      	orrs	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	605a      	str	r2, [r3, #4]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	041b      	lsls	r3, r3, #16
 80003b4:	431a      	orrs	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	615a      	str	r2, [r3, #20]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	431a      	orrs	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	615a      	str	r2, [r3, #20]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	609a      	str	r2, [r3, #8]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	619a      	str	r2, [r3, #24]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	22ff      	movs	r2, #255	; 0xff
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	22ca      	movs	r2, #202	; 0xca
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2253      	movs	r2, #83	; 0x53
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f023 0207 	bic.w	r2, r3, #7
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <MX_APPE_Config+0x18>)
 8000486:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800048a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 800048c:	f000 f824 	bl	80004d8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000490:	f000 f864 	bl	800055c <Config_HSE>

  return;
 8000494:	bf00      	nop
}
 8000496:	bd80      	pop	{r7, pc}
 8000498:	58004000 	.word	0x58004000

0800049c <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 80004a0:	f000 f870 	bl	8000584 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80004a4:	f000 f888 	bl	80005b8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004a8:	4903      	ldr	r1, [pc, #12]	; (80004b8 <MX_APPE_Init+0x1c>)
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 fcec 	bl	8000e88 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004b0:	f000 f890 	bl	80005d4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004b4:	bf00      	nop
}
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000324 	.word	0x20000324

080004bc <Init_Smps>:

void Init_Smps( void )
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 80004c0:	bf00      	nop
}
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <Init_Exti>:

void Init_Exti( void )
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fe8e 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 80004d4:	bf00      	nop
}
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80004dc:	f000 f804 	bl	80004e8 <Reset_BackupDomain>

  Reset_IPCC();
 80004e0:	f000 f81a 	bl	8000518 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004ec:	f7ff fee8 	bl	80002c0 <LL_RCC_IsActiveFlag_PINRST>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d00d      	beq.n	8000512 <Reset_BackupDomain+0x2a>
 80004f6:	f7ff fef6 	bl	80002e6 <LL_RCC_IsActiveFlag_SFTRST>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d108      	bne.n	8000512 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000500:	f001 fc94 	bl	8001e2c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000504:	f001 fc92 	bl	8001e2c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000508:	f7ff feb8 	bl	800027c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800050c:	f7ff fec7 	bl	800029e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000510:	bf00      	nop
 8000512:	bf00      	nop
}
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800051c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000520:	f7ff fef4 	bl	800030c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000524:	213f      	movs	r1, #63	; 0x3f
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <Reset_IPCC+0x40>)
 8000528:	f7ff ff5e 	bl	80003e8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800052c:	213f      	movs	r1, #63	; 0x3f
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <Reset_IPCC+0x40>)
 8000530:	f7ff ff68 	bl	8000404 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000534:	213f      	movs	r1, #63	; 0x3f
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <Reset_IPCC+0x40>)
 8000538:	f7ff ff10 	bl	800035c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800053c:	213f      	movs	r1, #63	; 0x3f
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <Reset_IPCC+0x40>)
 8000540:	f7ff ff2f 	bl	80003a2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000544:	213f      	movs	r1, #63	; 0x3f
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <Reset_IPCC+0x40>)
 8000548:	f7ff ff1a 	bl	8000380 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800054c:	213f      	movs	r1, #63	; 0x3f
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <Reset_IPCC+0x40>)
 8000550:	f7ff ff39 	bl	80003c6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000554:	bf00      	nop
}
 8000556:	bd80      	pop	{r7, pc}
 8000558:	58000c00 	.word	0x58000c00

0800055c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000562:	2000      	movs	r0, #0
 8000564:	f005 fa7c 	bl	8005a60 <OTP_Read>
 8000568:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d005      	beq.n	800057c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	799b      	ldrb	r3, [r3, #6]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe4f 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800057a:	bf00      	nop
 800057c:	bf00      	nop
}
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <System_Init>:

static void System_Init( void )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000588:	f7ff ff98 	bl	80004bc <Init_Smps>

  Init_Exti( );
 800058c:	f7ff ff9d 	bl	80004ca <Init_Exti>

  Init_Rtc( );
 8000590:	f000 f802 	bl	8000598 <Init_Rtc>

  return;
 8000594:	bf00      	nop
}
 8000596:	bd80      	pop	{r7, pc}

08000598 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <Init_Rtc+0x1c>)
 800059e:	f7ff ff4c 	bl	800043a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80005a2:	2100      	movs	r1, #0
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <Init_Rtc+0x1c>)
 80005a6:	f7ff ff58 	bl	800045a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <Init_Rtc+0x1c>)
 80005ac:	f7ff ff38 	bl	8000420 <LL_RTC_EnableWriteProtection>

  return;
 80005b0:	bf00      	nop
}
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40002800 	.word	0x40002800

080005b8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80005bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005c0:	f7ff fe48 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80005c4:	f006 f8f0 	bl	80067a8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80005c8:	2004      	movs	r0, #4
 80005ca:	f7ff fdfb 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80005ce:	bf00      	nop
}
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005da:	f004 ffff 	bl	80055dc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <appe_Tl_Init+0x50>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	2004      	movs	r0, #4
 80005e4:	f006 fa0c 	bl	8006a00 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <appe_Tl_Init+0x54>)
 80005ea:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <appe_Tl_Init+0x58>)
 80005ee:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	480e      	ldr	r0, [pc, #56]	; (8000630 <appe_Tl_Init+0x5c>)
 80005f6:	f004 feb7 	bl	8005368 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <appe_Tl_Init+0x60>)
 80005fc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <appe_Tl_Init+0x64>)
 8000600:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <appe_Tl_Init+0x68>)
 8000604:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000606:	f240 533c 	movw	r3, #1340	; 0x53c
 800060a:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f005 f925 	bl	8005860 <TL_MM_Init>

  TL_Enable();
 8000616:	f004 ffdb 	bl	80055d0 <TL_Enable>

  return;
 800061a:	bf00      	nop
}
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	080053a1 	.word	0x080053a1
 8000628:	20030724 	.word	0x20030724
 800062c:	08000641 	.word	0x08000641
 8000630:	08000659 	.word	0x08000659
 8000634:	2003093c 	.word	0x2003093c
 8000638:	20030830 	.word	0x20030830
 800063c:	200301e8 	.word	0x200301e8

08000640 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800064a:	bf00      	nop
}
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	330b      	adds	r3, #11
 8000666:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fc37 	bl	8004ee0 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800067c:	2b07      	cmp	r3, #7
 800067e:	d81b      	bhi.n	80006b8 <APPE_SysUserEvtRx+0x60>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <APPE_SysUserEvtRx+0x30>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006a9 	.word	0x080006a9
 800068c:	080006b1 	.word	0x080006b1
 8000690:	080006b9 	.word	0x080006b9
 8000694:	080006b9 	.word	0x080006b9
 8000698:	080006b9 	.word	0x080006b9
 800069c:	080006b9 	.word	0x080006b9
 80006a0:	080006b9 	.word	0x080006b9
 80006a4:	080006b9 	.word	0x080006b9
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f81c 	bl	80006e6 <APPE_SysEvtReadyProcessing>
    break;
 80006ae:	e004      	b.n	80006ba <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f807 	bl	80006c4 <APPE_SysEvtError>
    break;
 80006b6:	e000      	b.n	80006ba <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 80006b8:	bf00      	nop
  }

  return;
 80006ba:	bf00      	nop
}
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop

080006c4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	330b      	adds	r3, #11
 80006d2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3302      	adds	r3, #2
 80006d8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80006da:	bf00      	nop
}
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b08a      	sub	sp, #40	; 0x28
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	330b      	adds	r3, #11
 8000706:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	3302      	adds	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d117      	bne.n	8000746 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000716:	f7ff fd39 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800071a:	230d      	movs	r3, #13
 800071c:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800071e:	237f      	movs	r3, #127	; 0x7f
 8000720:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000722:	f7ff fe0d 	bl	8000340 <LL_DBGMCU_GetRevisionID>
 8000726:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	b29b      	uxth	r3, r3
 800072c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fbbe 	bl	8004eb4 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000738:	f005 fa9c 	bl	8005c74 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800073c:	2100      	movs	r1, #0
 800073e:	2001      	movs	r0, #1
 8000740:	f006 f844 	bl	80067cc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000744:	e007      	b.n	8000756 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d103      	bne.n	8000756 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  return;
 8000754:	bf00      	nop
 8000756:	bf00      	nop
}
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000766:	f006 f861 	bl	800682c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}

0800076e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000772:	bf00      	nop
}
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078a:	f006 f84f 	bl	800682c <UTIL_SEQ_Run>

  return;
 800078e:	bf00      	nop
}
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2004      	movs	r0, #4
 80007a2:	f006 f94f 	bl	8006a44 <UTIL_SEQ_SetTask>
  return;
 80007a6:	bf00      	nop
}
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80007b6:	2002      	movs	r0, #2
 80007b8:	f006 f9b0 	bl	8006b1c <UTIL_SEQ_SetEvt>
  return;
 80007bc:	bf00      	nop
}
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80007cc:	2002      	movs	r0, #2
 80007ce:	f006 f9c5 	bl	8006b5c <UTIL_SEQ_WaitEvt>
  return;
 80007d2:	bf00      	nop
}
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <LL_EXTI_EnableIT_0_31>:
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <LL_EXTI_EnableIT_0_31+0x24>)
 80007e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <LL_EXTI_EnableIT_0_31+0x24>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	58000800 	.word	0x58000800

08000804 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4904      	ldr	r1, [pc, #16]	; (8000824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	600b      	str	r3, [r1, #0]

}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	58000800 	.word	0x58000800

08000828 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000832:	b29b      	uxth	r3, r3
 8000834:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	b29b      	uxth	r3, r3
 800083c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800083e:	e005      	b.n	800084c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	b29b      	uxth	r3, r3
 800084a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d1f5      	bne.n	8000840 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000854:	683b      	ldr	r3, [r7, #0]
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40002800 	.word	0x40002800

08000868 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	491d      	ldr	r1, [pc, #116]	; (80008f0 <LinkTimerAfter+0x88>)
 800087c:	4613      	mov	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4413      	add	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	440b      	add	r3, r1
 8000886:	3315      	adds	r3, #21
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	2b06      	cmp	r3, #6
 8000890:	d009      	beq.n	80008a6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	4916      	ldr	r1, [pc, #88]	; (80008f0 <LinkTimerAfter+0x88>)
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	440b      	add	r3, r1
 80008a0:	3314      	adds	r3, #20
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <LinkTimerAfter+0x88>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	440b      	add	r3, r1
 80008b4:	3315      	adds	r3, #21
 80008b6:	7bfa      	ldrb	r2, [r7, #15]
 80008b8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <LinkTimerAfter+0x88>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	3314      	adds	r3, #20
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <LinkTimerAfter+0x88>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3315      	adds	r3, #21
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	701a      	strb	r2, [r3, #0]

  return;
 80008e2:	bf00      	nop
}
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000028 	.word	0x20000028

080008f4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <LinkTimerBefore+0xb8>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	79ba      	ldrb	r2, [r7, #6]
 800090c:	429a      	cmp	r2, r3
 800090e:	d032      	beq.n	8000976 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000910:	79ba      	ldrb	r2, [r7, #6]
 8000912:	4927      	ldr	r1, [pc, #156]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3314      	adds	r3, #20
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000924:	7bfa      	ldrb	r2, [r7, #15]
 8000926:	4922      	ldr	r1, [pc, #136]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3315      	adds	r3, #21
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	491d      	ldr	r1, [pc, #116]	; (80009b0 <LinkTimerBefore+0xbc>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3315      	adds	r3, #21
 8000948:	79ba      	ldrb	r2, [r7, #6]
 800094a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	4918      	ldr	r1, [pc, #96]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3314      	adds	r3, #20
 800095c:	7bfa      	ldrb	r2, [r7, #15]
 800095e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000960:	79ba      	ldrb	r2, [r7, #6]
 8000962:	4913      	ldr	r1, [pc, #76]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3314      	adds	r3, #20
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000974:	e014      	b.n	80009a0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LinkTimerBefore+0xbc>)
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	440b      	add	r3, r1
 8000984:	3315      	adds	r3, #21
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	4908      	ldr	r1, [pc, #32]	; (80009b0 <LinkTimerBefore+0xbc>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3314      	adds	r3, #20
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	701a      	strb	r2, [r3, #0]
  return;
 800099e:	bf00      	nop
}
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200000b8 	.word	0x200000b8
 80009b0:	20000028 	.word	0x20000028

080009b4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009be:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <linkTimer+0x144>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b06      	cmp	r3, #6
 80009c6:	d118      	bne.n	80009fa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009c8:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <linkTimer+0x144>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <linkTimer+0x148>)
 80009d0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80009d2:	4a49      	ldr	r2, [pc, #292]	; (8000af8 <linkTimer+0x144>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4949      	ldr	r1, [pc, #292]	; (8000b00 <linkTimer+0x14c>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	3315      	adds	r3, #21
 80009e8:	2206      	movs	r2, #6
 80009ea:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009ec:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <linkTimer+0x150>)
 80009ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009f2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	e078      	b.n	8000aec <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80009fa:	f000 f909 	bl	8000c10 <ReturnTimeElapsed>
 80009fe:	4603      	mov	r3, r0
 8000a00:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	493e      	ldr	r1, [pc, #248]	; (8000b00 <linkTimer+0x14c>)
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	6819      	ldr	r1, [r3, #0]
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	4419      	add	r1, r3
 8000a1a:	4839      	ldr	r0, [pc, #228]	; (8000b00 <linkTimer+0x14c>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	4403      	add	r3, r0
 8000a26:	3308      	adds	r3, #8
 8000a28:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	4934      	ldr	r1, [pc, #208]	; (8000b00 <linkTimer+0x14c>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <linkTimer+0x144>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4619      	mov	r1, r3
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <linkTimer+0x14c>)
 8000a48:	460b      	mov	r3, r1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	440b      	add	r3, r1
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	4413      	add	r3, r2
 8000a52:	3308      	adds	r3, #8
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d337      	bcc.n	8000acc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <linkTimer+0x144>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a62:	7b7a      	ldrb	r2, [r7, #13]
 8000a64:	4926      	ldr	r1, [pc, #152]	; (8000b00 <linkTimer+0x14c>)
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	440b      	add	r3, r1
 8000a70:	3315      	adds	r3, #21
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a76:	e013      	b.n	8000aa0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a78:	7b7a      	ldrb	r2, [r7, #13]
 8000a7a:	4921      	ldr	r1, [pc, #132]	; (8000b00 <linkTimer+0x14c>)
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	440b      	add	r3, r1
 8000a86:	3315      	adds	r3, #21
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a8c:	7b7a      	ldrb	r2, [r7, #13]
 8000a8e:	491c      	ldr	r1, [pc, #112]	; (8000b00 <linkTimer+0x14c>)
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	440b      	add	r3, r1
 8000a9a:	3315      	adds	r3, #21
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000aa0:	7b3b      	ldrb	r3, [r7, #12]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d00b      	beq.n	8000abe <linkTimer+0x10a>
 8000aa6:	7b3a      	ldrb	r2, [r7, #12]
 8000aa8:	4915      	ldr	r1, [pc, #84]	; (8000b00 <linkTimer+0x14c>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d2dc      	bcs.n	8000a78 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000abe:	7b7a      	ldrb	r2, [r7, #13]
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fecf 	bl	8000868 <LinkTimerAfter>
 8000aca:	e00f      	b.n	8000aec <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <linkTimer+0x144>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff0c 	bl	80008f4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <linkTimer+0x144>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <linkTimer+0x148>)
 8000ae4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <linkTimer+0x144>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000aec:	89fb      	ldrh	r3, [r7, #14]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000b8 	.word	0x200000b8
 8000afc:	200000b9 	.word	0x200000b9
 8000b00:	20000028 	.word	0x20000028
 8000b04:	200000bc 	.word	0x200000bc

08000b08 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	460a      	mov	r2, r1
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d111      	bne.n	8000b48 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <UnlinkTimer+0xfc>)
 8000b2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	4935      	ldr	r1, [pc, #212]	; (8000c08 <UnlinkTimer+0x100>)
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	440b      	add	r3, r1
 8000b3c:	3315      	adds	r3, #21
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e03e      	b.n	8000bc6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	492f      	ldr	r1, [pc, #188]	; (8000c08 <UnlinkTimer+0x100>)
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	440b      	add	r3, r1
 8000b56:	3314      	adds	r3, #20
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	492a      	ldr	r1, [pc, #168]	; (8000c08 <UnlinkTimer+0x100>)
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	440b      	add	r3, r1
 8000b6a:	3315      	adds	r3, #21
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b70:	79f9      	ldrb	r1, [r7, #7]
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	4824      	ldr	r0, [pc, #144]	; (8000c08 <UnlinkTimer+0x100>)
 8000b76:	460b      	mov	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	440b      	add	r3, r1
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4403      	add	r3, r0
 8000b80:	3315      	adds	r3, #21
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2d8      	uxtb	r0, r3
 8000b86:	4920      	ldr	r1, [pc, #128]	; (8000c08 <UnlinkTimer+0x100>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	440b      	add	r3, r1
 8000b92:	3315      	adds	r3, #21
 8000b94:	4602      	mov	r2, r0
 8000b96:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d013      	beq.n	8000bc6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b9e:	79f9      	ldrb	r1, [r7, #7]
 8000ba0:	7bba      	ldrb	r2, [r7, #14]
 8000ba2:	4819      	ldr	r0, [pc, #100]	; (8000c08 <UnlinkTimer+0x100>)
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	440b      	add	r3, r1
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4403      	add	r3, r0
 8000bae:	3314      	adds	r3, #20
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b2d8      	uxtb	r0, r3
 8000bb4:	4914      	ldr	r1, [pc, #80]	; (8000c08 <UnlinkTimer+0x100>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	440b      	add	r3, r1
 8000bc0:	3314      	adds	r3, #20
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	490f      	ldr	r1, [pc, #60]	; (8000c08 <UnlinkTimer+0x100>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <UnlinkTimer+0xf8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	d107      	bne.n	8000bf4 <UnlinkTimer+0xec>
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d104      	bne.n	8000bf4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <UnlinkTimer+0x104>)
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
}
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	200000b8 	.word	0x200000b8
 8000c04:	200000b9 	.word	0x200000b9
 8000c08:	20000028 	.word	0x20000028
 8000c0c:	200000bc 	.word	0x200000bc

08000c10 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c1e:	d026      	beq.n	8000c6e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c20:	f7ff fe02 	bl	8000828 <ReadRtcSsrValue>
 8000c24:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d805      	bhi.n	8000c3c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e00a      	b.n	8000c52 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <ReturnTimeElapsed+0x74>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <ReturnTimeElapsed+0x78>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <ReturnTimeElapsed+0x7c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	40d3      	lsrs	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	e001      	b.n	8000c72 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	b29b      	uxth	r3, r3
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000bc 	.word	0x200000bc
 8000c84:	200001c2 	.word	0x200001c2
 8000c88:	200001c1 	.word	0x200001c1
 8000c8c:	200001c0 	.word	0x200001c0

08000c90 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d108      	bne.n	8000cb2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ca0:	f7ff fdc2 	bl	8000828 <ReadRtcSsrValue>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <RestartWakeupCounter+0xa8>)
 8000ca8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000caa:	2003      	movs	r0, #3
 8000cac:	f000 fff7 	bl	8001c9e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cb0:	e03e      	b.n	8000d30 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d803      	bhi.n	8000cc0 <RestartWakeupCounter+0x30>
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <RestartWakeupCounter+0xac>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d002      	beq.n	8000cc6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000cc6:	bf00      	nop
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f7      	beq.n	8000cc8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000cec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <RestartWakeupCounter+0xb4>)
 8000cf0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cf4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f000 ffdf 	bl	8001cba <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <RestartWakeupCounter+0xb8>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	0c1b      	lsrs	r3, r3, #16
 8000d02:	041b      	lsls	r3, r3, #16
 8000d04:	88fa      	ldrh	r2, [r7, #6]
 8000d06:	4910      	ldr	r1, [pc, #64]	; (8000d48 <RestartWakeupCounter+0xb8>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d0c:	f7ff fd8c 	bl	8000828 <ReadRtcSsrValue>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <RestartWakeupCounter+0xa8>)
 8000d14:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d28:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d2a:	f3af 8000 	nop.w
  return ;
 8000d2e:	bf00      	nop
}
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000bc 	.word	0x200000bc
 8000d3c:	200001c0 	.word	0x200001c0
 8000d40:	200001bc 	.word	0x200001bc
 8000d44:	58000800 	.word	0x58000800
 8000d48:	40002800 	.word	0x40002800

08000d4c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <RescheduleTimerList+0x124>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d5e:	d108      	bne.n	8000d72 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d60:	bf00      	nop
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f7      	bne.n	8000d62 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d84:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <RescheduleTimerList+0x12c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	493b      	ldr	r1, [pc, #236]	; (8000e7c <RescheduleTimerList+0x130>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	3308      	adds	r3, #8
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000da0:	f7ff ff36 	bl	8000c10 <ReturnTimeElapsed>
 8000da4:	4603      	mov	r3, r0
 8000da6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d205      	bcs.n	8000dbc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <RescheduleTimerList+0x134>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e04d      	b.n	8000e58 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <RescheduleTimerList+0x138>)
 8000dc0:	8812      	ldrh	r2, [r2, #0]
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d906      	bls.n	8000ddc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <RescheduleTimerList+0x138>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <RescheduleTimerList+0x134>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e03d      	b.n	8000e58 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <RescheduleTimerList+0x134>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dec:	e034      	b.n	8000e58 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000dee:	7bfa      	ldrb	r2, [r7, #15]
 8000df0:	4922      	ldr	r1, [pc, #136]	; (8000e7c <RescheduleTimerList+0x130>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d20a      	bcs.n	8000e1c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	491c      	ldr	r1, [pc, #112]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	440b      	add	r3, r1
 8000e14:	3308      	adds	r3, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e013      	b.n	8000e44 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	4917      	ldr	r1, [pc, #92]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	440b      	add	r3, r1
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4403      	add	r3, r0
 8000e40:	3308      	adds	r3, #8
 8000e42:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	440b      	add	r3, r1
 8000e52:	3315      	adds	r3, #21
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d1c7      	bne.n	8000dee <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff15 	bl	8000c90 <RestartWakeupCounter>

  return ;
 8000e66:	bf00      	nop
}
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40002800 	.word	0x40002800
 8000e74:	200001bc 	.word	0x200001bc
 8000e78:	200000b8 	.word	0x200000b8
 8000e7c:	20000028 	.word	0x20000028
 8000e80:	200000c0 	.word	0x200000c0
 8000e84:	200001c4 	.word	0x200001c4

08000e88 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000e94:	4a64      	ldr	r2, [pc, #400]	; (8001028 <HW_TS_Init+0x1a0>)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e9a:	4b63      	ldr	r3, [pc, #396]	; (8001028 <HW_TS_Init+0x1a0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	22ca      	movs	r2, #202	; 0xca
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ea4:	4b60      	ldr	r3, [pc, #384]	; (8001028 <HW_TS_Init+0x1a0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2253      	movs	r2, #83	; 0x53
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000eae:	4b5f      	ldr	r3, [pc, #380]	; (800102c <HW_TS_Init+0x1a4>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	4a5e      	ldr	r2, [pc, #376]	; (800102c <HW_TS_Init+0x1a4>)
 8000eb4:	f043 0320 	orr.w	r3, r3, #32
 8000eb8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000eba:	4b5c      	ldr	r3, [pc, #368]	; (800102c <HW_TS_Init+0x1a4>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f1c3 0304 	rsb	r3, r3, #4
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b58      	ldr	r3, [pc, #352]	; (8001030 <HW_TS_Init+0x1a8>)
 8000ece:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000ed0:	4b56      	ldr	r3, [pc, #344]	; (800102c <HW_TS_Init+0x1a4>)
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000ed8:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000edc:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	fa92 f2a2 	rbit	r2, r2
 8000ee4:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d101      	bne.n	8000ef4 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	e003      	b.n	8000efc <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	fab2 f282 	clz	r2, r2
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	40d3      	lsrs	r3, r2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b4b      	ldr	r3, [pc, #300]	; (8001034 <HW_TS_Init+0x1ac>)
 8000f06:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f08:	4b48      	ldr	r3, [pc, #288]	; (800102c <HW_TS_Init+0x1a4>)
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3301      	adds	r3, #1
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b47      	ldr	r3, [pc, #284]	; (8001038 <HW_TS_Init+0x1b0>)
 8000f1a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f1c:	4b46      	ldr	r3, [pc, #280]	; (8001038 <HW_TS_Init+0x1b0>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4a44      	ldr	r2, [pc, #272]	; (8001034 <HW_TS_Init+0x1ac>)
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f2e:	4a40      	ldr	r2, [pc, #256]	; (8001030 <HW_TS_Init+0x1a8>)
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	40d3      	lsrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d904      	bls.n	8000f4a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f40:	4b3e      	ldr	r3, [pc, #248]	; (800103c <HW_TS_Init+0x1b4>)
 8000f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f46:	801a      	strh	r2, [r3, #0]
 8000f48:	e003      	b.n	8000f52 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HW_TS_Init+0x1b4>)
 8000f50:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f52:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f56:	f7ff fc55 	bl	8000804 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f5e:	f7ff fc3d 	bl	80007dc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d143      	bne.n	8000ff0 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <HW_TS_Init+0x1b8>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f6e:	4b35      	ldr	r3, [pc, #212]	; (8001044 <HW_TS_Init+0x1bc>)
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f74:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	77fb      	strb	r3, [r7, #31]
 8000f7a:	e00c      	b.n	8000f96 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f7c:	7ffa      	ldrb	r2, [r7, #31]
 8000f7e:	4932      	ldr	r1, [pc, #200]	; (8001048 <HW_TS_Init+0x1c0>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	330c      	adds	r3, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f90:	7ffb      	ldrb	r3, [r7, #31]
 8000f92:	3301      	adds	r3, #1
 8000f94:	77fb      	strb	r3, [r7, #31]
 8000f96:	7ffb      	ldrb	r3, [r7, #31]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d9ef      	bls.n	8000f7c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HW_TS_Init+0x1c4>)
 8000f9e:	2206      	movs	r2, #6
 8000fa0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <HW_TS_Init+0x1a0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <HW_TS_Init+0x1a0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fb4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <HW_TS_Init+0x1a0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HW_TS_Init+0x1a0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fca:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HW_TS_Init+0x1c8>)
 8000fce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fd2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 fe70 	bl	8001cba <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <HW_TS_Init+0x1a0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HW_TS_Init+0x1a0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	e00a      	b.n	8001006 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HW_TS_Init+0x1a0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 fe4c 	bl	8001c9e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HW_TS_Init+0x1a0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	22ff      	movs	r2, #255	; 0xff
 800100e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001010:	2200      	movs	r2, #0
 8001012:	2103      	movs	r1, #3
 8001014:	2003      	movs	r0, #3
 8001016:	f000 fe00 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800101a:	2003      	movs	r0, #3
 800101c:	f000 fe17 	bl	8001c4e <HAL_NVIC_EnableIRQ>

  return;
 8001020:	bf00      	nop
}
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001bc 	.word	0x200001bc
 800102c:	40002800 	.word	0x40002800
 8001030:	200001c0 	.word	0x200001c0
 8001034:	200001c1 	.word	0x200001c1
 8001038:	200001c2 	.word	0x200001c2
 800103c:	200001c4 	.word	0x200001c4
 8001040:	200000c0 	.word	0x200000c0
 8001044:	200000bc 	.word	0x200000bc
 8001048:	20000028 	.word	0x20000028
 800104c:	200000b8 	.word	0x200000b8
 8001050:	58000800 	.word	0x58000800

08001054 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001054:	b480      	push	{r7}
 8001056:	b08b      	sub	sp, #44	; 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	4613      	mov	r3, r2
 8001062:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800106a:	f3ef 8310 	mrs	r3, PRIMASK
 800106e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001070:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001072:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001078:	e004      	b.n	8001084 <HW_TS_Create+0x30>
  {
    loop++;
 800107a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800107e:	3301      	adds	r3, #1
 8001080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001088:	2b05      	cmp	r3, #5
 800108a:	d80c      	bhi.n	80010a6 <HW_TS_Create+0x52>
 800108c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001090:	492c      	ldr	r1, [pc, #176]	; (8001144 <HW_TS_Create+0xf0>)
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	330c      	adds	r3, #12
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e9      	bne.n	800107a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d038      	beq.n	8001120 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010b2:	4924      	ldr	r1, [pc, #144]	; (8001144 <HW_TS_Create+0xf0>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	330c      	adds	r3, #12
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f383 8810 	msr	PRIMASK, r3
}
 80010ce:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80010d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010d4:	491b      	ldr	r1, [pc, #108]	; (8001144 <HW_TS_Create+0xf0>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	3310      	adds	r3, #16
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80010e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010ea:	4916      	ldr	r1, [pc, #88]	; (8001144 <HW_TS_Create+0xf0>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	330d      	adds	r3, #13
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001100:	4910      	ldr	r1, [pc, #64]	; (8001144 <HW_TS_Create+0xf0>)
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001116:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001118:	2300      	movs	r3, #0
 800111a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800111e:	e008      	b.n	8001132 <HW_TS_Create+0xde>
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f383 8810 	msr	PRIMASK, r3
}
 800112a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800112c:	2301      	movs	r3, #1
 800112e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001136:	4618      	mov	r0, r3
 8001138:	372c      	adds	r7, #44	; 0x2c
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000028 	.word	0x20000028

08001148 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001152:	f3ef 8310 	mrs	r3, PRIMASK
 8001156:	60fb      	str	r3, [r7, #12]
  return(result);
 8001158:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800115a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001160:	2003      	movs	r0, #3
 8001162:	f000 fd82 	bl	8001c6a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <HW_TS_Stop+0x100>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	22ca      	movs	r2, #202	; 0xca
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
 8001170:	4b35      	ldr	r3, [pc, #212]	; (8001248 <HW_TS_Stop+0x100>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2253      	movs	r2, #83	; 0x53
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	4933      	ldr	r1, [pc, #204]	; (800124c <HW_TS_Stop+0x104>)
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	330c      	adds	r3, #12
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d148      	bne.n	8001224 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fcb6 	bl	8000b08 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <HW_TS_Stop+0x108>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011a2:	7cfb      	ldrb	r3, [r7, #19]
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	d135      	bne.n	8001214 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <HW_TS_Stop+0x10c>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b4:	d108      	bne.n	80011c8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80011b6:	bf00      	nop
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <HW_TS_Stop+0x100>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f7      	bne.n	80011b8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HW_TS_Stop+0x100>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HW_TS_Stop+0x100>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011da:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011dc:	bf00      	nop
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HW_TS_Stop+0x100>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f7      	beq.n	80011de <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HW_TS_Stop+0x100>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HW_TS_Stop+0x100>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001202:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HW_TS_Stop+0x110>)
 8001206:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800120a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fd54 	bl	8001cba <HAL_NVIC_ClearPendingIRQ>
 8001212:	e007      	b.n	8001224 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HW_TS_Stop+0x114>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	7cfa      	ldrb	r2, [r7, #19]
 800121c:	429a      	cmp	r2, r3
 800121e:	d001      	beq.n	8001224 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001220:	f7ff fd94 	bl	8000d4c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HW_TS_Stop+0x100>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	22ff      	movs	r2, #255	; 0xff
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800122e:	2003      	movs	r0, #3
 8001230:	f000 fd0d 	bl	8001c4e <HAL_NVIC_EnableIRQ>
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f383 8810 	msr	PRIMASK, r3
}
 800123e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001240:	bf00      	nop
}
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200001bc 	.word	0x200001bc
 800124c:	20000028 	.word	0x20000028
 8001250:	200000b8 	.word	0x200000b8
 8001254:	40002800 	.word	0x40002800
 8001258:	58000800 	.word	0x58000800
 800125c:	200000b9 	.word	0x200000b9

08001260 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800126c:	79fa      	ldrb	r2, [r7, #7]
 800126e:	493c      	ldr	r1, [pc, #240]	; (8001360 <HW_TS_Start+0x100>)
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	330c      	adds	r3, #12
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d103      	bne.n	800128c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff5e 	bl	8001148 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800128c:	f3ef 8310 	mrs	r3, PRIMASK
 8001290:	60fb      	str	r3, [r7, #12]
  return(result);
 8001292:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001296:	b672      	cpsid	i
}
 8001298:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800129a:	2003      	movs	r0, #3
 800129c:	f000 fce5 	bl	8001c6a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HW_TS_Start+0x104>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	22ca      	movs	r2, #202	; 0xca
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <HW_TS_Start+0x104>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2253      	movs	r2, #83	; 0x53
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	492a      	ldr	r1, [pc, #168]	; (8001360 <HW_TS_Start+0x100>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	330c      	adds	r3, #12
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	4925      	ldr	r1, [pc, #148]	; (8001360 <HW_TS_Start+0x100>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	3308      	adds	r3, #8
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80012dc:	79fa      	ldrb	r2, [r7, #7]
 80012de:	4920      	ldr	r1, [pc, #128]	; (8001360 <HW_TS_Start+0x100>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	3304      	adds	r3, #4
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fb5e 	bl	80009b4 <linkTimer>
 80012f8:	4603      	mov	r3, r0
 80012fa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HW_TS_Start+0x108>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HW_TS_Start+0x10c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	7c7a      	ldrb	r2, [r7, #17]
 800130a:	429a      	cmp	r2, r3
 800130c:	d002      	beq.n	8001314 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800130e:	f7ff fd1d 	bl	8000d4c <RescheduleTimerList>
 8001312:	e013      	b.n	800133c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	4912      	ldr	r1, [pc, #72]	; (8001360 <HW_TS_Start+0x100>)
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	3308      	adds	r3, #8
 8001324:	6819      	ldr	r1, [r3, #0]
 8001326:	8a7b      	ldrh	r3, [r7, #18]
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	1ac9      	subs	r1, r1, r3
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <HW_TS_Start+0x100>)
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4403      	add	r3, r0
 8001338:	3308      	adds	r3, #8
 800133a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HW_TS_Start+0x104>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001346:	2003      	movs	r0, #3
 8001348:	f000 fc81 	bl	8001c4e <HAL_NVIC_EnableIRQ>
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f383 8810 	msr	PRIMASK, r3
}
 8001356:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001358:	bf00      	nop
}
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000028 	.word	0x20000028
 8001364:	200001bc 	.word	0x200001bc
 8001368:	200000b8 	.word	0x200000b8
 800136c:	200000b9 	.word	0x200000b9

08001370 <LL_RCC_LSE_SetDriveCapability>:
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001380:	f023 0218 	bic.w	r2, r3, #24
 8001384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4313      	orrs	r3, r2
 800138c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_AHB2_GRP1_EnableClock>:
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f000 fa61 	bl	8001898 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80013d6:	f7ff f853 	bl	8000480 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 f80f 	bl	80013fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013de:	f000 f86f 	bl	80014c0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80013e2:	f000 f88d 	bl	8001500 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f000 f8d1 	bl	800158c <MX_GPIO_Init>
  MX_RF_Init();
 80013ea:	f000 f89d 	bl	8001528 <MX_RF_Init>
  MX_RTC_Init();
 80013ee:	f000 f8a3 	bl	8001538 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80013f2:	f7ff f853 	bl	800049c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80013f6:	f7ff f9b2 	bl	800075e <MX_APPE_Process>
 80013fa:	e7fc      	b.n	80013f6 <main+0x28>

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b09a      	sub	sp, #104	; 0x68
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	2248      	movs	r2, #72	; 0x48
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f005 fc6e 	bl	8006cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001422:	f000 fd03 	bl	8001e2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff ffa2 	bl	8001370 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <SystemClock_Config+0xc0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <SystemClock_Config+0xc0>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SystemClock_Config+0xc0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001448:	2327      	movs	r3, #39	; 0x27
 800144a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001452:	2301      	movs	r3, #1
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001464:	2300      	movs	r3, #0
 8001466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001468:	23a0      	movs	r3, #160	; 0xa0
 800146a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800146c:	2300      	movs	r3, #0
 800146e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	4618      	mov	r0, r3
 8001476:	f001 f855 	bl	8002524 <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001480:	f000 f88b 	bl	800159a <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001484:	236f      	movs	r3, #111	; 0x6f
 8001486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2101      	movs	r1, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fbc9 	bl	8002c3c <HAL_RCC_ClockConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80014b0:	f000 f873 	bl	800159a <Error_Handler>
  }
}
 80014b4:	bf00      	nop
 80014b6:	3768      	adds	r7, #104	; 0x68
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	58000400 	.word	0x58000400

080014c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	; 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c6:	463b      	mov	r3, r7
 80014c8:	2250      	movs	r2, #80	; 0x50
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f005 fc0d 	bl	8006cec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80014d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014d6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80014d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014dc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80014de:	2300      	movs	r3, #0
 80014e0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80014e2:	2310      	movs	r3, #16
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 ffbc 	bl	8003466 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80014f4:	f000 f851 	bl	800159a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	; 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_IPCC_Init+0x20>)
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <MX_IPCC_Init+0x24>)
 8001508:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_IPCC_Init+0x20>)
 800150c:	f000 fc08 	bl	8001d20 <HAL_IPCC_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001516:	f000 f840 	bl	800159a <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002e8 	.word	0x200002e8
 8001524:	58000c00 	.word	0x58000c00

08001528 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_RTC_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_RTC_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_RTC_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_RTC_Init+0x4c>)
 800154a:	220f      	movs	r2, #15
 800154c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <MX_RTC_Init+0x4c>)
 8001550:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001554:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_RTC_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_RTC_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_RTC_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_RTC_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_RTC_Init+0x4c>)
 8001570:	f002 fa00 	bl	8003974 <HAL_RTC_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f80e 	bl	800159a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000324 	.word	0x20000324
 8001588:	40002800 	.word	0x40002800

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001590:	2004      	movs	r0, #4
 8001592:	f7ff ff03 	bl	800139c <LL_AHB2_GRP1_EnableClock>

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}

0800159a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800159e:	b672      	cpsid	i
}
 80015a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <Error_Handler+0x8>

080015a4 <LL_RCC_EnableRTC>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_AHB3_GRP1_EnableClock>:
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4313      	orrs	r3, r2
 80015dc:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001604:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001614:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800161c:	68fb      	ldr	r3, [r7, #12]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800162e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001632:	f7ff ffc8 	bl	80015c6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2005      	movs	r0, #5
 800163c:	f000 faed 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001640:	2005      	movs	r0, #5
 8001642:	f000 fb04 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	202e      	movs	r0, #46	; 0x2e
 800164c:	f000 fae5 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001650:	202e      	movs	r0, #46	; 0x2e
 8001652:	f000 fafc 	bl	8001c4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_IPCC_MspInit+0x44>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d113      	bne.n	8001696 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800166e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001672:	f7ff ffa8 	bl	80015c6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	202c      	movs	r0, #44	; 0x2c
 800167c:	f000 facd 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001680:	202c      	movs	r0, #44	; 0x2c
 8001682:	f000 fae4 	bl	8001c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	202d      	movs	r0, #45	; 0x2d
 800168c:	f000 fac5 	bl	8001c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001690:	202d      	movs	r0, #45	; 0x2d
 8001692:	f000 fadc 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	58000c00 	.word	0x58000c00

080016a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b096      	sub	sp, #88	; 0x58
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	2250      	movs	r2, #80	; 0x50
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 fb19 	bl	8006cec <memset>
  if(hrtc->Instance==RTC)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_RTC_MspInit+0x54>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d115      	bne.n	80016f0 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016c8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 fec6 	bl	8003466 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016e0:	f7ff ff5b 	bl	800159a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e4:	f7ff ff5e 	bl	80015a4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016ec:	f7ff ff84 	bl	80015f8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3758      	adds	r7, #88	; 0x58
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40002800 	.word	0x40002800

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 f900 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001762:	f004 fedd 	bl	8006520 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}

0800176a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800176e:	f004 ff0f 	bl	8006590 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}

08001776 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800177a:	f000 faad 	bl	8001cd8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <SystemInit+0x98>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a23      	ldr	r2, [pc, #140]	; (800181c <SystemInit+0x98>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80017b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <SystemInit+0x9c>)
 80017be:	4013      	ands	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ce:	f023 0305 	bic.w	r3, r3, #5
 80017d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <SystemInit+0xa0>)
 80017f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80017f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <SystemInit+0xa0>)
 80017f8:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	faf6fefb 	.word	0xfaf6fefb
 8001824:	22041000 	.word	0x22041000

08001828 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001828:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182c:	3304      	adds	r3, #4

0800182e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001830:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001832:	d3f9      	bcc.n	8001828 <CopyDataInit>
  bx lr
 8001834:	4770      	bx	lr

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001836:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001838:	3004      	adds	r0, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800183a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>
  bx lr
 800183e:	4770      	bx	lr

08001840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001842:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001844:	f7ff ff9e 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <LoopForever+0x8>)
 800184a:	490c      	ldr	r1, [pc, #48]	; (800187c <LoopForever+0xc>)
 800184c:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <LoopForever+0x10>)
 800184e:	2300      	movs	r3, #0
 8001850:	f7ff ffed 	bl	800182e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <LoopForever+0x14>)
 8001856:	490c      	ldr	r1, [pc, #48]	; (8001888 <LoopForever+0x18>)
 8001858:	2300      	movs	r3, #0
 800185a:	f7ff ffee 	bl	800183a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800185e:	480b      	ldr	r0, [pc, #44]	; (800188c <LoopForever+0x1c>)
 8001860:	490b      	ldr	r1, [pc, #44]	; (8001890 <LoopForever+0x20>)
 8001862:	2300      	movs	r3, #0
 8001864:	f7ff ffe9 	bl	800183a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001868:	f005 fa0e 	bl	8006c88 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800186c:	f7ff fdaf 	bl	80013ce <main>

08001870 <LoopForever>:

LoopForever:
  b LoopForever
 8001870:	e7fe      	b.n	8001870 <LoopForever>
 8001872:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001874:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001878:	20000004 	.word	0x20000004
 800187c:	20000028 	.word	0x20000028
 8001880:	08006f90 	.word	0x08006f90
  INIT_BSS _sbss, _ebss
 8001884:	200001a0 	.word	0x200001a0
 8001888:	20000350 	.word	0x20000350
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800188c:	200301e0 	.word	0x200301e0
 8001890:	20030a57 	.word	0x20030a57

08001894 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_Init+0x3c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <HAL_Init+0x3c>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f000 f9a8 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b4:	200f      	movs	r0, #15
 80018b6:	f000 f80f 	bl	80018d8 <HAL_InitTick>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	e001      	b.n	80018ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c6:	f7ff feb0 	bl	800162a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	58004000 	.word	0x58004000

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_InitTick+0x6c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d024      	beq.n	8001936 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018ec:	f001 fb52 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_InitTick+0x6c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4619      	mov	r1, r3
 80018f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f9be 	bl	8001c86 <HAL_SYSTICK_Config>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10f      	bne.n	8001930 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d809      	bhi.n	800192a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001916:	2200      	movs	r2, #0
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191e:	f000 f97c 	bl	8001c1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_InitTick+0x70>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e007      	b.n	800193a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e004      	b.n	800193a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	2000000c 	.word	0x2000000c
 8001970:	20000348 	.word	0x20000348

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000348 	.word	0x20000348

0800198c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTickPrio+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db12      	blt.n	8001a7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	490a      	ldr	r1, [pc, #40]	; (8001a88 <__NVIC_DisableIRQ+0x44>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	3320      	adds	r3, #32
 8001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a70:	f3bf 8f4f 	dsb	sy
}
 8001a74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a76:	f3bf 8f6f 	isb	sy
}
 8001a7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0c      	blt.n	8001ab8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_SetPendingIRQ+0x38>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	3340      	adds	r3, #64	; 0x40
 8001ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0c      	blt.n	8001af4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <__NVIC_ClearPendingIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	3360      	adds	r3, #96	; 0x60
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fec9 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff fee0 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff90 	bl	8001b58 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5f 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fed3 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fee3 	bl	8001a44 <__NVIC_DisableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff96 	bl	8001bc0 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff feed 	bl	8001a8c <__NVIC_SetPendingIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fefd 	bl	8001ac8 <__NVIC_ClearPendingIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_HSEM_IRQHandler+0x30>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_HSEM_IRQHandler+0x30>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	4906      	ldr	r1, [pc, #24]	; (8001d08 <HAL_HSEM_IRQHandler+0x30>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_HSEM_IRQHandler+0x30>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f807 	bl	8001d0c <HAL_HSEM_FreeCallback>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	58001500 	.word	0x58001500

08001d0c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01e      	beq.n	8001d70 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_IPCC_Init+0x60>)
 8001d34:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fc8a 	bl	800165c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001d48:	68b8      	ldr	r0, [r7, #8]
 8001d4a:	f000 f85b 	bl	8001e04 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f82c 	bl	8001db8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001d6e:	e001      	b.n	8001d74 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	58000c00 	.word	0x58000c00

08001d84 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e00f      	b.n	8001de6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <IPCC_SetDefaultCallbacks+0x44>)
 8001dd0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3306      	adds	r3, #6
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <IPCC_SetDefaultCallbacks+0x48>)
 8001dde:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d9ec      	bls.n	8001dc6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	08001d85 	.word	0x08001d85
 8001e00:	08001d9f 	.word	0x08001d9f

08001e04 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001e18:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	223f      	movs	r2, #63	; 0x3f
 8001e1e:	609a      	str	r2, [r3, #8]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	58000400 	.word	0x58000400

08001e4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	58000400 	.word	0x58000400

08001e68 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e7a:	d101      	bne.n	8001e80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_RCC_HSE_Enable>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_HSE_Disable>:
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_RCC_HSE_IsReady>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eda:	d101      	bne.n	8001ee0 <LL_RCC_HSE_IsReady+0x18>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <LL_RCC_HSE_IsReady+0x1a>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_RCC_HSI_Enable>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_RCC_HSI_Disable>:
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_HSI_IsReady>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d101      	bne.n	8001f40 <LL_RCC_HSI_IsReady+0x18>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <LL_RCC_HSI_IsReady+0x1a>
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_RCC_HSI_SetCalibTrimming>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_RCC_HSI48_Enable>:
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_HSI48_Disable>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_RCC_HSI48_IsReady>:
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d101      	bne.n	8001fd2 <LL_RCC_HSI48_IsReady+0x18>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_RCC_HSI48_IsReady+0x1a>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_RCC_LSE_Enable>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_RCC_LSE_Disable>:
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_RCC_LSE_EnableBypass>:
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_RCC_LSE_DisableBypass>:
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_RCC_LSE_IsReady>:
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d101      	bne.n	800207e <LL_RCC_LSE_IsReady+0x18>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_RCC_LSE_IsReady+0x1a>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <LL_RCC_LSI1_Enable>:
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_RCC_LSI1_Disable>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_RCC_LSI1_IsReady>:
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d101      	bne.n	80020e6 <LL_RCC_LSI1_IsReady+0x18>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_RCC_LSI1_IsReady+0x1a>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_LSI2_Enable>:
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_RCC_LSI2_Disable>:
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_RCC_LSI2_IsReady>:
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b08      	cmp	r3, #8
 8002148:	d101      	bne.n	800214e <LL_RCC_LSI2_IsReady+0x18>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <LL_RCC_LSI2_IsReady+0x1a>
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_RCC_LSI2_SetTrimming>:
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_RCC_MSI_Enable>:
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_RCC_MSI_Disable>:
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80021aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6013      	str	r3, [r2, #0]
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_RCC_MSI_IsReady>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d101      	bne.n	80021da <LL_RCC_MSI_IsReady+0x16>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <LL_RCC_MSI_IsReady+0x18>
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_RCC_MSI_SetRange>:
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_RCC_MSI_GetRange>:
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2bb0      	cmp	r3, #176	; 0xb0
 8002224:	d901      	bls.n	800222a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002226:	23b0      	movs	r3, #176	; 0xb0
 8002228:	607b      	str	r3, [r7, #4]
  return msiRange;
 800222a:	687b      	ldr	r3, [r7, #4]
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_RCC_SetSysClkSource>:
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 0203 	bic.w	r2, r3, #3
 8002274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_RCC_GetSysClkSource>:
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_RCC_SetAHBPrescaler>:
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_C2_RCC_SetAHBPrescaler>:
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_SetAHB4Prescaler>:
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002306:	f023 020f 	bic.w	r2, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_RCC_SetAPB1Prescaler>:
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800232c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_RCC_SetAPB2Prescaler>:
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_RCC_GetAHBPrescaler>:
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_RCC_GetAHB4Prescaler>:
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_RCC_PLL_Enable>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_RCC_PLL_Disable>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d8:	6013      	str	r3, [r2, #0]
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_RCC_PLL_IsReady>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023f6:	d101      	bne.n	80023fc <LL_RCC_PLL_IsReady+0x18>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <LL_RCC_PLL_IsReady+0x1a>
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_RCC_PLL_GetN>:
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_RCC_PLL_GetR>:
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_RCC_PLL_GetDivider>:
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_RCC_PLL_GetMainSource>:
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_RCC_IsActiveFlag_HPRE>:
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d101      	bne.n	8002482 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002496:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024a2:	d101      	bne.n	80024a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d101      	bne.n	80024ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_RCC_IsActiveFlag_PPRE1>:
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ec:	d101      	bne.n	80024f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_IsActiveFlag_PPRE2>:
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002510:	d101      	bne.n	8002516 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b08d      	sub	sp, #52	; 0x34
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e37e      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8092 	beq.w	8002668 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	f7ff fea1 	bl	800228a <LL_RCC_GetSysClkSource>
 8002548:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800254a:	f7ff ff82 	bl	8002452 <LL_RCC_PLL_GetMainSource>
 800254e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x3e>
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d14c      	bne.n	80025f6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	2b01      	cmp	r3, #1
 8002560:	d149      	bne.n	80025f6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002562:	f7ff fe2f 	bl	80021c4 <LL_RCC_MSI_IsReady>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x54>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e35d      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800257c:	f7ff fe47 	bl	800220e <LL_RCC_MSI_GetRange>
 8002580:	4603      	mov	r3, r0
 8002582:	429c      	cmp	r4, r3
 8002584:	d914      	bls.n	80025b0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fd16 	bl	8002fbc <RCC_SetFlashLatencyFromMSIRange>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e34c      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fe21 	bl	80021e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fe45 	bl	8002238 <LL_RCC_MSI_SetCalibTrimming>
 80025ae:	e013      	b.n	80025d8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fe16 	bl	80021e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fe3a 	bl	8002238 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fcf7 	bl	8002fbc <RCC_SetFlashLatencyFromMSIRange>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e32d      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025d8:	f000 fcdc 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 80025dc:	4603      	mov	r3, r0
 80025de:	4ab3      	ldr	r2, [pc, #716]	; (80028ac <HAL_RCC_OscConfig+0x388>)
 80025e0:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025e2:	4bb3      	ldr	r3, [pc, #716]	; (80028b0 <HAL_RCC_OscConfig+0x38c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff f976 	bl	80018d8 <HAL_InitTick>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d039      	beq.n	8002666 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e31e      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01e      	beq.n	800263c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025fe:	f7ff fdc3 	bl	8002188 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002602:	f7ff f9b7 	bl	8001974 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260a:	f7ff f9b3 	bl	8001974 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e30b      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800261c:	f7ff fdd2 	bl	80021c4 <LL_RCC_MSI_IsReady>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f1      	beq.n	800260a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fddb 	bl	80021e6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fdff 	bl	8002238 <LL_RCC_MSI_SetCalibTrimming>
 800263a:	e015      	b.n	8002668 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800263c:	f7ff fdb3 	bl	80021a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002640:	f7ff f998 	bl	8001974 <HAL_GetTick>
 8002644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002648:	f7ff f994 	bl	8001974 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e2ec      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800265a:	f7ff fdb3 	bl	80021c4 <LL_RCC_MSI_IsReady>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f1      	bne.n	8002648 <HAL_RCC_OscConfig+0x124>
 8002664:	e000      	b.n	8002668 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002666:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d04e      	beq.n	8002712 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002674:	f7ff fe09 	bl	800228a <LL_RCC_GetSysClkSource>
 8002678:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800267a:	f7ff feea 	bl	8002452 <LL_RCC_PLL_GetMainSource>
 800267e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b08      	cmp	r3, #8
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x16e>
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d10d      	bne.n	80026a8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d10a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002692:	f7ff fc19 	bl	8001ec8 <LL_RCC_HSE_IsReady>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d039      	beq.n	8002710 <HAL_RCC_OscConfig+0x1ec>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d135      	bne.n	8002710 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e2c5      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_OscConfig+0x194>
 80026b2:	f7ff fbeb 	bl	8001e8c <LL_RCC_HSE_Enable>
 80026b6:	e001      	b.n	80026bc <HAL_RCC_OscConfig+0x198>
 80026b8:	f7ff fbf7 	bl	8001eaa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d012      	beq.n	80026ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff f956 	bl	8001974 <HAL_GetTick>
 80026c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff f952 	bl	8001974 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e2aa      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80026de:	f7ff fbf3 	bl	8001ec8 <LL_RCC_HSE_IsReady>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f1      	beq.n	80026cc <HAL_RCC_OscConfig+0x1a8>
 80026e8:	e013      	b.n	8002712 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7ff f943 	bl	8001974 <HAL_GetTick>
 80026ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f2:	f7ff f93f 	bl	8001974 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e297      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002704:	f7ff fbe0 	bl	8001ec8 <LL_RCC_HSE_IsReady>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f1      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1ce>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d051      	beq.n	80027c2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271e:	f7ff fdb4 	bl	800228a <LL_RCC_GetSysClkSource>
 8002722:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	f7ff fe95 	bl	8002452 <LL_RCC_PLL_GetMainSource>
 8002728:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x218>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d113      	bne.n	800275e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d110      	bne.n	800275e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	f7ff fbf4 	bl	8001f28 <LL_RCC_HSI_IsReady>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x22e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e270      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fbf8 	bl	8001f4c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800275c:	e031      	b.n	80027c2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d019      	beq.n	800279a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002766:	f7ff fbc1 	bl	8001eec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7ff f903 	bl	8001974 <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002772:	f7ff f8ff 	bl	8001974 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e257      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002784:	f7ff fbd0 	bl	8001f28 <LL_RCC_HSI_IsReady>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f1      	beq.n	8002772 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fbda 	bl	8001f4c <LL_RCC_HSI_SetCalibTrimming>
 8002798:	e013      	b.n	80027c2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	f7ff fbb6 	bl	8001f0a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7ff f8e9 	bl	8001974 <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7ff f8e5 	bl	8001974 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e23d      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80027b8:	f7ff fbb6 	bl	8001f28 <LL_RCC_HSI_IsReady>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f1      	bne.n	80027a6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80a3 	beq.w	8002922 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d076      	beq.n	80028d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d046      	beq.n	800287e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80027f0:	f7ff fc6d 	bl	80020ce <LL_RCC_LSI1_IsReady>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d113      	bne.n	8002822 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80027fa:	f7ff fc46 	bl	800208a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027fe:	f7ff f8b9 	bl	8001974 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002806:	f7ff f8b5 	bl	8001974 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e20d      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002818:	f7ff fc59 	bl	80020ce <LL_RCC_LSI1_IsReady>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f1      	beq.n	8002806 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002822:	f7ff fc66 	bl	80020f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7ff f8a5 	bl	8001974 <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800282e:	f7ff f8a1 	bl	8001974 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e1f9      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002840:	f7ff fc79 	bl	8002136 <LL_RCC_LSI2_IsReady>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f1      	beq.n	800282e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fc83 	bl	800215a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002854:	f7ff fc2a 	bl	80020ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7ff f88c 	bl	8001974 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002860:	f7ff f888 	bl	8001974 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e1e0      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002872:	f7ff fc2c 	bl	80020ce <LL_RCC_LSI1_IsReady>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f1      	bne.n	8002860 <HAL_RCC_OscConfig+0x33c>
 800287c:	e051      	b.n	8002922 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800287e:	f7ff fc04 	bl	800208a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7ff f877 	bl	8001974 <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800288a:	f7ff f873 	bl	8001974 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1cb      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800289c:	f7ff fc17 	bl	80020ce <LL_RCC_LSI1_IsReady>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f1      	beq.n	800288a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80028a6:	f7ff fc35 	bl	8002114 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80028aa:	e00c      	b.n	80028c6 <HAL_RCC_OscConfig+0x3a2>
 80028ac:	20000004 	.word	0x20000004
 80028b0:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028b4:	f7ff f85e 	bl	8001974 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1b6      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80028c6:	f7ff fc36 	bl	8002136 <LL_RCC_LSI2_IsReady>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f1      	bne.n	80028b4 <HAL_RCC_OscConfig+0x390>
 80028d0:	e027      	b.n	8002922 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80028d2:	f7ff fc1f 	bl	8002114 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d6:	f7ff f84d 	bl	8001974 <HAL_GetTick>
 80028da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80028de:	f7ff f849 	bl	8001974 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e1a1      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80028f0:	f7ff fc21 	bl	8002136 <LL_RCC_LSI2_IsReady>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f1      	bne.n	80028de <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80028fa:	f7ff fbd7 	bl	80020ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fe:	f7ff f839 	bl	8001974 <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002906:	f7ff f835 	bl	8001974 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e18d      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002918:	f7ff fbd9 	bl	80020ce <LL_RCC_LSI1_IsReady>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f1      	bne.n	8002906 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d05b      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292e:	4bb5      	ldr	r3, [pc, #724]	; (8002c04 <HAL_RCC_OscConfig+0x6e0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d114      	bne.n	8002964 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800293a:	f7ff fa77 	bl	8001e2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7ff f819 	bl	8001974 <HAL_GetTick>
 8002942:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7ff f815 	bl	8001974 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e16d      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002958:	4baa      	ldr	r3, [pc, #680]	; (8002c04 <HAL_RCC_OscConfig+0x6e0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d102      	bne.n	8002972 <HAL_RCC_OscConfig+0x44e>
 800296c:	f7ff fb37 	bl	8001fde <LL_RCC_LSE_Enable>
 8002970:	e00c      	b.n	800298c <HAL_RCC_OscConfig+0x468>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d104      	bne.n	8002984 <HAL_RCC_OscConfig+0x460>
 800297a:	f7ff fb52 	bl	8002022 <LL_RCC_LSE_EnableBypass>
 800297e:	f7ff fb2e 	bl	8001fde <LL_RCC_LSE_Enable>
 8002982:	e003      	b.n	800298c <HAL_RCC_OscConfig+0x468>
 8002984:	f7ff fb3c 	bl	8002000 <LL_RCC_LSE_Disable>
 8002988:	f7ff fb5c 	bl	8002044 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d014      	beq.n	80029be <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe ffee 	bl	8001974 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe ffea 	bl	8001974 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e140      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80029b2:	f7ff fb58 	bl	8002066 <LL_RCC_LSE_IsReady>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ef      	beq.n	800299c <HAL_RCC_OscConfig+0x478>
 80029bc:	e013      	b.n	80029e6 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe ffd9 	bl	8001974 <HAL_GetTick>
 80029c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe ffd5 	bl	8001974 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e12b      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80029dc:	f7ff fb43 	bl	8002066 <LL_RCC_LSE_IsReady>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ef      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d014      	beq.n	8002a24 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029fa:	f7ff fabc 	bl	8001f76 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe ffb9 	bl	8001974 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a06:	f7fe ffb5 	bl	8001974 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e10d      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a18:	f7ff facf 	bl	8001fba <LL_RCC_HSI48_IsReady>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f1      	beq.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
 8002a22:	e013      	b.n	8002a4c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a24:	f7ff fab8 	bl	8001f98 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe ffa4 	bl	8001974 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a30:	f7fe ffa0 	bl	8001974 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0f8      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a42:	f7ff faba 	bl	8001fba <LL_RCC_HSI48_IsReady>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f1      	bne.n	8002a30 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80ee 	beq.w	8002c32 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a56:	f7ff fc18 	bl	800228a <LL_RCC_GetSysClkSource>
 8002a5a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	f040 80af 	bne.w	8002bcc <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0203 	and.w	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d123      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d11c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d114      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d05d      	beq.n	8002b80 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d058      	beq.n	8002b7c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0ab      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002adc:	f7ff fc73 	bl	80023c6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae0:	f7fe ff48 	bl	8001974 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe ff44 	bl	8001974 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e09c      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ef      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCC_OscConfig+0x6e4>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b20:	0212      	lsls	r2, r2, #8
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b34:	430a      	orrs	r2, r1
 8002b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b3e:	f7ff fc33 	bl	80023a8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b50:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b52:	f7fe ff0f 	bl	8001974 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe ff0b 	bl	8001974 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e063      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ef      	beq.n	8002b5a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7a:	e05a      	b.n	8002c32 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e059      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d151      	bne.n	8002c32 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b8e:	f7ff fc0b 	bl	80023a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba2:	f7fe fee7 	bl	8001974 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fe fee3 	bl	8001974 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e03b      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ef      	beq.n	8002baa <HAL_RCC_OscConfig+0x686>
 8002bca:	e032      	b.n	8002c32 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d02d      	beq.n	8002c2e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	f7ff fbf8 	bl	80023c6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be0:	f023 0303 	bic.w	r3, r3, #3
 8002be4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe febb 	bl	8001974 <HAL_GetTick>
 8002bfe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c00:	e00d      	b.n	8002c1e <HAL_RCC_OscConfig+0x6fa>
 8002c02:	bf00      	nop
 8002c04:	58000400 	.word	0x58000400
 8002c08:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe feb2 	bl	8001974 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ef      	bne.n	8002c0c <HAL_RCC_OscConfig+0x6e8>
 8002c2c:	e001      	b.n	8002c32 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3734      	adds	r7, #52	; 0x34
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}

08002c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e12d      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b98      	ldr	r3, [pc, #608]	; (8002eb4 <HAL_RCC_ClockConfig+0x278>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d91b      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b95      	ldr	r3, [pc, #596]	; (8002eb4 <HAL_RCC_ClockConfig+0x278>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4993      	ldr	r1, [pc, #588]	; (8002eb4 <HAL_RCC_ClockConfig+0x278>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fe81 	bl	8001974 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c76:	f7fe fe7d 	bl	8001974 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e111      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c88:	4b8a      	ldr	r3, [pc, #552]	; (8002eb4 <HAL_RCC_ClockConfig+0x278>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d1ef      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fafb 	bl	80022a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fe62 	bl	8001974 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cb4:	f7fe fe5e 	bl	8001974 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0f2      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002cc6:	f7ff fbd0 	bl	800246a <LL_RCC_IsActiveFlag_HPRE>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f1      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d016      	beq.n	8002d0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff faf2 	bl	80022ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ce6:	f7fe fe45 	bl	8001974 <HAL_GetTick>
 8002cea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cee:	f7fe fe41 	bl	8001974 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0d5      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d00:	f7ff fbc5 	bl	800248e <LL_RCC_IsActiveFlag_C2HPRE>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f1      	beq.n	8002cee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff faeb 	bl	80022f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d20:	f7fe fe28 	bl	8001974 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d28:	f7fe fe24 	bl	8001974 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0b8      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d3a:	f7ff fbbb 	bl	80024b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f1      	beq.n	8002d28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d016      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fae5 	bl	8002324 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d5a:	f7fe fe0b 	bl	8001974 <HAL_GetTick>
 8002d5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d62:	f7fe fe07 	bl	8001974 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e09b      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d74:	f7ff fbb1 	bl	80024da <LL_RCC_IsActiveFlag_PPRE1>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f1      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d017      	beq.n	8002dba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fadb 	bl	800234c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d96:	f7fe fded 	bl	8001974 <HAL_GetTick>
 8002d9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d9e:	f7fe fde9 	bl	8001974 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e07d      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002db0:	f7ff fba5 	bl	80024fe <LL_RCC_IsActiveFlag_PPRE2>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f1      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d043      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002dce:	f7ff f87b 	bl	8001ec8 <LL_RCC_HSE_IsReady>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11e      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e067      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002de4:	f7ff fafe 	bl	80023e4 <LL_RCC_PLL_IsReady>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d113      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e05c      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002dfa:	f7ff f9e3 	bl	80021c4 <LL_RCC_MSI_IsReady>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d108      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e051      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e08:	f7ff f88e 	bl	8001f28 <LL_RCC_HSI_IsReady>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e04a      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fa21 	bl	8002262 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e20:	f7fe fda8 	bl	8001974 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7fe fda4 	bl	8001974 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e036      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	f7ff fa24 	bl	800228a <LL_RCC_GetSysClkSource>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d1ec      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4e:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x278>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d21b      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_RCC_ClockConfig+0x278>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 0207 	bic.w	r2, r3, #7
 8002e64:	4913      	ldr	r1, [pc, #76]	; (8002eb4 <HAL_RCC_ClockConfig+0x278>)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fd82 	bl	8001974 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e74:	f7fe fd7e 	bl	8001974 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e012      	b.n	8002eac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x278>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1ef      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e94:	f000 f87e 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <HAL_RCC_ClockConfig+0x27c>)
 8002e9c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002e9e:	f7fe fd75 	bl	800198c <HAL_GetTickPrio>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fd17 	bl	80018d8 <HAL_InitTick>
 8002eaa:	4603      	mov	r3, r0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	58004000 	.word	0x58004000
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec2:	f7ff f9e2 	bl	800228a <LL_RCC_GetSysClkSource>
 8002ec6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ece:	f7ff f99e 	bl	800220e <LL_RCC_MSI_GetRange>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e04b      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d102      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e045      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d10a      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ef6:	f7fe ffb7 	bl	8001e68 <LL_RCC_HSE_IsEnabledDiv2>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e03a      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e037      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f0c:	f7ff faa1 	bl	8002452 <LL_RCC_PLL_GetMainSource>
 8002f10:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d003      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x64>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x6a>
 8002f1e:	e00d      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f22:	60bb      	str	r3, [r7, #8]
        break;
 8002f24:	e015      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f26:	f7fe ff9f 	bl	8001e68 <LL_RCC_HSE_IsEnabledDiv2>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f32:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f34:	e00d      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002f36:	4b16      	ldr	r3, [pc, #88]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f38:	60bb      	str	r3, [r7, #8]
        break;
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f3c:	f7ff f967 	bl	800220e <LL_RCC_MSI_GetRange>
 8002f40:	4603      	mov	r3, r0
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	60bb      	str	r3, [r7, #8]
        break;
 8002f50:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002f52:	f7ff fa59 	bl	8002408 <LL_RCC_PLL_GetN>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	fb03 f402 	mul.w	r4, r3, r2
 8002f5e:	f7ff fa6c 	bl	800243a <LL_RCC_PLL_GetDivider>
 8002f62:	4603      	mov	r3, r0
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	3301      	adds	r3, #1
 8002f68:	fbb4 f4f3 	udiv	r4, r4, r3
 8002f6c:	f7ff fa59 	bl	8002422 <LL_RCC_PLL_GetR>
 8002f70:	4603      	mov	r3, r0
 8002f72:	0f5b      	lsrs	r3, r3, #29
 8002f74:	3301      	adds	r3, #1
 8002f76:	fbb4 f3f3 	udiv	r3, r4, r3
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd90      	pop	{r4, r7, pc}
 8002f86:	bf00      	nop
 8002f88:	08006f08 	.word	0x08006f08
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	01e84800 	.word	0x01e84800

08002f94 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b598      	push	{r3, r4, r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002f98:	f7ff ff90 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	f7ff f9e9 	bl	8002374 <LL_RCC_GetAHBPrescaler>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	4a03      	ldr	r2, [pc, #12]	; (8002fb8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd98      	pop	{r3, r4, r7, pc}
 8002fb8:	08006ec8 	.word	0x08006ec8

08002fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2bb0      	cmp	r3, #176	; 0xb0
 8002fc8:	d903      	bls.n	8002fd2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e007      	b.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a11      	ldr	r2, [pc, #68]	; (8003020 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002fe2:	f7ff f9d3 	bl	800238c <LL_RCC_GetAHB4Prescaler>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	0c9c      	lsrs	r4, r3, #18
 8003006:	f7fe ff21 	bl	8001e4c <HAL_PWREx_GetVoltageRange>
 800300a:	4603      	mov	r3, r0
 800300c:	4619      	mov	r1, r3
 800300e:	4620      	mov	r0, r4
 8003010:	f000 f80c 	bl	800302c <RCC_SetFlashLatency>
 8003014:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}
 800301e:	bf00      	nop
 8003020:	08006f08 	.word	0x08006f08
 8003024:	08006ec8 	.word	0x08006ec8
 8003028:	431bde83 	.word	0x431bde83

0800302c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b093      	sub	sp, #76	; 0x4c
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <RCC_SetFlashLatency+0xf0>)
 8003038:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800303c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800303e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003042:	4a37      	ldr	r2, [pc, #220]	; (8003120 <RCC_SetFlashLatency+0xf4>)
 8003044:	f107 031c 	add.w	r3, r7, #28
 8003048:	ca07      	ldmia	r2, {r0, r1, r2}
 800304a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800304e:	4b35      	ldr	r3, [pc, #212]	; (8003124 <RCC_SetFlashLatency+0xf8>)
 8003050:	f107 040c 	add.w	r4, r7, #12
 8003054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800305a:	2300      	movs	r3, #0
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003064:	d11c      	bne.n	80030a0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003066:	2300      	movs	r3, #0
 8003068:	643b      	str	r3, [r7, #64]	; 0x40
 800306a:	e015      	b.n	8003098 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800306c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003074:	4413      	add	r3, r2
 8003076:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	d808      	bhi.n	8003092 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003088:	4413      	add	r3, r2
 800308a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800308e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003090:	e022      	b.n	80030d8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003094:	3301      	adds	r3, #1
 8003096:	643b      	str	r3, [r7, #64]	; 0x40
 8003098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309a:	2b03      	cmp	r3, #3
 800309c:	d9e6      	bls.n	800306c <RCC_SetFlashLatency+0x40>
 800309e:	e01b      	b.n	80030d8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a4:	e015      	b.n	80030d2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80030ae:	4413      	add	r3, r2
 80030b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d808      	bhi.n	80030cc <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80030ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80030c2:	4413      	add	r3, r2
 80030c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80030c8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80030ca:	e005      	b.n	80030d8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80030cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ce:	3301      	adds	r3, #1
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d9e6      	bls.n	80030a6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <RCC_SetFlashLatency+0xfc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 0207 	bic.w	r2, r3, #7
 80030e0:	4911      	ldr	r1, [pc, #68]	; (8003128 <RCC_SetFlashLatency+0xfc>)
 80030e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030e8:	f7fe fc44 	bl	8001974 <HAL_GetTick>
 80030ec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80030ee:	e008      	b.n	8003102 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030f0:	f7fe fc40 	bl	8001974 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e007      	b.n	8003112 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <RCC_SetFlashLatency+0xfc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800310c:	429a      	cmp	r2, r3
 800310e:	d1ef      	bne.n	80030f0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	374c      	adds	r7, #76	; 0x4c
 8003116:	46bd      	mov	sp, r7
 8003118:	bd90      	pop	{r4, r7, pc}
 800311a:	bf00      	nop
 800311c:	08006d30 	.word	0x08006d30
 8003120:	08006d40 	.word	0x08006d40
 8003124:	08006d4c 	.word	0x08006d4c
 8003128:	58004000 	.word	0x58004000

0800312c <LL_RCC_LSE_IsEnabled>:
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <LL_RCC_LSE_IsEnabled+0x18>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <LL_RCC_LSE_IsEnabled+0x1a>
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_RCC_LSE_IsReady>:
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d101      	bne.n	8003168 <LL_RCC_LSE_IsReady+0x18>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <LL_RCC_LSE_IsReady+0x1a>
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_RCC_SetRFWKPClockSource>:
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_RCC_SetSMPSClockSource>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80031a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_RCC_SetSMPSPrescaler>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_RCC_SetUSARTClockSource>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f023 0203 	bic.w	r2, r3, #3
 8003204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_RCC_SetLPUARTClockSource>:
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_RCC_SetI2CClockSource>:
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003260:	43db      	mvns	r3, r3
 8003262:	401a      	ands	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800326c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_RCC_SetLPTIMClockSource>:
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	43db      	mvns	r3, r3
 800329a:	401a      	ands	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_RCC_SetSAIClockSource>:
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_RCC_SetRNGClockSource>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80032f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_RCC_SetCLK48ClockSource>:
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_RCC_SetUSBClockSource>:
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ffe3 	bl	800330e <LL_RCC_SetCLK48ClockSource>
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <LL_RCC_SetADCClockSource>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_RCC_SetRTCClockSource>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_RCC_GetRTCClockSource>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_RCC_ForceBackupDomainReset>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_RCC_PLLSAI1_Enable>:
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003418:	6013      	str	r3, [r2, #0]
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_RCC_PLLSAI1_Disable>:
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_RCC_PLLSAI1_IsReady>:
{
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003454:	d101      	bne.n	800345a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b088      	sub	sp, #32
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800346e:	2300      	movs	r3, #0
 8003470:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003472:	2300      	movs	r3, #0
 8003474:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d034      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800348a:	d021      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800348c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003490:	d81b      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003496:	d01d      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800349c:	d815      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x64>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x54>
 80034a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a6:	d110      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80034a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80034b8:	e00d      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f947 	bl	8003752 <RCCEx_PLLSAI1_ConfigNP>
 80034c4:	4603      	mov	r3, r0
 80034c6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80034c8:	e005      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	77fb      	strb	r3, [r7, #31]
        break;
 80034ce:	e002      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80034d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d6:	7ffb      	ldrb	r3, [r7, #31]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fee8 	bl	80032b6 <LL_RCC_SetSAIClockSource>
 80034e6:	e001      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e8:	7ffb      	ldrb	r3, [r7, #31]
 80034ea:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d046      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80034f8:	f7ff ff56 	bl	80033a8 <LL_RCC_GetRTCClockSource>
 80034fc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	429a      	cmp	r2, r3
 8003506:	d03c      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003508:	f7fe fc90 	bl	8001e2c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff30 	bl	800337c <LL_RCC_SetRTCClockSource>
 800351c:	e02e      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003528:	f7ff ff4b 	bl	80033c2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800352c:	f7ff ff5a 	bl	80033e4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800353e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003548:	f7ff fdf0 	bl	800312c <LL_RCC_LSE_IsEnabled>
 800354c:	4603      	mov	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d114      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003552:	f7fe fa0f 	bl	8001974 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003558:	e00b      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe fa0b 	bl	8001974 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d902      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	77fb      	strb	r3, [r7, #31]
              break;
 8003570:	e004      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003572:	f7ff fded 	bl	8003150 <LL_RCC_LSE_IsReady>
 8003576:	4603      	mov	r3, r0
 8003578:	2b01      	cmp	r3, #1
 800357a:	d1ee      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800357c:	7ffb      	ldrb	r3, [r7, #31]
 800357e:	77bb      	strb	r3, [r7, #30]
 8003580:	e001      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fe2a 	bl	80031f0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fe35 	bl	800321c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fe5d 	bl	8003282 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fe52 	bl	8003282 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fe2a 	bl	8003248 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fe1f 	bl	8003248 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d022      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fe8d 	bl	800333a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003628:	d107      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003638:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003642:	d10b      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f8dd 	bl	8003808 <RCCEx_PLLSAI1_ConfigNQ>
 800364e:	4603      	mov	r3, r0
 8003650:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003652:	7ffb      	ldrb	r3, [r7, #31]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003658:	7ffb      	ldrb	r3, [r7, #31]
 800365a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02b      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800367a:	d003      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fe2a 	bl	80032e2 <LL_RCC_SetRNGClockSource>
 800368e:	e00a      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	2000      	movs	r0, #0
 800369c:	f7ff fe21 	bl	80032e2 <LL_RCC_SetRNGClockSource>
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff fe34 	bl	800330e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80036ae:	d107      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fe3d 	bl	8003350 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036de:	d107      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ee:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036f8:	d10b      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f8dd 	bl	80038be <RCCEx_PLLSAI1_ConfigNR>
 8003704:	4603      	mov	r3, r0
 8003706:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003708:	7ffb      	ldrb	r3, [r7, #31]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800370e:	7ffb      	ldrb	r3, [r7, #31]
 8003710:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fd26 	bl	8003174 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d009      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fd45 	bl	80031c8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fd2c 	bl	80031a0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003748:	7fbb      	ldrb	r3, [r7, #30]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800375e:	f7ff fe61 	bl	8003424 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003762:	f7fe f907 	bl	8001974 <HAL_GetTick>
 8003766:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003768:	e009      	b.n	800377e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800376a:	f7fe f903 	bl	8001974 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d902      	bls.n	800377e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e004      	b.n	8003788 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800377e:	f7ff fe60 	bl	8003442 <LL_RCC_PLLSAI1_IsReady>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d137      	bne.n	80037fe <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800378e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a2:	4313      	orrs	r3, r2
 80037a4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b8:	4313      	orrs	r3, r2
 80037ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80037bc:	f7ff fe23 	bl	8003406 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c0:	f7fe f8d8 	bl	8001974 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c8:	f7fe f8d4 	bl	8001974 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
        break;
 80037da:	e004      	b.n	80037e6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037dc:	f7ff fe31 	bl	8003442 <LL_RCC_PLLSAI1_IsReady>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d1f0      	bne.n	80037c8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d108      	bne.n	80037fe <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037fa:	4313      	orrs	r3, r2
 80037fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003814:	f7ff fe06 	bl	8003424 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003818:	f7fe f8ac 	bl	8001974 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800381e:	e009      	b.n	8003834 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003820:	f7fe f8a8 	bl	8001974 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	73fb      	strb	r3, [r7, #15]
      break;
 8003832:	e004      	b.n	800383e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003834:	f7ff fe05 	bl	8003442 <LL_RCC_PLLSAI1_IsReady>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d137      	bne.n	80038b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003858:	4313      	orrs	r3, r2
 800385a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800386e:	4313      	orrs	r3, r2
 8003870:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003872:	f7ff fdc8 	bl	8003406 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003876:	f7fe f87d 	bl	8001974 <HAL_GetTick>
 800387a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800387c:	e009      	b.n	8003892 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800387e:	f7fe f879 	bl	8001974 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d902      	bls.n	8003892 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	73fb      	strb	r3, [r7, #15]
        break;
 8003890:	e004      	b.n	800389c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003892:	f7ff fdd6 	bl	8003442 <LL_RCC_PLLSAI1_IsReady>
 8003896:	4603      	mov	r3, r0
 8003898:	2b01      	cmp	r3, #1
 800389a:	d1f0      	bne.n	800387e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d108      	bne.n	80038b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80038ca:	f7ff fdab 	bl	8003424 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038ce:	f7fe f851 	bl	8001974 <HAL_GetTick>
 80038d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038d4:	e009      	b.n	80038ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038d6:	f7fe f84d 	bl	8001974 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d902      	bls.n	80038ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	73fb      	strb	r3, [r7, #15]
      break;
 80038e8:	e004      	b.n	80038f4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038ea:	f7ff fdaa 	bl	8003442 <LL_RCC_PLLSAI1_IsReady>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d137      	bne.n	800396a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800390e:	4313      	orrs	r3, r2
 8003910:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003924:	4313      	orrs	r3, r2
 8003926:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003928:	f7ff fd6d 	bl	8003406 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392c:	f7fe f822 	bl	8001974 <HAL_GetTick>
 8003930:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003932:	e009      	b.n	8003948 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003934:	f7fe f81e 	bl	8001974 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	73fb      	strb	r3, [r7, #15]
        break;
 8003946:	e004      	b.n	8003952 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003948:	f7ff fd7b 	bl	8003442 <LL_RCC_PLLSAI1_IsReady>
 800394c:	4603      	mov	r3, r0
 800394e:	2b01      	cmp	r3, #1
 8003950:	d1f0      	bne.n	8003934 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d108      	bne.n	800396a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003966:	4313      	orrs	r3, r2
 8003968:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e090      	b.n	8003aa8 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fe82 	bl	80016a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	22ca      	movs	r2, #202	; 0xca
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2253      	movs	r2, #83	; 0x53
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f89f 	bl	8003afc <RTC_EnterInitMode>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2204      	movs	r2, #4
 80039d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e067      	b.n	8003aa8 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80039e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6899      	ldr	r1, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	041a      	lsls	r2, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a36:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0203 	bic.w	r2, r2, #3
 8003a46:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d113      	bne.n	8003a96 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f81e 	bl	8003ab0 <HAL_RTC_WaitForSynchro>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	22ff      	movs	r2, #255	; 0xff
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2204      	movs	r2, #4
 8003a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e008      	b.n	8003aa8 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	22ff      	movs	r2, #255	; 0xff
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ac8:	f7fd ff54 	bl	8001974 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ace:	e009      	b.n	8003ae4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ad0:	f7fd ff50 	bl	8001974 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ade:	d901      	bls.n	8003ae4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e007      	b.n	8003af4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ee      	beq.n	8003ad0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d119      	bne.n	8003b46 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b1c:	f7fd ff2a 	bl	8001974 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b22:	e009      	b.n	8003b38 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003b24:	f7fd ff26 	bl	8001974 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b32:	d901      	bls.n	8003b38 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e007      	b.n	8003b48 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ee      	beq.n	8003b24 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	2218      	movs	r2, #24
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 ff45 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003b68:	233f      	movs	r3, #63	; 0x3f
 8003b6a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8003b6c:	2381      	movs	r3, #129	; 0x81
 8003b6e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003b70:	1dfb      	adds	r3, r7, #7
 8003b72:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003b74:	2301      	movs	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fac6 	bl	8005110 <hci_send_req>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	da01      	bge.n	8003b8e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003b8a:	23ff      	movs	r3, #255	; 0xff
 8003b8c:	e000      	b.n	8003b90 <aci_gap_set_non_discoverable+0x40>
  return status;
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	b0ce      	sub	sp, #312	; 0x138
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	462a      	mov	r2, r5
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	1d3b      	adds	r3, r7, #4
 8003bae:	4622      	mov	r2, r4
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	1cbb      	adds	r3, r7, #2
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	460a      	mov	r2, r1
 8003bbc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8003bbe:	f107 0310 	add.w	r3, r7, #16
 8003bc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003bc6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003bca:	3308      	adds	r3, #8
 8003bcc:	f107 0210 	add.w	r2, r7, #16
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003bd6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003bda:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003bde:	4413      	add	r3, r2
 8003be0:	3309      	adds	r3, #9
 8003be2:	f107 0210 	add.w	r2, r7, #16
 8003be6:	4413      	add	r3, r2
 8003be8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003bec:	f107 030f 	add.w	r3, r7, #15
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bfe:	1dfa      	adds	r2, r7, #7
 8003c00:	7812      	ldrb	r2, [r2, #0]
 8003c02:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8003c0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c12:	1d3a      	adds	r2, r7, #4
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c1e:	3302      	adds	r3, #2
 8003c20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003c24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c28:	1cba      	adds	r2, r7, #2
 8003c2a:	8812      	ldrh	r2, [r2, #0]
 8003c2c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003c30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c34:	3302      	adds	r3, #2
 8003c36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8003c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c3e:	1dba      	adds	r2, r7, #6
 8003c40:	7812      	ldrb	r2, [r2, #0]
 8003c42:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8003c4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c52:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003c56:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8003c62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c66:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003c6a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c70:	3301      	adds	r3, #1
 8003c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8003c76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003c80:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fea4 	bl	80049d2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8003c8a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003c8e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003c92:	4413      	add	r3, r2
 8003c94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8003c98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c9c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003ca0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8003cac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003cb6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fe89 	bl	80049d2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8003cc0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003cc4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003cc8:	4413      	add	r3, r2
 8003cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8003cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cd2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003cd6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003cd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cdc:	3302      	adds	r3, #2
 8003cde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8003ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ce6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003cea:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003cec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003cf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003cfa:	2218      	movs	r2, #24
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fe77 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003d04:	233f      	movs	r3, #63	; 0x3f
 8003d06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003d0a:	2383      	movs	r3, #131	; 0x83
 8003d0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003d18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003d20:	f107 030f 	add.w	r3, r7, #15
 8003d24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003d2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 f9eb 	bl	8005110 <hci_send_req>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	da01      	bge.n	8003d44 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8003d40:	23ff      	movs	r3, #255	; 0xff
 8003d42:	e002      	b.n	8003d4a <aci_gap_set_discoverable+0x1b2>
  return status;
 8003d44:	f107 030f 	add.w	r3, r7, #15
 8003d48:	781b      	ldrb	r3, [r3, #0]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bdb0      	pop	{r4, r5, r7, pc}

08003d54 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b0cc      	sub	sp, #304	; 0x130
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8003d60:	f107 0310 	add.w	r3, r7, #16
 8003d64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003d68:	f107 030f 	add.w	r3, r7, #15
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8003d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d7a:	1dfa      	adds	r2, r7, #7
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d84:	3301      	adds	r3, #1
 8003d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003d8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d8e:	2218      	movs	r2, #24
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fe2d 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003d98:	233f      	movs	r3, #63	; 0x3f
 8003d9a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8003d9e:	2385      	movs	r3, #133	; 0x85
 8003da0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003da4:	f107 0310 	add.w	r3, r7, #16
 8003da8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003db0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003db4:	f107 030f 	add.w	r3, r7, #15
 8003db8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003dc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 f9a1 	bl	8005110 <hci_send_req>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da01      	bge.n	8003dd8 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8003dd4:	23ff      	movs	r3, #255	; 0xff
 8003dd6:	e002      	b.n	8003dde <aci_gap_set_io_capability+0x8a>
  return status;
 8003dd8:	f107 030f 	add.w	r3, r7, #15
 8003ddc:	781b      	ldrb	r3, [r3, #0]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8003de8:	b5b0      	push	{r4, r5, r7, lr}
 8003dea:	b0cc      	sub	sp, #304	; 0x130
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4605      	mov	r5, r0
 8003df0:	460c      	mov	r4, r1
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	1dfb      	adds	r3, r7, #7
 8003df8:	462a      	mov	r2, r5
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	1dbb      	adds	r3, r7, #6
 8003dfe:	4622      	mov	r2, r4
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	1d7b      	adds	r3, r7, #5
 8003e04:	4602      	mov	r2, r0
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	460a      	mov	r2, r1
 8003e0c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8003e0e:	f107 0310 	add.w	r3, r7, #16
 8003e12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003e16:	f107 030f 	add.w	r3, r7, #15
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8003e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e28:	1dfa      	adds	r2, r7, #7
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e32:	3301      	adds	r3, #1
 8003e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8003e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e3c:	1dba      	adds	r2, r7, #6
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e46:	3301      	adds	r3, #1
 8003e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8003e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e50:	1d7a      	adds	r2, r7, #5
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8003e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e64:	1d3a      	adds	r2, r7, #4
 8003e66:	7812      	ldrb	r2, [r2, #0]
 8003e68:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8003e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8003e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e78:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8003e7c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e82:	3301      	adds	r3, #1
 8003e84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8003e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e8c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8003e90:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e96:	3301      	adds	r3, #1
 8003e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8003e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ea0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003ea4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8003eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eb4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003eb8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8003ebc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8003ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eca:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8003ece:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8003ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003eda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ede:	2218      	movs	r2, #24
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fd85 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003ee8:	233f      	movs	r3, #63	; 0x3f
 8003eea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8003eee:	2386      	movs	r3, #134	; 0x86
 8003ef0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003f04:	f107 030f 	add.w	r3, r7, #15
 8003f08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003f12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 f8f9 	bl	8005110 <hci_send_req>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	da01      	bge.n	8003f28 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8003f24:	23ff      	movs	r3, #255	; 0xff
 8003f26:	e002      	b.n	8003f2e <aci_gap_set_authentication_requirement+0x146>
  return status;
 8003f28:	f107 030f 	add.w	r3, r7, #15
 8003f2c:	781b      	ldrb	r3, [r3, #0]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bdb0      	pop	{r4, r5, r7, pc}

08003f38 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b0cd      	sub	sp, #308	; 0x134
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	463a      	mov	r2, r7
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	1dfb      	adds	r3, r7, #7
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	1dbb      	adds	r3, r7, #6
 8003f50:	4602      	mov	r2, r0
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	1d7b      	adds	r3, r7, #5
 8003f56:	460a      	mov	r2, r1
 8003f58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8003f5a:	f107 0310 	add.w	r3, r7, #16
 8003f5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003f62:	f107 0308 	add.w	r3, r7, #8
 8003f66:	2207      	movs	r2, #7
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fd41 	bl	80049f2 <Osal_MemSet>
  int index_input = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8003f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f7a:	1dfa      	adds	r2, r7, #7
 8003f7c:	7812      	ldrb	r2, [r2, #0]
 8003f7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003f80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f84:	3301      	adds	r3, #1
 8003f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8003f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f8e:	1dba      	adds	r2, r7, #6
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003f94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8003f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa2:	1d7a      	adds	r2, r7, #5
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003fa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fac:	3301      	adds	r3, #1
 8003fae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003fb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003fb6:	2218      	movs	r2, #24
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fd19 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003fc0:	233f      	movs	r3, #63	; 0x3f
 8003fc2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8003fc6:	238a      	movs	r3, #138	; 0x8a
 8003fc8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003fdc:	f107 0308 	add.w	r3, r7, #8
 8003fe0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003fe4:	2307      	movs	r3, #7
 8003fe6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003fea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 f88d 	bl	8005110 <hci_send_req>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	da01      	bge.n	8004000 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8003ffc:	23ff      	movs	r3, #255	; 0xff
 8003ffe:	e021      	b.n	8004044 <aci_gap_init+0x10c>
  if ( resp.Status )
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <aci_gap_init+0xda>
    return resp.Status;
 800400a:	f107 0308 	add.w	r3, r7, #8
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	e018      	b.n	8004044 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8004012:	f107 0308 	add.w	r3, r7, #8
 8004016:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800401a:	b29a      	uxth	r2, r3
 800401c:	463b      	mov	r3, r7
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004022:	f107 0308 	add.w	r3, r7, #8
 8004026:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800402a:	b29a      	uxth	r2, r3
 800402c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004030:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004032:	f107 0308 	add.w	r3, r7, #8
 8004036:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800403a:	b29a      	uxth	r2, r3
 800403c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004040:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}

0800404e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b0cc      	sub	sp, #304	; 0x130
 8004052:	af00      	add	r7, sp, #0
 8004054:	4602      	mov	r2, r0
 8004056:	463b      	mov	r3, r7
 8004058:	6019      	str	r1, [r3, #0]
 800405a:	1dfb      	adds	r3, r7, #7
 800405c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800405e:	f107 0310 	add.w	r3, r7, #16
 8004062:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004066:	f107 030f 	add.w	r3, r7, #15
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004078:	1dfa      	adds	r2, r7, #7
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800407e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004082:	3301      	adds	r3, #1
 8004084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800408c:	1c58      	adds	r0, r3, #1
 800408e:	1dfb      	adds	r3, r7, #7
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	463b      	mov	r3, r7
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	f000 fc9c 	bl	80049d2 <Osal_MemCpy>
  index_input += AdvDataLen;
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80040a2:	4413      	add	r3, r2
 80040a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80040a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80040ac:	2218      	movs	r2, #24
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fc9e 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80040b6:	233f      	movs	r3, #63	; 0x3f
 80040b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80040bc:	238e      	movs	r3, #142	; 0x8e
 80040be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80040c2:	f107 0310 	add.w	r3, r7, #16
 80040c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80040ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80040d2:	f107 030f 	add.w	r3, r7, #15
 80040d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80040e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f812 	bl	8005110 <hci_send_req>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da01      	bge.n	80040f6 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80040f2:	23ff      	movs	r3, #255	; 0xff
 80040f4:	e002      	b.n	80040fc <aci_gap_update_adv_data+0xae>
  return status;
 80040f6:	f107 030f 	add.w	r3, r7, #15
 80040fa:	781b      	ldrb	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b088      	sub	sp, #32
 800410a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004110:	f107 0308 	add.w	r3, r7, #8
 8004114:	2218      	movs	r2, #24
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fc6a 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800411e:	233f      	movs	r3, #63	; 0x3f
 8004120:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8004122:	2392      	movs	r3, #146	; 0x92
 8004124:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004126:	1dfb      	adds	r3, r7, #7
 8004128:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800412e:	f107 0308 	add.w	r3, r7, #8
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f000 ffeb 	bl	8005110 <hci_send_req>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	da01      	bge.n	8004144 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004140:	23ff      	movs	r3, #255	; 0xff
 8004142:	e000      	b.n	8004146 <aci_gap_configure_whitelist+0x40>
  return status;
 8004144:	79fb      	ldrb	r3, [r7, #7]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b088      	sub	sp, #32
 8004152:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004158:	f107 0308 	add.w	r3, r7, #8
 800415c:	2218      	movs	r2, #24
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fc46 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004166:	233f      	movs	r3, #63	; 0x3f
 8004168:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800416a:	f240 1301 	movw	r3, #257	; 0x101
 800416e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004170:	1dfb      	adds	r3, r7, #7
 8004172:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004174:	2301      	movs	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004178:	f107 0308 	add.w	r3, r7, #8
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 ffc6 	bl	8005110 <hci_send_req>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	da01      	bge.n	800418e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800418a:	23ff      	movs	r3, #255	; 0xff
 800418c:	e000      	b.n	8004190 <aci_gatt_init+0x42>
  return status;
 800418e:	79fb      	ldrb	r3, [r7, #7]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b0cf      	sub	sp, #316	; 0x13c
 800419c:	af00      	add	r7, sp, #0
 800419e:	4604      	mov	r4, r0
 80041a0:	4638      	mov	r0, r7
 80041a2:	6001      	str	r1, [r0, #0]
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	4622      	mov	r2, r4
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	1dbb      	adds	r3, r7, #6
 80041b0:	4602      	mov	r2, r0
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	1d7b      	adds	r3, r7, #5
 80041b6:	460a      	mov	r2, r1
 80041b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80041ba:	f107 0310 	add.w	r3, r7, #16
 80041be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80041c2:	1dfb      	adds	r3, r7, #7
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d007      	beq.n	80041da <aci_gatt_add_service+0x42>
 80041ca:	1dfb      	adds	r3, r7, #7
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d101      	bne.n	80041d6 <aci_gatt_add_service+0x3e>
 80041d2:	2311      	movs	r3, #17
 80041d4:	e002      	b.n	80041dc <aci_gatt_add_service+0x44>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <aci_gatt_add_service+0x44>
 80041da:	2303      	movs	r3, #3
 80041dc:	f107 0210 	add.w	r2, r7, #16
 80041e0:	4413      	add	r3, r2
 80041e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80041e6:	f107 030c 	add.w	r3, r7, #12
 80041ea:	2203      	movs	r2, #3
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fbff 	bl	80049f2 <Osal_MemSet>
  int index_input = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80041fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041fe:	1dfa      	adds	r2, r7, #7
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004204:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004208:	3301      	adds	r3, #1
 800420a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <aci_gatt_add_service+0x84>
 8004216:	2b02      	cmp	r3, #2
 8004218:	d004      	beq.n	8004224 <aci_gatt_add_service+0x8c>
 800421a:	e007      	b.n	800422c <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800421c:	2302      	movs	r3, #2
 800421e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004222:	e005      	b.n	8004230 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8004224:	2310      	movs	r3, #16
 8004226:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800422a:	e001      	b.n	8004230 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800422c:	2397      	movs	r3, #151	; 0x97
 800422e:	e05d      	b.n	80042ec <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004230:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004234:	1c58      	adds	r0, r3, #1
 8004236:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800423a:	463b      	mov	r3, r7
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	f000 fbc8 	bl	80049d2 <Osal_MemCpy>
    index_input += size;
 8004242:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004246:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800424a:	4413      	add	r3, r2
 800424c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8004250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004254:	1dba      	adds	r2, r7, #6
 8004256:	7812      	ldrb	r2, [r2, #0]
 8004258:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800425a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800425e:	3301      	adds	r3, #1
 8004260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004268:	1d7a      	adds	r2, r7, #5
 800426a:	7812      	ldrb	r2, [r2, #0]
 800426c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800426e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004272:	3301      	adds	r3, #1
 8004274:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004278:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800427c:	2218      	movs	r2, #24
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fbb6 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004286:	233f      	movs	r3, #63	; 0x3f
 8004288:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800428c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004290:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800429c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80042ac:	2303      	movs	r3, #3
 80042ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80042b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 ff29 	bl	8005110 <hci_send_req>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da01      	bge.n	80042c8 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80042c4:	23ff      	movs	r3, #255	; 0xff
 80042c6:	e011      	b.n	80042ec <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80042c8:	f107 030c 	add.w	r3, r7, #12
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <aci_gatt_add_service+0x142>
    return resp.Status;
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	e008      	b.n	80042ec <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80042da:	f107 030c 	add.w	r3, r7, #12
 80042de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80042e8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd90      	pop	{r4, r7, pc}

080042f6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80042f6:	b590      	push	{r4, r7, lr}
 80042f8:	b0d1      	sub	sp, #324	; 0x144
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	4604      	mov	r4, r0
 80042fe:	4608      	mov	r0, r1
 8004300:	f107 0108 	add.w	r1, r7, #8
 8004304:	600a      	str	r2, [r1, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	f107 030e 	add.w	r3, r7, #14
 800430c:	4622      	mov	r2, r4
 800430e:	801a      	strh	r2, [r3, #0]
 8004310:	f107 030d 	add.w	r3, r7, #13
 8004314:	4602      	mov	r2, r0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	1dbb      	adds	r3, r7, #6
 800431a:	460a      	mov	r2, r1
 800431c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800431e:	f107 0318 	add.w	r3, r7, #24
 8004322:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004326:	f107 030d 	add.w	r3, r7, #13
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d008      	beq.n	8004342 <aci_gatt_add_char+0x4c>
 8004330:	f107 030d 	add.w	r3, r7, #13
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d101      	bne.n	800433e <aci_gatt_add_char+0x48>
 800433a:	2313      	movs	r3, #19
 800433c:	e002      	b.n	8004344 <aci_gatt_add_char+0x4e>
 800433e:	2303      	movs	r3, #3
 8004340:	e000      	b.n	8004344 <aci_gatt_add_char+0x4e>
 8004342:	2305      	movs	r3, #5
 8004344:	f107 0218 	add.w	r2, r7, #24
 8004348:	4413      	add	r3, r2
 800434a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800434e:	f107 0314 	add.w	r3, r7, #20
 8004352:	2203      	movs	r2, #3
 8004354:	2100      	movs	r1, #0
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fb4b 	bl	80049f2 <Osal_MemSet>
  int index_input = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8004362:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004366:	f107 020e 	add.w	r2, r7, #14
 800436a:	8812      	ldrh	r2, [r2, #0]
 800436c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800436e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004372:	3302      	adds	r3, #2
 8004374:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8004378:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800437c:	f107 020d 	add.w	r2, r7, #13
 8004380:	7812      	ldrb	r2, [r2, #0]
 8004382:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004384:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004388:	3301      	adds	r3, #1
 800438a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800438e:	f107 030d 	add.w	r3, r7, #13
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d002      	beq.n	800439e <aci_gatt_add_char+0xa8>
 8004398:	2b02      	cmp	r3, #2
 800439a:	d004      	beq.n	80043a6 <aci_gatt_add_char+0xb0>
 800439c:	e007      	b.n	80043ae <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800439e:	2302      	movs	r3, #2
 80043a0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80043a4:	e005      	b.n	80043b2 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80043a6:	2310      	movs	r3, #16
 80043a8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80043ac:	e001      	b.n	80043b2 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80043ae:	2397      	movs	r3, #151	; 0x97
 80043b0:	e086      	b.n	80044c0 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80043b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043b6:	1cd8      	adds	r0, r3, #3
 80043b8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80043bc:	f107 0308 	add.w	r3, r7, #8
 80043c0:	6819      	ldr	r1, [r3, #0]
 80043c2:	f000 fb06 	bl	80049d2 <Osal_MemCpy>
    index_input += size;
 80043c6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80043ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80043ce:	4413      	add	r3, r2
 80043d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80043d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043d8:	1dba      	adds	r2, r7, #6
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80043de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043e2:	3302      	adds	r3, #2
 80043e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80043e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80043ec:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80043f0:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80043f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043f6:	3301      	adds	r3, #1
 80043f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80043fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004400:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004404:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004406:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800440a:	3301      	adds	r3, #1
 800440c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004410:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004414:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004418:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800441a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800441e:	3301      	adds	r3, #1
 8004420:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004424:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004428:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800442c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800442e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004432:	3301      	adds	r3, #1
 8004434:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004438:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800443c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004440:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004442:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004446:	3301      	adds	r3, #1
 8004448:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800444c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004450:	2218      	movs	r2, #24
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 facc 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800445a:	233f      	movs	r3, #63	; 0x3f
 800445c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004460:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004464:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004468:	f107 0318 	add.w	r3, r7, #24
 800446c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004470:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004474:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004480:	2303      	movs	r3, #3
 8004482:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004486:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fe3f 	bl	8005110 <hci_send_req>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	da01      	bge.n	800449c <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8004498:	23ff      	movs	r3, #255	; 0xff
 800449a:	e011      	b.n	80044c0 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800449c:	f107 0314 	add.w	r3, r7, #20
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	e008      	b.n	80044c0 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80044ae:	f107 0314 	add.w	r3, r7, #20
 80044b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80044bc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}

080044ca <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80044ca:	b5b0      	push	{r4, r5, r7, lr}
 80044cc:	b0cc      	sub	sp, #304	; 0x130
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4605      	mov	r5, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	1dbb      	adds	r3, r7, #6
 80044da:	462a      	mov	r2, r5
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	4622      	mov	r2, r4
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	1cfb      	adds	r3, r7, #3
 80044e6:	4602      	mov	r2, r0
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	1cbb      	adds	r3, r7, #2
 80044ec:	460a      	mov	r2, r1
 80044ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80044f0:	f107 0310 	add.w	r3, r7, #16
 80044f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80044f8:	f107 030f 	add.w	r3, r7, #15
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800450a:	1dba      	adds	r2, r7, #6
 800450c:	8812      	ldrh	r2, [r2, #0]
 800450e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004510:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004514:	3302      	adds	r3, #2
 8004516:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800451a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800451e:	1d3a      	adds	r2, r7, #4
 8004520:	8812      	ldrh	r2, [r2, #0]
 8004522:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004524:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004528:	3302      	adds	r3, #2
 800452a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800452e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004532:	1cfa      	adds	r2, r7, #3
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800453c:	3301      	adds	r3, #1
 800453e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004546:	1cba      	adds	r2, r7, #2
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800454c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004550:	3301      	adds	r3, #1
 8004552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800455a:	1d98      	adds	r0, r3, #6
 800455c:	1cbb      	adds	r3, r7, #2
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004566:	f000 fa34 	bl	80049d2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800456a:	1cbb      	adds	r3, r7, #2
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004572:	4413      	add	r3, r2
 8004574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004578:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800457c:	2218      	movs	r2, #24
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fa36 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004586:	233f      	movs	r3, #63	; 0x3f
 8004588:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800458c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004590:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004594:	f107 0310 	add.w	r3, r7, #16
 8004598:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800459c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80045a4:	f107 030f 	add.w	r3, r7, #15
 80045a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fda9 	bl	8005110 <hci_send_req>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da01      	bge.n	80045c8 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80045c4:	23ff      	movs	r3, #255	; 0xff
 80045c6:	e002      	b.n	80045ce <aci_gatt_update_char_value+0x104>
  return status;
 80045c8:	f107 030f 	add.w	r3, r7, #15
 80045cc:	781b      	ldrb	r3, [r3, #0]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bdb0      	pop	{r4, r5, r7, pc}

080045d8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0cc      	sub	sp, #304	; 0x130
 80045dc:	af00      	add	r7, sp, #0
 80045de:	463b      	mov	r3, r7
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	4602      	mov	r2, r0
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	1dbb      	adds	r3, r7, #6
 80045ea:	460a      	mov	r2, r1
 80045ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80045ee:	f107 0310 	add.w	r3, r7, #16
 80045f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80045f6:	f107 030f 	add.w	r3, r7, #15
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004608:	1dfa      	adds	r2, r7, #7
 800460a:	7812      	ldrb	r2, [r2, #0]
 800460c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800460e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004612:	3301      	adds	r3, #1
 8004614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800461c:	1dba      	adds	r2, r7, #6
 800461e:	7812      	ldrb	r2, [r2, #0]
 8004620:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004626:	3301      	adds	r3, #1
 8004628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800462c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004630:	1c98      	adds	r0, r3, #2
 8004632:	1dbb      	adds	r3, r7, #6
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	463b      	mov	r3, r7
 8004638:	6819      	ldr	r1, [r3, #0]
 800463a:	f000 f9ca 	bl	80049d2 <Osal_MemCpy>
  index_input += Length;
 800463e:	1dbb      	adds	r3, r7, #6
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004646:	4413      	add	r3, r2
 8004648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800464c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004650:	2218      	movs	r2, #24
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f9cc 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800465a:	233f      	movs	r3, #63	; 0x3f
 800465c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004660:	230c      	movs	r3, #12
 8004662:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004666:	f107 0310 	add.w	r3, r7, #16
 800466a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800466e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004672:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004676:	f107 030f 	add.w	r3, r7, #15
 800467a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004684:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fd40 	bl	8005110 <hci_send_req>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	da01      	bge.n	800469a <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8004696:	23ff      	movs	r3, #255	; 0xff
 8004698:	e002      	b.n	80046a0 <aci_hal_write_config_data+0xc8>
  return status;
 800469a:	f107 030f 	add.w	r3, r7, #15
 800469e:	781b      	ldrb	r3, [r3, #0]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b0cc      	sub	sp, #304	; 0x130
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4602      	mov	r2, r0
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	1dbb      	adds	r3, r7, #6
 80046b8:	460a      	mov	r2, r1
 80046ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80046c4:	f107 030f 	add.w	r3, r7, #15
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80046d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046d6:	1dfa      	adds	r2, r7, #7
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80046dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046e0:	3301      	adds	r3, #1
 80046e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80046e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ea:	1dba      	adds	r2, r7, #6
 80046ec:	7812      	ldrb	r2, [r2, #0]
 80046ee:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80046f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046f4:	3301      	adds	r3, #1
 80046f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80046fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046fe:	2218      	movs	r2, #24
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f975 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004708:	233f      	movs	r3, #63	; 0x3f
 800470a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800470e:	230f      	movs	r3, #15
 8004710:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800471c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004720:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004724:	f107 030f 	add.w	r3, r7, #15
 8004728:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800472c:	2301      	movs	r3, #1
 800472e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004732:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fce9 	bl	8005110 <hci_send_req>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	da01      	bge.n	8004748 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004744:	23ff      	movs	r3, #255	; 0xff
 8004746:	e002      	b.n	800474e <aci_hal_set_tx_power_level+0xa4>
  return status;
 8004748:	f107 030f 	add.w	r3, r7, #15
 800474c:	781b      	ldrb	r3, [r3, #0]
}
 800474e:	4618      	mov	r0, r3
 8004750:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b0cc      	sub	sp, #304	; 0x130
 800475c:	af00      	add	r7, sp, #0
 800475e:	4602      	mov	r2, r0
 8004760:	1dbb      	adds	r3, r7, #6
 8004762:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800476c:	f107 030f 	add.w	r3, r7, #15
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800477a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800477e:	1dba      	adds	r2, r7, #6
 8004780:	8812      	ldrh	r2, [r2, #0]
 8004782:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004788:	3302      	adds	r3, #2
 800478a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800478e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004792:	2218      	movs	r2, #24
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f92b 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800479c:	233f      	movs	r3, #63	; 0x3f
 800479e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80047a2:	2318      	movs	r3, #24
 80047a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80047b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80047b8:	f107 030f 	add.w	r3, r7, #15
 80047bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fc9f 	bl	8005110 <hci_send_req>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	da01      	bge.n	80047dc <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80047d8:	23ff      	movs	r3, #255	; 0xff
 80047da:	e002      	b.n	80047e2 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 80047dc:	f107 030f 	add.w	r3, r7, #15
 80047e0:	781b      	ldrb	r3, [r3, #0]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	2218      	movs	r2, #24
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f8f7 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x03;
 8004804:	2303      	movs	r3, #3
 8004806:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004808:	2303      	movs	r3, #3
 800480a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800480c:	1dfb      	adds	r3, r7, #7
 800480e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004810:	2301      	movs	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004814:	f107 0308 	add.w	r3, r7, #8
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fc78 	bl	8005110 <hci_send_req>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	da01      	bge.n	800482a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004826:	23ff      	movs	r3, #255	; 0xff
 8004828:	e000      	b.n	800482c <hci_reset+0x40>
  return status;
 800482a:	79fb      	ldrb	r3, [r7, #7]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b0ce      	sub	sp, #312	; 0x138
 8004838:	af00      	add	r7, sp, #0
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	6019      	str	r1, [r3, #0]
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f107 030e 	add.w	r3, r7, #14
 8004848:	4602      	mov	r2, r0
 800484a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800484c:	f107 0318 	add.w	r3, r7, #24
 8004850:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004854:	f107 0310 	add.w	r3, r7, #16
 8004858:	2205      	movs	r2, #5
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f8c8 	bl	80049f2 <Osal_MemSet>
  int index_input = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8004868:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800486c:	f107 020e 	add.w	r2, r7, #14
 8004870:	8812      	ldrh	r2, [r2, #0]
 8004872:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004874:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004878:	3302      	adds	r3, #2
 800487a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800487e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004882:	2218      	movs	r2, #24
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f8b3 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x08;
 800488c:	2308      	movs	r3, #8
 800488e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8004892:	2330      	movs	r3, #48	; 0x30
 8004894:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004898:	f107 0318 	add.w	r3, r7, #24
 800489c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80048a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80048a8:	f107 0310 	add.w	r3, r7, #16
 80048ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80048b0:	2305      	movs	r3, #5
 80048b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80048b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fc27 	bl	8005110 <hci_send_req>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	da01      	bge.n	80048cc <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80048c8:	23ff      	movs	r3, #255	; 0xff
 80048ca:	e016      	b.n	80048fa <hci_le_read_phy+0xc6>
  if ( resp.Status )
 80048cc:	f107 0310 	add.w	r3, r7, #16
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <hci_le_read_phy+0xaa>
    return resp.Status;
 80048d6:	f107 0310 	add.w	r3, r7, #16
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	e00d      	b.n	80048fa <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 80048de:	f107 0310 	add.w	r3, r7, #16
 80048e2:	78da      	ldrb	r2, [r3, #3]
 80048e4:	f107 0308 	add.w	r3, r7, #8
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80048ec:	f107 0310 	add.w	r3, r7, #16
 80048f0:	791a      	ldrb	r2, [r3, #4]
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b0cd      	sub	sp, #308	; 0x134
 8004908:	af00      	add	r7, sp, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	4622      	mov	r2, r4
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	1dbb      	adds	r3, r7, #6
 8004918:	4602      	mov	r2, r0
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	1d7b      	adds	r3, r7, #5
 800491e:	460a      	mov	r2, r1
 8004920:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004922:	f107 0310 	add.w	r3, r7, #16
 8004926:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800492a:	f107 030f 	add.w	r3, r7, #15
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8004938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800493c:	1dfa      	adds	r2, r7, #7
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004946:	3301      	adds	r3, #1
 8004948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800494c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004950:	1dba      	adds	r2, r7, #6
 8004952:	7812      	ldrb	r2, [r2, #0]
 8004954:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004956:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800495a:	3301      	adds	r3, #1
 800495c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8004960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004964:	1d7a      	adds	r2, r7, #5
 8004966:	7812      	ldrb	r2, [r2, #0]
 8004968:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800496a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800496e:	3301      	adds	r3, #1
 8004970:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004978:	2218      	movs	r2, #24
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f838 	bl	80049f2 <Osal_MemSet>
  rq.ogf = 0x08;
 8004982:	2308      	movs	r3, #8
 8004984:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8004988:	2331      	movs	r3, #49	; 0x31
 800498a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800498e:	f107 0310 	add.w	r3, r7, #16
 8004992:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004996:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800499a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800499e:	f107 030f 	add.w	r3, r7, #15
 80049a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80049ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fbac 	bl	8005110 <hci_send_req>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da01      	bge.n	80049c2 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80049be:	23ff      	movs	r3, #255	; 0xff
 80049c0:	e002      	b.n	80049c8 <hci_le_set_default_phy+0xc4>
  return status;
 80049c2:	f107 030f 	add.w	r3, r7, #15
 80049c6:	781b      	ldrb	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd90      	pop	{r4, r7, pc}

080049d2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f002 f974 	bl	8006cd0 <memcpy>
 80049e8:	4603      	mov	r3, r0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f002 f972 	bl	8006cec <memset>
 8004a08:	4603      	mov	r3, r0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08a      	sub	sp, #40	; 0x28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3301      	adds	r3, #1
 8004a26:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2bff      	cmp	r3, #255	; 0xff
 8004a2e:	d14c      	bne.n	8004aca <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	3302      	adds	r3, #2
 8004a34:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f640 4301 	movw	r3, #3073	; 0xc01
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d13d      	bne.n	8004ac2 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3302      	adds	r3, #2
 8004a4a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	885b      	ldrh	r3, [r3, #2]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <PeerToPeer_Event_Handler+0xc4>)
 8004a56:	889b      	ldrh	r3, [r3, #4]
 8004a58:	3302      	adds	r3, #2
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d118      	bne.n	8004a90 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	7a1b      	ldrb	r3, [r3, #8]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8004a70:	2300      	movs	r3, #0
 8004a72:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8004a74:	f107 0308 	add.w	r3, r7, #8
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fc0f 	bl	800629c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8004a7e:	e022      	b.n	8004ac6 <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8004a80:	2301      	movs	r3, #1
 8004a82:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8004a84:	f107 0308 	add.w	r3, r7, #8
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fc07 	bl	800629c <P2PS_STM_App_Notification>
        break;
 8004a8e:	e01a      	b.n	8004ac6 <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	885b      	ldrh	r3, [r3, #2]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <PeerToPeer_Event_Handler+0xc4>)
 8004a9a:	885b      	ldrh	r3, [r3, #2]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d111      	bne.n	8004ac6 <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	88db      	ldrh	r3, [r3, #6]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8004ab6:	f107 0308 	add.w	r3, r7, #8
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 fbee 	bl	800629c <P2PS_STM_App_Notification>
        break;
 8004ac0:	e001      	b.n	8004ac6 <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 8004ac2:	bf00      	nop
 8004ac4:	e002      	b.n	8004acc <PeerToPeer_Event_Handler+0xb8>
        break;
 8004ac6:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8004ac8:	e000      	b.n	8004acc <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 8004aca:	bf00      	nop
  }

  return(return_value);
 8004acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3728      	adds	r7, #40	; 0x28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	200000c4 	.word	0x200000c4

08004adc <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8004ae2:	484a      	ldr	r0, [pc, #296]	; (8004c0c <P2PS_STM_Init+0x130>)
 8004ae4:	f000 f94a 	bl	8004d7c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8004ae8:	238f      	movs	r3, #143	; 0x8f
 8004aea:	703b      	strb	r3, [r7, #0]
 8004aec:	23e5      	movs	r3, #229	; 0xe5
 8004aee:	707b      	strb	r3, [r7, #1]
 8004af0:	23b3      	movs	r3, #179	; 0xb3
 8004af2:	70bb      	strb	r3, [r7, #2]
 8004af4:	23d5      	movs	r3, #213	; 0xd5
 8004af6:	70fb      	strb	r3, [r7, #3]
 8004af8:	232e      	movs	r3, #46	; 0x2e
 8004afa:	713b      	strb	r3, [r7, #4]
 8004afc:	237f      	movs	r3, #127	; 0x7f
 8004afe:	717b      	strb	r3, [r7, #5]
 8004b00:	234a      	movs	r3, #74	; 0x4a
 8004b02:	71bb      	strb	r3, [r7, #6]
 8004b04:	2398      	movs	r3, #152	; 0x98
 8004b06:	71fb      	strb	r3, [r7, #7]
 8004b08:	232a      	movs	r3, #42	; 0x2a
 8004b0a:	723b      	strb	r3, [r7, #8]
 8004b0c:	2348      	movs	r3, #72	; 0x48
 8004b0e:	727b      	strb	r3, [r7, #9]
 8004b10:	237a      	movs	r3, #122	; 0x7a
 8004b12:	72bb      	strb	r3, [r7, #10]
 8004b14:	23cc      	movs	r3, #204	; 0xcc
 8004b16:	72fb      	strb	r3, [r7, #11]
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	733b      	strb	r3, [r7, #12]
 8004b1c:	23fe      	movs	r3, #254	; 0xfe
 8004b1e:	737b      	strb	r3, [r7, #13]
 8004b20:	2300      	movs	r3, #0
 8004b22:	73bb      	strb	r3, [r7, #14]
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8004b28:	4639      	mov	r1, r7
 8004b2a:	4b39      	ldr	r3, [pc, #228]	; (8004c10 <P2PS_STM_Init+0x134>)
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	2308      	movs	r3, #8
 8004b30:	2201      	movs	r2, #1
 8004b32:	2002      	movs	r0, #2
 8004b34:	f7ff fb30 	bl	8004198 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8004b38:	2319      	movs	r3, #25
 8004b3a:	703b      	strb	r3, [r7, #0]
 8004b3c:	23ed      	movs	r3, #237	; 0xed
 8004b3e:	707b      	strb	r3, [r7, #1]
 8004b40:	2382      	movs	r3, #130	; 0x82
 8004b42:	70bb      	strb	r3, [r7, #2]
 8004b44:	23ae      	movs	r3, #174	; 0xae
 8004b46:	70fb      	strb	r3, [r7, #3]
 8004b48:	23ed      	movs	r3, #237	; 0xed
 8004b4a:	713b      	strb	r3, [r7, #4]
 8004b4c:	2321      	movs	r3, #33	; 0x21
 8004b4e:	717b      	strb	r3, [r7, #5]
 8004b50:	234c      	movs	r3, #76	; 0x4c
 8004b52:	71bb      	strb	r3, [r7, #6]
 8004b54:	239d      	movs	r3, #157	; 0x9d
 8004b56:	71fb      	strb	r3, [r7, #7]
 8004b58:	2341      	movs	r3, #65	; 0x41
 8004b5a:	723b      	strb	r3, [r7, #8]
 8004b5c:	2345      	movs	r3, #69	; 0x45
 8004b5e:	727b      	strb	r3, [r7, #9]
 8004b60:	2322      	movs	r3, #34	; 0x22
 8004b62:	72bb      	strb	r3, [r7, #10]
 8004b64:	238e      	movs	r3, #142	; 0x8e
 8004b66:	72fb      	strb	r3, [r7, #11]
 8004b68:	2341      	movs	r3, #65	; 0x41
 8004b6a:	733b      	strb	r3, [r7, #12]
 8004b6c:	23fe      	movs	r3, #254	; 0xfe
 8004b6e:	737b      	strb	r3, [r7, #13]
 8004b70:	2300      	movs	r3, #0
 8004b72:	73bb      	strb	r3, [r7, #14]
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004b78:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <P2PS_STM_Init+0x134>)
 8004b7a:	8818      	ldrh	r0, [r3, #0]
 8004b7c:	463a      	mov	r2, r7
 8004b7e:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <P2PS_STM_Init+0x138>)
 8004b80:	9305      	str	r3, [sp, #20]
 8004b82:	2301      	movs	r3, #1
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	230a      	movs	r3, #10
 8004b88:	9303      	str	r3, [sp, #12]
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	9302      	str	r3, [sp, #8]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	2306      	movs	r3, #6
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	2302      	movs	r3, #2
 8004b98:	2102      	movs	r1, #2
 8004b9a:	f7ff fbac 	bl	80042f6 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8004b9e:	2319      	movs	r3, #25
 8004ba0:	703b      	strb	r3, [r7, #0]
 8004ba2:	23ed      	movs	r3, #237	; 0xed
 8004ba4:	707b      	strb	r3, [r7, #1]
 8004ba6:	2382      	movs	r3, #130	; 0x82
 8004ba8:	70bb      	strb	r3, [r7, #2]
 8004baa:	23ae      	movs	r3, #174	; 0xae
 8004bac:	70fb      	strb	r3, [r7, #3]
 8004bae:	23ed      	movs	r3, #237	; 0xed
 8004bb0:	713b      	strb	r3, [r7, #4]
 8004bb2:	2321      	movs	r3, #33	; 0x21
 8004bb4:	717b      	strb	r3, [r7, #5]
 8004bb6:	234c      	movs	r3, #76	; 0x4c
 8004bb8:	71bb      	strb	r3, [r7, #6]
 8004bba:	239d      	movs	r3, #157	; 0x9d
 8004bbc:	71fb      	strb	r3, [r7, #7]
 8004bbe:	2341      	movs	r3, #65	; 0x41
 8004bc0:	723b      	strb	r3, [r7, #8]
 8004bc2:	2345      	movs	r3, #69	; 0x45
 8004bc4:	727b      	strb	r3, [r7, #9]
 8004bc6:	2322      	movs	r3, #34	; 0x22
 8004bc8:	72bb      	strb	r3, [r7, #10]
 8004bca:	238e      	movs	r3, #142	; 0x8e
 8004bcc:	72fb      	strb	r3, [r7, #11]
 8004bce:	2342      	movs	r3, #66	; 0x42
 8004bd0:	733b      	strb	r3, [r7, #12]
 8004bd2:	23fe      	movs	r3, #254	; 0xfe
 8004bd4:	737b      	strb	r3, [r7, #13]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73bb      	strb	r3, [r7, #14]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <P2PS_STM_Init+0x134>)
 8004be0:	8818      	ldrh	r0, [r3, #0]
 8004be2:	463a      	mov	r2, r7
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <P2PS_STM_Init+0x13c>)
 8004be6:	9305      	str	r3, [sp, #20]
 8004be8:	2301      	movs	r3, #1
 8004bea:	9304      	str	r3, [sp, #16]
 8004bec:	230a      	movs	r3, #10
 8004bee:	9303      	str	r3, [sp, #12]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	9302      	str	r3, [sp, #8]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	2102      	movs	r1, #2
 8004c00:	f7ff fb79 	bl	80042f6 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8004c04:	bf00      	nop
}
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	08004a15 	.word	0x08004a15
 8004c10:	200000c4 	.word	0x200000c4
 8004c14:	200000c6 	.word	0x200000c6
 8004c18:	200000c8 	.word	0x200000c8

08004c1c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return;
 8004c20:	bf00      	nop
}
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <BLS_Init>:

__weak void BLS_Init( void )
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  return;
 8004c2e:	bf00      	nop
}
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return;
 8004c3c:	bf00      	nop
}
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <DIS_Init>:
__weak void DIS_Init( void )
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  return;
 8004c4a:	bf00      	nop
}
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return;
 8004c58:	bf00      	nop
}
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0
  return;
 8004c66:	bf00      	nop
}
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HRS_Init>:
__weak void HRS_Init( void )
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return;
 8004c74:	bf00      	nop
}
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HTS_Init>:
__weak void HTS_Init( void )
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0
  return;
 8004c82:	bf00      	nop
}
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <IAS_Init>:
__weak void IAS_Init( void )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  return;
 8004c90:	bf00      	nop
}
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <LLS_Init>:
__weak void LLS_Init( void )
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	af00      	add	r7, sp, #0
  return;
 8004c9e:	bf00      	nop
}
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <TPS_Init>:
__weak void TPS_Init( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return;
 8004cac:	bf00      	nop
}
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	af00      	add	r7, sp, #0
  return;
 8004cba:	bf00      	nop
}
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <ZDD_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void ZDD_STM_Init( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return;
 8004cc8:	bf00      	nop
}
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	af00      	add	r7, sp, #0
  return;
 8004cd6:	bf00      	nop
}
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <MESH_Init>:
__weak void MESH_Init( void )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return;
 8004ce4:	bf00      	nop
}
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8004cee:	b480      	push	{r7}
 8004cf0:	af00      	add	r7, sp, #0
  return;
 8004cf2:	bf00      	nop
}
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  return;
 8004d00:	bf00      	nop
}
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <SVCCTL_Init+0x18>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <SVCCTL_Init+0x1c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8004d1c:	f000 f806 	bl	8004d2c <SVCCTL_SvcInit>

  return;
 8004d20:	bf00      	nop
}
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	200000cc 	.word	0x200000cc
 8004d28:	200000ec 	.word	0x200000ec

08004d2c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  BAS_Init();
 8004d30:	f7ff ff74 	bl	8004c1c <BAS_Init>

  BLS_Init();
 8004d34:	f7ff ff79 	bl	8004c2a <BLS_Init>

  CRS_STM_Init();
 8004d38:	f7ff ff7e 	bl	8004c38 <CRS_STM_Init>

  DIS_Init();
 8004d3c:	f7ff ff83 	bl	8004c46 <DIS_Init>

  EDS_STM_Init();
 8004d40:	f7ff ff88 	bl	8004c54 <EDS_STM_Init>

  HIDS_Init();
 8004d44:	f7ff ff8d 	bl	8004c62 <HIDS_Init>

  HRS_Init();
 8004d48:	f7ff ff92 	bl	8004c70 <HRS_Init>

  HTS_Init();
 8004d4c:	f7ff ff97 	bl	8004c7e <HTS_Init>

  IAS_Init();
 8004d50:	f7ff ff9c 	bl	8004c8c <IAS_Init>

  LLS_Init();
 8004d54:	f7ff ffa1 	bl	8004c9a <LLS_Init>

  TPS_Init();
 8004d58:	f7ff ffa6 	bl	8004ca8 <TPS_Init>

  MOTENV_STM_Init();
 8004d5c:	f7ff ffab 	bl	8004cb6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8004d60:	f7ff febc 	bl	8004adc <P2PS_STM_Init>

  ZDD_STM_Init();
 8004d64:	f7ff ffae 	bl	8004cc4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8004d68:	f7ff ffb3 	bl	8004cd2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8004d6c:	f7ff ffbf 	bl	8004cee <BVOPUS_STM_Init>

  MESH_Init();
 8004d70:	f7ff ffb6 	bl	8004ce0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8004d74:	f7ff ffc2 	bl	8004cfc <SVCCTL_InitCustomSvc>
  
  return;
 8004d78:	bf00      	nop
}
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <SVCCTL_RegisterSvcHandler+0x30>)
 8004d86:	7f1b      	ldrb	r3, [r3, #28]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <SVCCTL_RegisterSvcHandler+0x30>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <SVCCTL_RegisterSvcHandler+0x30>)
 8004d94:	7f1b      	ldrb	r3, [r3, #28]
 8004d96:	3301      	adds	r3, #1
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b04      	ldr	r3, [pc, #16]	; (8004dac <SVCCTL_RegisterSvcHandler+0x30>)
 8004d9c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8004d9e:	bf00      	nop
}
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	200000cc 	.word	0x200000cc

08004db0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2bff      	cmp	r3, #255	; 0xff
 8004dc8:	d125      	bne.n	8004e16 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004dda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dde:	d118      	bne.n	8004e12 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004de0:	2300      	movs	r3, #0
 8004de2:	757b      	strb	r3, [r7, #21]
 8004de4:	e00d      	b.n	8004e02 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8004de6:	7d7b      	ldrb	r3, [r7, #21]
 8004de8:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <SVCCTL_UserEvtRx+0xa4>)
 8004dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004dfc:	7d7b      	ldrb	r3, [r7, #21]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	757b      	strb	r3, [r7, #21]
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <SVCCTL_UserEvtRx+0xa4>)
 8004e04:	7f1b      	ldrb	r3, [r3, #28]
 8004e06:	7d7a      	ldrb	r2, [r7, #21]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3ec      	bcc.n	8004de6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8004e0c:	e002      	b.n	8004e14 <SVCCTL_UserEvtRx+0x64>
              break;
 8004e0e:	bf00      	nop
          break;
 8004e10:	e000      	b.n	8004e14 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8004e12:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8004e14:	e000      	b.n	8004e18 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8004e16:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d00f      	beq.n	8004e3e <SVCCTL_UserEvtRx+0x8e>
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	dc10      	bgt.n	8004e44 <SVCCTL_UserEvtRx+0x94>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <SVCCTL_UserEvtRx+0x7c>
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d006      	beq.n	8004e38 <SVCCTL_UserEvtRx+0x88>
 8004e2a:	e00b      	b.n	8004e44 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 ff8d 	bl	8005d4c <SVCCTL_App_Notification>
 8004e32:	4603      	mov	r3, r0
 8004e34:	75bb      	strb	r3, [r7, #22]
      break;
 8004e36:	e008      	b.n	8004e4a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75bb      	strb	r3, [r7, #22]
      break;
 8004e3c:	e005      	b.n	8004e4a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75bb      	strb	r3, [r7, #22]
      break;
 8004e42:	e002      	b.n	8004e4a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75bb      	strb	r3, [r7, #22]
      break;
 8004e48:	bf00      	nop
  }

  return (return_status);
 8004e4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	200000cc 	.word	0x200000cc

08004e58 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2125      	movs	r1, #37	; 0x25
 8004e70:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8004e74:	f000 fae2 	bl	800543c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	330b      	adds	r3, #11
 8004e7c:	78db      	ldrb	r3, [r3, #3]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004e8e:	f107 030c 	add.w	r3, r7, #12
 8004e92:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	210f      	movs	r1, #15
 8004e9e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8004ea2:	f000 facb 	bl	800543c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	330b      	adds	r3, #11
 8004eaa:	78db      	ldrb	r3, [r3, #3]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	210e      	movs	r1, #14
 8004ec8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8004ecc:	f000 fab6 	bl	800543c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	330b      	adds	r3, #11
 8004ed4:	78db      	ldrb	r3, [r3, #3]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b08b      	sub	sp, #44	; 0x2c
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8004f08:	4b4a      	ldr	r3, [pc, #296]	; (8005034 <SHCI_GetWirelessFwInfo+0x154>)
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004f10:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004f1a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a44      	ldr	r2, [pc, #272]	; (8005038 <SHCI_GetWirelessFwInfo+0x158>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d10f      	bne.n	8004f4c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e01a      	b.n	8004f82 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004f54:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8004f58:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	0e1b      	lsrs	r3, r3, #24
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	0a1b      	lsrs	r3, r3, #8
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	0e1b      	lsrs	r3, r3, #24
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	0a1b      	lsrs	r3, r3, #8
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	0e1b      	lsrs	r3, r3, #24
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	b2da      	uxtb	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	0e1b      	lsrs	r3, r3, #24
 800500e:	b2da      	uxtb	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	b2da      	uxtb	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	372c      	adds	r7, #44	; 0x2c
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	58004000 	.word	0x58004000
 8005038:	a94656b9 	.word	0xa94656b9

0800503c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <hci_init+0x30>)
 800504c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800504e:	4a08      	ldr	r2, [pc, #32]	; (8005070 <hci_init+0x34>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005054:	4806      	ldr	r0, [pc, #24]	; (8005070 <hci_init+0x34>)
 8005056:	f000 f973 	bl	8005340 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f8d4 	bl	800520c <TlInit>

  return;
 8005064:	bf00      	nop
}
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	200001f0 	.word	0x200001f0
 8005070:	200001c8 	.word	0x200001c8

08005074 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800507a:	4822      	ldr	r0, [pc, #136]	; (8005104 <hci_user_evt_proc+0x90>)
 800507c:	f000 fd28 	bl	8005ad0 <LST_is_empty>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d12b      	bne.n	80050de <hci_user_evt_proc+0x6a>
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <hci_user_evt_proc+0x94>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d027      	beq.n	80050de <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800508e:	f107 030c 	add.w	r3, r7, #12
 8005092:	4619      	mov	r1, r3
 8005094:	481b      	ldr	r0, [pc, #108]	; (8005104 <hci_user_evt_proc+0x90>)
 8005096:	f000 fdaa 	bl	8005bee <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <hci_user_evt_proc+0x98>)
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00c      	beq.n	80050bc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80050a6:	2301      	movs	r3, #1
 80050a8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80050aa:	4b18      	ldr	r3, [pc, #96]	; (800510c <hci_user_evt_proc+0x98>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	1d3a      	adds	r2, r7, #4
 80050b0:	4610      	mov	r0, r2
 80050b2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80050b4:	793a      	ldrb	r2, [r7, #4]
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <hci_user_evt_proc+0x94>)
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e002      	b.n	80050c2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80050bc:	4b12      	ldr	r3, [pc, #72]	; (8005108 <hci_user_evt_proc+0x94>)
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <hci_user_evt_proc+0x94>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fc03 	bl	80058d8 <TL_MM_EvtDone>
 80050d2:	e004      	b.n	80050de <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4619      	mov	r1, r3
 80050d8:	480a      	ldr	r0, [pc, #40]	; (8005104 <hci_user_evt_proc+0x90>)
 80050da:	f000 fd1b 	bl	8005b14 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80050de:	4809      	ldr	r0, [pc, #36]	; (8005104 <hci_user_evt_proc+0x90>)
 80050e0:	f000 fcf6 	bl	8005ad0 <LST_is_empty>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d107      	bne.n	80050fa <hci_user_evt_proc+0x86>
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <hci_user_evt_proc+0x94>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80050f2:	4804      	ldr	r0, [pc, #16]	; (8005104 <hci_user_evt_proc+0x90>)
 80050f4:	f001 f879 	bl	80061ea <hci_notify_asynch_evt>
  }


  return;
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
}
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200000f4 	.word	0x200000f4
 8005108:	20000100 	.word	0x20000100
 800510c:	200001c8 	.word	0x200001c8

08005110 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800511c:	2000      	movs	r0, #0
 800511e:	f000 f8cb 	bl	80052b8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8005122:	2300      	movs	r3, #0
 8005124:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	885b      	ldrh	r3, [r3, #2]
 800512a:	b21b      	sxth	r3, r3
 800512c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005130:	b21a      	sxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	029b      	lsls	r3, r3, #10
 8005138:	b21b      	sxth	r3, r3
 800513a:	4313      	orrs	r3, r2
 800513c:	b21b      	sxth	r3, r3
 800513e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	b2d9      	uxtb	r1, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	8bbb      	ldrh	r3, [r7, #28]
 800514c:	4618      	mov	r0, r3
 800514e:	f000 f88d 	bl	800526c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8005152:	e04e      	b.n	80051f2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8005154:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005158:	f001 f85e 	bl	8006218 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800515c:	e043      	b.n	80051e6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800515e:	f107 030c 	add.w	r3, r7, #12
 8005162:	4619      	mov	r1, r3
 8005164:	4828      	ldr	r0, [pc, #160]	; (8005208 <hci_send_req+0xf8>)
 8005166:	f000 fd42 	bl	8005bee <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	7a5b      	ldrb	r3, [r3, #9]
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d114      	bne.n	800519c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	330b      	adds	r3, #11
 8005176:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	885b      	ldrh	r3, [r3, #2]
 800517c:	b29b      	uxth	r3, r3
 800517e:	8bba      	ldrh	r2, [r7, #28]
 8005180:	429a      	cmp	r2, r3
 8005182:	d104      	bne.n	800518e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	7812      	ldrb	r2, [r2, #0]
 800518c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d027      	beq.n	80051e6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005196:	2301      	movs	r3, #1
 8005198:	77fb      	strb	r3, [r7, #31]
 800519a:	e024      	b.n	80051e6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	330b      	adds	r3, #11
 80051a0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8bba      	ldrh	r2, [r7, #28]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d114      	bne.n	80051da <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	7a9b      	ldrb	r3, [r3, #10]
 80051b4:	3b03      	subs	r3, #3
 80051b6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	429a      	cmp	r2, r3
 80051c0:	bfa8      	it	ge
 80051c2:	461a      	movge	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6918      	ldr	r0, [r3, #16]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	1cd9      	adds	r1, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f001 fd7b 	bl	8006cd0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80051e2:	2301      	movs	r3, #1
 80051e4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80051e6:	4808      	ldr	r0, [pc, #32]	; (8005208 <hci_send_req+0xf8>)
 80051e8:	f000 fc72 	bl	8005ad0 <LST_is_empty>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0b5      	beq.n	800515e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0ad      	beq.n	8005154 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f000 f85d 	bl	80052b8 <NotifyCmdStatus>

  return 0;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	200001e8 	.word	0x200001e8

0800520c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005214:	480f      	ldr	r0, [pc, #60]	; (8005254 <TlInit+0x48>)
 8005216:	f000 fc4b 	bl	8005ab0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800521a:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <TlInit+0x4c>)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005220:	480e      	ldr	r0, [pc, #56]	; (800525c <TlInit+0x50>)
 8005222:	f000 fc45 	bl	8005ab0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <TlInit+0x54>)
 8005228:	2201      	movs	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <TlInit+0x58>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <TlInit+0x5c>)
 800523a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <TlInit+0x58>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f107 0208 	add.w	r2, r7, #8
 8005244:	4610      	mov	r0, r2
 8005246:	4798      	blx	r3
  }

  return;
 8005248:	bf00      	nop
 800524a:	bf00      	nop
}
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200001e8 	.word	0x200001e8
 8005258:	200000fc 	.word	0x200000fc
 800525c:	200000f4 	.word	0x200000f4
 8005260:	20000100 	.word	0x20000100
 8005264:	200001c8 	.word	0x200001c8
 8005268:	080052f9 	.word	0x080052f9

0800526c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	603a      	str	r2, [r7, #0]
 8005276:	80fb      	strh	r3, [r7, #6]
 8005278:	460b      	mov	r3, r1
 800527a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <SendCmd+0x44>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8005286:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <SendCmd+0x44>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	797a      	ldrb	r2, [r7, #5]
 800528c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <SendCmd+0x44>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	797a      	ldrb	r2, [r7, #5]
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f001 fd19 	bl	8006cd0 <memcpy>

  hciContext.io.Send(0,0);
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <SendCmd+0x48>)
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2100      	movs	r1, #0
 80052a4:	2000      	movs	r0, #0
 80052a6:	4798      	blx	r3

  return;
 80052a8:	bf00      	nop
}
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	200000fc 	.word	0x200000fc
 80052b4:	200001c8 	.word	0x200001c8

080052b8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d108      	bne.n	80052da <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <NotifyCmdStatus+0x3c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00d      	beq.n	80052ec <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <NotifyCmdStatus+0x3c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2000      	movs	r0, #0
 80052d6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80052d8:	e008      	b.n	80052ec <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80052da:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <NotifyCmdStatus+0x3c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80052e2:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <NotifyCmdStatus+0x3c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2001      	movs	r0, #1
 80052e8:	4798      	blx	r3
  return;
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
}
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	200001f0 	.word	0x200001f0

080052f8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	7a5b      	ldrb	r3, [r3, #9]
 8005304:	2b0f      	cmp	r3, #15
 8005306:	d003      	beq.n	8005310 <TlEvtReceived+0x18>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	7a5b      	ldrb	r3, [r3, #9]
 800530c:	2b0e      	cmp	r3, #14
 800530e:	d107      	bne.n	8005320 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4809      	ldr	r0, [pc, #36]	; (8005338 <TlEvtReceived+0x40>)
 8005314:	f000 fc24 	bl	8005b60 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005318:	2000      	movs	r0, #0
 800531a:	f000 ff72 	bl	8006202 <hci_cmd_resp_release>
 800531e:	e006      	b.n	800532e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4806      	ldr	r0, [pc, #24]	; (800533c <TlEvtReceived+0x44>)
 8005324:	f000 fc1c 	bl	8005b60 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005328:	4804      	ldr	r0, [pc, #16]	; (800533c <TlEvtReceived+0x44>)
 800532a:	f000 ff5e 	bl	80061ea <hci_notify_asynch_evt>
  }

  return;
 800532e:	bf00      	nop
}
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200001e8 	.word	0x200001e8
 800533c:	200000f4 	.word	0x200000f4

08005340 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a05      	ldr	r2, [pc, #20]	; (8005360 <hci_register_io_bus+0x20>)
 800534c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <hci_register_io_bus+0x24>)
 8005352:	611a      	str	r2, [r3, #16]

  return;
 8005354:	bf00      	nop
}
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	08005651 	.word	0x08005651
 8005364:	080056b9 	.word	0x080056b9

08005368 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4a08      	ldr	r2, [pc, #32]	; (8005398 <shci_init+0x30>)
 8005378:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800537a:	4a08      	ldr	r2, [pc, #32]	; (800539c <shci_init+0x34>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005380:	4806      	ldr	r0, [pc, #24]	; (800539c <shci_init+0x34>)
 8005382:	f000 f911 	bl	80055a8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f894 	bl	80054b8 <TlInit>

  return;
 8005390:	bf00      	nop
}
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000214 	.word	0x20000214
 800539c:	200001f4 	.word	0x200001f4

080053a0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80053a6:	4822      	ldr	r0, [pc, #136]	; (8005430 <shci_user_evt_proc+0x90>)
 80053a8:	f000 fb92 	bl	8005ad0 <LST_is_empty>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d12b      	bne.n	800540a <shci_user_evt_proc+0x6a>
 80053b2:	4b20      	ldr	r3, [pc, #128]	; (8005434 <shci_user_evt_proc+0x94>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d027      	beq.n	800540a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80053ba:	f107 030c 	add.w	r3, r7, #12
 80053be:	4619      	mov	r1, r3
 80053c0:	481b      	ldr	r0, [pc, #108]	; (8005430 <shci_user_evt_proc+0x90>)
 80053c2:	f000 fc14 	bl	8005bee <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80053c6:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <shci_user_evt_proc+0x98>)
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00c      	beq.n	80053e8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80053d2:	2301      	movs	r3, #1
 80053d4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <shci_user_evt_proc+0x98>)
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	1d3a      	adds	r2, r7, #4
 80053dc:	4610      	mov	r0, r2
 80053de:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80053e0:	793a      	ldrb	r2, [r7, #4]
 80053e2:	4b14      	ldr	r3, [pc, #80]	; (8005434 <shci_user_evt_proc+0x94>)
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e002      	b.n	80053ee <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <shci_user_evt_proc+0x94>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <shci_user_evt_proc+0x94>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fa6d 	bl	80058d8 <TL_MM_EvtDone>
 80053fe:	e004      	b.n	800540a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4619      	mov	r1, r3
 8005404:	480a      	ldr	r0, [pc, #40]	; (8005430 <shci_user_evt_proc+0x90>)
 8005406:	f000 fb85 	bl	8005b14 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800540a:	4809      	ldr	r0, [pc, #36]	; (8005430 <shci_user_evt_proc+0x90>)
 800540c:	f000 fb60 	bl	8005ad0 <LST_is_empty>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d107      	bne.n	8005426 <shci_user_evt_proc+0x86>
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <shci_user_evt_proc+0x94>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800541e:	4804      	ldr	r0, [pc, #16]	; (8005430 <shci_user_evt_proc+0x90>)
 8005420:	f7fb f9b9 	bl	8000796 <shci_notify_asynch_evt>
  }


  return;
 8005424:	bf00      	nop
 8005426:	bf00      	nop
}
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000104 	.word	0x20000104
 8005434:	20000114 	.word	0x20000114
 8005438:	200001f4 	.word	0x200001f4

0800543c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60ba      	str	r2, [r7, #8]
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	4603      	mov	r3, r0
 8005448:	81fb      	strh	r3, [r7, #14]
 800544a:	460b      	mov	r3, r1
 800544c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800544e:	2000      	movs	r0, #0
 8005450:	f000 f864 	bl	800551c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005454:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <shci_send+0x74>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	89fa      	ldrh	r2, [r7, #14]
 800545a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <shci_send+0x74>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	7b7a      	ldrb	r2, [r7, #13]
 8005464:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <shci_send+0x74>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	7b7a      	ldrb	r2, [r7, #13]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fc2d 	bl	8006cd0 <memcpy>

  shciContext.io.Send(0,0);
 8005476:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <shci_send+0x78>)
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2100      	movs	r1, #0
 800547c:	2000      	movs	r0, #0
 800547e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005480:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005484:	f7fb f99e 	bl	80007c4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f103 0008 	add.w	r0, r3, #8
 800548e:	4b08      	ldr	r3, [pc, #32]	; (80054b0 <shci_send+0x74>)
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <shci_send+0x74>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	789b      	ldrb	r3, [r3, #2]
 8005498:	3303      	adds	r3, #3
 800549a:	461a      	mov	r2, r3
 800549c:	f001 fc18 	bl	8006cd0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80054a0:	2001      	movs	r0, #1
 80054a2:	f000 f83b 	bl	800551c <Cmd_SetStatus>

  return;
 80054a6:	bf00      	nop
}
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000110 	.word	0x20000110
 80054b4:	200001f4 	.word	0x200001f4

080054b8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80054c0:	4a10      	ldr	r2, [pc, #64]	; (8005504 <TlInit+0x4c>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80054c6:	4810      	ldr	r0, [pc, #64]	; (8005508 <TlInit+0x50>)
 80054c8:	f000 faf2 	bl	8005ab0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80054cc:	2001      	movs	r0, #1
 80054ce:	f000 f825 	bl	800551c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80054d2:	4b0e      	ldr	r3, [pc, #56]	; (800550c <TlInit+0x54>)
 80054d4:	2201      	movs	r2, #1
 80054d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80054d8:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <TlInit+0x58>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00c      	beq.n	80054fa <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <TlInit+0x5c>)
 80054e6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <TlInit+0x60>)
 80054ea:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <TlInit+0x58>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f107 020c 	add.w	r2, r7, #12
 80054f4:	4610      	mov	r0, r2
 80054f6:	4798      	blx	r3
  }

  return;
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
}
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000110 	.word	0x20000110
 8005508:	20000104 	.word	0x20000104
 800550c:	20000114 	.word	0x20000114
 8005510:	200001f4 	.word	0x200001f4
 8005514:	0800556d 	.word	0x0800556d
 8005518:	08005585 	.word	0x08005585

0800551c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10b      	bne.n	8005544 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <Cmd_SetStatus+0x48>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <Cmd_SetStatus+0x48>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2000      	movs	r0, #0
 800553a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <Cmd_SetStatus+0x4c>)
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005542:	e00b      	b.n	800555c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <Cmd_SetStatus+0x4c>)
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <Cmd_SetStatus+0x48>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <Cmd_SetStatus+0x48>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2001      	movs	r0, #1
 8005558:	4798      	blx	r3
  return;
 800555a:	bf00      	nop
 800555c:	bf00      	nop
}
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000214 	.word	0x20000214
 8005568:	2000010c 	.word	0x2000010c

0800556c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005574:	2000      	movs	r0, #0
 8005576:	f7fb f91a 	bl	80007ae <shci_cmd_resp_release>

  return;
 800557a:	bf00      	nop
}
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4805      	ldr	r0, [pc, #20]	; (80055a4 <TlUserEvtReceived+0x20>)
 8005590:	f000 fae6 	bl	8005b60 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005594:	4803      	ldr	r0, [pc, #12]	; (80055a4 <TlUserEvtReceived+0x20>)
 8005596:	f7fb f8fe 	bl	8000796 <shci_notify_asynch_evt>

  return;
 800559a:	bf00      	nop
}
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000104 	.word	0x20000104

080055a8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <shci_register_io_bus+0x20>)
 80055b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a04      	ldr	r2, [pc, #16]	; (80055cc <shci_register_io_bus+0x24>)
 80055ba:	611a      	str	r2, [r3, #16]

  return;
 80055bc:	bf00      	nop
}
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	08005765 	.word	0x08005765
 80055cc:	080057b9 	.word	0x080057b9

080055d0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80055d4:	f001 f816 	bl	8006604 <HW_IPCC_Enable>

  return;
 80055d8:	bf00      	nop
}
 80055da:	bd80      	pop	{r7, pc}

080055dc <TL_Init>:


void TL_Init( void )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <TL_Init+0x48>)
 80055e2:	4a11      	ldr	r2, [pc, #68]	; (8005628 <TL_Init+0x4c>)
 80055e4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80055e6:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <TL_Init+0x48>)
 80055e8:	4a10      	ldr	r2, [pc, #64]	; (800562c <TL_Init+0x50>)
 80055ea:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <TL_Init+0x48>)
 80055ee:	4a10      	ldr	r2, [pc, #64]	; (8005630 <TL_Init+0x54>)
 80055f0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80055f2:	4b0c      	ldr	r3, [pc, #48]	; (8005624 <TL_Init+0x48>)
 80055f4:	4a0f      	ldr	r2, [pc, #60]	; (8005634 <TL_Init+0x58>)
 80055f6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <TL_Init+0x48>)
 80055fa:	4a0f      	ldr	r2, [pc, #60]	; (8005638 <TL_Init+0x5c>)
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <TL_Init+0x48>)
 8005600:	4a0e      	ldr	r2, [pc, #56]	; (800563c <TL_Init+0x60>)
 8005602:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005604:	4b07      	ldr	r3, [pc, #28]	; (8005624 <TL_Init+0x48>)
 8005606:	4a0e      	ldr	r2, [pc, #56]	; (8005640 <TL_Init+0x64>)
 8005608:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <TL_Init+0x48>)
 800560c:	4a0d      	ldr	r2, [pc, #52]	; (8005644 <TL_Init+0x68>)
 800560e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005610:	4b04      	ldr	r3, [pc, #16]	; (8005624 <TL_Init+0x48>)
 8005612:	4a0d      	ldr	r2, [pc, #52]	; (8005648 <TL_Init+0x6c>)
 8005614:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005616:	4b03      	ldr	r3, [pc, #12]	; (8005624 <TL_Init+0x48>)
 8005618:	4a0c      	ldr	r2, [pc, #48]	; (800564c <TL_Init+0x70>)
 800561a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800561c:	f001 f806 	bl	800662c <HW_IPCC_Init>

  return;
 8005620:	bf00      	nop
}
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20030000 	.word	0x20030000
 8005628:	20030028 	.word	0x20030028
 800562c:	20030048 	.word	0x20030048
 8005630:	20030058 	.word	0x20030058
 8005634:	20030064 	.word	0x20030064
 8005638:	2003006c 	.word	0x2003006c
 800563c:	20030074 	.word	0x20030074
 8005640:	2003007c 	.word	0x2003007c
 8005644:	20030098 	.word	0x20030098
 8005648:	2003009c 	.word	0x2003009c
 800564c:	200300a8 	.word	0x200300a8

08005650 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800565c:	4811      	ldr	r0, [pc, #68]	; (80056a4 <TL_BLE_Init+0x54>)
 800565e:	f000 fa27 	bl	8005ab0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <TL_BLE_Init+0x58>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4a0c      	ldr	r2, [pc, #48]	; (80056ac <TL_BLE_Init+0x5c>)
 800567c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <TL_BLE_Init+0x54>)
 8005682:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005684:	f000 ffe8 	bl	8006658 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <TL_BLE_Init+0x60>)
 800568e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a07      	ldr	r2, [pc, #28]	; (80056b4 <TL_BLE_Init+0x64>)
 8005696:	6013      	str	r3, [r2, #0]

  return 0;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	200300c4 	.word	0x200300c4
 80056a8:	20030000 	.word	0x20030000
 80056ac:	20030a48 	.word	0x20030a48
 80056b0:	20000220 	.word	0x20000220
 80056b4:	20000224 	.word	0x20000224

080056b8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80056c4:	4b09      	ldr	r3, [pc, #36]	; (80056ec <TL_BLE_SendCmd+0x34>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2201      	movs	r2, #1
 80056cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <TL_BLE_SendCmd+0x34>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4619      	mov	r1, r3
 80056d6:	2001      	movs	r0, #1
 80056d8:	f000 f96c 	bl	80059b4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80056dc:	f000 ffc6 	bl	800666c <HW_IPCC_BLE_SendCmd>

  return 0;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20030000 	.word	0x20030000

080056f0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80056f6:	e01c      	b.n	8005732 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4812      	ldr	r0, [pc, #72]	; (8005748 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80056fe:	f000 fa76 	bl	8005bee <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7a5b      	ldrb	r3, [r3, #9]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d003      	beq.n	8005712 <HW_IPCC_BLE_RxEvtNot+0x22>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7a5b      	ldrb	r3, [r3, #9]
 800570e:	2b0e      	cmp	r3, #14
 8005710:	d105      	bne.n	800571e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4619      	mov	r1, r3
 8005716:	2002      	movs	r0, #2
 8005718:	f000 f94c 	bl	80059b4 <OutputDbgTrace>
 800571c:	e004      	b.n	8005728 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4619      	mov	r1, r3
 8005722:	2003      	movs	r0, #3
 8005724:	f000 f946 	bl	80059b4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005732:	4805      	ldr	r0, [pc, #20]	; (8005748 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005734:	f000 f9cc 	bl	8005ad0 <LST_is_empty>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0dc      	beq.n	80056f8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800573e:	bf00      	nop
}
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200300c4 	.word	0x200300c4
 800574c:	20000220 	.word	0x20000220

08005750 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4798      	blx	r3

  return;
 800575a:	bf00      	nop
}
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000224 	.word	0x20000224

08005764 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005770:	480d      	ldr	r0, [pc, #52]	; (80057a8 <TL_SYS_Init+0x44>)
 8005772:	f000 f99d 	bl	8005ab0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <TL_SYS_Init+0x48>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <TL_SYS_Init+0x44>)
 8005788:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800578a:	f000 ff91 	bl	80066b0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a07      	ldr	r2, [pc, #28]	; (80057b0 <TL_SYS_Init+0x4c>)
 8005794:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4a06      	ldr	r2, [pc, #24]	; (80057b4 <TL_SYS_Init+0x50>)
 800579c:	6013      	str	r3, [r2, #0]

  return 0;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	200300cc 	.word	0x200300cc
 80057ac:	20030000 	.word	0x20030000
 80057b0:	20000228 	.word	0x20000228
 80057b4:	2000022c 	.word	0x2000022c

080057b8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <TL_SYS_SendCmd+0x34>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2210      	movs	r2, #16
 80057cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <TL_SYS_SendCmd+0x34>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4619      	mov	r1, r3
 80057d6:	2004      	movs	r0, #4
 80057d8:	f000 f8ec 	bl	80059b4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80057dc:	f000 ff72 	bl	80066c4 <HW_IPCC_SYS_SendCmd>

  return 0;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20030000 	.word	0x20030000

080057f0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80057f4:	4b07      	ldr	r3, [pc, #28]	; (8005814 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	2005      	movs	r0, #5
 80057fe:	f000 f8d9 	bl	80059b4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a03      	ldr	r2, [pc, #12]	; (8005814 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005808:	68d2      	ldr	r2, [r2, #12]
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	4610      	mov	r0, r2
 800580e:	4798      	blx	r3

  return;
 8005810:	bf00      	nop
}
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20030000 	.word	0x20030000
 8005818:	20000228 	.word	0x20000228

0800581c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005822:	e00e      	b.n	8005842 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	4619      	mov	r1, r3
 8005828:	480b      	ldr	r0, [pc, #44]	; (8005858 <HW_IPCC_SYS_EvtNot+0x3c>)
 800582a:	f000 f9e0 	bl	8005bee <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	2006      	movs	r0, #6
 8005834:	f000 f8be 	bl	80059b4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005838:	4b08      	ldr	r3, [pc, #32]	; (800585c <HW_IPCC_SYS_EvtNot+0x40>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4610      	mov	r0, r2
 8005840:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005842:	4805      	ldr	r0, [pc, #20]	; (8005858 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005844:	f000 f944 	bl	8005ad0 <LST_is_empty>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ea      	beq.n	8005824 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800584e:	bf00      	nop
}
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	200300cc 	.word	0x200300cc
 800585c:	2000022c 	.word	0x2000022c

08005860 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005868:	4817      	ldr	r0, [pc, #92]	; (80058c8 <TL_MM_Init+0x68>)
 800586a:	f000 f921 	bl	8005ab0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800586e:	4817      	ldr	r0, [pc, #92]	; (80058cc <TL_MM_Init+0x6c>)
 8005870:	f000 f91e 	bl	8005ab0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005874:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <TL_MM_Init+0x70>)
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <TL_MM_Init+0x74>)
 800587a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800587c:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <TL_MM_Init+0x74>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6892      	ldr	r2, [r2, #8]
 8005884:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005886:	4b13      	ldr	r3, [pc, #76]	; (80058d4 <TL_MM_Init+0x74>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68d2      	ldr	r2, [r2, #12]
 800588e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005890:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <TL_MM_Init+0x74>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a0c      	ldr	r2, [pc, #48]	; (80058c8 <TL_MM_Init+0x68>)
 8005896:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005898:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <TL_MM_Init+0x74>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80058a2:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <TL_MM_Init+0x74>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6852      	ldr	r2, [r2, #4]
 80058aa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <TL_MM_Init+0x74>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6912      	ldr	r2, [r2, #16]
 80058b4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <TL_MM_Init+0x74>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6952      	ldr	r2, [r2, #20]
 80058be:	619a      	str	r2, [r3, #24]

  return;
 80058c0:	bf00      	nop
}
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	200300b4 	.word	0x200300b4
 80058cc:	20000218 	.word	0x20000218
 80058d0:	20030000 	.word	0x20030000
 80058d4:	20000230 	.word	0x20000230

080058d8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4807      	ldr	r0, [pc, #28]	; (8005900 <TL_MM_EvtDone+0x28>)
 80058e4:	f000 f93c 	bl	8005b60 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	2000      	movs	r0, #0
 80058ec:	f000 f862 	bl	80059b4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80058f0:	4804      	ldr	r0, [pc, #16]	; (8005904 <TL_MM_EvtDone+0x2c>)
 80058f2:	f000 ff0d 	bl	8006710 <HW_IPCC_MM_SendFreeBuf>

  return;
 80058f6:	bf00      	nop
}
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000218 	.word	0x20000218
 8005904:	08005909 	.word	0x08005909

08005908 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800590e:	e00c      	b.n	800592a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	4619      	mov	r1, r3
 8005914:	480a      	ldr	r0, [pc, #40]	; (8005940 <SendFreeBuf+0x38>)
 8005916:	f000 f96a 	bl	8005bee <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800591a:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <SendFreeBuf+0x3c>)
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f91b 	bl	8005b60 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800592a:	4805      	ldr	r0, [pc, #20]	; (8005940 <SendFreeBuf+0x38>)
 800592c:	f000 f8d0 	bl	8005ad0 <LST_is_empty>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0ec      	beq.n	8005910 <SendFreeBuf+0x8>
  }

  return;
 8005936:	bf00      	nop
}
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000218 	.word	0x20000218
 8005944:	20030000 	.word	0x20030000

08005948 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800594c:	4805      	ldr	r0, [pc, #20]	; (8005964 <TL_TRACES_Init+0x1c>)
 800594e:	f000 f8af 	bl	8005ab0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <TL_TRACES_Init+0x20>)
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4a03      	ldr	r2, [pc, #12]	; (8005964 <TL_TRACES_Init+0x1c>)
 8005958:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800595a:	f000 ff0f 	bl	800677c <HW_IPCC_TRACES_Init>

  return;
 800595e:	bf00      	nop
}
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	200300bc 	.word	0x200300bc
 8005968:	20030000 	.word	0x20030000

0800596c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005972:	e008      	b.n	8005986 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005974:	1d3b      	adds	r3, r7, #4
 8005976:	4619      	mov	r1, r3
 8005978:	4808      	ldr	r0, [pc, #32]	; (800599c <HW_IPCC_TRACES_EvtNot+0x30>)
 800597a:	f000 f938 	bl	8005bee <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f80d 	bl	80059a0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005986:	4805      	ldr	r0, [pc, #20]	; (800599c <HW_IPCC_TRACES_EvtNot+0x30>)
 8005988:	f000 f8a2 	bl	8005ad0 <LST_is_empty>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f0      	beq.n	8005974 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005992:	bf00      	nop
}
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200300bc 	.word	0x200300bc

080059a0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	6039      	str	r1, [r7, #0]
 80059be:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d845      	bhi.n	8005a52 <OutputDbgTrace+0x9e>
 80059c6:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <OutputDbgTrace+0x18>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059e9 	.word	0x080059e9
 80059d0:	08005a0d 	.word	0x08005a0d
 80059d4:	08005a13 	.word	0x08005a13
 80059d8:	08005a27 	.word	0x08005a27
 80059dc:	08005a33 	.word	0x08005a33
 80059e0:	08005a39 	.word	0x08005a39
 80059e4:	08005a47 	.word	0x08005a47
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	7a5b      	ldrb	r3, [r3, #9]
 80059f0:	2bff      	cmp	r3, #255	; 0xff
 80059f2:	d005      	beq.n	8005a00 <OutputDbgTrace+0x4c>
 80059f4:	2bff      	cmp	r3, #255	; 0xff
 80059f6:	dc05      	bgt.n	8005a04 <OutputDbgTrace+0x50>
 80059f8:	2b0e      	cmp	r3, #14
 80059fa:	d005      	beq.n	8005a08 <OutputDbgTrace+0x54>
 80059fc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80059fe:	e001      	b.n	8005a04 <OutputDbgTrace+0x50>
          break;
 8005a00:	bf00      	nop
 8005a02:	e027      	b.n	8005a54 <OutputDbgTrace+0xa0>
          break;
 8005a04:	bf00      	nop
 8005a06:	e025      	b.n	8005a54 <OutputDbgTrace+0xa0>
          break;
 8005a08:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8005a0a:	e023      	b.n	8005a54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005a10:	e020      	b.n	8005a54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	7a5b      	ldrb	r3, [r3, #9]
 8005a1a:	2b0e      	cmp	r3, #14
 8005a1c:	d001      	beq.n	8005a22 <OutputDbgTrace+0x6e>
 8005a1e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005a20:	e000      	b.n	8005a24 <OutputDbgTrace+0x70>
          break;
 8005a22:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005a24:	e016      	b.n	8005a54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	7a5b      	ldrb	r3, [r3, #9]
 8005a2e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005a30:	e010      	b.n	8005a54 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005a36:	e00d      	b.n	8005a54 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	7a5b      	ldrb	r3, [r3, #9]
 8005a40:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005a42:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005a44:	e006      	b.n	8005a54 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	7a5b      	ldrb	r3, [r3, #9]
 8005a4e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005a50:	e000      	b.n	8005a54 <OutputDbgTrace+0xa0>

    default:
      break;
 8005a52:	bf00      	nop
  }

  return;
 8005a54:	bf00      	nop
}
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <OTP_Read+0x48>)
 8005a6c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005a6e:	e002      	b.n	8005a76 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3b08      	subs	r3, #8
 8005a74:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3307      	adds	r3, #7
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	79fa      	ldrb	r2, [r7, #7]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d003      	beq.n	8005a8a <OTP_Read+0x2a>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a09      	ldr	r2, [pc, #36]	; (8005aac <OTP_Read+0x4c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d1f2      	bne.n	8005a70 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3307      	adds	r3, #7
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	79fa      	ldrb	r2, [r7, #7]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d001      	beq.n	8005a9a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	1fff73f8 	.word	0x1fff73f8
 8005aac:	1fff7000 	.word	0x1fff7000

08005ab0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	605a      	str	r2, [r3, #4]
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8005adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ade:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ae2:	b672      	cpsid	i
}
 8005ae4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d102      	bne.n	8005af6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8005af0:	2301      	movs	r3, #1
 8005af2:	75fb      	strb	r3, [r7, #23]
 8005af4:	e001      	b.n	8005afa <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	75fb      	strb	r3, [r7, #23]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f383 8810 	msr	PRIMASK, r3
}
 8005b04:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b22:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b24:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b28:	b672      	cpsid	i
}
 8005b2a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f383 8810 	msr	PRIMASK, r3
}
 8005b52:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b70:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b74:	b672      	cpsid	i
}
 8005b76:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f383 8810 	msr	PRIMASK, r3
}
 8005b9e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005bbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bbe:	b672      	cpsid	i
}
 8005bc0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6852      	ldr	r2, [r2, #4]
 8005bd4:	605a      	str	r2, [r3, #4]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f383 8810 	msr	PRIMASK, r3
}
 8005be0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005c00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c02:	b672      	cpsid	i
}
 8005c04:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff ffca 	bl	8005bac <LST_remove_node>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f383 8810 	msr	PRIMASK, r3
}
 8005c22:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005c24:	bf00      	nop
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <LL_FLASH_GetUDN+0x14>)
 8005c32:	681b      	ldr	r3, [r3, #0]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	1fff7580 	.word	0x1fff7580

08005c44 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <LL_FLASH_GetDeviceID+0x14>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	b2db      	uxtb	r3, r3
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	1fff7584 	.word	0x1fff7584

08005c5c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <LL_FLASH_GetSTCompanyID+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	0a1b      	lsrs	r3, r3, #8
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	1fff7584 	.word	0x1fff7584

08005c74 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8005c74:	b5b0      	push	{r4, r5, r7, lr}
 8005c76:	b08e      	sub	sp, #56	; 0x38
 8005c78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8005c7a:	4b2a      	ldr	r3, [pc, #168]	; (8005d24 <APP_BLE_Init+0xb0>)
 8005c7c:	1d3c      	adds	r4, r7, #4
 8005c7e:	461d      	mov	r5, r3
 8005c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8005c90:	f000 f904 	bl	8005e9c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8005c94:	2101      	movs	r1, #1
 8005c96:	2002      	movs	r0, #2
 8005c98:	f000 fd98 	bl	80067cc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8005c9c:	4a22      	ldr	r2, [pc, #136]	; (8005d28 <APP_BLE_Init+0xb4>)
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2002      	movs	r0, #2
 8005ca2:	f000 fead 	bl	8006a00 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff f8d5 	bl	8004e58 <SHCI_C2_BLE_Init>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8005cb4:	f7fb fc71 	bl	800159a <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8005cb8:	f000 f906 	bl	8005ec8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8005cbc:	f7ff f826 	bl	8004d0c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <APP_BLE_Init+0xb8>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8005cc8:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <APP_BLE_Init+0xb8>)
 8005cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cce:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8005cd0:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <APP_BLE_Init+0xbc>)
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	f000 fe93 	bl	8006a00 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8005cda:	2006      	movs	r0, #6
 8005cdc:	f7fe fd3c 	bl	8004758 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8005ce0:	f000 fb0c 	bl	80062fc <P2PS_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8005ce4:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <APP_BLE_Init+0xc0>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4913      	ldr	r1, [pc, #76]	; (8005d38 <APP_BLE_Init+0xc4>)
 8005cea:	2000      	movs	r0, #0
 8005cec:	f7fb f9b2 	bl	8001054 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8005cf0:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <APP_BLE_Init+0xc8>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4912      	ldr	r1, [pc, #72]	; (8005d40 <APP_BLE_Init+0xcc>)
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f7fb f9ac 	bl	8001054 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <APP_BLE_Init+0xb8>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <APP_BLE_Init+0xb8>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8005d08:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <APP_BLE_Init+0xd0>)
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <APP_BLE_Init+0xd4>)
 8005d10:	22a0      	movs	r2, #160	; 0xa0
 8005d12:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8005d14:	2001      	movs	r0, #1
 8005d16:	f000 f98b 	bl	8006030 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8005d1a:	bf00      	nop
}
 8005d1c:	3738      	adds	r7, #56	; 0x38
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bdb0      	pop	{r4, r5, r7, pc}
 8005d22:	bf00      	nop
 8005d24:	08006d5c 	.word	0x08006d5c
 8005d28:	08005075 	.word	0x08005075
 8005d2c:	20000118 	.word	0x20000118
 8005d30:	08006199 	.word	0x08006199
 8005d34:	080061cd 	.word	0x080061cd
 8005d38:	20000199 	.word	0x20000199
 8005d3c:	080061dd 	.word	0x080061dd
 8005d40:	2000019a 	.word	0x2000019a
 8005d44:	2000019c 	.word	0x2000019c
 8005d48:	2000019e 	.word	0x2000019e

08005d4c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005d54:	2392      	movs	r3, #146	; 0x92
 8005d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2bff      	cmp	r3, #255	; 0xff
 8005d66:	d076      	beq.n	8005e56 <SVCCTL_App_Notification+0x10a>
 8005d68:	2bff      	cmp	r3, #255	; 0xff
 8005d6a:	f300 808b 	bgt.w	8005e84 <SVCCTL_App_Notification+0x138>
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d002      	beq.n	8005d78 <SVCCTL_App_Notification+0x2c>
 8005d72:	2b3e      	cmp	r3, #62	; 0x3e
 8005d74:	d020      	beq.n	8005db8 <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8005d76:	e085      	b.n	8005e84 <SVCCTL_App_Notification+0x138>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	4b43      	ldr	r3, [pc, #268]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005d88:	8adb      	ldrh	r3, [r3, #22]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d106      	bne.n	8005d9c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8005d8e:	4b41      	ldr	r3, [pc, #260]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005d94:	4b3f      	ldr	r3, [pc, #252]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8005d9c:	2001      	movs	r0, #1
 8005d9e:	f000 f947 	bl	8006030 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8005da2:	4b3d      	ldr	r3, [pc, #244]	; (8005e98 <SVCCTL_App_Notification+0x14c>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005da8:	4b3a      	ldr	r3, [pc, #232]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005daa:	8ada      	ldrh	r2, [r3, #22]
 8005dac:	4b3a      	ldr	r3, [pc, #232]	; (8005e98 <SVCCTL_App_Notification+0x14c>)
 8005dae:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8005db0:	4839      	ldr	r0, [pc, #228]	; (8005e98 <SVCCTL_App_Notification+0x14c>)
 8005db2:	f000 fa8f 	bl	80062d4 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8005db6:	e068      	b.n	8005e8a <SVCCTL_App_Notification+0x13e>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	3302      	adds	r3, #2
 8005dbc:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b0c      	cmp	r3, #12
 8005dc4:	d005      	beq.n	8005dd2 <SVCCTL_App_Notification+0x86>
 8005dc6:	2b0c      	cmp	r3, #12
 8005dc8:	dc41      	bgt.n	8005e4e <SVCCTL_App_Notification+0x102>
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d017      	beq.n	8005dfe <SVCCTL_App_Notification+0xb2>
 8005dce:	2b03      	cmp	r3, #3
          break;
 8005dd0:	e03d      	b.n	8005e4e <SVCCTL_App_Notification+0x102>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8005dd8:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005dda:	8adb      	ldrh	r3, [r3, #22]
 8005ddc:	f107 020a 	add.w	r2, r7, #10
 8005de0:	f107 010b 	add.w	r1, r7, #11
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe fd25 	bl	8004834 <hci_le_read_phy>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8005df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d12c      	bne.n	8005e52 <SVCCTL_App_Notification+0x106>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8005df8:	7afb      	ldrb	r3, [r7, #11]
 8005dfa:	2b02      	cmp	r3, #2
          break;
 8005dfc:	e029      	b.n	8005e52 <SVCCTL_App_Notification+0x106>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	3301      	adds	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8005e04:	4b23      	ldr	r3, [pc, #140]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005e06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fb f99c 	bl	8001148 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005e12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d104      	bne.n	8005e24 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005e1c:	2206      	movs	r2, #6
 8005e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8005e22:	e003      	b.n	8005e2c <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8005e24:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005e26:	2205      	movs	r2, #5
 8005e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005e36:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8005e38:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <SVCCTL_App_Notification+0x14c>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005e3e:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <SVCCTL_App_Notification+0x148>)
 8005e40:	8ada      	ldrh	r2, [r3, #22]
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <SVCCTL_App_Notification+0x14c>)
 8005e44:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8005e46:	4814      	ldr	r0, [pc, #80]	; (8005e98 <SVCCTL_App_Notification+0x14c>)
 8005e48:	f000 fa44 	bl	80062d4 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8005e4c:	e002      	b.n	8005e54 <SVCCTL_App_Notification+0x108>
          break;
 8005e4e:	bf00      	nop
 8005e50:	e01b      	b.n	8005e8a <SVCCTL_App_Notification+0x13e>
          break;
 8005e52:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8005e54:	e019      	b.n	8005e8a <SVCCTL_App_Notification+0x13e>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	3302      	adds	r3, #2
 8005e5a:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e66:	d009      	beq.n	8005e7c <SVCCTL_App_Notification+0x130>
 8005e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6c:	dc0c      	bgt.n	8005e88 <SVCCTL_App_Notification+0x13c>
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d006      	beq.n	8005e80 <SVCCTL_App_Notification+0x134>
 8005e72:	f240 4207 	movw	r2, #1031	; 0x407
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d106      	bne.n	8005e88 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8005e7a:	e002      	b.n	8005e82 <SVCCTL_App_Notification+0x136>
      break;
 8005e7c:	bf00      	nop
 8005e7e:	e003      	b.n	8005e88 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8005e80:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8005e82:	e001      	b.n	8005e88 <SVCCTL_App_Notification+0x13c>
      break;
 8005e84:	bf00      	nop
 8005e86:	e000      	b.n	8005e8a <SVCCTL_App_Notification+0x13e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8005e88:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8005e8a:	2301      	movs	r3, #1
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3728      	adds	r7, #40	; 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000118 	.word	0x20000118
 8005e98:	2000034c 	.word	0x2000034c

08005e9c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8005ea2:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <Ble_Tl_Init+0x20>)
 8005ea4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <Ble_Tl_Init+0x24>)
 8005ea8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8005eaa:	463b      	mov	r3, r7
 8005eac:	4619      	mov	r1, r3
 8005eae:	4805      	ldr	r0, [pc, #20]	; (8005ec4 <Ble_Tl_Init+0x28>)
 8005eb0:	f7ff f8c4 	bl	800503c <hci_init>

  return;
 8005eb4:	bf00      	nop
}
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	200300d4 	.word	0x200300d4
 8005ec0:	08006267 	.word	0x08006267
 8005ec4:	0800622f 	.word	0x0800622f

08005ec8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8005ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eca:	b08d      	sub	sp, #52	; 0x34
 8005ecc:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8005ece:	2300      	movs	r3, #0
 8005ed0:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8005ed2:	f7fe fc8b 	bl	80047ec <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8005ed6:	f000 f91b 	bl	8006110 <BleGetBdAddress>
 8005eda:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	2106      	movs	r1, #6
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	f7fe fb79 	bl	80045d8 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	795a      	ldrb	r2, [r3, #5]
 8005eea:	4b4b      	ldr	r3, [pc, #300]	; (8006018 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8005eec:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	791a      	ldrb	r2, [r3, #4]
 8005ef2:	4b49      	ldr	r3, [pc, #292]	; (8006018 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8005ef4:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	78da      	ldrb	r2, [r3, #3]
 8005efa:	4b47      	ldr	r3, [pc, #284]	; (8006018 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8005efc:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	789a      	ldrb	r2, [r3, #2]
 8005f02:	4b45      	ldr	r3, [pc, #276]	; (8006018 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8005f04:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	785a      	ldrb	r2, [r3, #1]
 8005f0a:	4b43      	ldr	r3, [pc, #268]	; (8006018 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8005f0c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	781a      	ldrb	r2, [r3, #0]
 8005f12:	4b41      	ldr	r3, [pc, #260]	; (8006018 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8005f14:	735a      	strb	r2, [r3, #13]
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8005f16:	4a41      	ldr	r2, [pc, #260]	; (800601c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8005f18:	2110      	movs	r1, #16
 8005f1a:	2018      	movs	r0, #24
 8005f1c:	f7fe fb5c 	bl	80045d8 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8005f20:	4a3f      	ldr	r2, [pc, #252]	; (8006020 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8005f22:	2110      	movs	r1, #16
 8005f24:	2008      	movs	r0, #8
 8005f26:	f7fe fb57 	bl	80045d8 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005f2a:	2118      	movs	r1, #24
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	f7fe fbbc 	bl	80046aa <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8005f32:	f7fe f90c 	bl	800414e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8005f3a:	7cfb      	ldrb	r3, [r7, #19]
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01d      	beq.n	8005f84 <Ble_Hci_Gap_Gatt_Init+0xbc>
  {
    const char *name = "myBLE";
 8005f48:	4b36      	ldr	r3, [pc, #216]	; (8006024 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8005f4a:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8005f4c:	f107 020a 	add.w	r2, r7, #10
 8005f50:	7cf8      	ldrb	r0, [r7, #19]
 8005f52:	1dbb      	adds	r3, r7, #6
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	2207      	movs	r2, #7
 8005f60:	2100      	movs	r1, #0
 8005f62:	f7fd ffe9 	bl	8003f38 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8005f66:	897c      	ldrh	r4, [r7, #10]
 8005f68:	893d      	ldrh	r5, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7fa f906 	bl	800017c <strlen>
 8005f70:	4603      	mov	r3, r0
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f7fe faa3 	bl	80044ca <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8005f84:	8978      	ldrh	r0, [r7, #10]
 8005f86:	88f9      	ldrh	r1, [r7, #6]
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f7fe fa9b 	bl	80044ca <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8005f94:	2202      	movs	r2, #2
 8005f96:	2102      	movs	r1, #2
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f7fe fcb3 	bl	8004904 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8005f9e:	4b22      	ldr	r3, [pc, #136]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8005fa4:	4b20      	ldr	r3, [pc, #128]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fd fed3 	bl	8003d54 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8005fae:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8005fb4:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fbc:	2210      	movs	r2, #16
 8005fbe:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8005fc0:	4b19      	ldr	r3, [pc, #100]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8005fc6:	4b18      	ldr	r3, [pc, #96]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fc8:	4a18      	ldr	r2, [pc, #96]	; (800602c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8005fca:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8005fcc:	4b16      	ldr	r3, [pc, #88]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8005fd2:	4b15      	ldr	r3, [pc, #84]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fd4:	789c      	ldrb	r4, [r3, #2]
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fd8:	785d      	ldrb	r5, [r3, #1]
 8005fda:	4b13      	ldr	r3, [pc, #76]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fdc:	791b      	ldrb	r3, [r3, #4]
 8005fde:	4a12      	ldr	r2, [pc, #72]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fe0:	7952      	ldrb	r2, [r2, #5]
 8005fe2:	4911      	ldr	r1, [pc, #68]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fe4:	78c9      	ldrb	r1, [r1, #3]
 8005fe6:	4810      	ldr	r0, [pc, #64]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8005fe8:	6880      	ldr	r0, [r0, #8]
 8005fea:	2600      	movs	r6, #0
 8005fec:	9604      	str	r6, [sp, #16]
 8005fee:	9003      	str	r0, [sp, #12]
 8005ff0:	9102      	str	r1, [sp, #8]
 8005ff2:	9201      	str	r2, [sp, #4]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f7fd fef3 	bl	8003de8 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006004:	789b      	ldrb	r3, [r3, #2]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <Ble_Hci_Gap_Gatt_Init+0x146>
   {
     aci_gap_configure_whitelist();
 800600a:	f7fe f87c 	bl	8004106 <aci_gap_configure_whitelist>
   }
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006016:	bf00      	nop
 8006018:	20000010 	.word	0x20000010
 800601c:	08006f50 	.word	0x08006f50
 8006020:	08006f60 	.word	0x08006f60
 8006024:	08006d90 	.word	0x08006d90
 8006028:	20000118 	.word	0x20000118
 800602c:	0001b207 	.word	0x0001b207

08006030 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08c      	sub	sp, #48	; 0x30
 8006034:	af08      	add	r7, sp, #32
 8006036:	4603      	mov	r3, r0
 8006038:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800603a:	2392      	movs	r3, #146	; 0x92
 800603c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <Adv_Request+0xc4>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800604a:	4b2b      	ldr	r3, [pc, #172]	; (80060f8 <Adv_Request+0xc8>)
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	81bb      	strh	r3, [r7, #12]
 8006050:	e005      	b.n	800605e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8006052:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8006056:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8006058:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800605c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800605e:	4b27      	ldr	r3, [pc, #156]	; (80060fc <Adv_Request+0xcc>)
 8006060:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006064:	4618      	mov	r0, r3
 8006066:	f7fb f86f 	bl	8001148 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d10d      	bne.n	800608c <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8006070:	4b22      	ldr	r3, [pc, #136]	; (80060fc <Adv_Request+0xcc>)
 8006072:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006076:	2b01      	cmp	r3, #1
 8006078:	d004      	beq.n	8006084 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800607a:	4b20      	ldr	r3, [pc, #128]	; (80060fc <Adv_Request+0xcc>)
 800607c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006080:	2b02      	cmp	r3, #2
 8006082:	d103      	bne.n	800608c <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8006084:	f7fd fd64 	bl	8003b50 <aci_gap_set_non_discoverable>
 8006088:	4603      	mov	r3, r0
 800608a:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800608c:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <Adv_Request+0xcc>)
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8006094:	4b19      	ldr	r3, [pc, #100]	; (80060fc <Adv_Request+0xcc>)
 8006096:	7e1b      	ldrb	r3, [r3, #24]
 8006098:	89ba      	ldrh	r2, [r7, #12]
 800609a:	89f9      	ldrh	r1, [r7, #14]
 800609c:	2000      	movs	r0, #0
 800609e:	9006      	str	r0, [sp, #24]
 80060a0:	2000      	movs	r0, #0
 80060a2:	9005      	str	r0, [sp, #20]
 80060a4:	4816      	ldr	r0, [pc, #88]	; (8006100 <Adv_Request+0xd0>)
 80060a6:	9004      	str	r0, [sp, #16]
 80060a8:	9303      	str	r3, [sp, #12]
 80060aa:	4b16      	ldr	r3, [pc, #88]	; (8006104 <Adv_Request+0xd4>)
 80060ac:	9302      	str	r3, [sp, #8]
 80060ae:	2306      	movs	r3, #6
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	2300      	movs	r3, #0
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	2300      	movs	r3, #0
 80060b8:	2000      	movs	r0, #0
 80060ba:	f7fd fd6d 	bl	8003b98 <aci_gap_set_discoverable>
 80060be:	4603      	mov	r3, r0
 80060c0:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80060c2:	4911      	ldr	r1, [pc, #68]	; (8006108 <Adv_Request+0xd8>)
 80060c4:	200e      	movs	r0, #14
 80060c6:	f7fd ffc2 	bl	800404e <aci_gap_update_adv_data>
 80060ca:	4603      	mov	r3, r0
 80060cc:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d107      	bne.n	80060ea <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <Adv_Request+0xcc>)
 80060dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80060e0:	490a      	ldr	r1, [pc, #40]	; (800610c <Adv_Request+0xdc>)
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fb f8bc 	bl	8001260 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
}
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	2000019c 	.word	0x2000019c
 80060f8:	2000019e 	.word	0x2000019e
 80060fc:	20000118 	.word	0x20000118
 8006100:	20000131 	.word	0x20000131
 8006104:	08006f70 	.word	0x08006f70
 8006108:	20000010 	.word	0x20000010
 800610c:	0001e046 	.word	0x0001e046

08006110 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8006116:	f7ff fd89 	bl	8005c2c <LL_FLASH_GetUDN>
 800611a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006122:	d023      	beq.n	800616c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006124:	f7ff fd9a 	bl	8005c5c <LL_FLASH_GetSTCompanyID>
 8006128:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800612a:	f7ff fd8b 	bl	8005c44 <LL_FLASH_GetDeviceID>
 800612e:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	4b16      	ldr	r3, [pc, #88]	; (8006190 <BleGetBdAddress+0x80>)
 8006136:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	0a1b      	lsrs	r3, r3, #8
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4b14      	ldr	r3, [pc, #80]	; (8006190 <BleGetBdAddress+0x80>)
 8006140:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <BleGetBdAddress+0x80>)
 8006148:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	4b10      	ldr	r3, [pc, #64]	; (8006190 <BleGetBdAddress+0x80>)
 8006150:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	b2da      	uxtb	r2, r3
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <BleGetBdAddress+0x80>)
 800615a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	b2da      	uxtb	r2, r3
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <BleGetBdAddress+0x80>)
 8006164:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8006166:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <BleGetBdAddress+0x80>)
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	e00b      	b.n	8006184 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800616c:	2000      	movs	r0, #0
 800616e:	f7ff fc77 	bl	8005a60 <OTP_Read>
 8006172:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e001      	b.n	8006184 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8006180:	4b04      	ldr	r3, [pc, #16]	; (8006194 <BleGetBdAddress+0x84>)
 8006182:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8006184:	697b      	ldr	r3, [r7, #20]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000234 	.word	0x20000234
 8006194:	08006f48 	.word	0x08006f48

08006198 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <Adv_Cancel+0x30>)
 80061a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061a4:	2b05      	cmp	r3, #5
 80061a6:	d00a      	beq.n	80061be <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 80061a8:	2300      	movs	r3, #0
 80061aa:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80061ac:	f7fd fcd0 	bl	8003b50 <aci_gap_set_non_discoverable>
 80061b0:	4603      	mov	r3, r0
 80061b2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <Adv_Cancel+0x30>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
}
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000118 	.word	0x20000118

080061cc <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80061d0:	2100      	movs	r1, #0
 80061d2:	2001      	movs	r0, #1
 80061d4:	f000 fc36 	bl	8006a44 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80061d8:	bf00      	nop
}
 80061da:	bd80      	pop	{r7, pc}

080061dc <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80061f2:	2100      	movs	r1, #0
 80061f4:	2002      	movs	r0, #2
 80061f6:	f000 fc25 	bl	8006a44 <UTIL_SEQ_SetTask>
  return;
 80061fa:	bf00      	nop
}
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800620a:	2001      	movs	r0, #1
 800620c:	f000 fc86 	bl	8006b1c <UTIL_SEQ_SetEvt>
  return;
 8006210:	bf00      	nop
}
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006220:	2001      	movs	r0, #1
 8006222:	f000 fc9b 	bl	8006b5c <UTIL_SEQ_WaitEvt>
  return;
 8006226:	bf00      	nop
}
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	3308      	adds	r3, #8
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe fdb5 	bl	8004db0 <SVCCTL_UserEvtRx>
 8006246:	4603      	mov	r3, r0
 8006248:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800624a:	7afb      	ldrb	r3, [r7, #11]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006256:	e003      	b.n	8006260 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
  return;
 800625e:	bf00      	nop
}
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	4603      	mov	r3, r0
 800626e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <BLE_StatusNot+0x16>
 8006276:	2b01      	cmp	r3, #1
 8006278:	d006      	beq.n	8006288 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800627a:	e00b      	b.n	8006294 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800627c:	2303      	movs	r3, #3
 800627e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fc0b 	bl	8006a9c <UTIL_SEQ_PauseTask>
      break;
 8006286:	e005      	b.n	8006294 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006288:	2303      	movs	r3, #3
 800628a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 fc25 	bl	8006adc <UTIL_SEQ_ResumeTask>
      break;
 8006292:	bf00      	nop
  }
  return;
 8006294:	bf00      	nop
}
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d006      	beq.n	80062ba <P2PS_STM_App_Notification+0x1e>
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	dc06      	bgt.n	80062be <P2PS_STM_App_Notification+0x22>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d006      	beq.n	80062c2 <P2PS_STM_App_Notification+0x26>
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d006      	beq.n	80062c6 <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80062b8:	e001      	b.n	80062be <P2PS_STM_App_Notification+0x22>
      break;
 80062ba:	bf00      	nop
 80062bc:	e004      	b.n	80062c8 <P2PS_STM_App_Notification+0x2c>
      break;
 80062be:	bf00      	nop
 80062c0:	e002      	b.n	80062c8 <P2PS_STM_App_Notification+0x2c>
      break;
 80062c2:	bf00      	nop
 80062c4:	e000      	b.n	80062c8 <P2PS_STM_App_Notification+0x2c>
      break;
 80062c6:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80062c8:	bf00      	nop
}
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <P2PS_APP_Notification+0x16>
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d002      	beq.n	80062ee <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80062e8:	e002      	b.n	80062f0 <P2PS_APP_Notification+0x1c>
    break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <P2PS_APP_Notification+0x1c>
    break;
 80062ee:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80062f0:	bf00      	nop
}
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8006300:	bf00      	nop
}
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <LL_PWR_EnableBootC2>:
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <LL_PWR_EnableBootC2+0x1c>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4a04      	ldr	r2, [pc, #16]	; (8006328 <LL_PWR_EnableBootC2+0x1c>)
 8006316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631a:	60d3      	str	r3, [r2, #12]
}
 800631c:	bf00      	nop
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	58000400 	.word	0x58000400

0800632c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006336:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800633a:	4905      	ldr	r1, [pc, #20]	; (8006350 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	58000800 	.word	0x58000800

08006354 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800635e:	6a1a      	ldr	r2, [r3, #32]
 8006360:	4904      	ldr	r1, [pc, #16]	; (8006374 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4313      	orrs	r3, r2
 8006366:	620b      	str	r3, [r1, #32]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	58000800 	.word	0x58000800

08006378 <LL_AHB3_GRP1_EnableClock>:
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4313      	orrs	r3, r2
 800638e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4013      	ands	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	bf00      	nop
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80063b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80063ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80063c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4013      	ands	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80063d4:	68fb      	ldr	r3, [r7, #12]
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <LL_C1_IPCC_EnableIT_TXF>:
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <LL_C1_IPCC_EnableIT_RXO>:
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f043 0201 	orr.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	041b      	lsls	r3, r3, #16
 8006434:	43db      	mvns	r3, r3
 8006436:	401a      	ands	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	605a      	str	r2, [r3, #4]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	43db      	mvns	r3, r3
 800647e:	401a      	ands	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	605a      	str	r2, [r3, #4]
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_C1_IPCC_SetFlag_CHx>:
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	041a      	lsls	r2, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	609a      	str	r2, [r3, #8]
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	4013      	ands	r3, r2
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d101      	bne.n	80064e6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	4013      	ands	r3, r2
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d101      	bne.n	8006510 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006524:	2102      	movs	r1, #2
 8006526:	4819      	ldr	r0, [pc, #100]	; (800658c <HW_IPCC_Rx_Handler+0x6c>)
 8006528:	f7ff ffe4 	bl	80064f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <HW_IPCC_Rx_Handler+0x26>
 8006532:	4b16      	ldr	r3, [pc, #88]	; (800658c <HW_IPCC_Rx_Handler+0x6c>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	43db      	mvns	r3, r3
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006540:	f000 f8da 	bl	80066f8 <HW_IPCC_SYS_EvtHandler>
 8006544:	e01f      	b.n	8006586 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006546:	2101      	movs	r1, #1
 8006548:	4810      	ldr	r0, [pc, #64]	; (800658c <HW_IPCC_Rx_Handler+0x6c>)
 800654a:	f7ff ffd3 	bl	80064f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <HW_IPCC_Rx_Handler+0x46>
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <HW_IPCC_Rx_Handler+0x6c>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006560:	f000 f88e 	bl	8006680 <HW_IPCC_BLE_EvtHandler>
 8006564:	e00f      	b.n	8006586 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006566:	2108      	movs	r1, #8
 8006568:	4808      	ldr	r0, [pc, #32]	; (800658c <HW_IPCC_Rx_Handler+0x6c>)
 800656a:	f7ff ffc3 	bl	80064f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <HW_IPCC_Rx_Handler+0x68>
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <HW_IPCC_Rx_Handler+0x6c>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	43db      	mvns	r3, r3
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006582:	f000 f905 	bl	8006790 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006586:	bf00      	nop
 8006588:	bf00      	nop
}
 800658a:	bd80      	pop	{r7, pc}
 800658c:	58000c00 	.word	0x58000c00

08006590 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006594:	2102      	movs	r1, #2
 8006596:	481a      	ldr	r0, [pc, #104]	; (8006600 <HW_IPCC_Tx_Handler+0x70>)
 8006598:	f7ff ff97 	bl	80064ca <LL_C1_IPCC_IsActiveFlag_CHx>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HW_IPCC_Tx_Handler+0x26>
 80065a2:	4b17      	ldr	r3, [pc, #92]	; (8006600 <HW_IPCC_Tx_Handler+0x70>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	43db      	mvns	r3, r3
 80065a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80065b0:	f000 f896 	bl	80066e0 <HW_IPCC_SYS_CmdEvtHandler>
 80065b4:	e020      	b.n	80065f8 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80065b6:	2108      	movs	r1, #8
 80065b8:	4811      	ldr	r0, [pc, #68]	; (8006600 <HW_IPCC_Tx_Handler+0x70>)
 80065ba:	f7ff ff86 	bl	80064ca <LL_C1_IPCC_IsActiveFlag_CHx>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <HW_IPCC_Tx_Handler+0x48>
 80065c4:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <HW_IPCC_Tx_Handler+0x70>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	43db      	mvns	r3, r3
 80065ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80065d2:	f000 f8bf 	bl	8006754 <HW_IPCC_MM_FreeBufHandler>
 80065d6:	e00f      	b.n	80065f8 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80065d8:	2120      	movs	r1, #32
 80065da:	4809      	ldr	r0, [pc, #36]	; (8006600 <HW_IPCC_Tx_Handler+0x70>)
 80065dc:	f7ff ff75 	bl	80064ca <LL_C1_IPCC_IsActiveFlag_CHx>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d109      	bne.n	80065fa <HW_IPCC_Tx_Handler+0x6a>
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <HW_IPCC_Tx_Handler+0x70>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80065f4:	f000 f850 	bl	8006698 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
}
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	58000c00 	.word	0x58000c00

08006604 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006608:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800660c:	f7ff fecd 	bl	80063aa <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006610:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006614:	f7ff fe8a 	bl	800632c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006618:	f44f 7000 	mov.w	r0, #512	; 0x200
 800661c:	f7ff fe9a 	bl	8006354 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006620:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006622:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006624:	f7ff fe72 	bl	800630c <LL_PWR_EnableBootC2>

  return;
 8006628:	bf00      	nop
}
 800662a:	bd80      	pop	{r7, pc}

0800662c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006630:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006634:	f7ff fea0 	bl	8006378 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006638:	4806      	ldr	r0, [pc, #24]	; (8006654 <HW_IPCC_Init+0x28>)
 800663a:	f7ff fee2 	bl	8006402 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800663e:	4805      	ldr	r0, [pc, #20]	; (8006654 <HW_IPCC_Init+0x28>)
 8006640:	f7ff fecf 	bl	80063e2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006644:	202c      	movs	r0, #44	; 0x2c
 8006646:	f7fb fb02 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800664a:	202d      	movs	r0, #45	; 0x2d
 800664c:	f7fb faff 	bl	8001c4e <HAL_NVIC_EnableIRQ>

  return;
 8006650:	bf00      	nop
}
 8006652:	bd80      	pop	{r7, pc}
 8006654:	58000c00 	.word	0x58000c00

08006658 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800665c:	2101      	movs	r1, #1
 800665e:	4802      	ldr	r0, [pc, #8]	; (8006668 <HW_IPCC_BLE_Init+0x10>)
 8006660:	f7ff ff04 	bl	800646c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006664:	bf00      	nop
}
 8006666:	bd80      	pop	{r7, pc}
 8006668:	58000c00 	.word	0x58000c00

0800666c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006670:	2101      	movs	r1, #1
 8006672:	4802      	ldr	r0, [pc, #8]	; (800667c <HW_IPCC_BLE_SendCmd+0x10>)
 8006674:	f7ff ff1a 	bl	80064ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006678:	bf00      	nop
}
 800667a:	bd80      	pop	{r7, pc}
 800667c:	58000c00 	.word	0x58000c00

08006680 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006684:	f7ff f834 	bl	80056f0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006688:	2101      	movs	r1, #1
 800668a:	4802      	ldr	r0, [pc, #8]	; (8006694 <HW_IPCC_BLE_EvtHandler+0x14>)
 800668c:	f7ff ff00 	bl	8006490 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006690:	bf00      	nop
}
 8006692:	bd80      	pop	{r7, pc}
 8006694:	58000c00 	.word	0x58000c00

08006698 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800669c:	2120      	movs	r1, #32
 800669e:	4803      	ldr	r0, [pc, #12]	; (80066ac <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80066a0:	f7ff fed2 	bl	8006448 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80066a4:	f7ff f854 	bl	8005750 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80066a8:	bf00      	nop
}
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	58000c00 	.word	0x58000c00

080066b0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80066b4:	2102      	movs	r1, #2
 80066b6:	4802      	ldr	r0, [pc, #8]	; (80066c0 <HW_IPCC_SYS_Init+0x10>)
 80066b8:	f7ff fed8 	bl	800646c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80066bc:	bf00      	nop
}
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	58000c00 	.word	0x58000c00

080066c4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80066c8:	2102      	movs	r1, #2
 80066ca:	4804      	ldr	r0, [pc, #16]	; (80066dc <HW_IPCC_SYS_SendCmd+0x18>)
 80066cc:	f7ff feee 	bl	80064ac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80066d0:	2102      	movs	r1, #2
 80066d2:	4802      	ldr	r0, [pc, #8]	; (80066dc <HW_IPCC_SYS_SendCmd+0x18>)
 80066d4:	f7ff fea5 	bl	8006422 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80066d8:	bf00      	nop
}
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	58000c00 	.word	0x58000c00

080066e0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80066e4:	2102      	movs	r1, #2
 80066e6:	4803      	ldr	r0, [pc, #12]	; (80066f4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80066e8:	f7ff feae 	bl	8006448 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80066ec:	f7ff f880 	bl	80057f0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80066f0:	bf00      	nop
}
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	58000c00 	.word	0x58000c00

080066f8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80066fc:	f7ff f88e 	bl	800581c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006700:	2102      	movs	r1, #2
 8006702:	4802      	ldr	r0, [pc, #8]	; (800670c <HW_IPCC_SYS_EvtHandler+0x14>)
 8006704:	f7ff fec4 	bl	8006490 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006708:	bf00      	nop
}
 800670a:	bd80      	pop	{r7, pc}
 800670c:	58000c00 	.word	0x58000c00

08006710 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006718:	2108      	movs	r1, #8
 800671a:	480c      	ldr	r0, [pc, #48]	; (800674c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800671c:	f7ff fed5 	bl	80064ca <LL_C1_IPCC_IsActiveFlag_CHx>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006726:	4a0a      	ldr	r2, [pc, #40]	; (8006750 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800672c:	2108      	movs	r1, #8
 800672e:	4807      	ldr	r0, [pc, #28]	; (800674c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006730:	f7ff fe77 	bl	8006422 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006734:	e006      	b.n	8006744 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800673a:	2108      	movs	r1, #8
 800673c:	4803      	ldr	r0, [pc, #12]	; (800674c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800673e:	f7ff feb5 	bl	80064ac <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006742:	bf00      	nop
}
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	58000c00 	.word	0x58000c00
 8006750:	2000023c 	.word	0x2000023c

08006754 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006758:	2108      	movs	r1, #8
 800675a:	4806      	ldr	r0, [pc, #24]	; (8006774 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800675c:	f7ff fe74 	bl	8006448 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006766:	2108      	movs	r1, #8
 8006768:	4802      	ldr	r0, [pc, #8]	; (8006774 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800676a:	f7ff fe9f 	bl	80064ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800676e:	bf00      	nop
}
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	58000c00 	.word	0x58000c00
 8006778:	2000023c 	.word	0x2000023c

0800677c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006780:	2108      	movs	r1, #8
 8006782:	4802      	ldr	r0, [pc, #8]	; (800678c <HW_IPCC_TRACES_Init+0x10>)
 8006784:	f7ff fe72 	bl	800646c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006788:	bf00      	nop
}
 800678a:	bd80      	pop	{r7, pc}
 800678c:	58000c00 	.word	0x58000c00

08006790 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006794:	f7ff f8ea 	bl	800596c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006798:	2108      	movs	r1, #8
 800679a:	4802      	ldr	r0, [pc, #8]	; (80067a4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800679c:	f7ff fe78 	bl	8006490 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80067a0:	bf00      	nop
}
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	58000c00 	.word	0x58000c00

080067a8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <UTIL_LPM_Init+0x1c>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80067b2:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <UTIL_LPM_Init+0x20>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80067b8:	bf00      	nop
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000240 	.word	0x20000240
 80067c8:	20000244 	.word	0x20000244

080067cc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d8:	f3ef 8310 	mrs	r3, PRIMASK
 80067dc:	613b      	str	r3, [r7, #16]
  return(result);
 80067de:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80067e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80067e2:	b672      	cpsid	i
}
 80067e4:	bf00      	nop
  
  switch(state)
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <UTIL_LPM_SetOffMode+0x32>
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d10e      	bne.n	800680e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80067f0:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <UTIL_LPM_SetOffMode+0x5c>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	4a0b      	ldr	r2, [pc, #44]	; (8006828 <UTIL_LPM_SetOffMode+0x5c>)
 80067fa:	6013      	str	r3, [r2, #0]
      break;
 80067fc:	e008      	b.n	8006810 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	43da      	mvns	r2, r3
 8006802:	4b09      	ldr	r3, [pc, #36]	; (8006828 <UTIL_LPM_SetOffMode+0x5c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4013      	ands	r3, r2
 8006808:	4a07      	ldr	r2, [pc, #28]	; (8006828 <UTIL_LPM_SetOffMode+0x5c>)
 800680a:	6013      	str	r3, [r2, #0]
      break;
 800680c:	e000      	b.n	8006810 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800680e:	bf00      	nop
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f383 8810 	msr	PRIMASK, r3
}
 800681a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	20000244 	.word	0x20000244

0800682c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	; 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006834:	4b6a      	ldr	r3, [pc, #424]	; (80069e0 <UTIL_SEQ_Run+0x1b4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800683a:	4b69      	ldr	r3, [pc, #420]	; (80069e0 <UTIL_SEQ_Run+0x1b4>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4013      	ands	r3, r2
 8006842:	4a67      	ldr	r2, [pc, #412]	; (80069e0 <UTIL_SEQ_Run+0x1b4>)
 8006844:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006846:	4b67      	ldr	r3, [pc, #412]	; (80069e4 <UTIL_SEQ_Run+0x1b8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800684c:	e086      	b.n	800695c <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8006852:	e002      	b.n	800685a <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	3301      	adds	r3, #1
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800685a:	4a63      	ldr	r2, [pc, #396]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006862:	4b62      	ldr	r3, [pc, #392]	; (80069ec <UTIL_SEQ_Run+0x1c0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	401a      	ands	r2, r3
 8006868:	4b5d      	ldr	r3, [pc, #372]	; (80069e0 <UTIL_SEQ_Run+0x1b4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4013      	ands	r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f0      	beq.n	8006854 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8006872:	4a5d      	ldr	r2, [pc, #372]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800687a:	4b5c      	ldr	r3, [pc, #368]	; (80069ec <UTIL_SEQ_Run+0x1c0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	401a      	ands	r2, r3
 8006880:	4b57      	ldr	r3, [pc, #348]	; (80069e0 <UTIL_SEQ_Run+0x1b4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4013      	ands	r3, r2
 8006886:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006888:	4a57      	ldr	r2, [pc, #348]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4413      	add	r3, r2
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	4013      	ands	r3, r2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800689a:	4a53      	ldr	r2, [pc, #332]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	4413      	add	r3, r2
 80068a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068a6:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80068a8:	4a4f      	ldr	r2, [pc, #316]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4413      	add	r3, r2
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	4013      	ands	r3, r2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 f9ac 	bl	8006c14 <SEQ_BitPosition>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	4b4b      	ldr	r3, [pc, #300]	; (80069f0 <UTIL_SEQ_Run+0x1c4>)
 80068c2:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80068c4:	4a48      	ldr	r2, [pc, #288]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4413      	add	r3, r2
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	4b48      	ldr	r3, [pc, #288]	; (80069f0 <UTIL_SEQ_Run+0x1c4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2101      	movs	r1, #1
 80068d4:	fa01 f303 	lsl.w	r3, r1, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	401a      	ands	r2, r3
 80068dc:	4942      	ldr	r1, [pc, #264]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	440b      	add	r3, r1
 80068e4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ea:	617b      	str	r3, [r7, #20]
  return(result);
 80068ec:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80068ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80068f0:	b672      	cpsid	i
}
 80068f2:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80068f4:	4b3e      	ldr	r3, [pc, #248]	; (80069f0 <UTIL_SEQ_Run+0x1c4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2201      	movs	r2, #1
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	43da      	mvns	r2, r3
 8006900:	4b38      	ldr	r3, [pc, #224]	; (80069e4 <UTIL_SEQ_Run+0x1b8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4013      	ands	r3, r2
 8006906:	4a37      	ldr	r2, [pc, #220]	; (80069e4 <UTIL_SEQ_Run+0x1b8>)
 8006908:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800690a:	2302      	movs	r3, #2
 800690c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800690e:	e013      	b.n	8006938 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	3b01      	subs	r3, #1
 8006914:	4a34      	ldr	r2, [pc, #208]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 8006916:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800691a:	4b35      	ldr	r3, [pc, #212]	; (80069f0 <UTIL_SEQ_Run+0x1c4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2201      	movs	r2, #1
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	43da      	mvns	r2, r3
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	3b01      	subs	r3, #1
 800692a:	400a      	ands	r2, r1
 800692c:	492e      	ldr	r1, [pc, #184]	; (80069e8 <UTIL_SEQ_Run+0x1bc>)
 800692e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	3b01      	subs	r3, #1
 8006936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e8      	bne.n	8006910 <UTIL_SEQ_Run+0xe4>
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f383 8810 	msr	PRIMASK, r3
}
 8006948:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800694a:	4b29      	ldr	r3, [pc, #164]	; (80069f0 <UTIL_SEQ_Run+0x1c4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a29      	ldr	r2, [pc, #164]	; (80069f4 <UTIL_SEQ_Run+0x1c8>)
 8006950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006954:	4798      	blx	r3
    
    local_taskset = TaskSet;
 8006956:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <UTIL_SEQ_Run+0x1b8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800695c:	4b23      	ldr	r3, [pc, #140]	; (80069ec <UTIL_SEQ_Run+0x1c0>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	401a      	ands	r2, r3
 8006964:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <UTIL_SEQ_Run+0x1b4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d007      	beq.n	800697e <UTIL_SEQ_Run+0x152>
 800696e:	4b22      	ldr	r3, [pc, #136]	; (80069f8 <UTIL_SEQ_Run+0x1cc>)
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4b22      	ldr	r3, [pc, #136]	; (80069fc <UTIL_SEQ_Run+0x1d0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4013      	ands	r3, r2
 8006978:	2b00      	cmp	r3, #0
 800697a:	f43f af68 	beq.w	800684e <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800697e:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <UTIL_SEQ_Run+0x1c4>)
 8006980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006984:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8006986:	f000 f937 	bl	8006bf8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800698a:	f3ef 8310 	mrs	r3, PRIMASK
 800698e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006990:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8006992:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8006994:	b672      	cpsid	i
}
 8006996:	bf00      	nop
  local_taskset = TaskSet;
 8006998:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <UTIL_SEQ_Run+0x1b8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <UTIL_SEQ_Run+0x1c0>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	401a      	ands	r2, r3
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <UTIL_SEQ_Run+0x1b4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d108      	bne.n	80069c2 <UTIL_SEQ_Run+0x196>
 80069b0:	4b11      	ldr	r3, [pc, #68]	; (80069f8 <UTIL_SEQ_Run+0x1cc>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <UTIL_SEQ_Run+0x1d0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 80069be:	f7f9 fed6 	bl	800076e <UTIL_SEQ_Idle>
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f383 8810 	msr	PRIMASK, r3
}
 80069cc:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 80069ce:	f000 f91a 	bl	8006c06 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80069d2:	4a03      	ldr	r2, [pc, #12]	; (80069e0 <UTIL_SEQ_Run+0x1b4>)
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	6013      	str	r3, [r2, #0]

  return;
 80069d8:	bf00      	nop
}
 80069da:	3730      	adds	r7, #48	; 0x30
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000024 	.word	0x20000024
 80069e4:	20000248 	.word	0x20000248
 80069e8:	200002d8 	.word	0x200002d8
 80069ec:	20000020 	.word	0x20000020
 80069f0:	20000254 	.word	0x20000254
 80069f4:	20000258 	.word	0x20000258
 80069f8:	2000024c 	.word	0x2000024c
 80069fc:	20000250 	.word	0x20000250

08006a00 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a10:	617b      	str	r3, [r7, #20]
  return(result);
 8006a12:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8006a14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a16:	b672      	cpsid	i
}
 8006a18:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 f8fa 	bl	8006c14 <SEQ_BitPosition>
 8006a20:	4603      	mov	r3, r0
 8006a22:	4619      	mov	r1, r3
 8006a24:	4a06      	ldr	r2, [pc, #24]	; (8006a40 <UTIL_SEQ_RegTask+0x40>)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f383 8810 	msr	PRIMASK, r3
}
 8006a36:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006a38:	bf00      	nop
}
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000258 	.word	0x20000258

08006a44 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a52:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a54:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006a56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a58:	b672      	cpsid	i
}
 8006a5a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8006a5c:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <UTIL_SEQ_SetTask+0x50>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <UTIL_SEQ_SetTask+0x50>)
 8006a66:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006a68:	4a0b      	ldr	r2, [pc, #44]	; (8006a98 <UTIL_SEQ_SetTask+0x54>)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	4908      	ldr	r1, [pc, #32]	; (8006a98 <UTIL_SEQ_SetTask+0x54>)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f383 8810 	msr	PRIMASK, r3
}
 8006a86:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006a88:	bf00      	nop
}
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20000248 	.word	0x20000248
 8006a98:	200002d8 	.word	0x200002d8

08006a9c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006aac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006aae:	b672      	cpsid	i
}
 8006ab0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	43da      	mvns	r2, r3
 8006ab6:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <UTIL_SEQ_PauseTask+0x3c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4013      	ands	r3, r2
 8006abc:	4a06      	ldr	r2, [pc, #24]	; (8006ad8 <UTIL_SEQ_PauseTask+0x3c>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f383 8810 	msr	PRIMASK, r3
}
 8006aca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006acc:	bf00      	nop
}
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	20000020 	.word	0x20000020

08006adc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006aec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006aee:	b672      	cpsid	i
}
 8006af0:	bf00      	nop

  TaskMask |= TaskId_bm;
 8006af2:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <UTIL_SEQ_ResumeTask+0x3c>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	4a07      	ldr	r2, [pc, #28]	; (8006b18 <UTIL_SEQ_ResumeTask+0x3c>)
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f383 8810 	msr	PRIMASK, r3
}
 8006b08:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006b0a:	bf00      	nop
}
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20000020 	.word	0x20000020

08006b1c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b24:	f3ef 8310 	mrs	r3, PRIMASK
 8006b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006b2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b2e:	b672      	cpsid	i
}
 8006b30:	bf00      	nop

  EvtSet |= EvtId_bm;
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <UTIL_SEQ_SetEvt+0x3c>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	4a07      	ldr	r2, [pc, #28]	; (8006b58 <UTIL_SEQ_SetEvt+0x3c>)
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f383 8810 	msr	PRIMASK, r3
}
 8006b48:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006b4a:	bf00      	nop
}
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	2000024c 	.word	0x2000024c

08006b5c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8006b64:	4b21      	ldr	r3, [pc, #132]	; (8006bec <UTIL_SEQ_WaitEvt+0x90>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8006b6a:	4b20      	ldr	r3, [pc, #128]	; (8006bec <UTIL_SEQ_WaitEvt+0x90>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b72:	d102      	bne.n	8006b7a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	e005      	b.n	8006b86 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8006b7a:	4b1c      	ldr	r3, [pc, #112]	; (8006bec <UTIL_SEQ_WaitEvt+0x90>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x94>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8006b8c:	4a18      	ldr	r2, [pc, #96]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x94>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8006b92:	e005      	b.n	8006ba0 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8006b94:	4b16      	ldr	r3, [pc, #88]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x94>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	69f8      	ldr	r0, [r7, #28]
 8006b9c:	f7f9 fdee 	bl	800077c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8006ba0:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x98>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x94>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f2      	beq.n	8006b94 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8006bae:	4a0f      	ldr	r2, [pc, #60]	; (8006bec <UTIL_SEQ_WaitEvt+0x90>)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bba:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bbe:	b672      	cpsid	i
}
 8006bc0:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x94>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	43da      	mvns	r2, r3
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x98>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <UTIL_SEQ_WaitEvt+0x98>)
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f383 8810 	msr	PRIMASK, r3
}
 8006bdc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8006bde:	4a04      	ldr	r2, [pc, #16]	; (8006bf0 <UTIL_SEQ_WaitEvt+0x94>)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	6013      	str	r3, [r2, #0]

  return;
 8006be4:	bf00      	nop
}
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000254 	.word	0x20000254
 8006bf0:	20000250 	.word	0x20000250
 8006bf4:	2000024c 	.word	0x2000024c

08006bf8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006bfc:	bf00      	nop
}
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8006c06:	b480      	push	{r7}
 8006c08:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006c0a:	bf00      	nop
}
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	041b      	lsls	r3, r3, #16
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <SEQ_BitPosition+0x20>
 8006c2a:	2310      	movs	r3, #16
 8006c2c:	73fb      	strb	r3, [r7, #15]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	041b      	lsls	r3, r3, #16
 8006c32:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <SEQ_BitPosition+0x36>
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	3308      	adds	r3, #8
 8006c42:	73fb      	strb	r3, [r7, #15]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d105      	bne.n	8006c60 <SEQ_BitPosition+0x4c>
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	3304      	adds	r3, #4
 8006c58:	73fb      	strb	r3, [r7, #15]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0f1b      	lsrs	r3, r3, #28
 8006c64:	4a07      	ldr	r2, [pc, #28]	; (8006c84 <SEQ_BitPosition+0x70>)
 8006c66:	5cd2      	ldrb	r2, [r2, r3]
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	f1c3 031f 	rsb	r3, r3, #31
 8006c74:	b2db      	uxtb	r3, r3
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	08006f78 	.word	0x08006f78

08006c88 <__libc_init_array>:
 8006c88:	b570      	push	{r4, r5, r6, lr}
 8006c8a:	4d0d      	ldr	r5, [pc, #52]	; (8006cc0 <__libc_init_array+0x38>)
 8006c8c:	4c0d      	ldr	r4, [pc, #52]	; (8006cc4 <__libc_init_array+0x3c>)
 8006c8e:	1b64      	subs	r4, r4, r5
 8006c90:	10a4      	asrs	r4, r4, #2
 8006c92:	2600      	movs	r6, #0
 8006c94:	42a6      	cmp	r6, r4
 8006c96:	d109      	bne.n	8006cac <__libc_init_array+0x24>
 8006c98:	4d0b      	ldr	r5, [pc, #44]	; (8006cc8 <__libc_init_array+0x40>)
 8006c9a:	4c0c      	ldr	r4, [pc, #48]	; (8006ccc <__libc_init_array+0x44>)
 8006c9c:	f000 f82e 	bl	8006cfc <_init>
 8006ca0:	1b64      	subs	r4, r4, r5
 8006ca2:	10a4      	asrs	r4, r4, #2
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	42a6      	cmp	r6, r4
 8006ca8:	d105      	bne.n	8006cb6 <__libc_init_array+0x2e>
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb0:	4798      	blx	r3
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	e7ee      	b.n	8006c94 <__libc_init_array+0xc>
 8006cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cba:	4798      	blx	r3
 8006cbc:	3601      	adds	r6, #1
 8006cbe:	e7f2      	b.n	8006ca6 <__libc_init_array+0x1e>
 8006cc0:	08006f88 	.word	0x08006f88
 8006cc4:	08006f88 	.word	0x08006f88
 8006cc8:	08006f88 	.word	0x08006f88
 8006ccc:	08006f8c 	.word	0x08006f8c

08006cd0 <memcpy>:
 8006cd0:	440a      	add	r2, r1
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006cd8:	d100      	bne.n	8006cdc <memcpy+0xc>
 8006cda:	4770      	bx	lr
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce6:	4291      	cmp	r1, r2
 8006ce8:	d1f9      	bne.n	8006cde <memcpy+0xe>
 8006cea:	bd10      	pop	{r4, pc}

08006cec <memset>:
 8006cec:	4402      	add	r2, r0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d100      	bne.n	8006cf6 <memset+0xa>
 8006cf4:	4770      	bx	lr
 8006cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfa:	e7f9      	b.n	8006cf0 <memset+0x4>

08006cfc <_init>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	bf00      	nop
 8006d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d02:	bc08      	pop	{r3}
 8006d04:	469e      	mov	lr, r3
 8006d06:	4770      	bx	lr

08006d08 <_fini>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr
