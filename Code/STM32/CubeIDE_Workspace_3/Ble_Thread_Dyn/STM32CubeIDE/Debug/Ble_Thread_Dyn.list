
Ble_Thread_Dyn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf38  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  0800d078  0800d078  0001d078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800de00  0800de00  0001de00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800de08  0800de08  0001de08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ac  20000008  0800de10  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000b4  0800debc  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 000000a0  20000150  0800df55  00020150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000025  200001f0  0800dff5  000201f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000218  0800e01a  00020218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001688  2000022c  0800e02b  0002022c  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  200018b4  0800e02b  000218b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001c4  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000b93  200301ec  200301ec  00030000  2**2
                  ALLOC
 17 .debug_info   0004b1c6  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007d47  00000000  00000000  0006b41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002848  00000000  00000000  00073168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002590  00000000  00000000  000759b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002ffe9  00000000  00000000  00077f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00031689  00000000  00000000  000a7f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001041bd  00000000  00000000  000d95b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001dd76f  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ae84  00000000  00000000  001dd7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000022c 	.word	0x2000022c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d060 	.word	0x0800d060

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000230 	.word	0x20000230
 800017c:	0800d060 	.word	0x0800d060

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000260:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000264:	f000 b96e 	b.w	8000544 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468c      	mov	ip, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	f040 8083 	bne.w	8000396 <__udivmoddi4+0x116>
 8000290:	428a      	cmp	r2, r1
 8000292:	4617      	mov	r7, r2
 8000294:	d947      	bls.n	8000326 <__udivmoddi4+0xa6>
 8000296:	fab2 f282 	clz	r2, r2
 800029a:	b142      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029c:	f1c2 0020 	rsb	r0, r2, #32
 80002a0:	fa24 f000 	lsr.w	r0, r4, r0
 80002a4:	4091      	lsls	r1, r2
 80002a6:	4097      	lsls	r7, r2
 80002a8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ac:	4094      	lsls	r4, r2
 80002ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fbbc f6f8 	udiv	r6, ip, r8
 80002b8:	fa1f fe87 	uxth.w	lr, r7
 80002bc:	fb08 c116 	mls	r1, r8, r6, ip
 80002c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c4:	fb06 f10e 	mul.w	r1, r6, lr
 80002c8:	4299      	cmp	r1, r3
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x60>
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002d2:	f080 8119 	bcs.w	8000508 <__udivmoddi4+0x288>
 80002d6:	4299      	cmp	r1, r3
 80002d8:	f240 8116 	bls.w	8000508 <__udivmoddi4+0x288>
 80002dc:	3e02      	subs	r6, #2
 80002de:	443b      	add	r3, r7
 80002e0:	1a5b      	subs	r3, r3, r1
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d909      	bls.n	800030c <__udivmoddi4+0x8c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	f080 8105 	bcs.w	800050c <__udivmoddi4+0x28c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f240 8102 	bls.w	800050c <__udivmoddi4+0x28c>
 8000308:	3802      	subs	r0, #2
 800030a:	443c      	add	r4, r7
 800030c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000310:	eba4 040e 	sub.w	r4, r4, lr
 8000314:	2600      	movs	r6, #0
 8000316:	b11d      	cbz	r5, 8000320 <__udivmoddi4+0xa0>
 8000318:	40d4      	lsrs	r4, r2
 800031a:	2300      	movs	r3, #0
 800031c:	e9c5 4300 	strd	r4, r3, [r5]
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xaa>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f282 	clz	r2, r2
 800032e:	2a00      	cmp	r2, #0
 8000330:	d150      	bne.n	80003d4 <__udivmoddi4+0x154>
 8000332:	1bcb      	subs	r3, r1, r7
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	fa1f f887 	uxth.w	r8, r7
 800033c:	2601      	movs	r6, #1
 800033e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000342:	0c21      	lsrs	r1, r4, #16
 8000344:	fb0e 331c 	mls	r3, lr, ip, r3
 8000348:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800034c:	fb08 f30c 	mul.w	r3, r8, ip
 8000350:	428b      	cmp	r3, r1
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0xe4>
 8000354:	1879      	adds	r1, r7, r1
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0xe2>
 800035c:	428b      	cmp	r3, r1
 800035e:	f200 80e9 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 8000362:	4684      	mov	ip, r0
 8000364:	1ac9      	subs	r1, r1, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000370:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x10c>
 800037c:	193c      	adds	r4, r7, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x10a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80d9 	bhi.w	800053c <__udivmoddi4+0x2bc>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e7bf      	b.n	8000316 <__udivmoddi4+0x96>
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x12e>
 800039a:	2d00      	cmp	r5, #0
 800039c:	f000 80b1 	beq.w	8000502 <__udivmoddi4+0x282>
 80003a0:	2600      	movs	r6, #0
 80003a2:	e9c5 0100 	strd	r0, r1, [r5]
 80003a6:	4630      	mov	r0, r6
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f683 	clz	r6, r3
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d14a      	bne.n	800044c <__udivmoddi4+0x1cc>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0x140>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80b8 	bhi.w	8000530 <__udivmoddi4+0x2b0>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0103 	sbc.w	r1, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	468c      	mov	ip, r1
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	d0a8      	beq.n	8000320 <__udivmoddi4+0xa0>
 80003ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80003d2:	e7a5      	b.n	8000320 <__udivmoddi4+0xa0>
 80003d4:	f1c2 0320 	rsb	r3, r2, #32
 80003d8:	fa20 f603 	lsr.w	r6, r0, r3
 80003dc:	4097      	lsls	r7, r2
 80003de:	fa01 f002 	lsl.w	r0, r1, r2
 80003e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e6:	40d9      	lsrs	r1, r3
 80003e8:	4330      	orrs	r0, r6
 80003ea:	0c03      	lsrs	r3, r0, #16
 80003ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80003f0:	fa1f f887 	uxth.w	r8, r7
 80003f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb06 f108 	mul.w	r1, r6, r8
 8000400:	4299      	cmp	r1, r3
 8000402:	fa04 f402 	lsl.w	r4, r4, r2
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x19c>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800040e:	f080 808d 	bcs.w	800052c <__udivmoddi4+0x2ac>
 8000412:	4299      	cmp	r1, r3
 8000414:	f240 808a 	bls.w	800052c <__udivmoddi4+0x2ac>
 8000418:	3e02      	subs	r6, #2
 800041a:	443b      	add	r3, r7
 800041c:	1a5b      	subs	r3, r3, r1
 800041e:	b281      	uxth	r1, r0
 8000420:	fbb3 f0fe 	udiv	r0, r3, lr
 8000424:	fb0e 3310 	mls	r3, lr, r0, r3
 8000428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800042c:	fb00 f308 	mul.w	r3, r0, r8
 8000430:	428b      	cmp	r3, r1
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x1c4>
 8000434:	1879      	adds	r1, r7, r1
 8000436:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800043a:	d273      	bcs.n	8000524 <__udivmoddi4+0x2a4>
 800043c:	428b      	cmp	r3, r1
 800043e:	d971      	bls.n	8000524 <__udivmoddi4+0x2a4>
 8000440:	3802      	subs	r0, #2
 8000442:	4439      	add	r1, r7
 8000444:	1acb      	subs	r3, r1, r3
 8000446:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800044a:	e778      	b.n	800033e <__udivmoddi4+0xbe>
 800044c:	f1c6 0c20 	rsb	ip, r6, #32
 8000450:	fa03 f406 	lsl.w	r4, r3, r6
 8000454:	fa22 f30c 	lsr.w	r3, r2, ip
 8000458:	431c      	orrs	r4, r3
 800045a:	fa20 f70c 	lsr.w	r7, r0, ip
 800045e:	fa01 f306 	lsl.w	r3, r1, r6
 8000462:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000466:	fa21 f10c 	lsr.w	r1, r1, ip
 800046a:	431f      	orrs	r7, r3
 800046c:	0c3b      	lsrs	r3, r7, #16
 800046e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000472:	fa1f f884 	uxth.w	r8, r4
 8000476:	fb0e 1119 	mls	r1, lr, r9, r1
 800047a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800047e:	fb09 fa08 	mul.w	sl, r9, r8
 8000482:	458a      	cmp	sl, r1
 8000484:	fa02 f206 	lsl.w	r2, r2, r6
 8000488:	fa00 f306 	lsl.w	r3, r0, r6
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x220>
 800048e:	1861      	adds	r1, r4, r1
 8000490:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000494:	d248      	bcs.n	8000528 <__udivmoddi4+0x2a8>
 8000496:	458a      	cmp	sl, r1
 8000498:	d946      	bls.n	8000528 <__udivmoddi4+0x2a8>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4421      	add	r1, r4
 80004a0:	eba1 010a 	sub.w	r1, r1, sl
 80004a4:	b2bf      	uxth	r7, r7
 80004a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004b2:	fb00 f808 	mul.w	r8, r0, r8
 80004b6:	45b8      	cmp	r8, r7
 80004b8:	d907      	bls.n	80004ca <__udivmoddi4+0x24a>
 80004ba:	19e7      	adds	r7, r4, r7
 80004bc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004c0:	d22e      	bcs.n	8000520 <__udivmoddi4+0x2a0>
 80004c2:	45b8      	cmp	r8, r7
 80004c4:	d92c      	bls.n	8000520 <__udivmoddi4+0x2a0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4427      	add	r7, r4
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	eba7 0708 	sub.w	r7, r7, r8
 80004d2:	fba0 8902 	umull	r8, r9, r0, r2
 80004d6:	454f      	cmp	r7, r9
 80004d8:	46c6      	mov	lr, r8
 80004da:	4649      	mov	r1, r9
 80004dc:	d31a      	bcc.n	8000514 <__udivmoddi4+0x294>
 80004de:	d017      	beq.n	8000510 <__udivmoddi4+0x290>
 80004e0:	b15d      	cbz	r5, 80004fa <__udivmoddi4+0x27a>
 80004e2:	ebb3 020e 	subs.w	r2, r3, lr
 80004e6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ee:	40f2      	lsrs	r2, r6
 80004f0:	ea4c 0202 	orr.w	r2, ip, r2
 80004f4:	40f7      	lsrs	r7, r6
 80004f6:	e9c5 2700 	strd	r2, r7, [r5]
 80004fa:	2600      	movs	r6, #0
 80004fc:	4631      	mov	r1, r6
 80004fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e70b      	b.n	8000320 <__udivmoddi4+0xa0>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0x60>
 800050c:	4618      	mov	r0, r3
 800050e:	e6fd      	b.n	800030c <__udivmoddi4+0x8c>
 8000510:	4543      	cmp	r3, r8
 8000512:	d2e5      	bcs.n	80004e0 <__udivmoddi4+0x260>
 8000514:	ebb8 0e02 	subs.w	lr, r8, r2
 8000518:	eb69 0104 	sbc.w	r1, r9, r4
 800051c:	3801      	subs	r0, #1
 800051e:	e7df      	b.n	80004e0 <__udivmoddi4+0x260>
 8000520:	4608      	mov	r0, r1
 8000522:	e7d2      	b.n	80004ca <__udivmoddi4+0x24a>
 8000524:	4660      	mov	r0, ip
 8000526:	e78d      	b.n	8000444 <__udivmoddi4+0x1c4>
 8000528:	4681      	mov	r9, r0
 800052a:	e7b9      	b.n	80004a0 <__udivmoddi4+0x220>
 800052c:	4666      	mov	r6, ip
 800052e:	e775      	b.n	800041c <__udivmoddi4+0x19c>
 8000530:	4630      	mov	r0, r6
 8000532:	e74a      	b.n	80003ca <__udivmoddi4+0x14a>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	4439      	add	r1, r7
 800053a:	e713      	b.n	8000364 <__udivmoddi4+0xe4>
 800053c:	3802      	subs	r0, #2
 800053e:	443c      	add	r4, r7
 8000540:	e724      	b.n	800038c <__udivmoddi4+0x10c>
 8000542:	bf00      	nop

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <LL_EXTI_EnableIT_32_63+0x24>)
 8000552:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000556:	4905      	ldr	r1, [pc, #20]	; (800056c <LL_EXTI_EnableIT_32_63+0x24>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	58000800 	.word	0x58000800

08000570 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 800057a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800057e:	4905      	ldr	r1, [pc, #20]	; (8000594 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58000800 	.word	0x58000800

08000598 <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 800059c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80005be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	608b      	str	r3, [r1, #8]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <LL_C2_AHB1_GRP1_EnableClock>:
  * @note  (*) Not supported by all the devices
  * @retval None
  */

__STATIC_INLINE void LL_C2_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005de:	b480      	push	{r7}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB1ENR, Periphs);
 80005e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ea:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80005ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB1ENR, Periphs);
 80005fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005fe:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <LL_C2_AHB1_GRP1_EnableClockSleep>:
  * @note  (*) Not supported by all the devices
  * @retval None
  */

__STATIC_INLINE void LL_C2_AHB1_GRP1_EnableClockSleep(uint32_t Periphs)
{
 8000616:	b480      	push	{r7}
 8000618:	b085      	sub	sp, #20
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB1SMENR, Periphs);
 800061e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000622:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8000626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	f8c1 3168 	str.w	r3, [r1, #360]	; 0x168
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB1SMENR, Periphs);
 8000632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000636:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4013      	ands	r3, r2
 800063e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000640:	68fb      	ldr	r3, [r7, #12]
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <APPE_Init>:

static void displayConcurrentMode(void);

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Configure the system Power Mode */
  SystemPower_Config();
 8000654:	f000 f832 	bl	80006bc <SystemPower_Config>
  
  /* Initialize the TimerServer */
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc);
 8000658:	4909      	ldr	r1, [pc, #36]	; (8000680 <APPE_Init+0x30>)
 800065a:	2000      	movs	r0, #0
 800065c:	f000 fdfe 	bl	800125c <HW_TS_Init>
  
/* USER CODE BEGIN APPE_Init_1 */
  /* initialize debugger module if supported and debug trace if activated */
  Init_Debug();
 8000660:	f000 f81c 	bl	800069c <Init_Debug>

  /* Display Dynamic concurrent mode (BLE and Thread)  */
  displayConcurrentMode();
 8000664:	f000 f80e 	bl	8000684 <displayConcurrentMode>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000668:	2101      	movs	r1, #1
 800066a:	2001      	movs	r0, #1
 800066c:	f00b f87c 	bl	800b768 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000670:	f000 f8f4 	bl	800085c <Led_Init>
  Button_Init();
 8000674:	f000 f902 	bl	800087c <Button_Init>
  
/* USER CODE END APPE_Init_1 */
  /* Initialize all transport layers and start CPU2 which will send back a ready event to CPU1 */
  appe_Tl_Init();
 8000678:	f000 f83c 	bl	80006f4 <appe_Tl_Init>
#if (CFG_HW_EXTPA_ENABLED == 1)
  ExtPA_Init();
#endif

/* USER CODE END APPE_Init_2 */
   return;
 800067c:	bf00      	nop
}
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000438 	.word	0x20000438

08000684 <displayConcurrentMode>:

static void displayConcurrentMode()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    APP_DBG("Dynamic Concurrent Mode BLE/OpenThread starting...");
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <displayConcurrentMode+0x14>)
 800068a:	2101      	movs	r1, #1
 800068c:	2000      	movs	r0, #0
 800068e:	f001 ff1f 	bl	80024d0 <logApplication>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	0800d078 	.word	0x0800d078

0800069c <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80006a0:	f004 f884 	bl	80047ac <HAL_DBGMCU_EnableDBGSleepMode>
  
  /* Enable debugger EXTI lines */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80006a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006a8:	f7ff ff4e 	bl	8000548 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80006ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006b0:	f7ff ff5e 	bl	8000570 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */
  
#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80006b4:	f00a fab0 	bl	800ac18 <DbgTraceInit>
#endif
  
  return;
 80006b8:	bf00      	nop
}
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  // Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock
  // start on HSI automatically
  LL_RCC_HSI_EnableAutoFromStop();
 80006c0:	f7ff ff6a 	bl	8000598 <LL_RCC_HSI_EnableAutoFromStop>
  
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006c8:	f7ff ff75 	bl	80005b6 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80006cc:	f00b f80a 	bl	800b6e4 <UTIL_LPM_Init>
  
  /* Disable low power mode until INIT is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80006d0:	2101      	movs	r1, #1
 80006d2:	2001      	movs	r0, #1
 80006d4:	f00b f848 	bl	800b768 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80006d8:	2101      	movs	r1, #1
 80006da:	2001      	movs	r0, #1
 80006dc:	f00b f814 	bl	800b708 <UTIL_LPM_SetStopMode>
   */
  HAL_PWREx_EnableVddUSB();
#endif

  /* Enable RAM1 (because OT instance.o is located here for Concurrent Mode */
  LL_C2_AHB1_GRP1_EnableClock(LL_C2_AHB1_GRP1_PERIPH_SRAM1);
 80006e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e4:	f7ff ff7b 	bl	80005de <LL_C2_AHB1_GRP1_EnableClock>
  LL_C2_AHB1_GRP1_EnableClockSleep(LL_C2_AHB1_GRP1_PERIPH_SRAM1);
 80006e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ec:	f7ff ff93 	bl	8000616 <LL_C2_AHB1_GRP1_EnableClockSleep>

  return;
 80006f0:	bf00      	nop
}
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80006fa:	f008 fff3 	bl	80096e4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <appe_Tl_Init+0x50>)
 8000700:	2100      	movs	r1, #0
 8000702:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000706:	f00b f949 	bl	800b99c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <appe_Tl_Init+0x54>)
 800070c:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <appe_Tl_Init+0x58>)
 8000710:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <appe_Tl_Init+0x5c>)
 8000718:	f008 feaa 	bl	8009470 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <appe_Tl_Init+0x60>)
 800071e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <appe_Tl_Init+0x64>)
 8000722:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <appe_Tl_Init+0x68>)
 8000726:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000728:	f240 533c 	movw	r3, #1340	; 0x53c
 800072c:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4618      	mov	r0, r3
 8000734:	f009 f990 	bl	8009a58 <TL_MM_Init>

  TL_Enable();
 8000738:	f008 ffce 	bl	80096d8 <TL_Enable>

  return;
 800073c:	bf00      	nop
}
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	080094a9 	.word	0x080094a9
 8000748:	20030728 	.word	0x20030728
 800074c:	08000761 	.word	0x08000761
 8000750:	08000777 	.word	0x08000777
 8000754:	20030940 	.word	0x20030940
 8000758:	20030834 	.word	0x20030834
 800075c:	200301ec 	.word	0x200301ec

08000760 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800076a:	bf00      	nop
}
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b084      	sub	sp, #16
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	330b      	adds	r3, #11
 8000784:	60fb      	str	r3, [r7, #12]
  
  switch(p_sys_event->subevtcode)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000790:	d004      	beq.n	800079c <APPE_SysUserEvtRx+0x26>
 8000792:	f249 2201 	movw	r2, #37377	; 0x9201
 8000796:	4293      	cmp	r3, r2
 8000798:	d003      	beq.n	80007a2 <APPE_SysUserEvtRx+0x2c>
    case SHCI_SUB_EVT_ERROR_NOTIF:
      APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
      break;
      
    default:
      break;
 800079a:	e008      	b.n	80007ae <APPE_SysUserEvtRx+0x38>
      APPE_SysEvtReadyProcessing();
 800079c:	f000 f834 	bl	8000808 <APPE_SysEvtReadyProcessing>
      break;
 80007a0:	e005      	b.n	80007ae <APPE_SysUserEvtRx+0x38>
      APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	789b      	ldrb	r3, [r3, #2]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f806 	bl	80007b8 <APPE_SysEvtError>
      break;
 80007ac:	bf00      	nop
  }
  return;
 80007ae:	bf00      	nop
}
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b7d      	cmp	r3, #125	; 0x7d
 80007c6:	d002      	beq.n	80007ce <APPE_SysEvtError+0x16>
 80007c8:	2b7e      	cmp	r3, #126	; 0x7e
 80007ca:	d006      	beq.n	80007da <APPE_SysEvtError+0x22>
 80007cc:	e00b      	b.n	80007e6 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
    APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <APPE_SysEvtError+0x44>)
 80007d0:	2101      	movs	r1, #1
 80007d2:	2000      	movs	r0, #0
 80007d4:	f001 fe7c 	bl	80024d0 <logApplication>
    break;
 80007d8:	e00c      	b.n	80007f4 <APPE_SysEvtError+0x3c>
    
  case ERR_THREAD_UNKNOWN_CMD:
    APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 80007da:	4a09      	ldr	r2, [pc, #36]	; (8000800 <APPE_SysEvtError+0x48>)
 80007dc:	2101      	movs	r1, #1
 80007de:	2000      	movs	r0, #0
 80007e0:	f001 fe76 	bl	80024d0 <logApplication>
    break;
 80007e4:	e006      	b.n	80007f4 <APPE_SysEvtError+0x3c>
    
  default:
    APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <APPE_SysEvtError+0x4c>)
 80007ea:	2101      	movs	r1, #1
 80007ec:	2000      	movs	r0, #0
 80007ee:	f001 fe6f 	bl	80024d0 <logApplication>
    break;
 80007f2:	bf00      	nop
  }
  return;
 80007f4:	bf00      	nop
}
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800d0ac 	.word	0x0800d0ac
 8000800:	0800d0d0 	.word	0x0800d0d0
 8000804:	0800d0f0 	.word	0x0800d0f0

08000808 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800080c:	f009 f998 	bl	8009b40 <TL_TRACES_Init>
   * APP_THREAD_Init_Dyn_1() : Thread Stack Init until it's ready to be configured (default channel, PID, etc...)
   * APP_BLE_Init_Dyn_2()    : Start ADV
   * APP_THREAD_Init_Dyn_2() : Thread Stack configuration (default channel, PID, etc...) to be able to start scanning
   *                           or joining a Thread Network
   */
  APP_DBG("1- Initialisation of BLE Stack...");
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <APPE_SysEvtReadyProcessing+0x44>)
 8000812:	2101      	movs	r1, #1
 8000814:	2000      	movs	r0, #0
 8000816:	f001 fe5b 	bl	80024d0 <logApplication>
  APP_BLE_Init_Dyn_1();
 800081a:	f001 ff8d 	bl	8002738 <APP_BLE_Init_Dyn_1>
  APP_DBG("2- Initialisation of OpenThread Stack. FW info :");
 800081e:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <APPE_SysEvtReadyProcessing+0x48>)
 8000820:	2101      	movs	r1, #1
 8000822:	2000      	movs	r0, #0
 8000824:	f001 fe54 	bl	80024d0 <logApplication>
  APP_THREAD_Init_Dyn_1();
 8000828:	f002 fb46 	bl	8002eb8 <APP_THREAD_Init_Dyn_1>

  APP_DBG("3- Start BLE ADV...");
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <APPE_SysEvtReadyProcessing+0x4c>)
 800082e:	2101      	movs	r1, #1
 8000830:	2000      	movs	r0, #0
 8000832:	f001 fe4d 	bl	80024d0 <logApplication>
  APP_BLE_Init_Dyn_2();
 8000836:	f001 ffed 	bl	8002814 <APP_BLE_Init_Dyn_2>
  APP_DBG("4- Configure OpenThread (Channel, PANID, IPv6 stack, ...) and Start it...");
 800083a:	4a07      	ldr	r2, [pc, #28]	; (8000858 <APPE_SysEvtReadyProcessing+0x50>)
 800083c:	2101      	movs	r1, #1
 800083e:	2000      	movs	r0, #0
 8000840:	f001 fe46 	bl	80024d0 <logApplication>
  APP_THREAD_Init_Dyn_2();
 8000844:	f002 fb6c 	bl	8002f20 <APP_THREAD_Init_Dyn_2>
  /* Thread stack is initialized, low power mode can be enabled */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
#endif

  return;
 8000848:	bf00      	nop
}
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0800d110 	.word	0x0800d110
 8000850:	0800d134 	.word	0x0800d134
 8000854:	0800d168 	.word	0x0800d168
 8000858:	0800d17c 	.word	0x0800d17c

0800085c <Led_Init>:

static void Led_Init( void )
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000860:	2000      	movs	r0, #0
 8000862:	f003 fe0d 	bl	8004480 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000866:	2001      	movs	r0, #1
 8000868:	f003 fe0a 	bl	8004480 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800086c:	2002      	movs	r0, #2
 800086e:	f003 fe07 	bl	8004480 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000872:	2001      	movs	r0, #1
 8000874:	f003 fe3e 	bl	80044f4 <BSP_LED_On>
#endif

  return;
 8000878:	bf00      	nop
}
 800087a:	bd80      	pop	{r7, pc}

0800087c <Button_Init>:

static void Button_Init( void )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1U)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000880:	2101      	movs	r1, #1
 8000882:	2000      	movs	r0, #0
 8000884:	f003 fe84 	bl	8004590 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000888:	2101      	movs	r1, #1
 800088a:	2001      	movs	r0, #1
 800088c:	f003 fe80 	bl	8004590 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000890:	2101      	movs	r1, #1
 8000892:	2002      	movs	r0, #2
 8000894:	f003 fe7c 	bl	8004590 <BSP_PB_Init>
#endif

  return;
 8000898:	bf00      	nop
}
 800089a:	bd80      	pop	{r7, pc}

0800089c <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80008a0:	bf00      	nop
}
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d003      	beq.n	80008c4 <UTIL_SEQ_EvtIdle+0x18>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	2b08      	cmp	r3, #8
 80008c0:	d00c      	beq.n	80008dc <UTIL_SEQ_EvtIdle+0x30>
 80008c2:	e012      	b.n	80008ea <UTIL_SEQ_EvtIdle+0x3e>
  {
  case EVENT_ACK_FROM_M0_EVT:
    if(g_ot_notification_allowed == 1U)
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <UTIL_SEQ_EvtIdle+0x50>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d103      	bne.n	80008d4 <UTIL_SEQ_EvtIdle+0x28>
    {
      /* Some OT API send M0 to M4 notifications so allow notifications when waiting for OT Cmd response */
      UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80008cc:	2010      	movs	r0, #16
 80008ce:	f00a ff7b 	bl	800b7c8 <UTIL_SEQ_Run>
    else
    {
      /* Does not allow other tasks when waiting for OT Cmd response */
      UTIL_SEQ_Run(0);
    }
    break;
 80008d2:	e00f      	b.n	80008f4 <UTIL_SEQ_EvtIdle+0x48>
      UTIL_SEQ_Run(0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f00a ff77 	bl	800b7c8 <UTIL_SEQ_Run>
    break;
 80008da:	e00b      	b.n	80008f4 <UTIL_SEQ_EvtIdle+0x48>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80008dc:	2008      	movs	r0, #8
 80008de:	f00b f8eb 	bl	800bab8 <UTIL_SEQ_SetEvt>
    /* Run only the task CFG_TASK_MSG_FROM_M0_TO_M4 */
    UTIL_SEQ_Run(TASK_MSG_FROM_M0_TO_M4);
 80008e2:	2010      	movs	r0, #16
 80008e4:	f00a ff70 	bl	800b7c8 <UTIL_SEQ_Run>
    break;
 80008e8:	e004      	b.n	80008f4 <UTIL_SEQ_EvtIdle+0x48>
  default :
    /* default case */
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80008ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ee:	f00a ff6b 	bl	800b7c8 <UTIL_SEQ_Run>
    break;
 80008f2:	bf00      	nop
  }
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000248 	.word	0x20000248

08000900 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000908:	2100      	movs	r1, #0
 800090a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800090e:	f00b f867 	bl	800b9e0 <UTIL_SEQ_SetTask>
  return;
 8000912:	bf00      	nop
}
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8000922:	2001      	movs	r0, #1
 8000924:	f00b f8c8 	bl	800bab8 <UTIL_SEQ_SetEvt>
  return;
 8000928:	bf00      	nop
}
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8000938:	2001      	movs	r0, #1
 800093a:	f00b f8dd 	bl	800baf8 <UTIL_SEQ_WaitEvt>
  return;
 800093e:	bf00      	nop
}
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	330b      	adds	r3, #11
 8000952:	1c99      	adds	r1, r3, #2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7a9b      	ldrb	r3, [r3, #10]
 8000958:	3b02      	subs	r3, #2
 800095a:	461a      	mov	r2, r3
 800095c:	2001      	movs	r0, #1
 800095e:	f00a f981 	bl	800ac64 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f009 f8b4 	bl	8009ad0 <TL_MM_EvtDone>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
#if (CFG_HW_USART1_ENABLED == 1)
  HW_UART_Init(CFG_DEBUG_TRACE_UART);
 8000974:	2000      	movs	r0, #0
 8000976:	f000 ff57 	bl	8001828 <HW_UART_Init>
#endif
  return;
 800097a:	bf00      	nop
}
 800097c:	bd80      	pop	{r7, pc}

0800097e <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	460b      	mov	r3, r1
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800098c:	897a      	ldrh	r2, [r7, #10]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68f9      	ldr	r1, [r7, #12]
 8000992:	2000      	movs	r0, #0
 8000994:	f001 f816 	bl	80019c4 <HW_UART_Transmit_DMA>

  return;
 8000998:	bf00      	nop
}
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_GPIO_EXTI_Callback>:
 * @brief This function manage the Push button action
 * @param  GPIO_Pin : GPIO pin which has been activated
 * @retval None
 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2b10      	cmp	r3, #16
 80009ae:	d006      	beq.n	80009be <HAL_GPIO_EXTI_Callback+0x1e>
 80009b0:	2b10      	cmp	r3, #16
 80009b2:	dc1e      	bgt.n	80009f2 <HAL_GPIO_EXTI_Callback+0x52>
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d00c      	beq.n	80009d2 <HAL_GPIO_EXTI_Callback+0x32>
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d012      	beq.n	80009e2 <HAL_GPIO_EXTI_Callback+0x42>
    APP_DBG("BUTTON 3 PUSHED ! : NO ACTION MAPPED ON SW3");
    APP_BLE_Key_Button3_Action();
    break;

  default:
    break;
 80009bc:	e019      	b.n	80009f2 <HAL_GPIO_EXTI_Callback+0x52>
    APP_DBG("BUTTON 1 PUSHED ! : COAP MESSAGE SENDING");
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <HAL_GPIO_EXTI_Callback+0x5c>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	2000      	movs	r0, #0
 80009c4:	f001 fd84 	bl	80024d0 <logApplication>
    UTIL_SEQ_SetTask(TASK_COAP_MSG_BUTTON,CFG_SCH_PRIO_0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2008      	movs	r0, #8
 80009cc:	f00b f808 	bl	800b9e0 <UTIL_SEQ_SetTask>
    break;
 80009d0:	e010      	b.n	80009f4 <HAL_GPIO_EXTI_Callback+0x54>
    APP_DBG("BUTTON 2 PUSHED ! : BLE BELL TOGGLE");
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x60>)
 80009d4:	2101      	movs	r1, #1
 80009d6:	2000      	movs	r0, #0
 80009d8:	f001 fd7a 	bl	80024d0 <logApplication>
    APP_BLE_Key_Button1_Action();
 80009dc:	f001 fff2 	bl	80029c4 <APP_BLE_Key_Button1_Action>
    break;
 80009e0:	e008      	b.n	80009f4 <HAL_GPIO_EXTI_Callback+0x54>
    APP_DBG("BUTTON 3 PUSHED ! : NO ACTION MAPPED ON SW3");
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x64>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	2000      	movs	r0, #0
 80009e8:	f001 fd72 	bl	80024d0 <logApplication>
    APP_BLE_Key_Button3_Action();
 80009ec:	f001 fff0 	bl	80029d0 <APP_BLE_Key_Button3_Action>
    break;
 80009f0:	e000      	b.n	80009f4 <HAL_GPIO_EXTI_Callback+0x54>
    break;
 80009f2:	bf00      	nop
  }
  return;
 80009f4:	bf00      	nop
}
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	0800d1c8 	.word	0x0800d1c8
 8000a00:	0800d1f4 	.word	0x0800d1f4
 8000a04:	0800d218 	.word	0x0800d218

08000a08 <LL_EXTI_EnableIT_0_31>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a12:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a16:	4905      	ldr	r1, [pc, #20]	; (8000a2c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	58000800 	.word	0x58000800

08000a30 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4904      	ldr	r1, [pc, #16]	; (8000a50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]

}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58000800 	.word	0x58000800

08000a54 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a6a:	e005      	b.n	8000a78 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <ReadRtcSsrValue+0x3c>)
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d1f5      	bne.n	8000a6c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a80:	683b      	ldr	r3, [r7, #0]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40002800 	.word	0x40002800

08000a94 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000aa4:	79ba      	ldrb	r2, [r7, #6]
 8000aa6:	491d      	ldr	r1, [pc, #116]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3315      	adds	r3, #21
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d009      	beq.n	8000ad2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	4916      	ldr	r1, [pc, #88]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3314      	adds	r3, #20
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4911      	ldr	r1, [pc, #68]	; (8000b1c <LinkTimerAfter+0x88>)
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	4413      	add	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	440b      	add	r3, r1
 8000ae0:	3315      	adds	r3, #21
 8000ae2:	7bfa      	ldrb	r2, [r7, #15]
 8000ae4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <LinkTimerAfter+0x88>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	440b      	add	r3, r1
 8000af4:	3314      	adds	r3, #20
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <LinkTimerAfter+0x88>)
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	440b      	add	r3, r1
 8000b08:	3315      	adds	r3, #21
 8000b0a:	79fa      	ldrb	r2, [r7, #7]
 8000b0c:	701a      	strb	r2, [r3, #0]

  return;
 8000b0e:	bf00      	nop
}
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200000b4 	.word	0x200000b4

08000b20 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <LinkTimerBefore+0xb8>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	79ba      	ldrb	r2, [r7, #6]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d032      	beq.n	8000ba2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4927      	ldr	r1, [pc, #156]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3314      	adds	r3, #20
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b50:	7bfa      	ldrb	r2, [r7, #15]
 8000b52:	4922      	ldr	r1, [pc, #136]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3315      	adds	r3, #21
 8000b60:	79fa      	ldrb	r2, [r7, #7]
 8000b62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b68:	4613      	mov	r3, r2
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	440b      	add	r3, r1
 8000b72:	3315      	adds	r3, #21
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	4918      	ldr	r1, [pc, #96]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	440b      	add	r3, r1
 8000b86:	3314      	adds	r3, #20
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	4913      	ldr	r1, [pc, #76]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	3314      	adds	r3, #20
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ba0:	e014      	b.n	8000bcc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	440b      	add	r3, r1
 8000bb0:	3315      	adds	r3, #21
 8000bb2:	79ba      	ldrb	r2, [r7, #6]
 8000bb4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	4908      	ldr	r1, [pc, #32]	; (8000bdc <LinkTimerBefore+0xbc>)
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3314      	adds	r3, #20
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	701a      	strb	r2, [r3, #0]
  return;
 8000bca:	bf00      	nop
}
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000144 	.word	0x20000144
 8000bdc:	200000b4 	.word	0x200000b4

08000be0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bea:	4b4e      	ldr	r3, [pc, #312]	; (8000d24 <linkTimer+0x144>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b06      	cmp	r3, #6
 8000bf2:	d118      	bne.n	8000c26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf4:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <linkTimer+0x144>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <linkTimer+0x148>)
 8000bfc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bfe:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <linkTimer+0x144>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	4949      	ldr	r1, [pc, #292]	; (8000d2c <linkTimer+0x14c>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	3315      	adds	r3, #21
 8000c14:	2206      	movs	r2, #6
 8000c16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <linkTimer+0x150>)
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	81fb      	strh	r3, [r7, #14]
 8000c24:	e078      	b.n	8000d18 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c26:	f000 f909 	bl	8000e3c <ReturnTimeElapsed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	493e      	ldr	r1, [pc, #248]	; (8000d2c <linkTimer+0x14c>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	4419      	add	r1, r3
 8000c46:	4839      	ldr	r0, [pc, #228]	; (8000d2c <linkTimer+0x14c>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4403      	add	r3, r0
 8000c52:	3308      	adds	r3, #8
 8000c54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4934      	ldr	r1, [pc, #208]	; (8000d2c <linkTimer+0x14c>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3308      	adds	r3, #8
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <linkTimer+0x144>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <linkTimer+0x14c>)
 8000c74:	460b      	mov	r3, r1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	440b      	add	r3, r1
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3308      	adds	r3, #8
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d337      	bcc.n	8000cf8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <linkTimer+0x144>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c8e:	7b7a      	ldrb	r2, [r7, #13]
 8000c90:	4926      	ldr	r1, [pc, #152]	; (8000d2c <linkTimer+0x14c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ca2:	e013      	b.n	8000ccc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ca4:	7b7a      	ldrb	r2, [r7, #13]
 8000ca6:	4921      	ldr	r1, [pc, #132]	; (8000d2c <linkTimer+0x14c>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3315      	adds	r3, #21
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000cb8:	7b7a      	ldrb	r2, [r7, #13]
 8000cba:	491c      	ldr	r1, [pc, #112]	; (8000d2c <linkTimer+0x14c>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3315      	adds	r3, #21
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d00b      	beq.n	8000cea <linkTimer+0x10a>
 8000cd2:	7b3a      	ldrb	r2, [r7, #12]
 8000cd4:	4915      	ldr	r1, [pc, #84]	; (8000d2c <linkTimer+0x14c>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	440b      	add	r3, r1
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d2dc      	bcs.n	8000ca4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000cea:	7b7a      	ldrb	r2, [r7, #13]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fecf 	bl	8000a94 <LinkTimerAfter>
 8000cf6:	e00f      	b.n	8000d18 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <linkTimer+0x144>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff0c 	bl	8000b20 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <linkTimer+0x144>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <linkTimer+0x148>)
 8000d10:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <linkTimer+0x144>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000144 	.word	0x20000144
 8000d28:	20000145 	.word	0x20000145
 8000d2c:	200000b4 	.word	0x200000b4
 8000d30:	20000148 	.word	0x20000148

08000d34 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d111      	bne.n	8000d74 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <UnlinkTimer+0xfc>)
 8000d58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <UnlinkTimer+0x100>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	3315      	adds	r3, #21
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <UnlinkTimer+0xf8>)
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e03e      	b.n	8000df2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	492f      	ldr	r1, [pc, #188]	; (8000e34 <UnlinkTimer+0x100>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3314      	adds	r3, #20
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	492a      	ldr	r1, [pc, #168]	; (8000e34 <UnlinkTimer+0x100>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3315      	adds	r3, #21
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d9c:	79f9      	ldrb	r1, [r7, #7]
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4824      	ldr	r0, [pc, #144]	; (8000e34 <UnlinkTimer+0x100>)
 8000da2:	460b      	mov	r3, r1
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	440b      	add	r3, r1
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4403      	add	r3, r0
 8000dac:	3315      	adds	r3, #21
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2d8      	uxtb	r0, r3
 8000db2:	4920      	ldr	r1, [pc, #128]	; (8000e34 <UnlinkTimer+0x100>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3315      	adds	r3, #21
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d013      	beq.n	8000df2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000dca:	79f9      	ldrb	r1, [r7, #7]
 8000dcc:	7bba      	ldrb	r2, [r7, #14]
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <UnlinkTimer+0x100>)
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	440b      	add	r3, r1
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4403      	add	r3, r0
 8000dda:	3314      	adds	r3, #20
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2d8      	uxtb	r0, r3
 8000de0:	4914      	ldr	r1, [pc, #80]	; (8000e34 <UnlinkTimer+0x100>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	3314      	adds	r3, #20
 8000dee:	4602      	mov	r2, r0
 8000df0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	490f      	ldr	r1, [pc, #60]	; (8000e34 <UnlinkTimer+0x100>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	330c      	adds	r3, #12
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <UnlinkTimer+0xf8>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b06      	cmp	r3, #6
 8000e0e:	d107      	bne.n	8000e20 <UnlinkTimer+0xec>
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <UnlinkTimer+0x104>)
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
}
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000144 	.word	0x20000144
 8000e30:	20000145 	.word	0x20000145
 8000e34:	200000b4 	.word	0x200000b4
 8000e38:	20000148 	.word	0x20000148

08000e3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e4a:	d026      	beq.n	8000e9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e4c:	f7ff fe02 	bl	8000a54 <ReadRtcSsrValue>
 8000e50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d805      	bhi.n	8000e68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	e00a      	b.n	8000e7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <ReturnTimeElapsed+0x74>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <ReturnTimeElapsed+0x70>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <ReturnTimeElapsed+0x78>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <ReturnTimeElapsed+0x7c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	40d3      	lsrs	r3, r2
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	b29b      	uxth	r3, r3
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000148 	.word	0x20000148
 8000eb0:	20000252 	.word	0x20000252
 8000eb4:	20000251 	.word	0x20000251
 8000eb8:	20000250 	.word	0x20000250

08000ebc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d108      	bne.n	8000ede <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ecc:	f7ff fdc2 	bl	8000a54 <ReadRtcSsrValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <RestartWakeupCounter+0xa8>)
 8000ed4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f003 fe05 	bl	8004ae6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000edc:	e03e      	b.n	8000f5c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d803      	bhi.n	8000eec <RestartWakeupCounter+0x30>
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <RestartWakeupCounter+0xac>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d002      	beq.n	8000ef2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ef2:	bf00      	nop
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f7      	beq.n	8000ef4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f18:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <RestartWakeupCounter+0xb4>)
 8000f1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f20:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f22:	2003      	movs	r0, #3
 8000f24:	f003 fded 	bl	8004b02 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <RestartWakeupCounter+0xb8>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	4910      	ldr	r1, [pc, #64]	; (8000f74 <RestartWakeupCounter+0xb8>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f38:	f7ff fd8c 	bl	8000a54 <ReadRtcSsrValue>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <RestartWakeupCounter+0xa8>)
 8000f40:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <RestartWakeupCounter+0xb0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f54:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f56:	f3af 8000 	nop.w
  return ;
 8000f5a:	bf00      	nop
}
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000148 	.word	0x20000148
 8000f68:	20000250 	.word	0x20000250
 8000f6c:	2000024c 	.word	0x2000024c
 8000f70:	58000800 	.word	0x58000800
 8000f74:	40002800 	.word	0x40002800

08000f78 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f7e:	4b47      	ldr	r3, [pc, #284]	; (800109c <RescheduleTimerList+0x124>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8a:	d108      	bne.n	8000f9e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f8c:	bf00      	nop
 8000f8e:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <RescheduleTimerList+0x128>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f7      	bne.n	8000f8e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f9e:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <RescheduleTimerList+0x128>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <RescheduleTimerList+0x128>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fb0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <RescheduleTimerList+0x12c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	493b      	ldr	r1, [pc, #236]	; (80010a8 <RescheduleTimerList+0x130>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000fcc:	f7ff ff36 	bl	8000e3c <ReturnTimeElapsed>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d205      	bcs.n	8000fe8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <RescheduleTimerList+0x134>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e04d      	b.n	8001084 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	4a31      	ldr	r2, [pc, #196]	; (80010b0 <RescheduleTimerList+0x138>)
 8000fec:	8812      	ldrh	r2, [r2, #0]
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d906      	bls.n	8001008 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <RescheduleTimerList+0x138>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <RescheduleTimerList+0x134>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e03d      	b.n	8001084 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	b29a      	uxth	r2, r3
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <RescheduleTimerList+0x134>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001018:	e034      	b.n	8001084 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	4922      	ldr	r1, [pc, #136]	; (80010a8 <RescheduleTimerList+0x130>)
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	3308      	adds	r3, #8
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	429a      	cmp	r2, r3
 8001030:	d20a      	bcs.n	8001048 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	491c      	ldr	r1, [pc, #112]	; (80010a8 <RescheduleTimerList+0x130>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	3308      	adds	r3, #8
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e013      	b.n	8001070 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	4917      	ldr	r1, [pc, #92]	; (80010a8 <RescheduleTimerList+0x130>)
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	3308      	adds	r3, #8
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <RescheduleTimerList+0x130>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4403      	add	r3, r0
 800106c:	3308      	adds	r3, #8
 800106e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <RescheduleTimerList+0x130>)
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	3315      	adds	r3, #21
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b06      	cmp	r3, #6
 8001088:	d1c7      	bne.n	800101a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff15 	bl	8000ebc <RestartWakeupCounter>

  return ;
 8001092:	bf00      	nop
}
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40002800 	.word	0x40002800
 80010a0:	2000024c 	.word	0x2000024c
 80010a4:	20000144 	.word	0x20000144
 80010a8:	200000b4 	.word	0x200000b4
 80010ac:	2000014c 	.word	0x2000014c
 80010b0:	20000254 	.word	0x20000254

080010b4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010ba:	f3ef 8310 	mrs	r3, PRIMASK
 80010be:	617b      	str	r3, [r7, #20]
  return(result);
 80010c0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010c8:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	22ca      	movs	r2, #202	; 0xca
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
 80010d2:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2253      	movs	r2, #83	; 0x53
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80010dc:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	4b58      	ldr	r3, [pc, #352]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ee:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <HW_TS_RTC_Wakeup_Handler+0x198>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010fc:	4954      	ldr	r1, [pc, #336]	; (8001250 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	330c      	adds	r3, #12
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d172      	bne.n	80011f8 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001112:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001116:	494e      	ldr	r1, [pc, #312]	; (8001250 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001126:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800112a:	4949      	ldr	r1, [pc, #292]	; (8001250 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	3310      	adds	r3, #16
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800113c:	4b45      	ldr	r3, [pc, #276]	; (8001254 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d050      	beq.n	80011e8 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001146:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800114a:	4941      	ldr	r1, [pc, #260]	; (8001250 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	330d      	adds	r3, #13
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d126      	bne.n	80011ae <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001164:	2101      	movs	r1, #1
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fde4 	bl	8000d34 <UnlinkTimer>
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	f383 8810 	msr	PRIMASK, r3
}
 8001176:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001178:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800117c:	4934      	ldr	r1, [pc, #208]	; (8001250 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3304      	adds	r3, #4
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fa4e 	bl	8001634 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	22ca      	movs	r2, #202	; 0xca
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2253      	movs	r2, #83	; 0x53
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
 80011ac:	e014      	b.n	80011d8 <HW_TS_RTC_Wakeup_Handler+0x124>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f383 8810 	msr	PRIMASK, r3
}
 80011b8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80011ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f9ac 	bl	800151c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	22ca      	movs	r2, #202	; 0xca
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2253      	movs	r2, #83	; 0x53
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80011d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	4619      	mov	r1, r3
 80011e0:	69b8      	ldr	r0, [r7, #24]
 80011e2:	f000 faaf 	bl	8001744 <HW_TS_RTC_Int_AppNot>
 80011e6:	e025      	b.n	8001234 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 80011e8:	f7ff fec6 	bl	8000f78 <RescheduleTimerList>
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f383 8810 	msr	PRIMASK, r3
}
 80011f6:	e01d      	b.n	8001234 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011f8:	bf00      	nop
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f7      	beq.n	80011fa <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800121e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001222:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f383 8810 	msr	PRIMASK, r3
}
 8001232:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	22ff      	movs	r2, #255	; 0xff
 800123c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800123e:	bf00      	nop
}
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000024c 	.word	0x2000024c
 800124c:	20000144 	.word	0x20000144
 8001250:	200000b4 	.word	0x200000b4
 8001254:	2000014c 	.word	0x2000014c
 8001258:	58000800 	.word	0x58000800

0800125c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001268:	4a64      	ldr	r2, [pc, #400]	; (80013fc <HW_TS_Init+0x1a0>)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <HW_TS_Init+0x1a0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	22ca      	movs	r2, #202	; 0xca
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
 8001278:	4b60      	ldr	r3, [pc, #384]	; (80013fc <HW_TS_Init+0x1a0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2253      	movs	r2, #83	; 0x53
 8001280:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <HW_TS_Init+0x1a4>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <HW_TS_Init+0x1a4>)
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800128e:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <HW_TS_Init+0x1a4>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f1c3 0304 	rsb	r3, r3, #4
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b58      	ldr	r3, [pc, #352]	; (8001404 <HW_TS_Init+0x1a8>)
 80012a2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HW_TS_Init+0x1a4>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012ac:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012b0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	fa92 f2a2 	rbit	r2, r2
 80012b8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	d101      	bne.n	80012c8 <HW_TS_Init+0x6c>
  {
    return 32U;
 80012c4:	2220      	movs	r2, #32
 80012c6:	e003      	b.n	80012d0 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	fab2 f282 	clz	r2, r2
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	40d3      	lsrs	r3, r2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <HW_TS_Init+0x1ac>)
 80012da:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012dc:	4b48      	ldr	r3, [pc, #288]	; (8001400 <HW_TS_Init+0x1a4>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3301      	adds	r3, #1
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b47      	ldr	r3, [pc, #284]	; (800140c <HW_TS_Init+0x1b0>)
 80012ee:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <HW_TS_Init+0x1b0>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	4a44      	ldr	r2, [pc, #272]	; (8001408 <HW_TS_Init+0x1ac>)
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	fb02 f303 	mul.w	r3, r2, r3
 80012fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001302:	4a40      	ldr	r2, [pc, #256]	; (8001404 <HW_TS_Init+0x1a8>)
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	40d3      	lsrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001310:	4293      	cmp	r3, r2
 8001312:	d904      	bls.n	800131e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001314:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <HW_TS_Init+0x1b4>)
 8001316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131a:	801a      	strh	r2, [r3, #0]
 800131c:	e003      	b.n	8001326 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HW_TS_Init+0x1b4>)
 8001324:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001326:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800132a:	f7ff fb81 	bl	8000a30 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800132e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001332:	f7ff fb69 	bl	8000a08 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d143      	bne.n	80013c4 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <HW_TS_Init+0x1b8>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HW_TS_Init+0x1bc>)
 8001344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001348:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800134a:	2300      	movs	r3, #0
 800134c:	77fb      	strb	r3, [r7, #31]
 800134e:	e00c      	b.n	800136a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001350:	7ffa      	ldrb	r2, [r7, #31]
 8001352:	4932      	ldr	r1, [pc, #200]	; (800141c <HW_TS_Init+0x1c0>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	330c      	adds	r3, #12
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001364:	7ffb      	ldrb	r3, [r7, #31]
 8001366:	3301      	adds	r3, #1
 8001368:	77fb      	strb	r3, [r7, #31]
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d9ef      	bls.n	8001350 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HW_TS_Init+0x1c4>)
 8001372:	2206      	movs	r2, #6
 8001374:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HW_TS_Init+0x1a0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HW_TS_Init+0x1a0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001388:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HW_TS_Init+0x1a0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HW_TS_Init+0x1a0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800139e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80013a0:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HW_TS_Init+0x1c8>)
 80013a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013a6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f003 fbaa 	bl	8004b02 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HW_TS_Init+0x1a0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HW_TS_Init+0x1a0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	e00a      	b.n	80013da <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HW_TS_Init+0x1a0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f003 fb86 	bl	8004ae6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HW_TS_Init+0x1a0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80013e4:	2200      	movs	r2, #0
 80013e6:	2103      	movs	r1, #3
 80013e8:	2003      	movs	r0, #3
 80013ea:	f003 fb36 	bl	8004a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013ee:	2003      	movs	r0, #3
 80013f0:	f003 fb4d 	bl	8004a8e <HAL_NVIC_EnableIRQ>

  return;
 80013f4:	bf00      	nop
}
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000024c 	.word	0x2000024c
 8001400:	40002800 	.word	0x40002800
 8001404:	20000250 	.word	0x20000250
 8001408:	20000251 	.word	0x20000251
 800140c:	20000252 	.word	0x20000252
 8001410:	20000254 	.word	0x20000254
 8001414:	2000014c 	.word	0x2000014c
 8001418:	20000148 	.word	0x20000148
 800141c:	200000b4 	.word	0x200000b4
 8001420:	20000144 	.word	0x20000144
 8001424:	58000800 	.word	0x58000800

08001428 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001428:	b480      	push	{r7}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800143e:	f3ef 8310 	mrs	r3, PRIMASK
 8001442:	61fb      	str	r3, [r7, #28]
  return(result);
 8001444:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001446:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800144c:	e004      	b.n	8001458 <HW_TS_Create+0x30>
  {
    loop++;
 800144e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001452:	3301      	adds	r3, #1
 8001454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800145c:	2b05      	cmp	r3, #5
 800145e:	d80c      	bhi.n	800147a <HW_TS_Create+0x52>
 8001460:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001464:	492c      	ldr	r1, [pc, #176]	; (8001518 <HW_TS_Create+0xf0>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	330c      	adds	r3, #12
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e9      	bne.n	800144e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800147a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147e:	2b06      	cmp	r3, #6
 8001480:	d038      	beq.n	80014f4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001482:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001486:	4924      	ldr	r1, [pc, #144]	; (8001518 <HW_TS_Create+0xf0>)
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	330c      	adds	r3, #12
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f383 8810 	msr	PRIMASK, r3
}
 80014a2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80014a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014a8:	491b      	ldr	r1, [pc, #108]	; (8001518 <HW_TS_Create+0xf0>)
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	3310      	adds	r3, #16
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80014ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014be:	4916      	ldr	r1, [pc, #88]	; (8001518 <HW_TS_Create+0xf0>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	330d      	adds	r3, #13
 80014cc:	79fa      	ldrb	r2, [r7, #7]
 80014ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80014d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014d4:	4910      	ldr	r1, [pc, #64]	; (8001518 <HW_TS_Create+0xf0>)
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80014ea:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014f2:	e008      	b.n	8001506 <HW_TS_Create+0xde>
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f383 8810 	msr	PRIMASK, r3
}
 80014fe:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001500:	2301      	movs	r3, #1
 8001502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800150a:	4618      	mov	r0, r3
 800150c:	372c      	adds	r7, #44	; 0x2c
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200000b4 	.word	0x200000b4

0800151c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001526:	f3ef 8310 	mrs	r3, PRIMASK
 800152a:	60fb      	str	r3, [r7, #12]
  return(result);
 800152c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800152e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001534:	2003      	movs	r0, #3
 8001536:	f003 fab8 	bl	8004aaa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <HW_TS_Stop+0x100>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	22ca      	movs	r2, #202	; 0xca
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <HW_TS_Stop+0x100>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2253      	movs	r2, #83	; 0x53
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	4933      	ldr	r1, [pc, #204]	; (8001620 <HW_TS_Stop+0x104>)
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	330c      	adds	r3, #12
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d148      	bne.n	80015f8 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fbe2 	bl	8000d34 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <HW_TS_Stop+0x108>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001576:	7cfb      	ldrb	r3, [r7, #19]
 8001578:	2b06      	cmp	r3, #6
 800157a:	d135      	bne.n	80015e8 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <HW_TS_Stop+0x10c>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001588:	d108      	bne.n	800159c <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800158a:	bf00      	nop
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <HW_TS_Stop+0x100>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f7      	bne.n	800158c <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <HW_TS_Stop+0x100>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HW_TS_Stop+0x100>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ae:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80015b0:	bf00      	nop
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HW_TS_Stop+0x100>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f7      	beq.n	80015b2 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HW_TS_Stop+0x100>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HW_TS_Stop+0x100>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80015d6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HW_TS_Stop+0x110>)
 80015da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015de:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80015e0:	2003      	movs	r0, #3
 80015e2:	f003 fa8e 	bl	8004b02 <HAL_NVIC_ClearPendingIRQ>
 80015e6:	e007      	b.n	80015f8 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HW_TS_Stop+0x114>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	7cfa      	ldrb	r2, [r7, #19]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80015f4:	f7ff fcc0 	bl	8000f78 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HW_TS_Stop+0x100>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001602:	2003      	movs	r0, #3
 8001604:	f003 fa43 	bl	8004a8e <HAL_NVIC_EnableIRQ>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f383 8810 	msr	PRIMASK, r3
}
 8001612:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001614:	bf00      	nop
}
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000024c 	.word	0x2000024c
 8001620:	200000b4 	.word	0x200000b4
 8001624:	20000144 	.word	0x20000144
 8001628:	40002800 	.word	0x40002800
 800162c:	58000800 	.word	0x58000800
 8001630:	20000145 	.word	0x20000145

08001634 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	493c      	ldr	r1, [pc, #240]	; (8001734 <HW_TS_Start+0x100>)
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	330c      	adds	r3, #12
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d103      	bne.n	8001660 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff5e 	bl	800151c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001660:	f3ef 8310 	mrs	r3, PRIMASK
 8001664:	60fb      	str	r3, [r7, #12]
  return(result);
 8001666:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001668:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800166a:	b672      	cpsid	i
}
 800166c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800166e:	2003      	movs	r0, #3
 8001670:	f003 fa1b 	bl	8004aaa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HW_TS_Start+0x104>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	22ca      	movs	r2, #202	; 0xca
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HW_TS_Start+0x104>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2253      	movs	r2, #83	; 0x53
 8001686:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001688:	79fa      	ldrb	r2, [r7, #7]
 800168a:	492a      	ldr	r1, [pc, #168]	; (8001734 <HW_TS_Start+0x100>)
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	330c      	adds	r3, #12
 8001698:	2202      	movs	r2, #2
 800169a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	4925      	ldr	r1, [pc, #148]	; (8001734 <HW_TS_Start+0x100>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3308      	adds	r3, #8
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	4920      	ldr	r1, [pc, #128]	; (8001734 <HW_TS_Start+0x100>)
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	3304      	adds	r3, #4
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fa8a 	bl	8000be0 <linkTimer>
 80016cc:	4603      	mov	r3, r0
 80016ce:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HW_TS_Start+0x108>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HW_TS_Start+0x10c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	7c7a      	ldrb	r2, [r7, #17]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d002      	beq.n	80016e8 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80016e2:	f7ff fc49 	bl	8000f78 <RescheduleTimerList>
 80016e6:	e013      	b.n	8001710 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80016e8:	79fa      	ldrb	r2, [r7, #7]
 80016ea:	4912      	ldr	r1, [pc, #72]	; (8001734 <HW_TS_Start+0x100>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3308      	adds	r3, #8
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	8a7b      	ldrh	r3, [r7, #18]
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	1ac9      	subs	r1, r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <HW_TS_Start+0x100>)
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4403      	add	r3, r0
 800170c:	3308      	adds	r3, #8
 800170e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HW_TS_Start+0x104>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	22ff      	movs	r2, #255	; 0xff
 8001718:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800171a:	2003      	movs	r0, #3
 800171c:	f003 f9b7 	bl	8004a8e <HAL_NVIC_EnableIRQ>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f383 8810 	msr	PRIMASK, r3
}
 800172a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800172c:	bf00      	nop
}
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200000b4 	.word	0x200000b4
 8001738:	2000024c 	.word	0x2000024c
 800173c:	20000144 	.word	0x20000144
 8001740:	20000145 	.word	0x20000145

08001744 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	460b      	mov	r3, r1
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4798      	blx	r3

  return;
 8001756:	bf00      	nop
}
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <LL_AHB1_GRP1_EnableClock>:
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800176c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4313      	orrs	r3, r2
 8001774:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4013      	ands	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_AHB2_GRP1_EnableClock>:
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800179e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_APB1_GRP2_EnableClock>:
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_APB2_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HW_UART_Init>:
void (*HW_lpuart1RxCb)(void);
void (*HW_lpuart1TxCb)(void);
#endif

void HW_UART_Init(hw_uart_id_t hw_uart_id)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  switch (hw_uart_id)
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <HW_UART_Init+0x16>
 8001838:	2b02      	cmp	r3, #2
 800183a:	d021      	beq.n	8001880 <HW_UART_Init+0x58>
      HW_UART_INIT(lpuart1, LPUART1);
      break;
#endif

    default:
      break;
 800183c:	e041      	b.n	80018c2 <HW_UART_Init+0x9a>
      HW_UART_INIT(huart1, USART1);
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HW_UART_Init+0xa4>)
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <HW_UART_Init+0xa8>)
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HW_UART_Init+0xa4>)
 8001846:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HW_UART_Init+0xa4>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HW_UART_Init+0xa4>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HW_UART_Init+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HW_UART_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HW_UART_Init+0xa4>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HW_UART_Init+0xa4>)
 800186c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001870:	61da      	str	r2, [r3, #28]
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HW_UART_Init+0xa4>)
 8001874:	2200      	movs	r2, #0
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
 8001878:	4814      	ldr	r0, [pc, #80]	; (80018cc <HW_UART_Init+0xa4>)
 800187a:	f004 f899 	bl	80059b0 <HAL_UART_Init>
      break;
 800187e:	e020      	b.n	80018c2 <HW_UART_Init+0x9a>
      HW_UART_INIT(lpuart1, LPUART1);
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HW_UART_Init+0xac>)
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <HW_UART_Init+0xb0>)
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HW_UART_Init+0xac>)
 8001888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HW_UART_Init+0xac>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HW_UART_Init+0xac>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HW_UART_Init+0xac>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HW_UART_Init+0xac>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HW_UART_Init+0xac>)
 80018a8:	220c      	movs	r2, #12
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HW_UART_Init+0xac>)
 80018ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018b2:	61da      	str	r2, [r3, #28]
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HW_UART_Init+0xac>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <HW_UART_Init+0xac>)
 80018bc:	f004 f878 	bl	80059b0 <HAL_UART_Init>
      break;
 80018c0:	bf00      	nop
  }

  return;
 80018c2:	bf00      	nop
}
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000258 	.word	0x20000258
 80018d0:	40013800 	.word	0x40013800
 80018d4:	20000348 	.word	0x20000348
 80018d8:	40008000 	.word	0x40008000

080018dc <HW_UART_Receive_IT>:

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4603      	mov	r3, r0
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	4613      	mov	r3, r2
 80018ec:	81bb      	strh	r3, [r7, #12]
  switch (hw_uart_id)
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HW_UART_Receive_IT+0x1e>
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d00d      	beq.n	8001914 <HW_UART_Receive_IT+0x38>
      HW_UART_RX_IT(lpuart1, LPUART1);
      break;
#endif

    default:
      break;
 80018f8:	e019      	b.n	800192e <HW_UART_Receive_IT+0x52>
      HW_UART_RX_IT(huart1, USART1);
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HW_UART_Receive_IT+0x5c>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HW_UART_Receive_IT+0x60>)
 8001902:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HW_UART_Receive_IT+0x64>)
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	89bb      	ldrh	r3, [r7, #12]
 8001908:	461a      	mov	r2, r3
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <HW_UART_Receive_IT+0x60>)
 800190e:	f004 f947 	bl	8005ba0 <HAL_UART_Receive_IT>
      break;
 8001912:	e00c      	b.n	800192e <HW_UART_Receive_IT+0x52>
      HW_UART_RX_IT(lpuart1, LPUART1);
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HW_UART_Receive_IT+0x68>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HW_UART_Receive_IT+0x6c>)
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HW_UART_Receive_IT+0x70>)
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	461a      	mov	r2, r3
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <HW_UART_Receive_IT+0x6c>)
 8001928:	f004 f93a 	bl	8005ba0 <HAL_UART_Receive_IT>
      break;
 800192c:	bf00      	nop
  }

  return;
 800192e:	bf00      	nop
}
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000187c 	.word	0x2000187c
 800193c:	20000258 	.word	0x20000258
 8001940:	40013800 	.word	0x40013800
 8001944:	20001878 	.word	0x20001878
 8001948:	20000348 	.word	0x20000348
 800194c:	40008000 	.word	0x40008000

08001950 <HW_UART_Transmit_IT>:

void HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	4613      	mov	r3, r2
 8001960:	81bb      	strh	r3, [r7, #12]
  switch (hw_uart_id)
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HW_UART_Transmit_IT+0x1e>
 8001968:	2b02      	cmp	r3, #2
 800196a:	d00d      	beq.n	8001988 <HW_UART_Transmit_IT+0x38>
      HW_UART_TX_IT(lpuart1, LPUART1);
      break;
#endif

    default:
      break;
 800196c:	e019      	b.n	80019a2 <HW_UART_Transmit_IT+0x52>
      HW_UART_TX_IT(huart1, USART1);
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HW_UART_Transmit_IT+0x5c>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HW_UART_Transmit_IT+0x60>)
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HW_UART_Transmit_IT+0x64>)
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	89bb      	ldrh	r3, [r7, #12]
 800197c:	461a      	mov	r2, r3
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	480b      	ldr	r0, [pc, #44]	; (80019b0 <HW_UART_Transmit_IT+0x60>)
 8001982:	f004 f865 	bl	8005a50 <HAL_UART_Transmit_IT>
      break;
 8001986:	e00c      	b.n	80019a2 <HW_UART_Transmit_IT+0x52>
      HW_UART_TX_IT(lpuart1, LPUART1);
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HW_UART_Transmit_IT+0x68>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HW_UART_Transmit_IT+0x6c>)
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HW_UART_Transmit_IT+0x70>)
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	89bb      	ldrh	r3, [r7, #12]
 8001996:	461a      	mov	r2, r3
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <HW_UART_Transmit_IT+0x6c>)
 800199c:	f004 f858 	bl	8005a50 <HAL_UART_Transmit_IT>
      break;
 80019a0:	bf00      	nop
  }

  return;
 80019a2:	bf00      	nop
}
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20001884 	.word	0x20001884
 80019b0:	20000258 	.word	0x20000258
 80019b4:	40013800 	.word	0x40013800
 80019b8:	20001880 	.word	0x20001880
 80019bc:	20000348 	.word	0x20000348
 80019c0:	40008000 	.word	0x40008000

080019c4 <HW_UART_Transmit_DMA>:

  return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	4613      	mov	r3, r2
 80019d4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80019da:	2300      	movs	r3, #0
 80019dc:	75bb      	strb	r3, [r7, #22]

  switch (hw_uart_id)
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HW_UART_Transmit_DMA+0x26>
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d00f      	beq.n	8001a08 <HW_UART_Transmit_DMA+0x44>
      hal_status = HAL_UART_Transmit_DMA(&lpuart1, p_data, size);
      break;
#endif

    default:
      break;
 80019e8:	e01d      	b.n	8001a26 <HW_UART_Transmit_DMA+0x62>
      HW_huart1TxCb = cb;
 80019ea:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <HW_UART_Transmit_DMA+0xa4>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6013      	str	r3, [r2, #0]
      huart1.Instance = USART1;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HW_UART_Transmit_DMA+0xa8>)
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HW_UART_Transmit_DMA+0xac>)
 80019f4:	601a      	str	r2, [r3, #0]
      hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	481b      	ldr	r0, [pc, #108]	; (8001a6c <HW_UART_Transmit_DMA+0xa8>)
 80019fe:	f004 f925 	bl	8005c4c <HAL_UART_Transmit_DMA>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]
      break;
 8001a06:	e00e      	b.n	8001a26 <HW_UART_Transmit_DMA+0x62>
      HW_lpuart1TxCb = cb;
 8001a08:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <HW_UART_Transmit_DMA+0xb0>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
      lpuart1.Instance = LPUART1;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HW_UART_Transmit_DMA+0xb4>)
 8001a10:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <HW_UART_Transmit_DMA+0xb8>)
 8001a12:	601a      	str	r2, [r3, #0]
      hal_status = HAL_UART_Transmit_DMA(&lpuart1, p_data, size);
 8001a14:	89bb      	ldrh	r3, [r7, #12]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	4817      	ldr	r0, [pc, #92]	; (8001a78 <HW_UART_Transmit_DMA+0xb4>)
 8001a1c:	f004 f916 	bl	8005c4c <HAL_UART_Transmit_DMA>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75fb      	strb	r3, [r7, #23]
      break;
 8001a24:	bf00      	nop
  }

  switch (hal_status)
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d817      	bhi.n	8001a5c <HW_UART_Transmit_DMA+0x98>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <HW_UART_Transmit_DMA+0x70>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a4b 	.word	0x08001a4b
 8001a3c:	08001a51 	.word	0x08001a51
 8001a40:	08001a57 	.word	0x08001a57
  {
    case HAL_OK:
      hw_status = hw_uart_ok;
 8001a44:	2300      	movs	r3, #0
 8001a46:	75bb      	strb	r3, [r7, #22]
      break;
 8001a48:	e009      	b.n	8001a5e <HW_UART_Transmit_DMA+0x9a>

    case HAL_ERROR:
      hw_status = hw_uart_error;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75bb      	strb	r3, [r7, #22]
      break;
 8001a4e:	e006      	b.n	8001a5e <HW_UART_Transmit_DMA+0x9a>

    case HAL_BUSY:
      hw_status = hw_uart_busy;
 8001a50:	2302      	movs	r3, #2
 8001a52:	75bb      	strb	r3, [r7, #22]
      break;
 8001a54:	e003      	b.n	8001a5e <HW_UART_Transmit_DMA+0x9a>

    case HAL_TIMEOUT:
      hw_status = hw_uart_to;
 8001a56:	2303      	movs	r3, #3
 8001a58:	75bb      	strb	r3, [r7, #22]
      break;
 8001a5a:	e000      	b.n	8001a5e <HW_UART_Transmit_DMA+0x9a>

    default:
      break;
 8001a5c:	bf00      	nop
  }

  return hw_status;
 8001a5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20001884 	.word	0x20001884
 8001a6c:	20000258 	.word	0x20000258
 8001a70:	40013800 	.word	0x40013800
 8001a74:	20001880 	.word	0x20001880
 8001a78:	20000348 	.word	0x20000348
 8001a7c:	40008000 	.word	0x40008000

08001a80 <HW_UART_Interrupt_Handler>:

void HW_UART_Interrupt_Handler(hw_uart_id_t hw_uart_id)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  switch (hw_uart_id)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HW_UART_Interrupt_Handler+0x16>
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d004      	beq.n	8001a9e <HW_UART_Interrupt_Handler+0x1e>
      HAL_UART_IRQHandler(&lpuart1);
      break;
#endif

    default:
      break;
 8001a94:	e007      	b.n	8001aa6 <HW_UART_Interrupt_Handler+0x26>
      HAL_UART_IRQHandler(&huart1);
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <HW_UART_Interrupt_Handler+0x30>)
 8001a98:	f004 f96a 	bl	8005d70 <HAL_UART_IRQHandler>
      break;
 8001a9c:	e003      	b.n	8001aa6 <HW_UART_Interrupt_Handler+0x26>
      HAL_UART_IRQHandler(&lpuart1);
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <HW_UART_Interrupt_Handler+0x34>)
 8001aa0:	f004 f966 	bl	8005d70 <HAL_UART_IRQHandler>
      break;
 8001aa4:	bf00      	nop
  }

  return;
 8001aa6:	bf00      	nop
}
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000258 	.word	0x20000258
 8001ab4:	20000348 	.word	0x20000348

08001ab8 <HW_UART_DMA_Interrupt_Handler>:

void HW_UART_DMA_Interrupt_Handler(hw_uart_id_t hw_uart_id)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  switch (hw_uart_id)
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HW_UART_DMA_Interrupt_Handler+0x16>
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d006      	beq.n	8001ada <HW_UART_DMA_Interrupt_Handler+0x22>
      HAL_DMA_IRQHandler(lpuart1.hdmatx);
      break;
#endif

    default:
      break;
 8001acc:	e00b      	b.n	8001ae6 <HW_UART_DMA_Interrupt_Handler+0x2e>
      HAL_DMA_IRQHandler(huart1.hdmatx);
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HW_UART_DMA_Interrupt_Handler+0x38>)
 8001ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fa05 	bl	8004ee2 <HAL_DMA_IRQHandler>
      break;
 8001ad8:	e005      	b.n	8001ae6 <HW_UART_DMA_Interrupt_Handler+0x2e>
      HAL_DMA_IRQHandler(lpuart1.hdmatx);
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HW_UART_DMA_Interrupt_Handler+0x3c>)
 8001adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 f9ff 	bl	8004ee2 <HAL_DMA_IRQHandler>
      break;
 8001ae4:	bf00      	nop
  }

  return;
 8001ae6:	bf00      	nop
}
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000258 	.word	0x20000258
 8001af4:	20000348 	.word	0x20000348

08001af8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]

  switch ((uint32_t)huart->Instance)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a7f      	ldr	r2, [pc, #508]	; (8001d14 <HAL_UART_MspInit+0x21c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d07d      	beq.n	8001c16 <HAL_UART_MspInit+0x11e>
 8001b1a:	4a7f      	ldr	r2, [pc, #508]	; (8001d18 <HAL_UART_MspInit+0x220>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	f040 80f4 	bne.w	8001d0a <HAL_UART_MspInit+0x212>
  {
#if (CFG_HW_USART1_ENABLED == 1)
    case (uint32_t)USART1:
      HW_UART_MSP_UART_INIT( huart1, USART1 );
 8001b22:	2002      	movs	r0, #2
 8001b24:	f7ff fe34 	bl	8001790 <LL_AHB2_GRP1_EnableClock>
 8001b28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b2c:	f7ff fe62 	bl	80017f4 <LL_APB2_GRP1_EnableClock>
 8001b30:	2340      	movs	r3, #64	; 0x40
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	2302      	movs	r3, #2
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	2307      	movs	r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4874      	ldr	r0, [pc, #464]	; (8001d1c <HAL_UART_MspInit+0x224>)
 8001b4c:	f003 fb1a 	bl	8005184 <HAL_GPIO_Init>
 8001b50:	2002      	movs	r0, #2
 8001b52:	f7ff fe1d 	bl	8001790 <LL_AHB2_GRP1_EnableClock>
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	2303      	movs	r3, #3
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	2307      	movs	r3, #7
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	486a      	ldr	r0, [pc, #424]	; (8001d1c <HAL_UART_MspInit+0x224>)
 8001b72:	f003 fb07 	bl	8005184 <HAL_GPIO_Init>
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fe0a 	bl	8001790 <LL_AHB2_GRP1_EnableClock>
 8001b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	2302      	movs	r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	2302      	movs	r3, #2
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	2307      	movs	r3, #7
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f003 faf2 	bl	8005184 <HAL_GPIO_Init>
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	2024      	movs	r0, #36	; 0x24
 8001ba6:	f002 ff58 	bl	8004a5a <HAL_NVIC_SetPriority>
 8001baa:	2024      	movs	r0, #36	; 0x24
 8001bac:	f002 ff6f 	bl	8004a8e <HAL_NVIC_EnableIRQ>
#if (CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
      HW_UART_MSP_TX_DMA_INIT( huart1, USART1 );
 8001bb0:	2002      	movs	r0, #2
 8001bb2:	f7ff fdd4 	bl	800175e <LL_AHB1_GRP1_EnableClock>
 8001bb6:	2004      	movs	r0, #4
 8001bb8:	f7ff fdd1 	bl	800175e <LL_AHB1_GRP1_EnableClock>
 8001bbc:	4b58      	ldr	r3, [pc, #352]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bbe:	4a59      	ldr	r2, [pc, #356]	; (8001d24 <HAL_UART_MspInit+0x22c>)
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bca:	2210      	movs	r2, #16
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	4b52      	ldr	r3, [pc, #328]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	4b4f      	ldr	r3, [pc, #316]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
 8001bf2:	484b      	ldr	r0, [pc, #300]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bf4:	f002 ff94 	bl	8004b20 <HAL_DMA_Init>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001bfc:	679a      	str	r2, [r3, #120]	; 0x78
 8001bfe:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_UART_MspInit+0x228>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6293      	str	r3, [r2, #40]	; 0x28
 8001c04:	2200      	movs	r2, #0
 8001c06:	210f      	movs	r1, #15
 8001c08:	203a      	movs	r0, #58	; 0x3a
 8001c0a:	f002 ff26 	bl	8004a5a <HAL_NVIC_SetPriority>
 8001c0e:	203a      	movs	r0, #58	; 0x3a
 8001c10:	f002 ff3d 	bl	8004a8e <HAL_NVIC_EnableIRQ>
#endif
    break;
 8001c14:	e07a      	b.n	8001d0c <HAL_UART_MspInit+0x214>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
    case (uint32_t)LPUART1:
      HW_UART_MSP_UART_INIT( lpuart1, LPUART1 );
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff fdba 	bl	8001790 <LL_AHB2_GRP1_EnableClock>
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff fdd0 	bl	80017c2 <LL_APB1_GRP2_EnableClock>
 8001c22:	2304      	movs	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	2302      	movs	r3, #2
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	2308      	movs	r3, #8
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f003 faa0 	bl	8005184 <HAL_GPIO_Init>
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff fda3 	bl	8001790 <LL_AHB2_GRP1_EnableClock>
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	2302      	movs	r3, #2
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	2303      	movs	r3, #3
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4619      	mov	r1, r3
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f003 fa8c 	bl	8005184 <HAL_GPIO_Init>
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7ff fd8f 	bl	8001790 <LL_AHB2_GRP1_EnableClock>
 8001c72:	2340      	movs	r3, #64	; 0x40
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	2302      	movs	r3, #2
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	2303      	movs	r3, #3
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	2308      	movs	r3, #8
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f003 fa78 	bl	8005184 <HAL_GPIO_Init>
 8001c94:	2200      	movs	r2, #0
 8001c96:	210f      	movs	r1, #15
 8001c98:	2025      	movs	r0, #37	; 0x25
 8001c9a:	f002 fede 	bl	8004a5a <HAL_NVIC_SetPriority>
 8001c9e:	2025      	movs	r0, #37	; 0x25
 8001ca0:	f002 fef5 	bl	8004a8e <HAL_NVIC_EnableIRQ>
#if (CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
      HW_UART_MSP_TX_DMA_INIT( lpuart1, LPUART1 );
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff fd5a 	bl	800175e <LL_AHB1_GRP1_EnableClock>
 8001caa:	2004      	movs	r0, #4
 8001cac:	f7ff fd57 	bl	800175e <LL_AHB1_GRP1_EnableClock>
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_UART_MspInit+0x234>)
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cb8:	2211      	movs	r2, #17
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
 8001ce6:	4810      	ldr	r0, [pc, #64]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001ce8:	f002 ff1a 	bl	8004b20 <HAL_DMA_Init>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cf0:	679a      	str	r2, [r3, #120]	; 0x78
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_UART_MspInit+0x230>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6293      	str	r3, [r2, #40]	; 0x28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	200e      	movs	r0, #14
 8001cfe:	f002 feac 	bl	8004a5a <HAL_NVIC_SetPriority>
 8001d02:	200e      	movs	r0, #14
 8001d04:	f002 fec3 	bl	8004a8e <HAL_NVIC_EnableIRQ>
#endif
    break;
 8001d08:	e000      	b.n	8001d0c <HAL_UART_MspInit+0x214>
#endif

    default:
      break;
 8001d0a:	bf00      	nop
  }

  return;
 8001d0c:	bf00      	nop
}
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40008000 	.word	0x40008000
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	200002e8 	.word	0x200002e8
 8001d24:	40020444 	.word	0x40020444
 8001d28:	200003d8 	.word	0x200003d8
 8001d2c:	40020044 	.word	0x40020044

08001d30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)huart->Instance)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_UART_RxCpltCallback+0x4c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00a      	beq.n	8001d58 <HAL_UART_RxCpltCallback+0x28>
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <HAL_UART_RxCpltCallback+0x50>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d10f      	bne.n	8001d68 <HAL_UART_RxCpltCallback+0x38>
  {
#if (CFG_HW_USART1_ENABLED == 1)
    case (uint32_t)USART1:
      if(HW_huart1RxCb)
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_UART_RxCpltCallback+0x54>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00d      	beq.n	8001d6c <HAL_UART_RxCpltCallback+0x3c>
            {
              HW_huart1RxCb();
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_UART_RxCpltCallback+0x54>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4798      	blx	r3
            }
    break;
 8001d56:	e009      	b.n	8001d6c <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
    case (uint32_t)LPUART1:
      if(HW_lpuart1RxCb)
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_UART_RxCpltCallback+0x58>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_UART_RxCpltCallback+0x40>
            {
              HW_lpuart1RxCb();
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_UART_RxCpltCallback+0x58>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4798      	blx	r3
            }
    break;
 8001d66:	e003      	b.n	8001d70 <HAL_UART_RxCpltCallback+0x40>
#endif

    default:
      break;
 8001d68:	bf00      	nop
 8001d6a:	e002      	b.n	8001d72 <HAL_UART_RxCpltCallback+0x42>
    break;
 8001d6c:	bf00      	nop
 8001d6e:	e000      	b.n	8001d72 <HAL_UART_RxCpltCallback+0x42>
    break;
 8001d70:	bf00      	nop
  }

  return;
 8001d72:	bf00      	nop
}
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40008000 	.word	0x40008000
 8001d80:	40013800 	.word	0x40013800
 8001d84:	2000187c 	.word	0x2000187c
 8001d88:	20001878 	.word	0x20001878

08001d8c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)huart->Instance)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_UART_TxCpltCallback+0x4c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00a      	beq.n	8001db4 <HAL_UART_TxCpltCallback+0x28>
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_UART_TxCpltCallback+0x50>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10f      	bne.n	8001dc4 <HAL_UART_TxCpltCallback+0x38>
  {
#if (CFG_HW_USART1_ENABLED == 1)
    case (uint32_t)USART1:
      if(HW_huart1TxCb)
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_UART_TxCpltCallback+0x54>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <HAL_UART_TxCpltCallback+0x3c>
            {
              HW_huart1TxCb();
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_UART_TxCpltCallback+0x54>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4798      	blx	r3
            }
    break;
 8001db2:	e009      	b.n	8001dc8 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
    case (uint32_t)LPUART1:
      if(HW_lpuart1TxCb)
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_UART_TxCpltCallback+0x58>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_UART_TxCpltCallback+0x40>
            {
              HW_lpuart1TxCb();
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_UART_TxCpltCallback+0x58>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4798      	blx	r3
            }
    break;
 8001dc2:	e003      	b.n	8001dcc <HAL_UART_TxCpltCallback+0x40>
#endif

    default:
      break;
 8001dc4:	bf00      	nop
 8001dc6:	e002      	b.n	8001dce <HAL_UART_TxCpltCallback+0x42>
    break;
 8001dc8:	bf00      	nop
 8001dca:	e000      	b.n	8001dce <HAL_UART_TxCpltCallback+0x42>
    break;
 8001dcc:	bf00      	nop
  }

  return;
 8001dce:	bf00      	nop
}
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40008000 	.word	0x40008000
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	20001884 	.word	0x20001884
 8001de4:	20001880 	.word	0x20001880

08001de8 <LL_EXTI_DisableIT_0_31>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <LL_EXTI_DisableIT_0_31+0x28>)
 8001df2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4905      	ldr	r1, [pc, #20]	; (8001e10 <LL_EXTI_DisableIT_0_31+0x28>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	58000800 	.word	0x58000800

08001e14 <LL_EXTI_DisableIT_32_63>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <LL_EXTI_DisableIT_32_63+0x28>)
 8001e1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4905      	ldr	r1, [pc, #20]	; (8001e3c <LL_EXTI_DisableIT_32_63+0x28>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	58000800 	.word	0x58000800

08001e40 <LL_RCC_LSE_Enable>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_RCC_LSE_IsReady>:
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d101      	bne.n	8001e7a <LL_RCC_LSE_IsReady+0x18>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_RCC_LSE_IsReady+0x1a>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_SetRFWKPClockSource>:
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f58:	d101      	bne.n	8001f5e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f7e:	d101      	bne.n	8001f84 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_AHB3_GRP1_EnableClock>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	041b      	lsls	r3, r3, #16
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	605a      	str	r2, [r3, #4]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	605a      	str	r2, [r3, #4]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	615a      	str	r2, [r3, #20]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	615a      	str	r2, [r3, #20]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	609a      	str	r2, [r3, #8]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <LL_LPM_EnableSleep+0x1c>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <LL_LPM_EnableSleep+0x1c>)
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6113      	str	r3, [r2, #16]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	22ca      	movs	r2, #202	; 0xca
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2253      	movs	r2, #83	; 0x53
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 0207 	bic.w	r2, r3, #7
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main( void )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <main+0x30>)
 800210e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002112:	611a      	str	r2, [r3, #16]

	HAL_Init();
 8002114:	f002 fabc 	bl	8004690 <HAL_Init>

	Reset_Device();
 8002118:	f000 f81c 	bl	8002154 <Reset_Device>

	/**
	 * When the application is expected to run at higher speed, it should be better to set the correct system clock
	 * in system_stm32yyxx.c so that the initialization phase is running at max speed.
	 */
	SystemClock_Config(); /**< Configure the system clock */
 800211c:	f000 f886 	bl	800222c <SystemClock_Config>

  Init_Exti( );
 8002120:	f000 f80c 	bl	800213c <Init_Exti>

  Init_RTC();
 8002124:	f000 f858 	bl	80021d8 <Init_RTC>

  APPE_Init( );
 8002128:	f7fe fa92 	bl	8000650 <APPE_Init>

  while(1)
  {
    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800212c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002130:	f009 fb4a 	bl	800b7c8 <UTIL_SEQ_Run>
 8002134:	e7fa      	b.n	800212c <main+0x24>
 8002136:	bf00      	nop
 8002138:	58004000 	.word	0x58004000

0800213c <Init_Exti>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Exti( void )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except LPUART(25), IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31( (~0) & (~(LL_EXTI_LINE_25)) );
 8002140:	f06f 7000 	mvn.w	r0, #33554432	; 0x2000000
 8002144:	f7ff fe50 	bl	8001de8 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8002148:	f06f 0050 	mvn.w	r0, #80	; 0x50
 800214c:	f7ff fe62 	bl	8001e14 <LL_EXTI_DisableIT_32_63>

  return;
 8002150:	bf00      	nop
}
 8002152:	bd80      	pop	{r7, pc}

08002154 <Reset_Device>:

static void Reset_Device( void )
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8002158:	f000 f826 	bl	80021a8 <Reset_BackupDomain>

	Reset_IPCC();
 800215c:	f000 f802 	bl	8002164 <Reset_IPCC>
#endif

	return;
 8002160:	bf00      	nop
}
 8002162:	bd80      	pop	{r7, pc}

08002164 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8002168:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800216c:	f7ff ff10 	bl	8001f90 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8002170:	213f      	movs	r1, #63	; 0x3f
 8002172:	480c      	ldr	r0, [pc, #48]	; (80021a4 <Reset_IPCC+0x40>)
 8002174:	f7ff ff6b 	bl	800204e <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8002178:	213f      	movs	r1, #63	; 0x3f
 800217a:	480a      	ldr	r0, [pc, #40]	; (80021a4 <Reset_IPCC+0x40>)
 800217c:	f7ff ff75 	bl	800206a <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8002180:	213f      	movs	r1, #63	; 0x3f
 8002182:	4808      	ldr	r0, [pc, #32]	; (80021a4 <Reset_IPCC+0x40>)
 8002184:	f7ff ff1d 	bl	8001fc2 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8002188:	213f      	movs	r1, #63	; 0x3f
 800218a:	4806      	ldr	r0, [pc, #24]	; (80021a4 <Reset_IPCC+0x40>)
 800218c:	f7ff ff3c 	bl	8002008 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8002190:	213f      	movs	r1, #63	; 0x3f
 8002192:	4804      	ldr	r0, [pc, #16]	; (80021a4 <Reset_IPCC+0x40>)
 8002194:	f7ff ff27 	bl	8001fe6 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8002198:	213f      	movs	r1, #63	; 0x3f
 800219a:	4802      	ldr	r0, [pc, #8]	; (80021a4 <Reset_IPCC+0x40>)
 800219c:	f7ff ff46 	bl	800202c <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 80021a0:	bf00      	nop
}
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	58000c00 	.word	0x58000c00

080021a8 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80021ac:	f7ff feca 	bl	8001f44 <LL_RCC_IsActiveFlag_PINRST>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00d      	beq.n	80021d2 <Reset_BackupDomain+0x2a>
 80021b6:	f7ff fed8 	bl	8001f6a <LL_RCC_IsActiveFlag_SFTRST>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d108      	bne.n	80021d2 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80021c0:	f003 f99a 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 80021c4:	f003 f998 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 80021c8:	f7ff fe9a 	bl	8001f00 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 80021cc:	f7ff fea9 	bl	8001f22 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
}
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <Init_RTC>:

static void Init_RTC( void )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80021dc:	f003 f98c 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

  /**
   *  Write twice the value to flush the APB-AHB bridge
   *  This bit shall be written in the register before writing the next one
   */
  HAL_PWR_EnableBkUpAccess();
 80021e0:	f003 f98a 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80021e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021e8:	f7ff fe63 	bl	8001eb2 <LL_RCC_SetRTCClockSource>

  __HAL_RCC_RTC_ENABLE(); /**< Enable RTC */
 80021ec:	f7ff fe77 	bl	8001ede <LL_RCC_EnableRTC>

  hrtc.Instance = RTC; /**< Define instance */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <Init_RTC+0x4c>)
 80021f2:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <Init_RTC+0x50>)
 80021f4:	601a      	str	r2, [r3, #0]

  /**
   * Set the Asynchronous prescaler
   */
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <Init_RTC+0x4c>)
 80021f8:	220f      	movs	r2, #15
 80021fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <Init_RTC+0x4c>)
 80021fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002202:	60da      	str	r2, [r3, #12]
  HAL_RTC_Init(&hrtc);
 8002204:	4807      	ldr	r0, [pc, #28]	; (8002224 <Init_RTC+0x4c>)
 8002206:	f003 fabb 	bl	8005780 <HAL_RTC_Init>

  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800220a:	4807      	ldr	r0, [pc, #28]	; (8002228 <Init_RTC+0x50>)
 800220c:	f7ff ff59 	bl	80020c2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002210:	2100      	movs	r1, #0
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <Init_RTC+0x50>)
 8002214:	f7ff ff65 	bl	80020e2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <Init_RTC+0x50>)
 800221a:	f7ff ff45 	bl	80020a8 <LL_RTC_EnableWriteProtection>

  return;
 800221e:	bf00      	nop
}
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000438 	.word	0x20000438
 8002228:	40002800 	.word	0x40002800

0800222c <SystemClock_Config>:
 *
 * @param  None
 * @retval None
 */
void SystemClock_Config( void )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
#endif

        /**
         *  Write twice the value to flush the APB-AHB bridge to ensure the  bit is written
         */
        HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002230:	f003 f962 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>
        HAL_PWR_EnableBkUpAccess();
 8002234:	f003 f960 	bl	80054f8 <HAL_PWR_EnableBkUpAccess>

	/**
	 * Select LSE clock
	 */
	LL_RCC_LSE_Enable();
 8002238:	f7ff fe02 	bl	8001e40 <LL_RCC_LSE_Enable>
	while(!LL_RCC_LSE_IsReady());
 800223c:	bf00      	nop
 800223e:	f7ff fe10 	bl	8001e62 <LL_RCC_LSE_IsReady>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0fa      	beq.n	800223e <SystemClock_Config+0x12>

	/**
	 * Select wakeup source of BLE RF
	 */
	LL_RCC_SetRFWKPClockSource(LL_RCC_RFWKP_CLKSOURCE_LSE);
 8002248:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800224c:	f7ff fe1b 	bl	8001e86 <LL_RCC_SetRFWKPClockSource>

	return;
 8002250:	bf00      	nop
}
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f002 fa8e 	bl	800477c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800226c:	d00a      	beq.n	8002284 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800226e:	f002 fa91 	bl	8004794 <HAL_GetTickFreq>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4413      	add	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800227c:	e002      	b.n	8002284 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800227e:	f7ff ff03 	bl	8002088 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8002282:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002284:	f002 fa7a 	bl	800477c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f4      	bhi.n	800227e <HAL_Delay+0x2a>
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <HardFault_Handler+0x4>

080022b2 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80022e0:	f002 fa38 	bl	8004754 <HAL_IncTick>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <IPCC_C1_TX_IRQHandler>:

 void IPCC_C1_TX_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80022ec:	f001 fe2a 	bl	8003f44 <HW_IPCC_Tx_Handler>

  return;
 80022f0:	bf00      	nop
}
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80022f8:	f001 fdca 	bl	8003e90 <HW_IPCC_Rx_Handler>
  return;
 80022fc:	bf00      	nop
}
 80022fe:	bd80      	pop	{r7, pc}

08002300 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002304:	2010      	movs	r0, #16
 8002306:	f003 f8df 	bl	80054c8 <HAL_GPIO_EXTI_IRQHandler>
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}

0800230e <EXTI0_IRQHandler>:

void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002312:	2001      	movs	r0, #1
 8002314:	f003 f8d8 	bl	80054c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <EXTI1_IRQHandler>:

void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002320:	2002      	movs	r0, #2
 8002322:	f003 f8d1 	bl	80054c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}

0800232a <USART1_IRQHandler>:

#if(CFG_HW_USART1_ENABLED == 1)
void USART1_IRQHandler(void)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	af00      	add	r7, sp, #0
  HW_UART_Interrupt_Handler(hw_uart1);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff fba6 	bl	8001a80 <HW_UART_Interrupt_Handler>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <DMA2_Channel4_IRQHandler>:
#endif

#if(CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
void CFG_HW_USART1_DMA_TX_IRQHandler( void )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  HW_UART_DMA_Interrupt_Handler(hw_uart1);
 800233c:	2000      	movs	r0, #0
 800233e:	f7ff fbbb 	bl	8001ab8 <HW_UART_DMA_Interrupt_Handler>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}

08002346 <LPUART1_IRQHandler>:
#endif

#if(CFG_HW_LPUART1_ENABLED == 1)
void LPUART1_IRQHandler(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  HW_UART_Interrupt_Handler(hw_lpuart1);
 800234a:	2002      	movs	r0, #2
 800234c:	f7ff fb98 	bl	8001a80 <HW_UART_Interrupt_Handler>
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}

08002354 <DMA1_Channel4_IRQHandler>:
#endif

#if(CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
void CFG_HW_LPUART1_DMA_TX_IRQHandler( void )
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  HW_UART_DMA_Interrupt_Handler(hw_lpuart1);
 8002358:	2002      	movs	r0, #2
 800235a:	f7ff fbad 	bl	8001ab8 <HW_UART_DMA_Interrupt_Handler>
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}

08002362 <RTC_WKUP_IRQHandler>:
 * @brief  This function handles RTC Auto wake-up interrupt request.
 * @param  None
 * @retval None
 */
void RTC_WKUP_IRQHandler(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002366:	f7fe fea5 	bl	80010b4 <HW_TS_RTC_Wakeup_Handler>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	3b01      	subs	r3, #1
 8002384:	2b04      	cmp	r3, #4
 8002386:	d83e      	bhi.n	8002406 <logRegion+0x96>
 8002388:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <logRegion+0x20>)
 800238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238e:	bf00      	nop
 8002390:	080023a5 	.word	0x080023a5
 8002394:	080023b9 	.word	0x080023b9
 8002398:	080023cd 	.word	0x080023cd
 800239c:	080023df 	.word	0x080023df
 80023a0:	080023f3 	.word	0x080023f3
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	4a22      	ldr	r2, [pc, #136]	; (8002434 <logRegion+0xc4>)
 80023aa:	461c      	mov	r4, r3
 80023ac:	4615      	mov	r5, r2
 80023ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b2:	682b      	ldr	r3, [r5, #0]
 80023b4:	7023      	strb	r3, [r4, #0]
      break;
 80023b6:	e02f      	b.n	8002418 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <logRegion+0xc8>)
 80023be:	461c      	mov	r4, r3
 80023c0:	4615      	mov	r5, r2
 80023c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c6:	682b      	ldr	r3, [r5, #0]
 80023c8:	6023      	str	r3, [r4, #0]
      break;
 80023ca:	e025      	b.n	8002418 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 80023cc:	f107 0308 	add.w	r3, r7, #8
 80023d0:	4a1a      	ldr	r2, [pc, #104]	; (800243c <logRegion+0xcc>)
 80023d2:	461c      	mov	r4, r3
 80023d4:	4613      	mov	r3, r2
 80023d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d8:	c407      	stmia	r4!, {r0, r1, r2}
 80023da:	8023      	strh	r3, [r4, #0]
      break;
 80023dc:	e01c      	b.n	8002418 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 80023de:	f107 0308 	add.w	r3, r7, #8
 80023e2:	4a17      	ldr	r2, [pc, #92]	; (8002440 <logRegion+0xd0>)
 80023e4:	461c      	mov	r4, r3
 80023e6:	4615      	mov	r5, r2
 80023e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	8023      	strh	r3, [r4, #0]
      break;
 80023f0:	e012      	b.n	8002418 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <logRegion+0xd4>)
 80023f8:	461c      	mov	r4, r3
 80023fa:	4615      	mov	r5, r2
 80023fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	7023      	strb	r3, [r4, #0]
      break;
 8002404:	e008      	b.n	8002418 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <logRegion+0xd8>)
 800240c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002410:	6018      	str	r0, [r3, #0]
 8002412:	3304      	adds	r3, #4
 8002414:	7019      	strb	r1, [r3, #0]
      break;
 8002416:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8002418:	8879      	ldrh	r1, [r7, #2]
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <logRegion+0xdc>)
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f009 fccd 	bl	800bdc0 <sniprintf>
 8002426:	4603      	mov	r3, r0
 8002428:	b29b      	uxth	r3, r3
}
 800242a:	4618      	mov	r0, r3
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bdb0      	pop	{r4, r5, r7, pc}
 8002432:	bf00      	nop
 8002434:	0800d244 	.word	0x0800d244
 8002438:	0800d258 	.word	0x0800d258
 800243c:	0800d26c 	.word	0x0800d26c
 8002440:	0800d27c 	.word	0x0800d27c
 8002444:	0800d290 	.word	0x0800d290
 8002448:	0800d2a4 	.word	0x0800d2a4
 800244c:	0800d2ac 	.word	0x0800d2ac

08002450 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d00a      	beq.n	8002476 <levelToString+0x26>
 8002460:	2b03      	cmp	r3, #3
 8002462:	dc0a      	bgt.n	800247a <levelToString+0x2a>
 8002464:	2b01      	cmp	r3, #1
 8002466:	d002      	beq.n	800246e <levelToString+0x1e>
 8002468:	2b02      	cmp	r3, #2
 800246a:	d002      	beq.n	8002472 <levelToString+0x22>
 800246c:	e005      	b.n	800247a <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <levelToString+0x38>)
 8002470:	e004      	b.n	800247c <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <levelToString+0x3c>)
 8002474:	e002      	b.n	800247c <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <levelToString+0x40>)
 8002478:	e000      	b.n	800247c <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <levelToString+0x44>)
  }
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	0800d2b0 	.word	0x0800d2b0
 800248c:	0800d2b8 	.word	0x0800d2b8
 8002490:	0800d2c0 	.word	0x0800d2c0
 8002494:	0800d2c8 	.word	0x0800d2c8

08002498 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 80024a8:	887c      	ldrh	r4, [r7, #2]
 80024aa:	787b      	ldrb	r3, [r7, #1]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ffcf 	bl	8002450 <levelToString>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a05      	ldr	r2, [pc, #20]	; (80024cc <logLevel+0x34>)
 80024b6:	4621      	mov	r1, r4
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f009 fc81 	bl	800bdc0 <sniprintf>
 80024be:	4603      	mov	r3, r0
 80024c0:	b29b      	uxth	r3, r3
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	0800d2d0 	.word	0x0800d2d0

080024d0 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80024d0:	b40c      	push	{r2, r3}
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b0c4      	sub	sp, #272	; 0x110
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4602      	mov	r2, r0
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	1dbb      	adds	r3, r7, #6
 80024e0:	460a      	mov	r2, r1
 80024e2:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80024ea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80024ee:	f107 020c 	add.w	r2, r7, #12
 80024f2:	18d0      	adds	r0, r2, r3
 80024f4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80024f8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80024fc:	b299      	uxth	r1, r3
 80024fe:	1dfb      	adds	r3, r7, #7
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f7ff ffc8 	bl	8002498 <logLevel>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002510:	4413      	add	r3, r2
 8002512:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8002516:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800251a:	f107 020c 	add.w	r2, r7, #12
 800251e:	18d0      	adds	r0, r2, r3
 8002520:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002524:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002528:	b299      	uxth	r1, r3
 800252a:	1dbb      	adds	r3, r7, #6
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	f7ff ff1e 	bl	8002370 <logRegion>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800253c:	4413      	add	r3, r2
 800253e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8002542:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002546:	f107 0308 	add.w	r3, r7, #8
 800254a:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800254c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002550:	f107 020c 	add.w	r2, r7, #12
 8002554:	18d0      	adds	r0, r2, r3
 8002556:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800255a:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002568:	f009 fc8a 	bl	800be80 <vsniprintf>
 800256c:	4603      	mov	r3, r0
 800256e:	b29a      	uxth	r2, r3
 8002570:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002574:	4413      	add	r3, r2
 8002576:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 800257a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002584:	461a      	mov	r2, r3
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	210d      	movs	r1, #13
 800258c:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 800258e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8002598:	461a      	mov	r2, r3
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	210a      	movs	r1, #10
 80025a0:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 80025a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 80025ac:	461a      	mov	r2, r3
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d805      	bhi.n	80025ca <logApplication+0xfa>
  {
    printf("%s", logString);
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <logApplication+0x10c>)
 80025c6:	f009 fb6d 	bl	800bca4 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80025ca:	bf00      	nop
 80025cc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80025d0:	46bd      	mov	sp, r7
 80025d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025d6:	b002      	add	sp, #8
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	0800d2d0 	.word	0x0800d2d0

080025e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e00a      	b.n	8002608 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025f2:	f3af 8000 	nop.w
 80025f6:	4601      	mov	r1, r0
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	60ba      	str	r2, [r7, #8]
 80025fe:	b2ca      	uxtb	r2, r1
 8002600:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3301      	adds	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbf0      	blt.n	80025f2 <_read+0x12>
	}

return len;
 8002610:	687b      	ldr	r3, [r7, #4]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_close>:
	}
	return len;
}

int _close(int file)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
	return -1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002642:	605a      	str	r2, [r3, #4]
	return 0;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_isatty>:

int _isatty(int file)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
	return 1;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
	return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <_sbrk+0x5c>)
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <_sbrk+0x60>)
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <_sbrk+0x64>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <_sbrk+0x64>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <_sbrk+0x68>)
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <_sbrk+0x64>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d207      	bcs.n	80026c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b4:	f009 fab6 	bl	800bc24 <__errno>
 80026b8:	4603      	mov	r3, r0
 80026ba:	220c      	movs	r2, #12
 80026bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c2:	e009      	b.n	80026d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <_sbrk+0x64>)
 80026d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20030000 	.word	0x20030000
 80026e4:	00001000 	.word	0x00001000
 80026e8:	2000045c 	.word	0x2000045c
 80026ec:	200018b8 	.word	0x200018b8

080026f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <LL_FLASH_GetUDN+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	1fff7580 	.word	0x1fff7580

08002708 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <LL_FLASH_GetDeviceID+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b2db      	uxtb	r3, r3
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	1fff7584 	.word	0x1fff7584

08002720 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <LL_FLASH_GetSTCompanyID+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0a1b      	lsrs	r3, r3, #8
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	1fff7584 	.word	0x1fff7584

08002738 <APP_BLE_Init_Dyn_1>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init_Dyn_1( void )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08e      	sub	sp, #56	; 0x38
 800273c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	2231      	movs	r2, #49	; 0x31
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f009 faa5 	bl	800bc94 <memset>
 800274a:	2344      	movs	r3, #68	; 0x44
 800274c:	833b      	strh	r3, [r7, #24]
 800274e:	2308      	movs	r3, #8
 8002750:	837b      	strh	r3, [r7, #26]
 8002752:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 8002756:	83bb      	strh	r3, [r7, #28]
 8002758:	2308      	movs	r3, #8
 800275a:	77bb      	strb	r3, [r7, #30]
 800275c:	2301      	movs	r3, #1
 800275e:	77fb      	strb	r3, [r7, #31]
 8002760:	2312      	movs	r3, #18
 8002762:	f887 3020 	strb.w	r3, [r7, #32]
 8002766:	2351      	movs	r3, #81	; 0x51
 8002768:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800276c:	239c      	movs	r3, #156	; 0x9c
 800276e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002770:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002774:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
 800277c:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8002780:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002782:	2301      	movs	r3, #1
 8002784:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002788:	2320      	movs	r3, #32
 800278a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800278e:	f000 f927 	bl	80029e0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002792:	2101      	movs	r1, #1
 8002794:	2002      	movs	r0, #2
 8002796:	f008 ffe7 	bl	800b768 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800279a:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <APP_BLE_Init_Dyn_1+0xc0>)
 800279c:	2100      	movs	r1, #0
 800279e:	2004      	movs	r0, #4
 80027a0:	f009 f8fc 	bl	800b99c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4618      	mov	r0, r3
 80027a8:	f006 fbbd 	bl	8008f26 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80027ac:	f000 f92e 	bl	8002a0c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80027b0:	f005 fc1a 	bl	8007fe8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <APP_BLE_Init_Dyn_1+0xc4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <APP_BLE_Init_Dyn_1+0xc4>)
 80027be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c2:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <APP_BLE_Init_Dyn_1+0xc8>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	2001      	movs	r0, #1
 80027ca:	f009 f8e7 	bl	800b99c <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 80027ce:	2006      	movs	r0, #6
 80027d0:	f006 fab4 	bl	8008d3c <aci_hal_set_radio_activity_mask>
#endif  
  
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0; 
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <APP_BLE_Init_Dyn_1+0xcc>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
  mutex = 1; 
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <APP_BLE_Init_Dyn_1+0xd0>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 80027e0:	f001 f9e0 	bl	8003ba4 <P2PS_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
#endif
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <APP_BLE_Init_Dyn_1+0xd4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	4909      	ldr	r1, [pc, #36]	; (8002810 <APP_BLE_Init_Dyn_1+0xd8>)
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe fe1c 	bl	8001428 <HW_TS_Create>
  return;
 80027f0:	bf00      	nop
}
 80027f2:	3738      	adds	r7, #56	; 0x38
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	0800917d 	.word	0x0800917d
 80027fc:	20000150 	.word	0x20000150
 8002800:	08002d95 	.word	0x08002d95
 8002804:	2000188d 	.word	0x2000188d
 8002808:	2000188c 	.word	0x2000188c
 800280c:	08002df5 	.word	0x08002df5
 8002810:	200001e2 	.word	0x200001e2

08002814 <APP_BLE_Init_Dyn_2>:

void APP_BLE_Init_Dyn_2( void ) {
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <APP_BLE_Init_Dyn_2+0x2c>)
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <APP_BLE_Init_Dyn_2+0x2c>)
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <APP_BLE_Init_Dyn_2+0x30>)
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <APP_BLE_Init_Dyn_2+0x34>)
 8002830:	22a0      	movs	r2, #160	; 0xa0
 8002832:	801a      	strh	r2, [r3, #0]
   * Start to Advertise to be connected by P2P Client
   */
#ifndef DYNAMIC_MODE
   Adv_Request(APP_BLE_FAST_ADV);
#else
   Adv_Request(APP_BLE_LP_ADV);
 8002834:	2002      	movs	r0, #2
 8002836:	f000 f9c3 	bl	8002bc0 <Adv_Request>
#endif
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800283a:	bf00      	nop
}
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000150 	.word	0x20000150
 8002844:	200001e4 	.word	0x200001e4
 8002848:	200001e6 	.word	0x200001e6

0800284c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3301      	adds	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]

  switch (event_pckt->evt)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2bff      	cmp	r3, #255	; 0xff
 8002860:	d073      	beq.n	800294a <SVCCTL_App_Notification+0xfe>
 8002862:	2bff      	cmp	r3, #255	; 0xff
 8002864:	f300 8098 	bgt.w	8002998 <SVCCTL_App_Notification+0x14c>
 8002868:	2b05      	cmp	r3, #5
 800286a:	d002      	beq.n	8002872 <SVCCTL_App_Notification+0x26>
 800286c:	2b3e      	cmp	r3, #62	; 0x3e
 800286e:	d023      	beq.n	80028b8 <SVCCTL_App_Notification+0x6c>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 8002870:	e092      	b.n	8002998 <SVCCTL_App_Notification+0x14c>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3302      	adds	r3, #2
 8002876:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 8002882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002884:	429a      	cmp	r2, r3
 8002886:	d109      	bne.n	800289c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002888:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 800288a:	2200      	movs	r2, #0
 800288c:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800288e:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8002896:	4845      	ldr	r0, [pc, #276]	; (80029ac <SVCCTL_App_Notification+0x160>)
 8002898:	f009 fa8a 	bl	800bdb0 <puts>
       Adv_Request(APP_BLE_FAST_ADV);
 800289c:	2001      	movs	r0, #1
 800289e:	f000 f98f 	bl	8002bc0 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80028a8:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 80028aa:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 80028ae:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 80028b0:	483f      	ldr	r0, [pc, #252]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 80028b2:	f001 f963 	bl	8003b7c <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 80028b6:	e072      	b.n	800299e <SVCCTL_App_Notification+0x152>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	3302      	adds	r3, #2
 80028bc:	617b      	str	r3, [r7, #20]
      switch (meta_evt->subevent)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d005      	beq.n	80028d2 <SVCCTL_App_Notification+0x86>
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d13d      	bne.n	8002946 <SVCCTL_App_Notification+0xfa>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 80028ca:	483a      	ldr	r0, [pc, #232]	; (80029b4 <SVCCTL_App_Notification+0x168>)
 80028cc:	f009 fa70 	bl	800bdb0 <puts>
          break;
 80028d0:	e03a      	b.n	8002948 <SVCCTL_App_Notification+0xfc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80028d8:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 80028da:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fe1c 	bl	800151c <HW_TS_Stop>
                      connection_complete_event->Connection_Handle);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80028ea:	b29b      	uxth	r3, r3
            APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n",
 80028ec:	4619      	mov	r1, r3
 80028ee:	4832      	ldr	r0, [pc, #200]	; (80029b8 <SVCCTL_App_Notification+0x16c>)
 80028f0:	f009 f9d8 	bl	800bca4 <iprintf>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80028f4:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 80028f6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d104      	bne.n	8002908 <SVCCTL_App_Notification+0xbc>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 8002900:	2206      	movs	r2, #6
 8002902:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002906:	e003      	b.n	8002910 <SVCCTL_App_Notification+0xc4>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 800290a:	2205      	movs	r2, #5
 800290c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002916:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 800291a:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002922:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 8002924:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 8002928:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800292a:	4821      	ldr	r0, [pc, #132]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 800292c:	f001 f926 	bl	8003b7c <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 8002938:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 800293c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800293e:	481c      	ldr	r0, [pc, #112]	; (80029b0 <SVCCTL_App_Notification+0x164>)
 8002940:	f001 f91c 	bl	8003b7c <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8002944:	e000      	b.n	8002948 <SVCCTL_App_Notification+0xfc>
          break;
 8002946:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8002948:	e029      	b.n	800299e <SVCCTL_App_Notification+0x152>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3302      	adds	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
      switch (blue_evt->ecode)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800295a:	d009      	beq.n	8002970 <SVCCTL_App_Notification+0x124>
 800295c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002960:	dc1c      	bgt.n	800299c <SVCCTL_App_Notification+0x150>
 8002962:	2b04      	cmp	r3, #4
 8002964:	d00c      	beq.n	8002980 <SVCCTL_App_Notification+0x134>
 8002966:	f240 4207 	movw	r2, #1031	; 0x407
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <SVCCTL_App_Notification+0x12c>
      break; /* EVT_VENDOR */
 800296e:	e015      	b.n	800299c <SVCCTL_App_Notification+0x150>
          mutex = 1;
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <SVCCTL_App_Notification+0x170>)
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
      break;
 8002976:	e00e      	b.n	8002996 <SVCCTL_App_Notification+0x14a>
          APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8002978:	4811      	ldr	r0, [pc, #68]	; (80029c0 <SVCCTL_App_Notification+0x174>)
 800297a:	f009 fa19 	bl	800bdb0 <puts>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800297e:	e00a      	b.n	8002996 <SVCCTL_App_Notification+0x14a>
          BSP_LED_On(LED_GREEN);
 8002980:	2001      	movs	r0, #1
 8002982:	f001 fdb7 	bl	80044f4 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <SVCCTL_App_Notification+0x15c>)
 8002988:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800298c:	210a      	movs	r1, #10
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fe50 	bl	8001634 <HW_TS_Start>
        break; /* RADIO_ACTIVITY_EVENT */
 8002994:	bf00      	nop
      break; /* EVT_VENDOR */
 8002996:	e001      	b.n	800299c <SVCCTL_App_Notification+0x150>
          break;
 8002998:	bf00      	nop
 800299a:	e000      	b.n	800299e <SVCCTL_App_Notification+0x152>
      break; /* EVT_VENDOR */
 800299c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800299e:	2301      	movs	r3, #1
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000150 	.word	0x20000150
 80029ac:	0800d2d4 	.word	0x0800d2d4
 80029b0:	20001888 	.word	0x20001888
 80029b4:	0800d2fc 	.word	0x0800d2fc
 80029b8:	0800d328 	.word	0x0800d328
 80029bc:	2000188c 	.word	0x2000188c
 80029c0:	0800d35c 	.word	0x0800d35c

080029c4 <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 80029c8:	f001 f914 	bl	8003bf4 <P2PS_APP_SW1_Button_Action>
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <APP_BLE_Key_Button3_Action>:
  return;
#endif    
}

void APP_BLE_Key_Button3_Action(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <Ble_Tl_Init+0x20>)
 80029e8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <Ble_Tl_Init+0x24>)
 80029ec:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80029ee:	463b      	mov	r3, r7
 80029f0:	4619      	mov	r1, r3
 80029f2:	4805      	ldr	r0, [pc, #20]	; (8002a08 <Ble_Tl_Init+0x28>)
 80029f4:	f006 fba6 	bl	8009144 <hci_init>

  return;
 80029f8:	bf00      	nop
}
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20030028 	.word	0x20030028
 8002a04:	08002e7f 	.word	0x08002e7f
 8002a08:	08002e47 	.word	0x08002e47

08002a0c <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 8002a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0e:	b091      	sub	sp, #68	; 0x44
 8002a10:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8002a12:	2300      	movs	r3, #0
 8002a14:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8002a16:	f006 f9db 	bl	8008dd0 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8002a1a:	f000 f977 	bl	8002d0c <BleGetBdAddress>
 8002a1e:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	2106      	movs	r1, #6
 8002a24:	2000      	movs	r0, #0
 8002a26:	f006 f8c9 	bl	8008bbc <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	795a      	ldrb	r2, [r3, #5]
 8002a2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8002a30:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	791a      	ldrb	r2, [r3, #4]
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8002a38:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	78da      	ldrb	r2, [r3, #3]
 8002a3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8002a40:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	789a      	ldrb	r2, [r3, #2]
 8002a46:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8002a48:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	785a      	ldrb	r2, [r3, #1]
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8002a50:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	4b54      	ldr	r3, [pc, #336]	; (8002ba8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8002a58:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8002a5a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8002a5e:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8002a60:	f7ff fe46 	bl	80026f0 <LL_FLASH_GetUDN>
 8002a64:	4603      	mov	r3, r0
 8002a66:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8002a68:	f107 0308 	add.w	r3, r7, #8
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2106      	movs	r1, #6
 8002a70:	202e      	movs	r0, #46	; 0x2e
 8002a72:	f006 f8a3 	bl	8008bbc <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002a76:	4a4d      	ldr	r2, [pc, #308]	; (8002bac <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8002a78:	2110      	movs	r1, #16
 8002a7a:	2018      	movs	r0, #24
 8002a7c:	f006 f89e 	bl	8008bbc <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 8002a82:	2110      	movs	r1, #16
 8002a84:	2008      	movs	r0, #8
 8002a86:	f006 f899 	bl	8008bbc <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002a8a:	2118      	movs	r1, #24
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f006 f8fe 	bl	8008c8e <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8002a92:	f005 fe4e 	bl	8008732 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8002aa2:	7ffb      	ldrb	r3, [r7, #31]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01e      	beq.n	8002ae6 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 8002aa8:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8002aaa:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8002aac:	f107 0216 	add.w	r2, r7, #22
 8002ab0:	7ff8      	ldrb	r0, [r7, #31]
 8002ab2:	f107 0312 	add.w	r3, r7, #18
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	f005 fd2a 	bl	800851c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002ac8:	8afc      	ldrh	r4, [r7, #22]
 8002aca:	8abd      	ldrh	r5, [r7, #20]
 8002acc:	69b8      	ldr	r0, [r7, #24]
 8002ace:	f7fd fb61 	bl	8000194 <strlen>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4613      	mov	r3, r2
 8002adc:	2200      	movs	r2, #0
 8002ade:	4629      	mov	r1, r5
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f005 ffe4 	bl	8008aae <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002ae6:	8af8      	ldrh	r0, [r7, #22]
 8002ae8:	8a79      	ldrh	r1, [r7, #18]
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2302      	movs	r3, #2
 8002af0:	2200      	movs	r2, #0
 8002af2:	f005 ffdc 	bl	8008aae <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 8002af6:	2202      	movs	r2, #2
 8002af8:	2102      	movs	r1, #2
 8002afa:	2000      	movs	r0, #0
 8002afc:	f006 f98c 	bl	8008e18 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f005 fc14 	bl	8008338 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002b10:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8002b1c:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b1e:	2208      	movs	r2, #8
 8002b20:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8002b22:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b24:	2210      	movs	r2, #16
 8002b26:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 8002b28:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8002b32:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b40:	e00b      	b.n	8002b5a <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8002b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b46:	4a1c      	ldr	r2, [pc, #112]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b48:	4413      	add	r3, r2
 8002b4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b4e:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8002b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b54:	3301      	adds	r3, #1
 8002b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	d9ef      	bls.n	8002b42 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b64:	789c      	ldrb	r4, [r3, #2]
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b68:	785d      	ldrb	r5, [r3, #1]
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b6c:	7d5b      	ldrb	r3, [r3, #21]
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b70:	7d92      	ldrb	r2, [r2, #22]
 8002b72:	4911      	ldr	r1, [pc, #68]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b74:	7d09      	ldrb	r1, [r1, #20]
 8002b76:	4810      	ldr	r0, [pc, #64]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b78:	6980      	ldr	r0, [r0, #24]
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	9604      	str	r6, [sp, #16]
 8002b7e:	9003      	str	r0, [sp, #12]
 8002b80:	9102      	str	r1, [sp, #8]
 8002b82:	9201      	str	r2, [sp, #4]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f005 fc1d 	bl	80083cc <aci_gap_set_authentication_requirement>
  );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8002b94:	789b      	ldrb	r3, [r3, #2]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 8002b9a:	f005 fda6 	bl	80086ea <aci_gap_configure_whitelist>
   }
}
 8002b9e:	bf00      	nop
 8002ba0:	372c      	adds	r7, #44	; 0x2c
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000008 	.word	0x20000008
 8002bac:	0800dc64 	.word	0x0800dc64
 8002bb0:	0800dc74 	.word	0x0800dc74
 8002bb4:	0800d384 	.word	0x0800d384
 8002bb8:	20000150 	.word	0x20000150
 8002bbc:	0001b207 	.word	0x0001b207

08002bc0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af08      	add	r7, sp, #32
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002bca:	2392      	movs	r3, #146	; 0x92
 8002bcc:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d106      	bne.n	8002be2 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <Adv_Request+0x114>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <Adv_Request+0x118>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	81bb      	strh	r3, [r7, #12]
 8002be0:	e005      	b.n	8002bee <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002be2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002be6:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002be8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002bec:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002bee:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <Adv_Request+0x11c>)
 8002bf0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fc91 	bl	800151c <HW_TS_Stop>

     APP_DBG_MSG("First index in %d state \n",
                BleApplicationContext.Device_Connection_Status);
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <Adv_Request+0x11c>)
 8002bfc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
     APP_DBG_MSG("First index in %d state \n",
 8002c00:	4619      	mov	r1, r3
 8002c02:	4837      	ldr	r0, [pc, #220]	; (8002ce0 <Adv_Request+0x120>)
 8002c04:	f009 f84e 	bl	800bca4 <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d119      	bne.n	8002c42 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002c0e:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <Adv_Request+0x11c>)
 8002c10:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d004      	beq.n	8002c22 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <Adv_Request+0x11c>)
 8002c1a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d10f      	bne.n	8002c42 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8002c22:	f005 fa87 	bl	8008134 <aci_gap_set_non_discoverable>
 8002c26:	4603      	mov	r3, r0
 8002c28:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising");
 8002c30:	482c      	ldr	r0, [pc, #176]	; (8002ce4 <Adv_Request+0x124>)
 8002c32:	f009 f837 	bl	800bca4 <iprintf>
 8002c36:	e004      	b.n	8002c42 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 8002c38:	7afb      	ldrb	r3, [r7, #11]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	482a      	ldr	r0, [pc, #168]	; (8002ce8 <Adv_Request+0x128>)
 8002c3e:	f009 f831 	bl	800bca4 <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8002c42:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <Adv_Request+0x11c>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <Adv_Request+0x11c>)
 8002c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c50:	89ba      	ldrh	r2, [r7, #12]
 8002c52:	89f9      	ldrh	r1, [r7, #14]
 8002c54:	2000      	movs	r0, #0
 8002c56:	9006      	str	r0, [sp, #24]
 8002c58:	2000      	movs	r0, #0
 8002c5a:	9005      	str	r0, [sp, #20]
 8002c5c:	4823      	ldr	r0, [pc, #140]	; (8002cec <Adv_Request+0x12c>)
 8002c5e:	9004      	str	r0, [sp, #16]
 8002c60:	9303      	str	r3, [sp, #12]
 8002c62:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <Adv_Request+0x130>)
 8002c64:	9302      	str	r3, [sp, #8]
 8002c66:	2308      	movs	r3, #8
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2000      	movs	r0, #0
 8002c72:	f005 fa83 	bl	800817c <aci_gap_set_discoverable>
 8002c76:	4603      	mov	r3, r0
 8002c78:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8002c7a:	491e      	ldr	r1, [pc, #120]	; (8002cf4 <Adv_Request+0x134>)
 8002c7c:	200e      	movs	r0, #14
 8002c7e:	f005 fcd8 	bl	8008632 <aci_gap_update_adv_data>
 8002c82:	4603      	mov	r3, r0
 8002c84:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 8002c86:	7afb      	ldrb	r3, [r7, #11]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d111      	bne.n	8002cb0 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d10a      	bne.n	8002ca8 <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8002c92:	4819      	ldr	r0, [pc, #100]	; (8002cf8 <Adv_Request+0x138>)
 8002c94:	f009 f88c 	bl	800bdb0 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <Adv_Request+0x11c>)
 8002c9a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002c9e:	4917      	ldr	r1, [pc, #92]	; (8002cfc <Adv_Request+0x13c>)
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe fcc7 	bl	8001634 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8002ca6:	e012      	b.n	8002cce <Adv_Request+0x10e>
        APP_DBG_MSG("\n\rSuccessfully Start Low Power Advertising \n\r");
 8002ca8:	4815      	ldr	r0, [pc, #84]	; (8002d00 <Adv_Request+0x140>)
 8002caa:	f008 fffb 	bl	800bca4 <iprintf>
  return;
 8002cae:	e00e      	b.n	8002cce <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n\r", ret);
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4812      	ldr	r0, [pc, #72]	; (8002d04 <Adv_Request+0x144>)
 8002cbc:	f008 fff2 	bl	800bca4 <iprintf>
  return;
 8002cc0:	e005      	b.n	8002cce <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4810      	ldr	r0, [pc, #64]	; (8002d08 <Adv_Request+0x148>)
 8002cc8:	f008 ffec 	bl	800bca4 <iprintf>
  return;
 8002ccc:	bf00      	nop
}
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	200001e4 	.word	0x200001e4
 8002cd8:	200001e6 	.word	0x200001e6
 8002cdc:	20000150 	.word	0x20000150
 8002ce0:	0800d38c 	.word	0x0800d38c
 8002ce4:	0800d3a8 	.word	0x0800d3a8
 8002ce8:	0800d3cc 	.word	0x0800d3cc
 8002cec:	20000179 	.word	0x20000179
 8002cf0:	0800dc84 	.word	0x0800dc84
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	0800d3f4 	.word	0x0800d3f4
 8002cfc:	0001e046 	.word	0x0001e046
 8002d00:	0800d41c 	.word	0x0800d41c
 8002d04:	0800d44c 	.word	0x0800d44c
 8002d08:	0800d47c 	.word	0x0800d47c

08002d0c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002d12:	f7ff fced 	bl	80026f0 <LL_FLASH_GetUDN>
 8002d16:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d1e:	d023      	beq.n	8002d68 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002d20:	f7ff fcfe 	bl	8002720 <LL_FLASH_GetSTCompanyID>
 8002d24:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002d26:	f7ff fcef 	bl	8002708 <LL_FLASH_GetDeviceID>
 8002d2a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <BleGetBdAddress+0x80>)
 8002d32:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <BleGetBdAddress+0x80>)
 8002d3c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <BleGetBdAddress+0x80>)
 8002d44:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <BleGetBdAddress+0x80>)
 8002d4c:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <BleGetBdAddress+0x80>)
 8002d56:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	0c1b      	lsrs	r3, r3, #16
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <BleGetBdAddress+0x80>)
 8002d60:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <BleGetBdAddress+0x80>)
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e00b      	b.n	8002d80 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f007 ffd3 	bl	800ad14 <OTP_Read>
 8002d6e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e001      	b.n	8002d80 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <BleGetBdAddress+0x84>)
 8002d7e:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002d80:	697b      	ldr	r3, [r7, #20]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000460 	.word	0x20000460
 8002d90:	0800dc5c 	.word	0x0800dc5c

08002d94 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f001 fbc4 	bl	8004528 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <Adv_Cancel+0x50>)
 8002da2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d017      	beq.n	8002dda <Adv_Cancel+0x46>

  {

    tBleStatus result = 0x00;
 8002daa:	2300      	movs	r3, #0
 8002dac:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8002dae:	f005 f9c1 	bl	8008134 <aci_gap_set_non_discoverable>
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <Adv_Cancel+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    if (result == BLE_STATUS_SUCCESS)
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d106      	bne.n	8002dd2 <Adv_Cancel+0x3e>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8002dc4:	4808      	ldr	r0, [pc, #32]	; (8002de8 <Adv_Cancel+0x54>)
 8002dc6:	f008 ff6d 	bl	800bca4 <iprintf>
 8002dca:	4808      	ldr	r0, [pc, #32]	; (8002dec <Adv_Cancel+0x58>)
 8002dcc:	f008 ff6a 	bl	800bca4 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8002dd0:	e003      	b.n	8002dda <Adv_Cancel+0x46>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8002dd2:	4807      	ldr	r0, [pc, #28]	; (8002df0 <Adv_Cancel+0x5c>)
 8002dd4:	f008 ff66 	bl	800bca4 <iprintf>
  return;
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
}
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000150 	.word	0x20000150
 8002de8:	0800d4b0 	.word	0x0800d4b0
 8002dec:	0800d4b8 	.word	0x0800d4b8
 8002df0:	0800d4d4 	.word	0x0800d4d4

08002df4 <Switch_OFF_GPIO>:
/* USER CODE END Adv_Cancel_Req_2 */
  return;
}
#endif

static void Switch_OFF_GPIO(){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f001 fb95 	bl	8004528 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2004      	movs	r0, #4
 8002e0e:	f008 fde7 	bl	800b9e0 <UTIL_SEQ_SetTask>
  return;
 8002e12:	bf00      	nop
}
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f008 fe48 	bl	800bab8 <UTIL_SEQ_SetEvt>
  return;
 8002e28:	bf00      	nop
}
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f008 fe5d 	bl	800baf8 <UTIL_SEQ_WaitEvt>
  return;
 8002e3e:	bf00      	nop
}
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	3308      	adds	r3, #8
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f005 f917 	bl	800808c <SVCCTL_UserEvtRx>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002e6e:	e002      	b.n	8002e76 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <BLE_StatusNot+0x16>
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d007      	beq.n	8002ea2 <BLE_StatusNot+0x24>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002e92:	e00d      	b.n	8002eb0 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002e94:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002e98:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f008 fdcc 	bl	800ba38 <UTIL_SEQ_PauseTask>
      break;
 8002ea0:	e006      	b.n	8002eb0 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002ea2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002ea6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f008 fde5 	bl	800ba78 <UTIL_SEQ_ResumeTask>
      break;
 8002eae:	bf00      	nop
  }
  return;
 8002eb0:	bf00      	nop
}
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <APP_THREAD_Init_Dyn_1>:
 * @brief Main entry point for the Thread Application
 * @param  none
 * @retval None
 */
void APP_THREAD_Init_Dyn_1( void )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8002ebe:	f000 fa01 	bl	80032c4 <APP_THREAD_CheckWirelessFirmwareInfo>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8002ec2:	4813      	ldr	r0, [pc, #76]	; (8002f10 <APP_THREAD_Init_Dyn_1+0x58>)
 8002ec4:	f000 fc2c 	bl	8003720 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8002ec8:	2101      	movs	r1, #1
 8002eca:	2004      	movs	r0, #4
 8002ecc:	f008 fc4c 	bl	800b768 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8002ed0:	f000 fd4c 	bl	800396c <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8002ed4:	f000 fd32 	bl	800393c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8002ed8:	f006 f83c 	bl	8008f54 <SHCI_C2_THREAD_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ThreadInitStatus);

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_MSG_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_THREAD_ProcessMsgM0ToM4);
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <APP_THREAD_Init_Dyn_1+0x5c>)
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2010      	movs	r0, #16
 8002ee6:	f008 fd59 	bl	800b99c <UTIL_SEQ_RegTask>


  /* USER CODE BEGIN INIT TASKS */
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_MSG_BUTTON, UTIL_SEQ_RFU, APP_THREAD_SendCoapMsg);
 8002eea:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <APP_THREAD_Init_Dyn_1+0x60>)
 8002eec:	2100      	movs	r1, #0
 8002eee:	2008      	movs	r0, #8
 8002ef0:	f008 fd54 	bl	800b99c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_COAP_SEND_MSG, UTIL_SEQ_RFU,APP_THREAD_SendCoapMsg);
 8002ef4:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <APP_THREAD_Init_Dyn_1+0x60>)
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	2040      	movs	r0, #64	; 0x40
 8002efa:	f008 fd4f 	bl	800b99c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<(uint32_t)CFG_TASK_SET_THREAD_MODE, UTIL_SEQ_RFU,APP_THREAD_SetSleepyEndDeviceMode);
 8002efe:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <APP_THREAD_Init_Dyn_1+0x64>)
 8002f00:	2100      	movs	r1, #0
 8002f02:	2080      	movs	r0, #128	; 0x80
 8002f04:	f008 fd4a 	bl	800b99c <UTIL_SEQ_RegTask>
  /* USER CODE END INIT TASKS */
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20030a4c 	.word	0x20030a4c
 8002f14:	080039f5 	.word	0x080039f5
 8002f18:	0800360d 	.word	0x0800360d
 8002f1c:	08003529 	.word	0x08003529

08002f20 <APP_THREAD_Init_Dyn_2>:

void APP_THREAD_Init_Dyn_2(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Initialize and configure the Thread device*/
  APP_THREAD_DeviceConfig();
 8002f24:	f000 f8be 	bl	80030a4 <APP_THREAD_DeviceConfig>

  /**
   * Create timer to handle COAP request sending
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &sedCoapTimerID, hw_ts_Repeated, APP_THREAD_CoapTimingElapsed);
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <APP_THREAD_Init_Dyn_2+0x18>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <APP_THREAD_Init_Dyn_2+0x1c>)
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fe fa7a 	bl	8001428 <HW_TS_Create>
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	08003711 	.word	0x08003711
 8002f3c:	200006b4 	.word	0x200006b4

08002f40 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b14      	cmp	r3, #20
 8002f4e:	d87d      	bhi.n	800304c <APP_THREAD_Error+0x10c>
 8002f50:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <APP_THREAD_Error+0x18>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002fad 	.word	0x08002fad
 8002f5c:	08002fb7 	.word	0x08002fb7
 8002f60:	08002fc1 	.word	0x08002fc1
 8002f64:	08002fcb 	.word	0x08002fcb
 8002f68:	08002fd5 	.word	0x08002fd5
 8002f6c:	08002fdf 	.word	0x08002fdf
 8002f70:	08002fe9 	.word	0x08002fe9
 8002f74:	08002ffd 	.word	0x08002ffd
 8002f78:	08003007 	.word	0x08003007
 8002f7c:	08003011 	.word	0x08003011
 8002f80:	0800301b 	.word	0x0800301b
 8002f84:	08003025 	.word	0x08003025
 8002f88:	0800302f 	.word	0x0800302f
 8002f8c:	0800304d 	.word	0x0800304d
 8002f90:	0800304d 	.word	0x0800304d
 8002f94:	08003039 	.word	0x08003039
 8002f98:	08003043 	.word	0x08003043
 8002f9c:	0800304d 	.word	0x0800304d
 8002fa0:	0800304d 	.word	0x0800304d
 8002fa4:	0800304d 	.word	0x0800304d
 8002fa8:	08002ff3 	.word	0x08002ff3

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8002fac:	6839      	ldr	r1, [r7, #0]
 8002fae:	482c      	ldr	r0, [pc, #176]	; (8003060 <APP_THREAD_Error+0x120>)
 8002fb0:	f000 f962 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8002fb4:	e04f      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	482a      	ldr	r0, [pc, #168]	; (8003064 <APP_THREAD_Error+0x124>)
 8002fba:	f000 f95d 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8002fbe:	e04a      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8002fc0:	6839      	ldr	r1, [r7, #0]
 8002fc2:	4829      	ldr	r0, [pc, #164]	; (8003068 <APP_THREAD_Error+0x128>)
 8002fc4:	f000 f958 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8002fc8:	e045      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8002fca:	6839      	ldr	r1, [r7, #0]
 8002fcc:	4827      	ldr	r0, [pc, #156]	; (800306c <APP_THREAD_Error+0x12c>)
 8002fce:	f000 f953 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8002fd2:	e040      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	4826      	ldr	r0, [pc, #152]	; (8003070 <APP_THREAD_Error+0x130>)
 8002fd8:	f000 f94e 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8002fdc:	e03b      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	4824      	ldr	r0, [pc, #144]	; (8003074 <APP_THREAD_Error+0x134>)
 8002fe2:	f000 f949 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8002fe6:	e036      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8002fe8:	6839      	ldr	r1, [r7, #0]
 8002fea:	4823      	ldr	r0, [pc, #140]	; (8003078 <APP_THREAD_Error+0x138>)
 8002fec:	f000 f944 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8002ff0:	e031      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8002ff2:	6839      	ldr	r1, [r7, #0]
 8002ff4:	4821      	ldr	r0, [pc, #132]	; (800307c <APP_THREAD_Error+0x13c>)
 8002ff6:	f000 f93f 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8002ffa:	e02c      	b.n	8003056 <APP_THREAD_Error+0x116>
  /* USER CODE BEGIN APP_THREAD_Error_2 */
  case ERR_THREAD_COAP_START :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_START ",ErrCode);
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	4820      	ldr	r0, [pc, #128]	; (8003080 <APP_THREAD_Error+0x140>)
 8003000:	f000 f93a 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8003004:	e027      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_COAP_ADD_RESSOURCE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_ADD_RESSOURCE ",ErrCode);
 8003006:	6839      	ldr	r1, [r7, #0]
 8003008:	481e      	ldr	r0, [pc, #120]	; (8003084 <APP_THREAD_Error+0x144>)
 800300a:	f000 f935 	bl	8003278 <APP_THREAD_TraceError>
    break;
 800300e:	e022      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_MESSAGE_READ :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_MESSAGE_READ ",ErrCode);
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	481d      	ldr	r0, [pc, #116]	; (8003088 <APP_THREAD_Error+0x148>)
 8003014:	f000 f930 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8003018:	e01d      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_COAP_SEND_RESPONSE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_RESPONSE ",ErrCode);
 800301a:	6839      	ldr	r1, [r7, #0]
 800301c:	481b      	ldr	r0, [pc, #108]	; (800308c <APP_THREAD_Error+0x14c>)
 800301e:	f000 f92b 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8003022:	e018      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_COAP_APPEND :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_APPEND ",ErrCode);
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	481a      	ldr	r0, [pc, #104]	; (8003090 <APP_THREAD_Error+0x150>)
 8003028:	f000 f926 	bl	8003278 <APP_THREAD_TraceError>
    break;
 800302c:	e013      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_THREAD_COAP_SEND_REQUEST :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_COAP_SEND_REQUEST ",ErrCode);
 800302e:	6839      	ldr	r1, [r7, #0]
 8003030:	4818      	ldr	r0, [pc, #96]	; (8003094 <APP_THREAD_Error+0x154>)
 8003032:	f000 f921 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8003036:	e00e      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_TIMER_INIT :
    APP_THREAD_TraceError("ERROR : ERR_TIMER_INIT ",ErrCode);
 8003038:	6839      	ldr	r1, [r7, #0]
 800303a:	4817      	ldr	r0, [pc, #92]	; (8003098 <APP_THREAD_Error+0x158>)
 800303c:	f000 f91c 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8003040:	e009      	b.n	8003056 <APP_THREAD_Error+0x116>
  case ERR_TIMER_START :
    APP_THREAD_TraceError("ERROR : ERR_TIMER_START ",ErrCode);
 8003042:	6839      	ldr	r1, [r7, #0]
 8003044:	4815      	ldr	r0, [pc, #84]	; (800309c <APP_THREAD_Error+0x15c>)
 8003046:	f000 f917 	bl	8003278 <APP_THREAD_TraceError>
    break;
 800304a:	e004      	b.n	8003056 <APP_THREAD_Error+0x116>
  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ",0);
 800304c:	2100      	movs	r1, #0
 800304e:	4814      	ldr	r0, [pc, #80]	; (80030a0 <APP_THREAD_Error+0x160>)
 8003050:	f000 f912 	bl	8003278 <APP_THREAD_TraceError>
    break;
 8003054:	bf00      	nop
  }
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0800d560 	.word	0x0800d560
 8003064:	0800d584 	.word	0x0800d584
 8003068:	0800d5a8 	.word	0x0800d5a8
 800306c:	0800d5c8 	.word	0x0800d5c8
 8003070:	0800d5e8 	.word	0x0800d5e8
 8003074:	0800d608 	.word	0x0800d608
 8003078:	0800d624 	.word	0x0800d624
 800307c:	0800d650 	.word	0x0800d650
 8003080:	0800d674 	.word	0x0800d674
 8003084:	0800d694 	.word	0x0800d694
 8003088:	0800d6bc 	.word	0x0800d6bc
 800308c:	0800d6e0 	.word	0x0800d6e0
 8003090:	0800d708 	.word	0x0800d708
 8003094:	0800d728 	.word	0x0800d728
 8003098:	0800d750 	.word	0x0800d750
 800309c:	0800d768 	.word	0x0800d768
 80030a0:	0800d784 	.word	0x0800d784

080030a4 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  if (error != OT_ERROR_NONE)
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
  }
#endif
  otInstanceFinalize(NULL);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f006 ffa9 	bl	800a002 <otInstanceFinalize>
  otInstanceInitSingle();
 80030b0:	f006 ff80 	bl	8009fb4 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 80030b4:	2200      	movs	r2, #0
 80030b6:	4934      	ldr	r1, [pc, #208]	; (8003188 <APP_THREAD_DeviceConfig+0xe4>)
 80030b8:	2000      	movs	r0, #0
 80030ba:	f006 ffc9 	bl	800a050 <otSetStateChangedCallback>
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <APP_THREAD_DeviceConfig+0x2e>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	4619      	mov	r1, r3
 80030cc:	2001      	movs	r0, #1
 80030ce:	f7ff ff37 	bl	8002f40 <APP_THREAD_Error>
  }
#if OT_AUTOSTART_MODE
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80030d2:	210c      	movs	r1, #12
 80030d4:	2000      	movs	r0, #0
 80030d6:	f007 f853 	bl	800a180 <otLinkSetChannel>
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <APP_THREAD_DeviceConfig+0x4a>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	4619      	mov	r1, r3
 80030e8:	2002      	movs	r0, #2
 80030ea:	f7ff ff29 	bl	8002f40 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 80030ee:	f242 2122 	movw	r1, #8738	; 0x2222
 80030f2:	2000      	movs	r0, #0
 80030f4:	f007 f874 	bl	800a1e0 <otLinkSetPanId>
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <APP_THREAD_DeviceConfig+0x68>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	4619      	mov	r1, r3
 8003106:	2003      	movs	r0, #3
 8003108:	f7ff ff1a 	bl	8002f40 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 800310c:	2101      	movs	r1, #1
 800310e:	2000      	movs	r0, #0
 8003110:	f006 ffd4 	bl	800a0bc <otIp6SetEnabled>
 8003114:	4603      	mov	r3, r0
 8003116:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <APP_THREAD_DeviceConfig+0x84>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	4619      	mov	r1, r3
 8003122:	2004      	movs	r0, #4
 8003124:	f7ff ff0c 	bl	8002f40 <APP_THREAD_Error>
  }
#ifdef DYNAMIC_MODE
  error = otThreadSetEnabled(NULL, true);
 8003128:	2101      	movs	r1, #1
 800312a:	2000      	movs	r0, #0
 800312c:	f007 fc9a 	bl	800aa64 <otThreadSetEnabled>
 8003130:	4603      	mov	r3, r0
 8003132:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <APP_THREAD_DeviceConfig+0xa0>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	4619      	mov	r1, r3
 800313e:	2005      	movs	r0, #5
 8003140:	f7ff fefe 	bl	8002f40 <APP_THREAD_Error>
  }

  /* Start the COAP server */
  error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8003144:	f241 6133 	movw	r1, #5683	; 0x1633
 8003148:	2000      	movs	r0, #0
 800314a:	f006 fed4 	bl	8009ef6 <otCoapStart>
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <APP_THREAD_DeviceConfig+0xbe>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_START,error);
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4619      	mov	r1, r3
 800315c:	2007      	movs	r0, #7
 800315e:	f7ff feef 	bl	8002f40 <APP_THREAD_Error>
  }
  /* Add COAP resources */
  error = otCoapAddResource(NULL, &OT_Ressource);
 8003162:	490a      	ldr	r1, [pc, #40]	; (800318c <APP_THREAD_DeviceConfig+0xe8>)
 8003164:	2000      	movs	r0, #0
 8003166:	f006 fef6 	bl	8009f56 <otCoapAddResource>
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <APP_THREAD_DeviceConfig+0xda>
  {
    APP_THREAD_Error(ERR_THREAD_COAP_ADD_RESSOURCE,error);
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	4619      	mov	r1, r3
 8003178:	2008      	movs	r0, #8
 800317a:	f7ff fee1 	bl	8002f40 <APP_THREAD_Error>
  }
#endif
#endif
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	08003191 	.word	0x08003191
 800318c:	20000018 	.word	0x20000018

08003190 <APP_THREAD_StateNotif>:
 * @param  aFlags  : Define the item that has been modified
 *         aContext: Context
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */
  
  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05d      	beq.n	8003260 <APP_THREAD_StateNotif+0xd0>
  {
    switch (otThreadGetDeviceRole(NULL))
 80031a4:	2000      	movs	r0, #0
 80031a6:	f007 fcd5 	bl	800ab54 <otThreadGetDeviceRole>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d850      	bhi.n	8003252 <APP_THREAD_StateNotif+0xc2>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <APP_THREAD_StateNotif+0x28>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031cd 	.word	0x080031cd
 80031bc:	080031f1 	.word	0x080031f1
 80031c0:	080031ff 	.word	0x080031ff
 80031c4:	0800321b 	.word	0x0800321b
 80031c8:	08003237 	.word	0x08003237
    {
    case OT_DEVICE_ROLE_DISABLED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DISABLED */
      BSP_LED_Off(LED2);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f001 f9ab 	bl	8004528 <BSP_LED_Off>
      BSP_LED_Off(LED3);
 80031d2:	2002      	movs	r0, #2
 80031d4:	f001 f9a8 	bl	8004528 <BSP_LED_Off>
      APP_DBG_MSG("\r\n M4: SET CFG_Evt_ThreadStop in Thread_Change_Notification \r\n\n");
 80031d8:	4824      	ldr	r0, [pc, #144]	; (800326c <APP_THREAD_StateNotif+0xdc>)
 80031da:	f008 fde9 	bl	800bdb0 <puts>
      APP_DBG("THREAD: Disabled");
 80031de:	4a24      	ldr	r2, [pc, #144]	; (8003270 <APP_THREAD_StateNotif+0xe0>)
 80031e0:	2101      	movs	r1, #1
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7ff f974 	bl	80024d0 <logApplication>
      UTIL_SEQ_SetEvt(1<<CFG_Evt_ThreadStop);
 80031e8:	2010      	movs	r0, #16
 80031ea:	f008 fc65 	bl	800bab8 <UTIL_SEQ_SetEvt>
      /* USER CODE END OT_DEVICE_ROLE_DISABLED */
      break;
 80031ee:	e038      	b.n	8003262 <APP_THREAD_StateNotif+0xd2>
    case OT_DEVICE_ROLE_DETACHED:
      /* USER CODE BEGIN OT_DEVICE_ROLE_DETACHED */
      BSP_LED_Off(LED2);
 80031f0:	2001      	movs	r0, #1
 80031f2:	f001 f999 	bl	8004528 <BSP_LED_Off>
      BSP_LED_Off(LED3);
 80031f6:	2002      	movs	r0, #2
 80031f8:	f001 f996 	bl	8004528 <BSP_LED_Off>
      /* USER CODE END OT_DEVICE_ROLE_DETACHED */
      break;
 80031fc:	e031      	b.n	8003262 <APP_THREAD_StateNotif+0xd2>
    case OT_DEVICE_ROLE_CHILD:
      /* USER CODE BEGIN OT_DEVICE_ROLE_CHILD */
      BSP_LED_Off(LED2);
 80031fe:	2001      	movs	r0, #1
 8003200:	f001 f992 	bl	8004528 <BSP_LED_Off>
      BSP_LED_On(LED3);
 8003204:	2002      	movs	r0, #2
 8003206:	f001 f975 	bl	80044f4 <BSP_LED_On>
#if OT_AUTOSTART_MODE
      HW_TS_Start(sedCoapTimerID, (uint32_t)COAP_SEND_TIMEOUT);
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <APP_THREAD_StateNotif+0xe4>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fa0e 	bl	8001634 <HW_TS_Start>
#endif
      /* USER CODE END OT_DEVICE_ROLE_CHILD */
      break;
 8003218:	e023      	b.n	8003262 <APP_THREAD_StateNotif+0xd2>
    case OT_DEVICE_ROLE_ROUTER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_ROUTER */
      BSP_LED_Off(LED2);
 800321a:	2001      	movs	r0, #1
 800321c:	f001 f984 	bl	8004528 <BSP_LED_Off>
      BSP_LED_On(LED3);
 8003220:	2002      	movs	r0, #2
 8003222:	f001 f967 	bl	80044f4 <BSP_LED_On>
#if OT_AUTOSTART_MODE
      HW_TS_Start(sedCoapTimerID, (uint32_t)COAP_SEND_TIMEOUT);
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <APP_THREAD_StateNotif+0xe4>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fa00 	bl	8001634 <HW_TS_Start>
#endif
      /* USER CODE END OT_DEVICE_ROLE_ROUTER */
      break;
 8003234:	e015      	b.n	8003262 <APP_THREAD_StateNotif+0xd2>
    case OT_DEVICE_ROLE_LEADER :
      /* USER CODE BEGIN OT_DEVICE_ROLE_LEADER */
      BSP_LED_On(LED2);
 8003236:	2001      	movs	r0, #1
 8003238:	f001 f95c 	bl	80044f4 <BSP_LED_On>
      BSP_LED_Off(LED3);
 800323c:	2002      	movs	r0, #2
 800323e:	f001 f973 	bl	8004528 <BSP_LED_Off>
#if OT_AUTOSTART_MODE
      HW_TS_Start(sedCoapTimerID, (uint32_t)COAP_SEND_TIMEOUT);
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <APP_THREAD_StateNotif+0xe4>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe f9f2 	bl	8001634 <HW_TS_Start>
#endif
      /* USER CODE END OT_DEVICE_ROLE_LEADER */
      break;
 8003250:	e007      	b.n	8003262 <APP_THREAD_StateNotif+0xd2>
    default:
      /* USER CODE BEGIN DEFAULT */
      BSP_LED_Off(LED2);
 8003252:	2001      	movs	r0, #1
 8003254:	f001 f968 	bl	8004528 <BSP_LED_Off>
      BSP_LED_Off(LED3);
 8003258:	2002      	movs	r0, #2
 800325a:	f001 f965 	bl	8004528 <BSP_LED_Off>
      /* USER CODE END DEFAULT */
      break;
 800325e:	e000      	b.n	8003262 <APP_THREAD_StateNotif+0xd2>
    }
  }
 8003260:	bf00      	nop
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	0800d794 	.word	0x0800d794
 8003270:	0800d7d4 	.word	0x0800d7d4
 8003274:	200006b4 	.word	0x200006b4

08003278 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af02      	add	r7, sp, #8
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <APP_THREAD_TraceError+0x48>)
 800328a:	2101      	movs	r1, #1
 800328c:	2000      	movs	r0, #0
 800328e:	f7ff f91f 	bl	80024d0 <logApplication>
  while(1U == 1U)
  {
    BSP_LED_Toggle(LED1);
 8003292:	2000      	movs	r0, #0
 8003294:	f001 f962 	bl	800455c <BSP_LED_Toggle>
    HAL_Delay(500U);
 8003298:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800329c:	f7fe ffda 	bl	8002254 <HAL_Delay>
    BSP_LED_Toggle(LED2);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f001 f95b 	bl	800455c <BSP_LED_Toggle>
    HAL_Delay(500U);
 80032a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032aa:	f7fe ffd3 	bl	8002254 <HAL_Delay>
    BSP_LED_Toggle(LED3);
 80032ae:	2002      	movs	r0, #2
 80032b0:	f001 f954 	bl	800455c <BSP_LED_Toggle>
    HAL_Delay(500U);
 80032b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032b8:	f7fe ffcc 	bl	8002254 <HAL_Delay>
    BSP_LED_Toggle(LED1);
 80032bc:	e7e9      	b.n	8003292 <APP_THREAD_TraceError+0x1a>
 80032be:	bf00      	nop
 80032c0:	0800d7e8 	.word	0x0800d7e8

080032c4 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f005 fe8a 	bl	8008fe8 <SHCI_GetWirelessFwInfo>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80032da:	2101      	movs	r1, #1
 80032dc:	2014      	movs	r0, #20
 80032de:	f7ff fe2f 	bl	8002f40 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80032e2:	e040      	b.n	8003366 <APP_THREAD_CheckWirelessFirmwareInfo+0xa2>
    APP_DBG("**********************************************************");
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7ff f8f1 	bl	80024d0 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80032ee:	4a21      	ldr	r2, [pc, #132]	; (8003374 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7ff f8ec 	bl	80024d0 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	461a      	mov	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	9200      	str	r2, [sp, #0]
 800330c:	460b      	mov	r3, r1
 800330e:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8003310:	2101      	movs	r1, #1
 8003312:	2000      	movs	r0, #0
 8003314:	f7ff f8dc 	bl	80024d0 <logApplication>
    switch(p_wireless_info->StackType)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	7a5b      	ldrb	r3, [r3, #9]
 800331c:	2b51      	cmp	r3, #81	; 0x51
 800331e:	d012      	beq.n	8003346 <APP_THREAD_CheckWirelessFirmwareInfo+0x82>
 8003320:	2b51      	cmp	r3, #81	; 0x51
 8003322:	dc16      	bgt.n	8003352 <APP_THREAD_CheckWirelessFirmwareInfo+0x8e>
 8003324:	2b10      	cmp	r3, #16
 8003326:	d002      	beq.n	800332e <APP_THREAD_CheckWirelessFirmwareInfo+0x6a>
 8003328:	2b11      	cmp	r3, #17
 800332a:	d006      	beq.n	800333a <APP_THREAD_CheckWirelessFirmwareInfo+0x76>
 800332c:	e011      	b.n	8003352 <APP_THREAD_CheckWirelessFirmwareInfo+0x8e>
      APP_DBG("FW Type : Thread FTD");
 800332e:	4a13      	ldr	r2, [pc, #76]	; (800337c <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8003330:	2101      	movs	r1, #1
 8003332:	2000      	movs	r0, #0
 8003334:	f7ff f8cc 	bl	80024d0 <logApplication>
      break;
 8003338:	e010      	b.n	800335c <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_DBG("FW Type : Thread MTD");
 800333a:	4a11      	ldr	r2, [pc, #68]	; (8003380 <APP_THREAD_CheckWirelessFirmwareInfo+0xbc>)
 800333c:	2101      	movs	r1, #1
 800333e:	2000      	movs	r0, #0
 8003340:	f7ff f8c6 	bl	80024d0 <logApplication>
      break;
 8003344:	e00a      	b.n	800335c <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_DBG("FW Type : Dynamic Concurrent Mode BLE/Thread");
 8003346:	4a0f      	ldr	r2, [pc, #60]	; (8003384 <APP_THREAD_CheckWirelessFirmwareInfo+0xc0>)
 8003348:	2101      	movs	r1, #1
 800334a:	2000      	movs	r0, #0
 800334c:	f7ff f8c0 	bl	80024d0 <logApplication>
      break;
 8003350:	e004      	b.n	800335c <APP_THREAD_CheckWirelessFirmwareInfo+0x98>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8003352:	2101      	movs	r1, #1
 8003354:	2014      	movs	r0, #20
 8003356:	f7ff fdf3 	bl	8002f40 <APP_THREAD_Error>
      break;
 800335a:	bf00      	nop
    APP_DBG("**********************************************************");
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 800335e:	2101      	movs	r1, #1
 8003360:	2000      	movs	r0, #0
 8003362:	f7ff f8b5 	bl	80024d0 <logApplication>
}
 8003366:	bf00      	nop
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	0800d80c 	.word	0x0800d80c
 8003374:	0800d848 	.word	0x0800d848
 8003378:	0800d864 	.word	0x0800d864
 800337c:	0800d87c 	.word	0x0800d87c
 8003380:	0800d894 	.word	0x0800d894
 8003384:	0800d8ac 	.word	0x0800d8ac

08003388 <APP_THREAD_CoapSendRequest>:
    const otIp6Address* aPeerAddress,
    uint8_t* aPayload,
    uint16_t Size,
    otCoapResponseHandler aHandler,
    void* aContext)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	72fb      	strb	r3, [r7, #11]
 8003396:	4613      	mov	r3, r2
 8003398:	72bb      	strb	r3, [r7, #10]
  otError error = OT_ERROR_NONE;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]

  do{
    pOT_Message = otCoapNewMessage(NULL, NULL);
 800339e:	2100      	movs	r1, #0
 80033a0:	2000      	movs	r0, #0
 80033a2:	f006 fd40 	bl	8009e26 <otCoapNewMessage>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4a56      	ldr	r2, [pc, #344]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80033aa:	6013      	str	r3, [r2, #0]
    if (pOT_Message == NULL)
 80033ac:	4b55      	ldr	r3, [pc, #340]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <APP_THREAD_CoapSendRequest+0x38>
    {
      APP_THREAD_Error(ERR_THREAD_COAP_NEW_MSG,error);
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	4619      	mov	r1, r3
 80033b8:	2011      	movs	r0, #17
 80033ba:	f7ff fdc1 	bl	8002f40 <APP_THREAD_Error>
      break;
 80033be:	e08c      	b.n	80034da <APP_THREAD_CoapSendRequest+0x152>
    }

    otCoapMessageInit(pOT_Message, aCoapType, aCoapCode);
 80033c0:	4b50      	ldr	r3, [pc, #320]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	7aba      	ldrb	r2, [r7, #10]
 80033c6:	7af9      	ldrb	r1, [r7, #11]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f006 fc3b 	bl	8009c44 <otCoapMessageInit>
    otCoapMessageAppendUriPathOptions(pOT_Message, aCoapRessource->mUriPath);
 80033ce:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f006 fc68 	bl	8009cae <otCoapMessageAppendUriPathOptions>
    otCoapMessageSetPayloadMarker(pOT_Message);
 80033de:	4b49      	ldr	r3, [pc, #292]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f006 fc95 	bl	8009d12 <otCoapMessageSetPayloadMarker>

    if((aPayload != NULL) && (Size > 0))
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d014      	beq.n	8003418 <APP_THREAD_CoapSendRequest+0x90>
 80033ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <APP_THREAD_CoapSendRequest+0x90>
    {
      error = otMessageAppend(pOT_Message, aPayload, Size);
 80033f4:	4b43      	ldr	r3, [pc, #268]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80033fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033fc:	4618      	mov	r0, r3
 80033fe:	f006 ffa7 	bl	800a350 <otMessageAppend>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]
      if (error != OT_ERROR_NONE)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <APP_THREAD_CoapSendRequest+0x9a>
      {
        APP_THREAD_Error(ERR_THREAD_COAP_APPEND,error);
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	4619      	mov	r1, r3
 8003410:	200b      	movs	r0, #11
 8003412:	f7ff fd95 	bl	8002f40 <APP_THREAD_Error>
        break;
 8003416:	e060      	b.n	80034da <APP_THREAD_CoapSendRequest+0x152>
      }
    }
    else
    {
      APP_DBG("APP_THREAD_CoapSendRequest: No payload passed");
 8003418:	4a3b      	ldr	r2, [pc, #236]	; (8003508 <APP_THREAD_CoapSendRequest+0x180>)
 800341a:	2101      	movs	r1, #1
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff f857 	bl	80024d0 <logApplication>
    }

    memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8003422:	222c      	movs	r2, #44	; 0x2c
 8003424:	2100      	movs	r1, #0
 8003426:	4839      	ldr	r0, [pc, #228]	; (800350c <APP_THREAD_CoapSendRequest+0x184>)
 8003428:	f008 fc34 	bl	800bc94 <memset>
    OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 800342c:	4b37      	ldr	r3, [pc, #220]	; (800350c <APP_THREAD_CoapSendRequest+0x184>)
 800342e:	f241 6233 	movw	r2, #5683	; 0x1633
 8003432:	845a      	strh	r2, [r3, #34]	; 0x22

    if((aPeerAddress == NULL) && (aStringAddress != NULL))
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <APP_THREAD_CoapSendRequest+0xce>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <APP_THREAD_CoapSendRequest+0xce>
    {
      APP_DBG("Use String Address : %s ", aStringAddress);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a33      	ldr	r2, [pc, #204]	; (8003510 <APP_THREAD_CoapSendRequest+0x188>)
 8003444:	2101      	movs	r1, #1
 8003446:	2000      	movs	r0, #0
 8003448:	f7ff f842 	bl	80024d0 <logApplication>
      otIp6AddressFromString(aStringAddress, &OT_MessageInfo.mPeerAddr);
 800344c:	4931      	ldr	r1, [pc, #196]	; (8003514 <APP_THREAD_CoapSendRequest+0x18c>)
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f006 fe64 	bl	800a11c <otIp6AddressFromString>
 8003454:	e01b      	b.n	800348e <APP_THREAD_CoapSendRequest+0x106>
    }
    else
    if (aPeerAddress != NULL)
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00f      	beq.n	800347c <APP_THREAD_CoapSendRequest+0xf4>
    {
      APP_DBG("Use Peer Address");
 800345c:	4a2e      	ldr	r2, [pc, #184]	; (8003518 <APP_THREAD_CoapSendRequest+0x190>)
 800345e:	2101      	movs	r1, #1
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff f835 	bl	80024d0 <logApplication>
      memcpy(&OT_MessageInfo.mPeerAddr, aPeerAddress, sizeof(OT_MessageInfo.mPeerAddr));
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <APP_THREAD_CoapSendRequest+0x184>)
 8003468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800346a:	f103 0410 	add.w	r4, r3, #16
 800346e:	4613      	mov	r3, r2
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800347a:	e008      	b.n	800348e <APP_THREAD_CoapSendRequest+0x106>
    }
    else
    {
      APP_DBG("ERROR: Address string and Peer Address not defined");
 800347c:	4a27      	ldr	r2, [pc, #156]	; (800351c <APP_THREAD_CoapSendRequest+0x194>)
 800347e:	2101      	movs	r1, #1
 8003480:	2000      	movs	r0, #0
 8003482:	f7ff f825 	bl	80024d0 <logApplication>
      APP_THREAD_Error(ERR_THREAD_COAP_ADDRESS_NOT_DEFINED, 0);
 8003486:	2100      	movs	r1, #0
 8003488:	2012      	movs	r0, #18
 800348a:	f7ff fd59 	bl	8002f40 <APP_THREAD_Error>
    }

    if(aCoapType == OT_COAP_TYPE_NON_CONFIRMABLE)
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	2b10      	cmp	r3, #16
 8003492:	d10f      	bne.n	80034b4 <APP_THREAD_CoapSendRequest+0x12c>
    {
      APP_DBG("aCoapType == OT_COAP_TYPE_NON_CONFIRMABLE");
 8003494:	4a22      	ldr	r2, [pc, #136]	; (8003520 <APP_THREAD_CoapSendRequest+0x198>)
 8003496:	2101      	movs	r1, #1
 8003498:	2000      	movs	r0, #0
 800349a:	f7ff f819 	bl	80024d0 <logApplication>
      error = otCoapSendRequest(NULL,
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	2300      	movs	r3, #0
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <APP_THREAD_CoapSendRequest+0x184>)
 80034aa:	2000      	movs	r0, #0
 80034ac:	f006 fce9 	bl	8009e82 <otCoapSendRequest>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]
          pOT_Message,
          &OT_MessageInfo,
          NULL,
          NULL);
    }
    if(aCoapType == OT_COAP_TYPE_CONFIRMABLE)
 80034b4:	7afb      	ldrb	r3, [r7, #11]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <APP_THREAD_CoapSendRequest+0x152>
    {
      APP_DBG("aCoapType == OT_COAP_TYPE_CONFIRMABLE");
 80034ba:	4a1a      	ldr	r2, [pc, #104]	; (8003524 <APP_THREAD_CoapSendRequest+0x19c>)
 80034bc:	2101      	movs	r1, #1
 80034be:	2000      	movs	r0, #0
 80034c0:	f7ff f806 	bl	80024d0 <logApplication>
      error = otCoapSendRequest(NULL,
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ce:	4a0f      	ldr	r2, [pc, #60]	; (800350c <APP_THREAD_CoapSendRequest+0x184>)
 80034d0:	2000      	movs	r0, #0
 80034d2:	f006 fcd6 	bl	8009e82 <otCoapSendRequest>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]
          &OT_MessageInfo,
          aHandler,
          aContext);
    }
  }while(false);
  if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <APP_THREAD_CoapSendRequest+0x174>
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <APP_THREAD_CoapSendRequest+0x174>
  {
    otMessageFree(pOT_Message);
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <APP_THREAD_CoapSendRequest+0x17c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f006 fed6 	bl	800a29e <otMessageFree>
    APP_THREAD_Error(ERR_THREAD_COAP_SEND_REQUEST,error);
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
 80034f4:	4619      	mov	r1, r3
 80034f6:	200c      	movs	r0, #12
 80034f8:	f7ff fd22 	bl	8002f40 <APP_THREAD_Error>
  }
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd90      	pop	{r4, r7, pc}
 8003504:	200006a8 	.word	0x200006a8
 8003508:	0800d8dc 	.word	0x0800d8dc
 800350c:	20000678 	.word	0x20000678
 8003510:	0800d90c 	.word	0x0800d90c
 8003514:	20000688 	.word	0x20000688
 8003518:	0800d928 	.word	0x0800d928
 800351c:	0800d93c 	.word	0x0800d93c
 8003520:	0800d970 	.word	0x0800d970
 8003524:	0800d99c 	.word	0x0800d99c

08003528 <APP_THREAD_SetSleepyEndDeviceMode>:
 *
 * @param None
 * @retval None
 */
static void APP_THREAD_SetSleepyEndDeviceMode(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
  otError   error = OT_ERROR_NONE;
 800352e:	2300      	movs	r3, #0
 8003530:	71fb      	strb	r3, [r7, #7]

  APP_DBG("Set pool period to %d seconds", THREAD_LINK_POLL_PERIOD);
 8003532:	f642 0305 	movw	r3, #10245	; 0x2805
 8003536:	4a30      	ldr	r2, [pc, #192]	; (80035f8 <APP_THREAD_SetSleepyEndDeviceMode+0xd0>)
 8003538:	2101      	movs	r1, #1
 800353a:	2000      	movs	r0, #0
 800353c:	f7fe ffc8 	bl	80024d0 <logApplication>

  /* Set the pool period to 5 sec. It means that when the device will enter
   * in 'sleepy end device' mode, it will send an ACK_Request every 5 sec.
   * This message will act as keep alive message.
   */
  otLinkSetPollPeriod(NULL, THREAD_LINK_POLL_PERIOD);
 8003540:	f642 0105 	movw	r1, #10245	; 0x2805
 8003544:	2000      	movs	r0, #0
 8003546:	f006 fe7b 	bl	800a240 <otLinkSetPollPeriod>

  /* Set the sleepy end device mode */
  OT_LinkMode.mRxOnWhenIdle = 0;
 800354a:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <APP_THREAD_SetSleepyEndDeviceMode+0xd4>)
 800354c:	7813      	ldrb	r3, [r2, #0]
 800354e:	f36f 0300 	bfc	r3, #0, #1
 8003552:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mSecureDataRequests = 1U;
 8003554:	4a29      	ldr	r2, [pc, #164]	; (80035fc <APP_THREAD_SetSleepyEndDeviceMode+0xd4>)
 8003556:	7813      	ldrb	r3, [r2, #0]
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mDeviceType = 0;
 800355e:	4a27      	ldr	r2, [pc, #156]	; (80035fc <APP_THREAD_SetSleepyEndDeviceMode+0xd4>)
 8003560:	7813      	ldrb	r3, [r2, #0]
 8003562:	f36f 0382 	bfc	r3, #2, #1
 8003566:	7013      	strb	r3, [r2, #0]
  OT_LinkMode.mNetworkData = 1U;
 8003568:	4a24      	ldr	r2, [pc, #144]	; (80035fc <APP_THREAD_SetSleepyEndDeviceMode+0xd4>)
 800356a:	7813      	ldrb	r3, [r2, #0]
 800356c:	f043 0308 	orr.w	r3, r3, #8
 8003570:	7013      	strb	r3, [r2, #0]

  error = otThreadSetLinkMode(NULL,OT_LinkMode);
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <APP_THREAD_SetSleepyEndDeviceMode+0xd4>)
 8003574:	7819      	ldrb	r1, [r3, #0]
 8003576:	2000      	movs	r0, #0
 8003578:	f007 faa4 	bl	800aac4 <otThreadSetLinkMode>
 800357c:	4603      	mov	r3, r0
 800357e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <APP_THREAD_SetSleepyEndDeviceMode+0x68>
    APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	4619      	mov	r1, r3
 800358a:	200e      	movs	r0, #14
 800358c:	f7ff fcd8 	bl	8002f40 <APP_THREAD_Error>
   * to modify its mode to MTD.
   * As a result, you need to first detach from the network before switching from FTD to MTD at runtime,
   * then reattach.
   *
   */
  if (sleepyEndDeviceFlag == FALSE)
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <APP_THREAD_SetSleepyEndDeviceMode+0xd8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11e      	bne.n	80035d6 <APP_THREAD_SetSleepyEndDeviceMode+0xae>
  {
    error = otThreadSetEnabled(NULL, false);
 8003598:	2100      	movs	r1, #0
 800359a:	2000      	movs	r0, #0
 800359c:	f007 fa62 	bl	800aa64 <otThreadSetEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <APP_THREAD_SetSleepyEndDeviceMode+0x8c>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	4619      	mov	r1, r3
 80035ae:	200e      	movs	r0, #14
 80035b0:	f7ff fcc6 	bl	8002f40 <APP_THREAD_Error>
    error = otThreadSetEnabled(NULL, true);
 80035b4:	2101      	movs	r1, #1
 80035b6:	2000      	movs	r0, #0
 80035b8:	f007 fa54 	bl	800aa64 <otThreadSetEnabled>
 80035bc:	4603      	mov	r3, r0
 80035be:	71fb      	strb	r3, [r7, #7]
    if (error != OT_ERROR_NONE)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <APP_THREAD_SetSleepyEndDeviceMode+0xa8>
      APP_THREAD_Error(ERR_THREAD_LINK_MODE,error);
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	4619      	mov	r1, r3
 80035ca:	200e      	movs	r0, #14
 80035cc:	f7ff fcb8 	bl	8002f40 <APP_THREAD_Error>
    sleepyEndDeviceFlag = TRUE;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <APP_THREAD_SetSleepyEndDeviceMode+0xd8>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  }

  APP_DBG("Start CoAP timer for data sending");
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <APP_THREAD_SetSleepyEndDeviceMode+0xdc>)
 80035d8:	2101      	movs	r1, #1
 80035da:	2000      	movs	r0, #0
 80035dc:	f7fe ff78 	bl	80024d0 <logApplication>
  /* Start the timer */
  HW_TS_Start(sedCoapTimerID, (uint32_t)COAP_SEND_TIMEOUT);
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <APP_THREAD_SetSleepyEndDeviceMode+0xe0>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe f823 	bl	8001634 <HW_TS_Start>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	0800d9c4 	.word	0x0800d9c4
 80035fc:	200006ac 	.word	0x200006ac
 8003600:	200006b0 	.word	0x200006b0
 8003604:	0800d9e4 	.word	0x0800d9e4
 8003608:	200006b4 	.word	0x200006b4

0800360c <APP_THREAD_SendCoapMsg>:
 * @brief Process associated to the sending of a COAP request.
 * @param  None
 * @retval None
 */
static void APP_THREAD_SendCoapMsg(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  APP_THREAD_SendCoapMulticastRequest(1);
 8003610:	2001      	movs	r0, #1
 8003612:	f000 f845 	bl	80036a0 <APP_THREAD_SendCoapMulticastRequest>
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <APP_THREAD_CoapRequestHandler>:
  * @retval None
  */
static void APP_THREAD_CoapRequestHandler(void                * pContext,
                                          otMessage           * pMessage,
                                          const otMessageInfo * pMessageInfo)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  do
  {
    if (otCoapMessageGetType(pMessage) != OT_COAP_TYPE_NON_CONFIRMABLE)
 8003628:	68b8      	ldr	r0, [r7, #8]
 800362a:	f006 fba0 	bl	8009d6e <otCoapMessageGetType>
 800362e:	4603      	mov	r3, r0
 8003630:	2b10      	cmp	r3, #16
 8003632:	d128      	bne.n	8003686 <APP_THREAD_CoapRequestHandler+0x6a>
    {
      break;
    }

    if (otCoapMessageGetCode(pMessage) != OT_COAP_CODE_PUT)
 8003634:	68b8      	ldr	r0, [r7, #8]
 8003636:	f006 fbc8 	bl	8009dca <otCoapMessageGetCode>
 800363a:	4603      	mov	r3, r0
 800363c:	2b03      	cmp	r3, #3
 800363e:	d124      	bne.n	800368a <APP_THREAD_CoapRequestHandler+0x6e>
    {
      break;
    }

    if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &OT_ReceivedCommand, 1U) != 1U)
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f006 fe57 	bl	800a2f4 <otMessageGetOffset>
 8003646:	4603      	mov	r3, r0
 8003648:	4619      	mov	r1, r3
 800364a:	2301      	movs	r3, #1
 800364c:	4a11      	ldr	r2, [pc, #68]	; (8003694 <APP_THREAD_CoapRequestHandler+0x78>)
 800364e:	68b8      	ldr	r0, [r7, #8]
 8003650:	f006 feb5 	bl	800a3be <otMessageRead>
 8003654:	4603      	mov	r3, r0
 8003656:	2b01      	cmp	r3, #1
 8003658:	d003      	beq.n	8003662 <APP_THREAD_CoapRequestHandler+0x46>
    {
      APP_THREAD_Error(ERR_THREAD_MESSAGE_READ, 0);
 800365a:	2100      	movs	r1, #0
 800365c:	2009      	movs	r0, #9
 800365e:	f7ff fc6f 	bl	8002f40 <APP_THREAD_Error>
    }

    if (OT_ReceivedCommand == 1U)
 8003662:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <APP_THREAD_CoapRequestHandler+0x78>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d110      	bne.n	800368c <APP_THREAD_CoapRequestHandler+0x70>
    {
      BSP_LED_Toggle(LED3);
 800366a:	2002      	movs	r0, #2
 800366c:	f000 ff76 	bl	800455c <BSP_LED_Toggle>
      APP_DBG("**** Recept COAP nb **** %d ",DebugRxCoapCpt++);
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <APP_THREAD_CoapRequestHandler+0x7c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	4908      	ldr	r1, [pc, #32]	; (8003698 <APP_THREAD_CoapRequestHandler+0x7c>)
 8003678:	600a      	str	r2, [r1, #0]
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <APP_THREAD_CoapRequestHandler+0x80>)
 800367c:	2101      	movs	r1, #1
 800367e:	2000      	movs	r0, #0
 8003680:	f7fe ff26 	bl	80024d0 <logApplication>
    }

  } while (false);
}
 8003684:	e002      	b.n	800368c <APP_THREAD_CoapRequestHandler+0x70>
      break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <APP_THREAD_CoapRequestHandler+0x70>
      break;
 800368a:	bf00      	nop
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	200006a5 	.word	0x200006a5
 8003698:	200006b8 	.word	0x200006b8
 800369c:	0800da08 	.word	0x0800da08

080036a0 <APP_THREAD_SendCoapMulticastRequest>:
  *        on the Thread network
  * @param command : Command associated to the COAP request.
  * @retval None
  */
static void APP_THREAD_SendCoapMulticastRequest(uint8_t command)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af06      	add	r7, sp, #24
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  OT_Command = command;
 80036aa:	4a14      	ldr	r2, [pc, #80]	; (80036fc <APP_THREAD_SendCoapMulticastRequest+0x5c>)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	7013      	strb	r3, [r2, #0]
   * send the command and put back the IP 802_15_4 in sleep mode when possible.
   * If the application send too much ot_cmd commands sequentially, the IP 802_15_4
   * will wake up and sleep at a non reasonable speed. It is why it is advised
   * to control when the IP 802_15_4 radio is allowed to enter in low power.
   */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,FALSE);
 80036b0:	2100      	movs	r1, #0
 80036b2:	2001      	movs	r0, #1
 80036b4:	f005 fc7a 	bl	8008fac <SHCI_C2_RADIO_AllowLowPower>

  /* Send the COAP request */
  APP_THREAD_CoapSendRequest(&OT_Ressource,
 80036b8:	2300      	movs	r3, #0
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	2300      	movs	r3, #0
 80036be:	9303      	str	r3, [sp, #12]
 80036c0:	2301      	movs	r3, #1
 80036c2:	9302      	str	r3, [sp, #8]
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <APP_THREAD_SendCoapMulticastRequest+0x5c>)
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	2300      	movs	r3, #0
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <APP_THREAD_SendCoapMulticastRequest+0x60>)
 80036ce:	2203      	movs	r2, #3
 80036d0:	2110      	movs	r1, #16
 80036d2:	480c      	ldr	r0, [pc, #48]	; (8003704 <APP_THREAD_SendCoapMulticastRequest+0x64>)
 80036d4:	f7ff fe58 	bl	8003388 <APP_THREAD_CoapSendRequest>
      &OT_Command,
      sizeof(OT_Command),
      NULL,
      NULL);

  APP_DBG("*** Send COAP nb **** %d",DebugTxCoapCpt++);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <APP_THREAD_SendCoapMulticastRequest+0x68>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	490a      	ldr	r1, [pc, #40]	; (8003708 <APP_THREAD_SendCoapMulticastRequest+0x68>)
 80036e0:	600a      	str	r2, [r1, #0]
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <APP_THREAD_SendCoapMulticastRequest+0x6c>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7fe fef2 	bl	80024d0 <logApplication>

  /* Allow the 800_15_4 IP to enter in low power mode */
  SHCI_C2_RADIO_AllowLowPower(THREAD_IP,TRUE);
 80036ec:	2101      	movs	r1, #1
 80036ee:	2001      	movs	r0, #1
 80036f0:	f005 fc5c 	bl	8008fac <SHCI_C2_RADIO_AllowLowPower>
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	200006a4 	.word	0x200006a4
 8003700:	0800da28 	.word	0x0800da28
 8003704:	20000018 	.word	0x20000018
 8003708:	200006bc 	.word	0x200006bc
 800370c:	0800da30 	.word	0x0800da30

08003710 <APP_THREAD_CoapTimingElapsed>:

static void APP_THREAD_CoapTimingElapsed( void )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(TASK_COAP_SEND_MSG,CFG_SCH_PRIO_1);
 8003714:	2101      	movs	r1, #1
 8003716:	2040      	movs	r0, #64	; 0x40
 8003718:	f008 f962 	bl	800b9e0 <UTIL_SEQ_SetTask>
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <APP_THREAD_RegisterCmdBuffer+0x1c>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6013      	str	r3, [r2, #0]
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	2000066c 	.word	0x2000066c

08003740 <THREAD_Get_OTCmdPayloadBuffer>:


Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	2000066c 	.word	0x2000066c

08003758 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330b      	adds	r3, #11
}
 8003762:	4618      	mov	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	2000066c 	.word	0x2000066c

08003770 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330b      	adds	r3, #11
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	20000670 	.word	0x20000670

08003788 <Ot_Cmd_Transfer_Common>:

static void Ot_Cmd_Transfer_Common(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <Ot_Cmd_Transfer_Common+0x44>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003798:	725a      	strb	r2, [r3, #9]
 800379a:	2200      	movs	r2, #0
 800379c:	f042 0202 	orr.w	r2, r2, #2
 80037a0:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <Ot_Cmd_Transfer_Common+0x44>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	3302      	adds	r3, #2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <Ot_Cmd_Transfer_Common+0x44>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80037ba:	f006 f8f1 	bl	80099a0 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80037be:	f000 f834 	bl	800382a <Wait_Getting_Ack_From_M0>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000066c 	.word	0x2000066c

080037d0 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  Ot_Cmd_Transfer_Common();
 80037d4:	f7ff ffd8 	bl	8003788 <Ot_Cmd_Transfer_Common>
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}

080037dc <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80037e4:	f000 f828 	bl	8003838 <Receive_Ack_From_M0>

  /* Does not allow OpenThread M0 to M4 notification */
  g_ot_notification_allowed = 0U;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <TL_OT_CmdEvtReceived+0x1c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000248 	.word	0x20000248

080037fc <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <TL_THREAD_NotReceived+0x1c>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800380a:	f000 f81d 	bl	8003848 <Receive_Notification_From_M0>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000670 	.word	0x20000670

0800381c <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8003820:	2008      	movs	r0, #8
 8003822:	f008 f969 	bl	800baf8 <UTIL_SEQ_WaitEvt>
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}

0800382a <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800382e:	2004      	movs	r0, #4
 8003830:	f008 f962 	bl	800baf8 <UTIL_SEQ_WaitEvt>
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}

08003838 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800383c:	2004      	movs	r0, #4
 800383e:	f008 f93b 	bl	800bab8 <UTIL_SEQ_SetEvt>
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <Receive_Notification_From_M0+0x1c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a04      	ldr	r2, [pc, #16]	; (8003864 <Receive_Notification_From_M0+0x1c>)
 8003854:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(TASK_MSG_FROM_M0_TO_M4,CFG_SCH_PRIO_0);
 8003856:	2100      	movs	r1, #0
 8003858:	2010      	movs	r0, #16
 800385a:	f008 f8c1 	bl	800b9e0 <UTIL_SEQ_SetTask>
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000674 	.word	0x20000674

08003868 <RxCpltCallback>:

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
static void RxCpltCallback(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <RxCpltCallback+0x4c>)
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	2bff      	cmp	r3, #255	; 0xff
 8003874:	d816      	bhi.n	80038a4 <RxCpltCallback+0x3c>
  {
    CommandString[indexReceiveChar++] = aRxBuffer[0];
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <RxCpltCallback+0x4c>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	b291      	uxth	r1, r2
 8003880:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <RxCpltCallback+0x4c>)
 8003882:	8011      	strh	r1, [r2, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <RxCpltCallback+0x50>)
 8003888:	7819      	ldrb	r1, [r3, #0]
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <RxCpltCallback+0x54>)
 800388c:	5499      	strb	r1, [r3, r2]
    if (aRxBuffer[0] == '\r')
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <RxCpltCallback+0x50>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b0d      	cmp	r3, #13
 8003894:	d106      	bne.n	80038a4 <RxCpltCallback+0x3c>
    {
      CptReceiveCmdFromUser = 1U;
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <RxCpltCallback+0x58>)
 8003898:	2201      	movs	r2, #1
 800389a:	801a      	strh	r2, [r3, #0]

      /* UART task scheduling*/
      UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 800389c:	2100      	movs	r1, #0
 800389e:	2020      	movs	r0, #32
 80038a0:	f008 f89e 	bl	800b9e0 <UTIL_SEQ_SetTask>
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1U, RxCpltCallback);
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <RxCpltCallback+0x5c>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	4903      	ldr	r1, [pc, #12]	; (80038b8 <RxCpltCallback+0x50>)
 80038aa:	2002      	movs	r0, #2
 80038ac:	f7fe f816 	bl	80018dc <HW_UART_Receive_IT>
}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000668 	.word	0x20000668
 80038b8:	20000468 	.word	0x20000468
 80038bc:	20000568 	.word	0x20000568
 80038c0:	2000066a 	.word	0x2000066a
 80038c4:	08003869 	.word	0x08003869

080038c8 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	2100      	movs	r1, #0
 80038d0:	4812      	ldr	r0, [pc, #72]	; (800391c <Send_CLI_To_M0+0x54>)
 80038d2:	f008 f9df 	bl	800bc94 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <Send_CLI_To_M0+0x58>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	4911      	ldr	r1, [pc, #68]	; (8003924 <Send_CLI_To_M0+0x5c>)
 80038e0:	480e      	ldr	r0, [pc, #56]	; (800391c <Send_CLI_To_M0+0x54>)
 80038e2:	f008 f9c9 	bl	800bc78 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <Send_CLI_To_M0+0x58>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <Send_CLI_To_M0+0x60>)
 80038f0:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <Send_CLI_To_M0+0x60>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	725a      	strb	r2, [r3, #9]
 80038f8:	2200      	movs	r2, #0
 80038fa:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <Send_CLI_To_M0+0x64>)
 80038fe:	2200      	movs	r2, #0
 8003900:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <Send_CLI_To_M0+0x58>)
 8003904:	2200      	movs	r2, #0
 8003906:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8003908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800390c:	2100      	movs	r1, #0
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <Send_CLI_To_M0+0x5c>)
 8003910:	f008 f9c0 	bl	800bc94 <memset>

  TL_CLI_SendCmd();
 8003914:	f006 f852 	bl	80099bc <TL_CLI_SendCmd>
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20030c70 	.word	0x20030c70
 8003920:	20000668 	.word	0x20000668
 8003924:	20000568 	.word	0x20000568
 8003928:	20030c64 	.word	0x20030c64
 800392c:	2000066a 	.word	0x2000066a

08003930 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8003934:	f006 f85e 	bl	80099f4 <TL_THREAD_CliSendAck>
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}

0800393c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU,Send_CLI_To_M0);
 8003940:	4a07      	ldr	r2, [pc, #28]	; (8003960 <APP_THREAD_Init_UART_CLI+0x24>)
 8003942:	2100      	movs	r1, #0
 8003944:	2020      	movs	r0, #32
 8003946:	f008 f829 	bl	800b99c <UTIL_SEQ_RegTask>
#endif /* (CFG_FULL_LOW_POWER == 0) */

#if (CFG_USB_INTERFACE_ENABLE != 0)
#else
#if (CFG_FULL_LOW_POWER == 0)
  HW_UART_Init(CFG_CLI_UART);
 800394a:	2002      	movs	r0, #2
 800394c:	f7fd ff6c 	bl	8001828 <HW_UART_Init>
  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <APP_THREAD_Init_UART_CLI+0x28>)
 8003952:	2201      	movs	r2, #1
 8003954:	4904      	ldr	r1, [pc, #16]	; (8003968 <APP_THREAD_Init_UART_CLI+0x2c>)
 8003956:	2002      	movs	r0, #2
 8003958:	f7fd ffc0 	bl	80018dc <HW_UART_Receive_IT>
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}
 8003960:	080038c9 	.word	0x080038c9
 8003964:	08003869 	.word	0x08003869
 8003968:	20000468 	.word	0x20000468

0800396c <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8003972:	4a07      	ldr	r2, [pc, #28]	; (8003990 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8003974:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8003978:	4a06      	ldr	r2, [pc, #24]	; (8003994 <APP_THREAD_TL_THREAD_INIT+0x28>)
 800397a:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <APP_THREAD_TL_THREAD_INIT+0x20>)
 800397e:	4a06      	ldr	r2, [pc, #24]	; (8003998 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8003980:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8003982:	4802      	ldr	r0, [pc, #8]	; (800398c <APP_THREAD_TL_THREAD_INIT+0x20>)
 8003984:	f005 fff0 	bl	8009968 <TL_THREAD_Init>
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20030134 	.word	0x20030134
 8003990:	20030a4c 	.word	0x20030a4c
 8003994:	20030b58 	.word	0x20030b58
 8003998:	20030c64 	.word	0x20030c64

0800399c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	7adb      	ldrb	r3, [r3, #11]
 80039ac:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	330c      	adds	r3, #12
 80039b2:	490b      	ldr	r1, [pc, #44]	; (80039e0 <TL_THREAD_CliNotReceived+0x44>)
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fbe3 	bl	8000180 <strcmp>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <TL_THREAD_CliNotReceived+0x38>
  {
    /* Write to CLI UART */
#if (CFG_USB_INTERFACE_ENABLE != 0)
    VCP_SendData( l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#else
    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f103 010c 	add.w	r1, r3, #12
 80039c6:	7afb      	ldrb	r3, [r7, #11]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <TL_THREAD_CliNotReceived+0x48>)
 80039cc:	2002      	movs	r0, #2
 80039ce:	f7fd ffbf 	bl	8001950 <HW_UART_Transmit_IT>
  }
  else
  {
    Send_CLI_Ack_For_OT();
  }
}
 80039d2:	e001      	b.n	80039d8 <TL_THREAD_CliNotReceived+0x3c>
    Send_CLI_Ack_For_OT();
 80039d4:	f7ff ffac 	bl	8003930 <Send_CLI_Ack_For_OT>
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	0800da4c 	.word	0x0800da4c
 80039e4:	080039e9 	.word	0x080039e9

080039e8 <HostTxCb>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void HostTxCb(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  Send_CLI_Ack_For_OT();
 80039ec:	f7ff ffa0 	bl	8003930 <Send_CLI_Ack_For_OT>
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d904      	bls.n	8003a12 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7ff fa98 	bl	8002f40 <APP_THREAD_Error>
 8003a10:	e001      	b.n	8003a16 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8003a12:	f006 fd11 	bl	800a438 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8003a16:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000674 	.word	0x20000674

08003a24 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d01b      	beq.n	8003a6c <P2PS_STM_App_Notification+0x48>
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	f300 8085 	bgt.w	8003b44 <P2PS_STM_App_Notification+0x120>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <P2PS_STM_App_Notification+0x20>
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d00a      	beq.n	8003a58 <P2PS_STM_App_Notification+0x34>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8003a42:	e07f      	b.n	8003b44 <P2PS_STM_App_Notification+0x120>
      P2P_Server_App_Context.Notification_Status = 1;
 8003a44:	4b43      	ldr	r3, [pc, #268]	; (8003b54 <P2PS_STM_App_Notification+0x130>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8003a4a:	4843      	ldr	r0, [pc, #268]	; (8003b58 <P2PS_STM_App_Notification+0x134>)
 8003a4c:	f008 f9b0 	bl	800bdb0 <puts>
      APP_DBG_MSG(" \n\r");
 8003a50:	4842      	ldr	r0, [pc, #264]	; (8003b5c <P2PS_STM_App_Notification+0x138>)
 8003a52:	f008 f927 	bl	800bca4 <iprintf>
      break;
 8003a56:	e078      	b.n	8003b4a <P2PS_STM_App_Notification+0x126>
      P2P_Server_App_Context.Notification_Status = 0;
 8003a58:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <P2PS_STM_App_Notification+0x130>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8003a5e:	4840      	ldr	r0, [pc, #256]	; (8003b60 <P2PS_STM_App_Notification+0x13c>)
 8003a60:	f008 f9a6 	bl	800bdb0 <puts>
      APP_DBG_MSG(" \n\r");
 8003a64:	483d      	ldr	r0, [pc, #244]	; (8003b5c <P2PS_STM_App_Notification+0x138>)
 8003a66:	f008 f91d 	bl	800bca4 <iprintf>
      break;
 8003a6a:	e06e      	b.n	8003b4a <P2PS_STM_App_Notification+0x126>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d123      	bne.n	8003abe <P2PS_STM_App_Notification+0x9a>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10b      	bne.n	8003a9a <P2PS_STM_App_Notification+0x76>
          BSP_LED_On(LED_BLUE);
 8003a82:	2000      	movs	r0, #0
 8003a84:	f000 fd36 	bl	80044f4 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 8003a88:	4836      	ldr	r0, [pc, #216]	; (8003b64 <P2PS_STM_App_Notification+0x140>)
 8003a8a:	f008 f991 	bl	800bdb0 <puts>
          APP_DBG_MSG(" \n\r");
 8003a8e:	4833      	ldr	r0, [pc, #204]	; (8003b5c <P2PS_STM_App_Notification+0x138>)
 8003a90:	f008 f908 	bl	800bca4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003a94:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <P2PS_STM_App_Notification+0x130>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <P2PS_STM_App_Notification+0x9a>
          BSP_LED_Off(LED_BLUE);
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f000 fd3e 	bl	8004528 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 8003aac:	482e      	ldr	r0, [pc, #184]	; (8003b68 <P2PS_STM_App_Notification+0x144>)
 8003aae:	f008 f97f 	bl	800bdb0 <puts>
          APP_DBG_MSG(" \n\r");
 8003ab2:	482a      	ldr	r0, [pc, #168]	; (8003b5c <P2PS_STM_App_Notification+0x138>)
 8003ab4:	f008 f8f6 	bl	800bca4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8003ab8:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <P2PS_STM_App_Notification+0x130>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d13f      	bne.n	8003b48 <P2PS_STM_App_Notification+0x124>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	3301      	adds	r3, #1
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10b      	bne.n	8003aec <P2PS_STM_App_Notification+0xc8>
          BSP_LED_On(LED_BLUE);
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	f000 fd0d 	bl	80044f4 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8003ada:	4824      	ldr	r0, [pc, #144]	; (8003b6c <P2PS_STM_App_Notification+0x148>)
 8003adc:	f008 f968 	bl	800bdb0 <puts>
          APP_DBG_MSG(" \n\r");
 8003ae0:	481e      	ldr	r0, [pc, #120]	; (8003b5c <P2PS_STM_App_Notification+0x138>)
 8003ae2:	f008 f8df 	bl	800bca4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <P2PS_STM_App_Notification+0x130>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	3301      	adds	r3, #1
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <P2PS_STM_App_Notification+0xec>
          BSP_LED_Off(LED_BLUE);
 8003af8:	2000      	movs	r0, #0
 8003afa:	f000 fd15 	bl	8004528 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8003afe:	481c      	ldr	r0, [pc, #112]	; (8003b70 <P2PS_STM_App_Notification+0x14c>)
 8003b00:	f008 f956 	bl	800bdb0 <puts>
          APP_DBG_MSG(" \n\r");
 8003b04:	4815      	ldr	r0, [pc, #84]	; (8003b5c <P2PS_STM_App_Notification+0x138>)
 8003b06:	f008 f8cd 	bl	800bca4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <P2PS_STM_App_Notification+0x130>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x02)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	3301      	adds	r3, #1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d115      	bne.n	8003b48 <P2PS_STM_App_Notification+0x124>
            BSP_LED_Off(LED_BLUE);
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f000 fd03 	bl	8004528 <BSP_LED_Off>
            APP_DBG("SYSTEM: SWITCH TO THREAD");
 8003b22:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <P2PS_STM_App_Notification+0x150>)
 8003b24:	2101      	movs	r1, #1
 8003b26:	2000      	movs	r0, #0
 8003b28:	f7fe fcd2 	bl	80024d0 <logApplication>
            APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : SWITCH TO THREAD\n");
 8003b2c:	4812      	ldr	r0, [pc, #72]	; (8003b78 <P2PS_STM_App_Notification+0x154>)
 8003b2e:	f008 f93f 	bl	800bdb0 <puts>
            APP_DBG_MSG(" \n\r");
 8003b32:	480a      	ldr	r0, [pc, #40]	; (8003b5c <P2PS_STM_App_Notification+0x138>)
 8003b34:	f008 f8b6 	bl	800bca4 <iprintf>
            UTIL_SEQ_SetTask(1<<CFG_Task_Switch_Protocol,CFG_SCH_PRIO_0);
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b3e:	f007 ff4f 	bl	800b9e0 <UTIL_SEQ_SetTask>
      break;
 8003b42:	e001      	b.n	8003b48 <P2PS_STM_App_Notification+0x124>
      break;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <P2PS_STM_App_Notification+0x126>
      break;
 8003b48:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8003b4a:	bf00      	nop
}
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200001e8 	.word	0x200001e8
 8003b58:	0800da50 	.word	0x0800da50
 8003b5c:	0800da84 	.word	0x0800da84
 8003b60:	0800da88 	.word	0x0800da88
 8003b64:	0800dabc 	.word	0x0800dabc
 8003b68:	0800dae4 	.word	0x0800dae4
 8003b6c:	0800db0c 	.word	0x0800db0c
 8003b70:	0800db34 	.word	0x0800db34
 8003b74:	0800db5c 	.word	0x0800db5c
 8003b78:	0800db78 	.word	0x0800db78

08003b7c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <P2PS_APP_Notification+0x1c>
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d000      	beq.n	8003b92 <P2PS_APP_Notification+0x16>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8003b90:	e003      	b.n	8003b9a <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8003b92:	f000 f819 	bl	8003bc8 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8003b96:	e000      	b.n	8003b9a <P2PS_APP_Notification+0x1e>
    break;
 8003b98:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8003b9a:	bf00      	nop
}
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8003ba8:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <P2PS_APP_Init+0x1c>)
 8003baa:	2100      	movs	r1, #0
 8003bac:	2002      	movs	r0, #2
 8003bae:	f007 fef5 	bl	800b99c <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8003bb2:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <P2PS_APP_Init+0x20>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8003bb8:	f000 f806 	bl	8003bc8 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8003bbc:	bf00      	nop
}
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	08003c05 	.word	0x08003c05
 8003bc4:	200001e8 	.word	0x200001e8

08003bc8 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f000 fcab 	bl	8004528 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8003be4:	4b02      	ldr	r3, [pc, #8]	; (8003bf0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200001e8 	.word	0x200001e8

08003bf4 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	2002      	movs	r0, #2
 8003bfc:	f007 fef0 	bl	800b9e0 <UTIL_SEQ_SetTask>

  return;
 8003c00:	bf00      	nop
}
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <P2PS_Send_Notification+0x44>)
 8003c0a:	791b      	ldrb	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d103      	bne.n	8003c18 <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <P2PS_Send_Notification+0x44>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	711a      	strb	r2, [r3, #4]
 8003c16:	e002      	b.n	8003c1e <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <P2PS_Send_Notification+0x44>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <P2PS_Send_Notification+0x44>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 8003c26:	4809      	ldr	r0, [pc, #36]	; (8003c4c <P2PS_Send_Notification+0x48>)
 8003c28:	f008 f83c 	bl	800bca4 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003c2c:	4808      	ldr	r0, [pc, #32]	; (8003c50 <P2PS_Send_Notification+0x4c>)
 8003c2e:	f008 f839 	bl	800bca4 <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8003c32:	4908      	ldr	r1, [pc, #32]	; (8003c54 <P2PS_Send_Notification+0x50>)
 8003c34:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8003c38:	f004 f93c 	bl	8007eb4 <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8003c3c:	e003      	b.n	8003c46 <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8003c3e:	4806      	ldr	r0, [pc, #24]	; (8003c58 <P2PS_Send_Notification+0x54>)
 8003c40:	f008 f830 	bl	800bca4 <iprintf>
  return;
 8003c44:	bf00      	nop
}
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	200001e8 	.word	0x200001e8
 8003c4c:	0800dba8 	.word	0x0800dba8
 8003c50:	0800da84 	.word	0x0800da84
 8003c54:	200001eb 	.word	0x200001eb
 8003c58:	0800dbe8 	.word	0x0800dbe8

08003c5c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <LL_PWR_EnableBootC2+0x1c>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <LL_PWR_EnableBootC2+0x1c>)
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	58000400 	.word	0x58000400

08003c7c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003c86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003c8a:	4905      	ldr	r1, [pc, #20]	; (8003ca0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	58000800 	.word	0x58000800

08003ca4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003cae:	6a1a      	ldr	r2, [r3, #32]
 8003cb0:	4904      	ldr	r1, [pc, #16]	; (8003cc4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	620b      	str	r3, [r1, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	58000800 	.word	0x58000800

08003cc8 <LL_AHB3_GRP1_EnableClock>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cec:	68fb      	ldr	r3, [r7, #12]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d24:	68fb      	ldr	r3, [r7, #12]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <LL_C1_IPCC_EnableIT_TXF>:
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	041b      	lsls	r3, r3, #16
 8003d84:	43db      	mvns	r3, r3
 8003d86:	401a      	ands	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	605a      	str	r2, [r3, #4]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_C1_IPCC_EnableReceiveChannel>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	605a      	str	r2, [r3, #4]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	609a      	str	r2, [r3, #8]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_C1_IPCC_SetFlag_CHx>:
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	041a      	lsls	r2, r3, #16
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d101      	bne.n	8003e58 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4013      	ands	r3, r2
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d101      	bne.n	8003e82 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003e94:	2102      	movs	r1, #2
 8003e96:	482a      	ldr	r0, [pc, #168]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003e98:	f7ff ffe5 	bl	8003e66 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HW_IPCC_Rx_Handler+0x26>
 8003ea2:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003eb0:	f000 f90c 	bl	80040cc <HW_IPCC_SYS_EvtHandler>
 8003eb4:	e041      	b.n	8003f3a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8003eb6:	2104      	movs	r1, #4
 8003eb8:	4821      	ldr	r0, [pc, #132]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003eba:	f7ff ffd4 	bl	8003e66 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <HW_IPCC_Rx_Handler+0x48>
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8003ed2:	f000 f955 	bl	8004180 <HW_IPCC_THREAD_NotEvtHandler>
 8003ed6:	e030      	b.n	8003f3a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8003ed8:	2110      	movs	r1, #16
 8003eda:	4819      	ldr	r0, [pc, #100]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003edc:	f7ff ffc3 	bl	8003e66 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HW_IPCC_Rx_Handler+0x6a>
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8003ef4:	f000 f950 	bl	8004198 <HW_IPCC_THREAD_CliNotEvtHandler>
 8003ef8:	e01f      	b.n	8003f3a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003efa:	2101      	movs	r1, #1
 8003efc:	4810      	ldr	r0, [pc, #64]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003efe:	f7ff ffb2 	bl	8003e66 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HW_IPCC_Rx_Handler+0x8a>
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8003f14:	f000 f89e 	bl	8004054 <HW_IPCC_BLE_EvtHandler>
 8003f18:	e00f      	b.n	8003f3a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003f1a:	2108      	movs	r1, #8
 8003f1c:	4808      	ldr	r0, [pc, #32]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003f1e:	f7ff ffa2 	bl	8003e66 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HW_IPCC_Rx_Handler+0xac>
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HW_IPCC_Rx_Handler+0xb0>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003f36:	f000 f97b 	bl	8004230 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
}
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	58000c00 	.word	0x58000c00

08003f44 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4822      	ldr	r0, [pc, #136]	; (8003fd4 <HW_IPCC_Tx_Handler+0x90>)
 8003f4c:	f7ff ff76 	bl	8003e3c <LL_C1_IPCC_IsActiveFlag_CHx>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HW_IPCC_Tx_Handler+0x26>
 8003f56:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <HW_IPCC_Tx_Handler+0x90>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003f64:	f000 f8a6 	bl	80040b4 <HW_IPCC_SYS_CmdEvtHandler>
 8003f68:	e031      	b.n	8003fce <HW_IPCC_Tx_Handler+0x8a>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	4819      	ldr	r0, [pc, #100]	; (8003fd4 <HW_IPCC_Tx_Handler+0x90>)
 8003f6e:	f7ff ff65 	bl	8003e3c <LL_C1_IPCC_IsActiveFlag_CHx>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HW_IPCC_Tx_Handler+0x48>
 8003f78:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <HW_IPCC_Tx_Handler+0x90>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8003f86:	f000 f8ef 	bl	8004168 <HW_IPCC_OT_CmdEvtHandler>
 8003f8a:	e020      	b.n	8003fce <HW_IPCC_Tx_Handler+0x8a>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */

  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	4811      	ldr	r0, [pc, #68]	; (8003fd4 <HW_IPCC_Tx_Handler+0x90>)
 8003f90:	f7ff ff54 	bl	8003e3c <LL_C1_IPCC_IsActiveFlag_CHx>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HW_IPCC_Tx_Handler+0x6a>
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <HW_IPCC_Tx_Handler+0x90>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003fa8:	f000 f924 	bl	80041f4 <HW_IPCC_MM_FreeBufHandler>
 8003fac:	e00f      	b.n	8003fce <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8003fae:	2120      	movs	r1, #32
 8003fb0:	4808      	ldr	r0, [pc, #32]	; (8003fd4 <HW_IPCC_Tx_Handler+0x90>)
 8003fb2:	f7ff ff43 	bl	8003e3c <LL_C1_IPCC_IsActiveFlag_CHx>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <HW_IPCC_Tx_Handler+0x8c>
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HW_IPCC_Tx_Handler+0x90>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003fca:	f000 f84f 	bl	800406c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
}
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	58000c00 	.word	0x58000c00

08003fd8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003fdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003fe0:	f7ff fe8b 	bl	8003cfa <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003fe4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003fe8:	f7ff fe48 	bl	8003c7c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003fec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ff0:	f7ff fe58 	bl	8003ca4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003ff4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003ff6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003ff8:	f7ff fe30 	bl	8003c5c <LL_PWR_EnableBootC2>

  return;
 8003ffc:	bf00      	nop
}
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8004004:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004008:	f7ff fe5e 	bl	8003cc8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800400c:	4806      	ldr	r0, [pc, #24]	; (8004028 <HW_IPCC_Init+0x28>)
 800400e:	f7ff fea0 	bl	8003d52 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8004012:	4805      	ldr	r0, [pc, #20]	; (8004028 <HW_IPCC_Init+0x28>)
 8004014:	f7ff fe8d 	bl	8003d32 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004018:	202c      	movs	r0, #44	; 0x2c
 800401a:	f000 fd38 	bl	8004a8e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800401e:	202d      	movs	r0, #45	; 0x2d
 8004020:	f000 fd35 	bl	8004a8e <HAL_NVIC_EnableIRQ>

  return;
 8004024:	bf00      	nop
}
 8004026:	bd80      	pop	{r7, pc}
 8004028:	58000c00 	.word	0x58000c00

0800402c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004030:	2101      	movs	r1, #1
 8004032:	4802      	ldr	r0, [pc, #8]	; (800403c <HW_IPCC_BLE_Init+0x10>)
 8004034:	f7ff fec2 	bl	8003dbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004038:	bf00      	nop
}
 800403a:	bd80      	pop	{r7, pc}
 800403c:	58000c00 	.word	0x58000c00

08004040 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8004044:	2101      	movs	r1, #1
 8004046:	4802      	ldr	r0, [pc, #8]	; (8004050 <HW_IPCC_BLE_SendCmd+0x10>)
 8004048:	f7ff fee9 	bl	8003e1e <LL_C1_IPCC_SetFlag_CHx>

  return;
 800404c:	bf00      	nop
}
 800404e:	bd80      	pop	{r7, pc}
 8004050:	58000c00 	.word	0x58000c00

08004054 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8004058:	f005 fbce 	bl	80097f8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800405c:	2101      	movs	r1, #1
 800405e:	4802      	ldr	r0, [pc, #8]	; (8004068 <HW_IPCC_BLE_EvtHandler+0x14>)
 8004060:	f7ff fecf 	bl	8003e02 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004064:	bf00      	nop
}
 8004066:	bd80      	pop	{r7, pc}
 8004068:	58000c00 	.word	0x58000c00

0800406c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004070:	2120      	movs	r1, #32
 8004072:	4803      	ldr	r0, [pc, #12]	; (8004080 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004074:	f7ff fe90 	bl	8003d98 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8004078:	f005 fbee 	bl	8009858 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800407c:	bf00      	nop
}
 800407e:	bd80      	pop	{r7, pc}
 8004080:	58000c00 	.word	0x58000c00

08004084 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004088:	2102      	movs	r1, #2
 800408a:	4802      	ldr	r0, [pc, #8]	; (8004094 <HW_IPCC_SYS_Init+0x10>)
 800408c:	f7ff fe96 	bl	8003dbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004090:	bf00      	nop
}
 8004092:	bd80      	pop	{r7, pc}
 8004094:	58000c00 	.word	0x58000c00

08004098 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800409c:	2102      	movs	r1, #2
 800409e:	4804      	ldr	r0, [pc, #16]	; (80040b0 <HW_IPCC_SYS_SendCmd+0x18>)
 80040a0:	f7ff febd 	bl	8003e1e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80040a4:	2102      	movs	r1, #2
 80040a6:	4802      	ldr	r0, [pc, #8]	; (80040b0 <HW_IPCC_SYS_SendCmd+0x18>)
 80040a8:	f7ff fe63 	bl	8003d72 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80040ac:	bf00      	nop
}
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	58000c00 	.word	0x58000c00

080040b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80040b8:	2102      	movs	r1, #2
 80040ba:	4803      	ldr	r0, [pc, #12]	; (80040c8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80040bc:	f7ff fe6c 	bl	8003d98 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80040c0:	f005 fc1a 	bl	80098f8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80040c4:	bf00      	nop
}
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	58000c00 	.word	0x58000c00

080040cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80040d0:	f005 fc28 	bl	8009924 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80040d4:	2102      	movs	r1, #2
 80040d6:	4802      	ldr	r0, [pc, #8]	; (80040e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80040d8:	f7ff fe93 	bl	8003e02 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80040dc:	bf00      	nop
}
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	58000c00 	.word	0x58000c00

080040e4 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80040e8:	2104      	movs	r1, #4
 80040ea:	4804      	ldr	r0, [pc, #16]	; (80040fc <HW_IPCC_THREAD_Init+0x18>)
 80040ec:	f7ff fe66 	bl	8003dbc <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80040f0:	2110      	movs	r1, #16
 80040f2:	4802      	ldr	r0, [pc, #8]	; (80040fc <HW_IPCC_THREAD_Init+0x18>)
 80040f4:	f7ff fe62 	bl	8003dbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80040f8:	bf00      	nop
}
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	58000c00 	.word	0x58000c00

08004100 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8004104:	2104      	movs	r1, #4
 8004106:	4804      	ldr	r0, [pc, #16]	; (8004118 <HW_IPCC_OT_SendCmd+0x18>)
 8004108:	f7ff fe89 	bl	8003e1e <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800410c:	2104      	movs	r1, #4
 800410e:	4802      	ldr	r0, [pc, #8]	; (8004118 <HW_IPCC_OT_SendCmd+0x18>)
 8004110:	f7ff fe2f 	bl	8003d72 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004114:	bf00      	nop
}
 8004116:	bd80      	pop	{r7, pc}
 8004118:	58000c00 	.word	0x58000c00

0800411c <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8004120:	2110      	movs	r1, #16
 8004122:	4802      	ldr	r0, [pc, #8]	; (800412c <HW_IPCC_CLI_SendCmd+0x10>)
 8004124:	f7ff fe7b 	bl	8003e1e <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004128:	bf00      	nop
}
 800412a:	bd80      	pop	{r7, pc}
 800412c:	58000c00 	.word	0x58000c00

08004130 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8004134:	2104      	movs	r1, #4
 8004136:	4804      	ldr	r0, [pc, #16]	; (8004148 <HW_IPCC_THREAD_SendAck+0x18>)
 8004138:	f7ff fe63 	bl	8003e02 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800413c:	2104      	movs	r1, #4
 800413e:	4802      	ldr	r0, [pc, #8]	; (8004148 <HW_IPCC_THREAD_SendAck+0x18>)
 8004140:	f7ff fe3c 	bl	8003dbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004144:	bf00      	nop
}
 8004146:	bd80      	pop	{r7, pc}
 8004148:	58000c00 	.word	0x58000c00

0800414c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8004150:	2110      	movs	r1, #16
 8004152:	4804      	ldr	r0, [pc, #16]	; (8004164 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8004154:	f7ff fe55 	bl	8003e02 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8004158:	2110      	movs	r1, #16
 800415a:	4802      	ldr	r0, [pc, #8]	; (8004164 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800415c:	f7ff fe2e 	bl	8003dbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004160:	bf00      	nop
}
 8004162:	bd80      	pop	{r7, pc}
 8004164:	58000c00 	.word	0x58000c00

08004168 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800416c:	2104      	movs	r1, #4
 800416e:	4803      	ldr	r0, [pc, #12]	; (800417c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8004170:	f7ff fe12 	bl	8003d98 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8004174:	f005 fc4c 	bl	8009a10 <HW_IPCC_OT_CmdEvtNot>

  return;
 8004178:	bf00      	nop
}
 800417a:	bd80      	pop	{r7, pc}
 800417c:	58000c00 	.word	0x58000c00

08004180 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8004184:	2104      	movs	r1, #4
 8004186:	4803      	ldr	r0, [pc, #12]	; (8004194 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8004188:	f7ff fe2a 	bl	8003de0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 800418c:	f005 fc4c 	bl	8009a28 <HW_IPCC_THREAD_EvtNot>

  return;
 8004190:	bf00      	nop
}
 8004192:	bd80      	pop	{r7, pc}
 8004194:	58000c00 	.word	0x58000c00

08004198 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800419c:	2110      	movs	r1, #16
 800419e:	4803      	ldr	r0, [pc, #12]	; (80041ac <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80041a0:	f7ff fe1e 	bl	8003de0 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80041a4:	f005 fc4c 	bl	8009a40 <HW_IPCC_THREAD_CliEvtNot>

  return;
 80041a8:	bf00      	nop
}
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	58000c00 	.word	0x58000c00

080041b0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80041b8:	2108      	movs	r1, #8
 80041ba:	480c      	ldr	r0, [pc, #48]	; (80041ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80041bc:	f7ff fe3e 	bl	8003e3c <LL_C1_IPCC_IsActiveFlag_CHx>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80041cc:	2108      	movs	r1, #8
 80041ce:	4807      	ldr	r0, [pc, #28]	; (80041ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80041d0:	f7ff fdcf 	bl	8003d72 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80041d4:	e006      	b.n	80041e4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80041da:	2108      	movs	r1, #8
 80041dc:	4803      	ldr	r0, [pc, #12]	; (80041ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80041de:	f7ff fe1e 	bl	8003e1e <LL_C1_IPCC_SetFlag_CHx>
  return;
 80041e2:	bf00      	nop
}
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	58000c00 	.word	0x58000c00
 80041f0:	200006c0 	.word	0x200006c0

080041f4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80041f8:	2108      	movs	r1, #8
 80041fa:	4806      	ldr	r0, [pc, #24]	; (8004214 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80041fc:	f7ff fdcc 	bl	8003d98 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004206:	2108      	movs	r1, #8
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800420a:	f7ff fe08 	bl	8003e1e <LL_C1_IPCC_SetFlag_CHx>

  return;
 800420e:	bf00      	nop
}
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	58000c00 	.word	0x58000c00
 8004218:	200006c0 	.word	0x200006c0

0800421c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004220:	2108      	movs	r1, #8
 8004222:	4802      	ldr	r0, [pc, #8]	; (800422c <HW_IPCC_TRACES_Init+0x10>)
 8004224:	f7ff fdca 	bl	8003dbc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004228:	bf00      	nop
}
 800422a:	bd80      	pop	{r7, pc}
 800422c:	58000c00 	.word	0x58000c00

08004230 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004234:	f005 fc96 	bl	8009b64 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004238:	2108      	movs	r1, #8
 800423a:	4802      	ldr	r0, [pc, #8]	; (8004244 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800423c:	f7ff fde1 	bl	8003e02 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004240:	bf00      	nop
}
 8004242:	bd80      	pop	{r7, pc}
 8004244:	58000c00 	.word	0x58000c00

08004248 <LL_RCC_HSE_Enable>:
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <LL_RCC_HSE_IsReady>:
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004278:	d101      	bne.n	800427e <LL_RCC_HSE_IsReady+0x18>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <LL_RCC_HSE_IsReady+0x1a>
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8004294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004298:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800429a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	cafecafe 	.word	0xcafecafe

080042c8 <LL_RCC_MSI_Disable>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_RCC_SetSysClkSource>:
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 0203 	bic.w	r2, r3, #3
 80042f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_RCC_GetSysClkSource>:
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <LL_FLASH_SetLatency>:
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <LL_FLASH_SetLatency+0x24>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	; (800434c <LL_FLASH_SetLatency+0x24>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	58004000 	.word	0x58004000

08004350 <LL_FLASH_GetLatency>:
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <LL_FLASH_GetLatency+0x18>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	58004000 	.word	0x58004000

0800436c <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	OTP_ID0_t * p_otp;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <SystemInit+0x70>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	4a18      	ldr	r2, [pc, #96]	; (80043dc <SystemInit+0x70>)
 800437a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800437e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/**
	 * Read HSE_Tuning from OTP
	 */
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8004382:	2000      	movs	r0, #0
 8004384:	f006 fcc6 	bl	800ad14 <OTP_Read>
 8004388:	6078      	str	r0, [r7, #4]
	if (p_otp)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <SystemInit+0x2e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	799b      	ldrb	r3, [r3, #6]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff79 	bl	800428c <LL_RCC_HSE_SetCapacitorTuning>
	}

	LL_RCC_HSE_Enable();
 800439a:	f7ff ff55 	bl	8004248 <LL_RCC_HSE_Enable>

	/**
	 * Set FLASH latency to 1WS
	 */
	LL_FLASH_SetLatency( LL_FLASH_LATENCY_1 );
 800439e:	2001      	movs	r0, #1
 80043a0:	f7ff ffc2 	bl	8004328 <LL_FLASH_SetLatency>
	while( LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1 );
 80043a4:	bf00      	nop
 80043a6:	f7ff ffd3 	bl	8004350 <LL_FLASH_GetLatency>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d1fa      	bne.n	80043a6 <SystemInit+0x3a>

	/**
	 * Switch to HSE
	 *
	 */
	while(!LL_RCC_HSE_IsReady());
 80043b0:	bf00      	nop
 80043b2:	f7ff ff58 	bl	8004266 <LL_RCC_HSE_IsReady>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0fa      	beq.n	80043b2 <SystemInit+0x46>
	LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSE );
 80043bc:	2002      	movs	r0, #2
 80043be:	f7ff ff92 	bl	80042e6 <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 80043c2:	bf00      	nop
 80043c4:	f7ff ffa3 	bl	800430e <LL_RCC_GetSysClkSource>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d1fa      	bne.n	80043c4 <SystemInit+0x58>

	/**
	 * Switch OFF MSI
	 */
	LL_RCC_MSI_Disable();
 80043ce:	f7ff ff7b 	bl	80042c8 <LL_RCC_MSI_Disable>
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80043e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e4:	3304      	adds	r3, #4

080043e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80043ea:	d3f9      	bcc.n	80043e0 <CopyDataInit>
  bx lr
 80043ec:	4770      	bx	lr

080043ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80043ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80043f0:	3004      	adds	r0, #4

080043f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80043f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80043f4:	d3fb      	bcc.n	80043ee <FillZerobss>
  bx lr
 80043f6:	4770      	bx	lr

080043f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043f8:	480c      	ldr	r0, [pc, #48]	; (800442c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80043fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80043fc:	f7ff ffb6 	bl	800436c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004400:	480b      	ldr	r0, [pc, #44]	; (8004430 <LoopForever+0x8>)
 8004402:	490c      	ldr	r1, [pc, #48]	; (8004434 <LoopForever+0xc>)
 8004404:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <LoopForever+0x10>)
 8004406:	2300      	movs	r3, #0
 8004408:	f7ff ffed 	bl	80043e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800440c:	480b      	ldr	r0, [pc, #44]	; (800443c <LoopForever+0x14>)
 800440e:	490c      	ldr	r1, [pc, #48]	; (8004440 <LoopForever+0x18>)
 8004410:	2300      	movs	r3, #0
 8004412:	f7ff ffee 	bl	80043f2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004416:	480b      	ldr	r0, [pc, #44]	; (8004444 <LoopForever+0x1c>)
 8004418:	490b      	ldr	r1, [pc, #44]	; (8004448 <LoopForever+0x20>)
 800441a:	2300      	movs	r3, #0
 800441c:	f7ff ffe9 	bl	80043f2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004420:	f007 fc06 	bl	800bc30 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004424:	f7fd fe70 	bl	8002108 <main>

08004428 <LoopForever>:

LoopForever:
  b LoopForever
 8004428:	e7fe      	b.n	8004428 <LoopForever>
 800442a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800442c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004430:	20000008 	.word	0x20000008
 8004434:	200000b4 	.word	0x200000b4
 8004438:	0800de10 	.word	0x0800de10
  INIT_BSS _sbss, _ebss
 800443c:	2000022c 	.word	0x2000022c
 8004440:	200018b4 	.word	0x200018b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004444:	200301ec 	.word	0x200301ec
 8004448:	20030d7f 	.word	0x20030d7f

0800444c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800444c:	e7fe      	b.n	800444c <ADC1_IRQHandler>

0800444e <LL_AHB2_GRP1_EnableClock>:
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800445c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4313      	orrs	r3, r2
 8004464:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4013      	ands	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004472:	68fb      	ldr	r3, [r7, #12]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	609a      	str	r2, [r3, #8]
 8004496:	60da      	str	r2, [r3, #12]
 8004498:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800449a:	2002      	movs	r0, #2
 800449c:	f7ff ffd7 	bl	800444e <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <BSP_LED_Init+0x6c>)
 80044a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044aa:	2301      	movs	r3, #1
 80044ac:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044b2:	2302      	movs	r3, #2
 80044b4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <BSP_LED_Init+0x70>)
 80044ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044be:	f107 020c 	add.w	r2, r7, #12
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fe5d 	bl	8005184 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	4a08      	ldr	r2, [pc, #32]	; (80044f0 <BSP_LED_Init+0x70>)
 80044ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	4a05      	ldr	r2, [pc, #20]	; (80044ec <BSP_LED_Init+0x6c>)
 80044d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044da:	2200      	movs	r2, #0
 80044dc:	4619      	mov	r1, r3
 80044de:	f000 ffc1 	bl	8005464 <HAL_GPIO_WritePin>
}
 80044e2:	bf00      	nop
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	0800dd2c 	.word	0x0800dd2c
 80044f0:	20000028 	.word	0x20000028

080044f4 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	4a07      	ldr	r2, [pc, #28]	; (8004520 <BSP_LED_On+0x2c>)
 8004502:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	4a06      	ldr	r2, [pc, #24]	; (8004524 <BSP_LED_On+0x30>)
 800450a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800450e:	2201      	movs	r2, #1
 8004510:	4619      	mov	r1, r3
 8004512:	f000 ffa7 	bl	8005464 <HAL_GPIO_WritePin>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000028 	.word	0x20000028
 8004524:	0800dd2c 	.word	0x0800dd2c

08004528 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	4a07      	ldr	r2, [pc, #28]	; (8004554 <BSP_LED_Off+0x2c>)
 8004536:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	4a06      	ldr	r2, [pc, #24]	; (8004558 <BSP_LED_Off+0x30>)
 800453e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004542:	2200      	movs	r2, #0
 8004544:	4619      	mov	r1, r3
 8004546:	f000 ff8d 	bl	8005464 <HAL_GPIO_WritePin>
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000028 	.word	0x20000028
 8004558:	0800dd2c 	.word	0x0800dd2c

0800455c <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	4a07      	ldr	r2, [pc, #28]	; (8004588 <BSP_LED_Toggle+0x2c>)
 800456a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	4906      	ldr	r1, [pc, #24]	; (800458c <BSP_LED_Toggle+0x30>)
 8004572:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 ff8b 	bl	8005494 <HAL_GPIO_TogglePin>
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000028 	.word	0x20000028
 800458c:	0800dd2c 	.word	0x0800dd2c

08004590 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	460a      	mov	r2, r1
 800459a:	71fb      	strb	r3, [r7, #7]
 800459c:	4613      	mov	r3, r2
 800459e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <BSP_PB_Init+0x2e>
 80045b6:	2004      	movs	r0, #4
 80045b8:	f7ff ff49 	bl	800444e <LL_AHB2_GRP1_EnableClock>
 80045bc:	e00c      	b.n	80045d8 <BSP_PB_Init+0x48>
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d103      	bne.n	80045cc <BSP_PB_Init+0x3c>
 80045c4:	2008      	movs	r0, #8
 80045c6:	f7ff ff42 	bl	800444e <LL_AHB2_GRP1_EnableClock>
 80045ca:	e005      	b.n	80045d8 <BSP_PB_Init+0x48>
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d102      	bne.n	80045d8 <BSP_PB_Init+0x48>
 80045d2:	2008      	movs	r0, #8
 80045d4:	f7ff ff3b 	bl	800444e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80045d8:	79bb      	ldrb	r3, [r7, #6]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d117      	bne.n	800460e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	4a20      	ldr	r2, [pc, #128]	; (8004664 <BSP_PB_Init+0xd4>)
 80045e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045e6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80045e8:	2300      	movs	r3, #0
 80045ea:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80045ec:	2301      	movs	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045f0:	2302      	movs	r3, #2
 80045f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80045f4:	79fb      	ldrb	r3, [r7, #7]
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <BSP_PB_Init+0xd8>)
 80045f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fc:	f107 020c 	add.w	r2, r7, #12
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fdbe 	bl	8005184 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004608:	2001      	movs	r0, #1
 800460a:	f7fd fe23 	bl	8002254 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800460e:	79bb      	ldrb	r3, [r7, #6]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d123      	bne.n	800465c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <BSP_PB_Init+0xd4>)
 8004618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800461c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800461e:	2301      	movs	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004626:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	4a0f      	ldr	r2, [pc, #60]	; (8004668 <BSP_PB_Init+0xd8>)
 800462c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004630:	f107 020c 	add.w	r2, r7, #12
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fda4 	bl	8005184 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	4a0b      	ldr	r2, [pc, #44]	; (800466c <BSP_PB_Init+0xdc>)
 8004640:	5cd3      	ldrb	r3, [r2, r3]
 8004642:	b25b      	sxtb	r3, r3
 8004644:	2200      	movs	r2, #0
 8004646:	210f      	movs	r1, #15
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fa06 	bl	8004a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	4a06      	ldr	r2, [pc, #24]	; (800466c <BSP_PB_Init+0xdc>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	b25b      	sxtb	r3, r3
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fa19 	bl	8004a8e <HAL_NVIC_EnableIRQ>
  }
}
 800465c:	bf00      	nop
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	0800dd34 	.word	0x0800dd34
 8004668:	20000034 	.word	0x20000034
 800466c:	0800dd3c 	.word	0x0800dd3c

08004670 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6053      	str	r3, [r2, #4]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e0042000 	.word	0xe0042000

08004690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800469a:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_Init+0x3c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_Init+0x3c>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046a6:	2003      	movs	r0, #3
 80046a8:	f000 f9cc 	bl	8004a44 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ac:	2000      	movs	r0, #0
 80046ae:	f000 f817 	bl	80046e0 <HAL_InitTick>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	71fb      	strb	r3, [r7, #7]
 80046bc:	e001      	b.n	80046c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046be:	f000 f807 	bl	80046d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046c2:	79fb      	ldrb	r3, [r7, #7]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	58004000 	.word	0x58004000

080046d0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{   
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <HAL_InitTick+0x6c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d024      	beq.n	800473e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80046f4:	f001 f804 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b14      	ldr	r3, [pc, #80]	; (800474c <HAL_InitTick+0x6c>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	4619      	mov	r1, r3
 8004700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004704:	fbb3 f3f1 	udiv	r3, r3, r1
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	4618      	mov	r0, r3
 800470e:	f000 f9de 	bl	8004ace <HAL_SYSTICK_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10f      	bne.n	8004738 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b0f      	cmp	r3, #15
 800471c:	d809      	bhi.n	8004732 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800471e:	2200      	movs	r2, #0
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004726:	f000 f998 	bl	8004a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <HAL_InitTick+0x70>)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e007      	b.n	8004742 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e004      	b.n	8004742 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
 800473c:	e001      	b.n	8004742 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004742:	7bfb      	ldrb	r3, [r7, #15]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000044 	.word	0x20000044
 8004750:	20000040 	.word	0x20000040

08004754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_IncTick+0x20>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_IncTick+0x24>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4413      	add	r3, r2
 8004764:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_IncTick+0x24>)
 8004766:	6013      	str	r3, [r2, #0]
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000044 	.word	0x20000044
 8004778:	20001890 	.word	0x20001890

0800477c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return uwTick;
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_GetTick+0x14>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20001890 	.word	0x20001890

08004794 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_GetTickFreq+0x14>)
 800479a:	781b      	ldrb	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000044 	.word	0x20000044

080047ac <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80047b0:	f7ff ff5e 	bl	8004670 <LL_DBGMCU_EnableDBGSleepMode>
}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <__NVIC_SetPriorityGrouping+0x44>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047d4:	4013      	ands	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ea:	4a04      	ldr	r2, [pc, #16]	; (80047fc <__NVIC_SetPriorityGrouping+0x44>)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	60d3      	str	r3, [r2, #12]
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	e000ed00 	.word	0xe000ed00

08004800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <__NVIC_GetPriorityGrouping+0x18>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	0a1b      	lsrs	r3, r3, #8
 800480a:	f003 0307 	and.w	r3, r3, #7
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	2b00      	cmp	r3, #0
 800482c:	db0b      	blt.n	8004846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	f003 021f 	and.w	r2, r3, #31
 8004834:	4907      	ldr	r1, [pc, #28]	; (8004854 <__NVIC_EnableIRQ+0x38>)
 8004836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2001      	movs	r0, #1
 800483e:	fa00 f202 	lsl.w	r2, r0, r2
 8004842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	e000e100 	.word	0xe000e100

08004858 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	2b00      	cmp	r3, #0
 8004868:	db12      	blt.n	8004890 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	490a      	ldr	r1, [pc, #40]	; (800489c <__NVIC_DisableIRQ+0x44>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2001      	movs	r0, #1
 800487a:	fa00 f202 	lsl.w	r2, r0, r2
 800487e:	3320      	adds	r3, #32
 8004880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004884:	f3bf 8f4f 	dsb	sy
}
 8004888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800488a:	f3bf 8f6f 	isb	sy
}
 800488e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000e100 	.word	0xe000e100

080048a0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	db0c      	blt.n	80048cc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	f003 021f 	and.w	r2, r3, #31
 80048b8:	4907      	ldr	r1, [pc, #28]	; (80048d8 <__NVIC_SetPendingIRQ+0x38>)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2001      	movs	r0, #1
 80048c2:	fa00 f202 	lsl.w	r2, r0, r2
 80048c6:	3340      	adds	r3, #64	; 0x40
 80048c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000e100 	.word	0xe000e100

080048dc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	db0c      	blt.n	8004908 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	4907      	ldr	r1, [pc, #28]	; (8004914 <__NVIC_ClearPendingIRQ+0x38>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2001      	movs	r0, #1
 80048fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004902:	3360      	adds	r3, #96	; 0x60
 8004904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000e100 	.word	0xe000e100

08004918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db0a      	blt.n	8004942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	490c      	ldr	r1, [pc, #48]	; (8004964 <__NVIC_SetPriority+0x4c>)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	0112      	lsls	r2, r2, #4
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	440b      	add	r3, r1
 800493c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004940:	e00a      	b.n	8004958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4908      	ldr	r1, [pc, #32]	; (8004968 <__NVIC_SetPriority+0x50>)
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3b04      	subs	r3, #4
 8004950:	0112      	lsls	r2, r2, #4
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	440b      	add	r3, r1
 8004956:	761a      	strb	r2, [r3, #24]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000e100 	.word	0xe000e100
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	; 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b04      	cmp	r3, #4
 8004988:	bf28      	it	cs
 800498a:	2304      	movcs	r3, #4
 800498c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3304      	adds	r3, #4
 8004992:	2b06      	cmp	r3, #6
 8004994:	d902      	bls.n	800499c <NVIC_EncodePriority+0x30>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3b03      	subs	r3, #3
 800499a:	e000      	b.n	800499e <NVIC_EncodePriority+0x32>
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43da      	mvns	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	401a      	ands	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	43d9      	mvns	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	4313      	orrs	r3, r2
         );
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80049d8:	f3bf 8f4f 	dsb	sy
}
 80049dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <__NVIC_SystemReset+0x24>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80049e6:	4904      	ldr	r1, [pc, #16]	; (80049f8 <__NVIC_SystemReset+0x24>)
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <__NVIC_SystemReset+0x28>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80049ee:	f3bf 8f4f 	dsb	sy
}
 80049f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <__NVIC_SystemReset+0x20>
 80049f8:	e000ed00 	.word	0xe000ed00
 80049fc:	05fa0004 	.word	0x05fa0004

08004a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a10:	d301      	bcc.n	8004a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a12:	2301      	movs	r3, #1
 8004a14:	e00f      	b.n	8004a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <SysTick_Config+0x40>)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a1e:	210f      	movs	r1, #15
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a24:	f7ff ff78 	bl	8004918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <SysTick_Config+0x40>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <SysTick_Config+0x40>)
 8004a30:	2207      	movs	r2, #7
 8004a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	e000e010 	.word	0xe000e010

08004a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff feb3 	bl	80047b8 <__NVIC_SetPriorityGrouping>
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	4603      	mov	r3, r0
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a68:	f7ff feca 	bl	8004800 <__NVIC_GetPriorityGrouping>
 8004a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	6978      	ldr	r0, [r7, #20]
 8004a74:	f7ff ff7a 	bl	800496c <NVIC_EncodePriority>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff ff49 	bl	8004918 <__NVIC_SetPriority>
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff febd 	bl	800481c <__NVIC_EnableIRQ>
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fecd 	bl	8004858 <__NVIC_DisableIRQ>
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004aca:	f7ff ff83 	bl	80049d4 <__NVIC_SystemReset>

08004ace <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ff92 	bl	8004a00 <SysTick_Config>
 8004adc:	4603      	mov	r3, r0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	4603      	mov	r3, r0
 8004aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fed3 	bl	80048a0 <__NVIC_SetPendingIRQ>
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	4603      	mov	r3, r0
 8004b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fee3 	bl	80048dc <__NVIC_ClearPendingIRQ>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e08e      	b.n	8004c50 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <HAL_DMA_Init+0x138>)
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d80f      	bhi.n	8004b5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <HAL_DMA_Init+0x13c>)
 8004b46:	4413      	add	r3, r2
 8004b48:	4a45      	ldr	r2, [pc, #276]	; (8004c60 <HAL_DMA_Init+0x140>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	009a      	lsls	r2, r3, #2
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a42      	ldr	r2, [pc, #264]	; (8004c64 <HAL_DMA_Init+0x144>)
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b5c:	e00e      	b.n	8004b7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	4b40      	ldr	r3, [pc, #256]	; (8004c68 <HAL_DMA_Init+0x148>)
 8004b66:	4413      	add	r3, r2
 8004b68:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <HAL_DMA_Init+0x140>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	009a      	lsls	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <HAL_DMA_Init+0x14c>)
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa74 	bl	80050bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bdc:	d102      	bne.n	8004be4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bfa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_DMA_Init+0x106>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d80c      	bhi.n	8004c26 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa93 	bl	8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	e008      	b.n	8004c38 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40020407 	.word	0x40020407
 8004c5c:	bffdfff8 	.word	0xbffdfff8
 8004c60:	cccccccd 	.word	0xcccccccd
 8004c64:	40020000 	.word	0x40020000
 8004c68:	bffdfbf8 	.word	0xbffdfbf8
 8004c6c:	40020400 	.word	0x40020400

08004c70 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_DMA_Start_IT+0x20>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e066      	b.n	8004d5e <HAL_DMA_Start_IT+0xee>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d155      	bne.n	8004d50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f9b9 	bl	8005040 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 020e 	orr.w	r2, r2, #14
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e00f      	b.n	8004d08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0204 	bic.w	r2, r2, #4
 8004cf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 020a 	orr.w	r2, r2, #10
 8004d06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e005      	b.n	8004d5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e04f      	b.n	8004e18 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d008      	beq.n	8004d96 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2204      	movs	r2, #4
 8004d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e040      	b.n	8004e18 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 020e 	bic.w	r2, r2, #14
 8004da4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004db4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	f003 021c 	and.w	r2, r3, #28
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004de2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d005      	beq.n	8004e48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
 8004e46:	e047      	b.n	8004ed8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 020e 	bic.w	r2, r2, #14
 8004e56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7c:	f003 021c 	and.w	r2, r3, #28
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004eb6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
    }
  }
  return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f003 031c 	and.w	r3, r3, #28
 8004f02:	2204      	movs	r2, #4
 8004f04:	409a      	lsls	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d026      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x7a>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d021      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0204 	bic.w	r2, r2, #4
 8004f34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3a:	f003 021c 	and.w	r2, r3, #28
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	2104      	movs	r1, #4
 8004f44:	fa01 f202 	lsl.w	r2, r1, r2
 8004f48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d071      	beq.n	8005036 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f5a:	e06c      	b.n	8005036 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	f003 031c 	and.w	r3, r3, #28
 8004f64:	2202      	movs	r2, #2
 8004f66:	409a      	lsls	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02e      	beq.n	8004fce <HAL_DMA_IRQHandler+0xec>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d029      	beq.n	8004fce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 020a 	bic.w	r2, r2, #10
 8004f96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	f003 021c 	and.w	r2, r3, #28
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2102      	movs	r1, #2
 8004fae:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d038      	beq.n	8005036 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004fcc:	e033      	b.n	8005036 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f003 031c 	and.w	r3, r3, #28
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02a      	beq.n	8005038 <HAL_DMA_IRQHandler+0x156>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d025      	beq.n	8005038 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 020e 	bic.w	r2, r2, #14
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005000:	f003 021c 	and.w	r2, r3, #28
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f202 	lsl.w	r2, r1, r2
 800500e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	2b00      	cmp	r3, #0
 800502c:	d004      	beq.n	8005038 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005036:	bf00      	nop
 8005038:	bf00      	nop
}
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005056:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	2b00      	cmp	r3, #0
 800505e:	d004      	beq.n	800506a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005068:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	f003 021c 	and.w	r2, r3, #28
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2101      	movs	r1, #1
 8005078:	fa01 f202 	lsl.w	r2, r1, r2
 800507c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b10      	cmp	r3, #16
 800508c:	d108      	bne.n	80050a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800509e:	e007      	b.n	80050b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b17      	ldr	r3, [pc, #92]	; (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d80a      	bhi.n	80050e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	089b      	lsrs	r3, r3, #2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050dc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6493      	str	r3, [r2, #72]	; 0x48
 80050e4:	e007      	b.n	80050f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	009a      	lsls	r2, r3, #2
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80050f0:	4413      	add	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	3b08      	subs	r3, #8
 80050fe:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800510c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2201      	movs	r2, #1
 8005116:	409a      	lsls	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40020407 	.word	0x40020407
 800512c:	4002081c 	.word	0x4002081c
 8005130:	cccccccd 	.word	0xcccccccd
 8005134:	40020880 	.word	0x40020880

08005138 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005148:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	461a      	mov	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800515c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b01      	subs	r3, #1
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2201      	movs	r2, #1
 8005168:	409a      	lsls	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	1000823f 	.word	0x1000823f
 8005180:	40020940 	.word	0x40020940

08005184 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005192:	e14c      	b.n	800542e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	2101      	movs	r1, #1
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 813e 	beq.w	8005428 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d005      	beq.n	80051c4 <HAL_GPIO_Init+0x40>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d130      	bne.n	8005226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	2203      	movs	r2, #3
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4013      	ands	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051fa:	2201      	movs	r2, #1
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	091b      	lsrs	r3, r3, #4
 8005210:	f003 0201 	and.w	r2, r3, #1
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b03      	cmp	r3, #3
 8005230:	d017      	beq.n	8005262 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	2203      	movs	r2, #3
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43db      	mvns	r3, r3
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4013      	ands	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d123      	bne.n	80052b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	08da      	lsrs	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3208      	adds	r2, #8
 8005276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	220f      	movs	r2, #15
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	08da      	lsrs	r2, r3, #3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3208      	adds	r2, #8
 80052b0:	6939      	ldr	r1, [r7, #16]
 80052b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	2203      	movs	r2, #3
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	43db      	mvns	r3, r3
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 0203 	and.w	r2, r3, #3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8098 	beq.w	8005428 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80052f8:	4a54      	ldr	r2, [pc, #336]	; (800544c <HAL_GPIO_Init+0x2c8>)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	3302      	adds	r3, #2
 8005300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	220f      	movs	r2, #15
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	43db      	mvns	r3, r3
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005322:	d019      	beq.n	8005358 <HAL_GPIO_Init+0x1d4>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a4a      	ldr	r2, [pc, #296]	; (8005450 <HAL_GPIO_Init+0x2cc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <HAL_GPIO_Init+0x1d0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a49      	ldr	r2, [pc, #292]	; (8005454 <HAL_GPIO_Init+0x2d0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00d      	beq.n	8005350 <HAL_GPIO_Init+0x1cc>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a48      	ldr	r2, [pc, #288]	; (8005458 <HAL_GPIO_Init+0x2d4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <HAL_GPIO_Init+0x1c8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a47      	ldr	r2, [pc, #284]	; (800545c <HAL_GPIO_Init+0x2d8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_GPIO_Init+0x1c4>
 8005344:	2304      	movs	r3, #4
 8005346:	e008      	b.n	800535a <HAL_GPIO_Init+0x1d6>
 8005348:	2307      	movs	r3, #7
 800534a:	e006      	b.n	800535a <HAL_GPIO_Init+0x1d6>
 800534c:	2303      	movs	r3, #3
 800534e:	e004      	b.n	800535a <HAL_GPIO_Init+0x1d6>
 8005350:	2302      	movs	r3, #2
 8005352:	e002      	b.n	800535a <HAL_GPIO_Init+0x1d6>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <HAL_GPIO_Init+0x1d6>
 8005358:	2300      	movs	r3, #0
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	f002 0203 	and.w	r2, r2, #3
 8005360:	0092      	lsls	r2, r2, #2
 8005362:	4093      	lsls	r3, r2
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800536a:	4938      	ldr	r1, [pc, #224]	; (800544c <HAL_GPIO_Init+0x2c8>)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	089b      	lsrs	r3, r3, #2
 8005370:	3302      	adds	r3, #2
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005378:	4b39      	ldr	r3, [pc, #228]	; (8005460 <HAL_GPIO_Init+0x2dc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	43db      	mvns	r3, r3
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4013      	ands	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800539c:	4a30      	ldr	r2, [pc, #192]	; (8005460 <HAL_GPIO_Init+0x2dc>)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053a2:	4b2f      	ldr	r3, [pc, #188]	; (8005460 <HAL_GPIO_Init+0x2dc>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	43db      	mvns	r3, r3
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053c6:	4a26      	ldr	r2, [pc, #152]	; (8005460 <HAL_GPIO_Init+0x2dc>)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80053cc:	4b24      	ldr	r3, [pc, #144]	; (8005460 <HAL_GPIO_Init+0x2dc>)
 80053ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4013      	ands	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80053f2:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <HAL_GPIO_Init+0x2dc>)
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80053fa:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_GPIO_Init+0x2dc>)
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	43db      	mvns	r3, r3
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4013      	ands	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005420:	4a0f      	ldr	r2, [pc, #60]	; (8005460 <HAL_GPIO_Init+0x2dc>)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3301      	adds	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f aeab 	bne.w	8005194 <HAL_GPIO_Init+0x10>
  }
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40010000 	.word	0x40010000
 8005450:	48000400 	.word	0x48000400
 8005454:	48000800 	.word	0x48000800
 8005458:	48000c00 	.word	0x48000c00
 800545c:	48001000 	.word	0x48001000
 8005460:	58000800 	.word	0x58000800

08005464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	807b      	strh	r3, [r7, #2]
 8005470:	4613      	mov	r3, r2
 8005472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005474:	787b      	ldrb	r3, [r7, #1]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800547a:	887a      	ldrh	r2, [r7, #2]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005480:	e002      	b.n	8005488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005482:	887a      	ldrh	r2, [r7, #2]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054a6:	887a      	ldrh	r2, [r7, #2]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4013      	ands	r3, r2
 80054ac:	041a      	lsls	r2, r3, #16
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	43d9      	mvns	r1, r3
 80054b2:	887b      	ldrh	r3, [r7, #2]
 80054b4:	400b      	ands	r3, r1
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	619a      	str	r2, [r3, #24]
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d006      	beq.n	80054ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054de:	4a05      	ldr	r2, [pc, #20]	; (80054f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fb fa5a 	bl	80009a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	58000800 	.word	0x58000800

080054f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	58000400 	.word	0x58000400

08005518 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552a:	d101      	bne.n	8005530 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <LL_RCC_MSI_GetRange>:
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800554c:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2bb0      	cmp	r3, #176	; 0xb0
 8005552:	d901      	bls.n	8005558 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005554:	23b0      	movs	r3, #176	; 0xb0
 8005556:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005558:	687b      	ldr	r3, [r7, #4]
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <LL_RCC_GetSysClkSource>:
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 030c 	and.w	r3, r3, #12
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <LL_RCC_GetAHBPrescaler>:
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <LL_RCC_GetAPB1Prescaler>:
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <LL_RCC_GetAPB2Prescaler>:
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <LL_RCC_PLL_GetN>:
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <LL_RCC_PLL_GetR>:
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <LL_RCC_PLL_GetDivider>:
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80055fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005606:	4618      	mov	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <LL_RCC_PLL_GetMainSource>:
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0303 	and.w	r3, r3, #3
}
 800561e:	4618      	mov	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562e:	f7ff ff9a 	bl	8005566 <LL_RCC_GetSysClkSource>
 8005632:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800563a:	f7ff ff7f 	bl	800553c <LL_RCC_MSI_GetRange>
 800563e:	4603      	mov	r3, r0
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	4a2b      	ldr	r2, [pc, #172]	; (80056f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e04b      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b04      	cmp	r3, #4
 8005654:	d102      	bne.n	800565c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005656:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	e045      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b08      	cmp	r3, #8
 8005660:	d10a      	bne.n	8005678 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005662:	f7ff ff59 	bl	8005518 <LL_RCC_HSE_IsEnabledDiv2>
 8005666:	4603      	mov	r3, r0
 8005668:	2b01      	cmp	r3, #1
 800566a:	d102      	bne.n	8005672 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800566c:	4b22      	ldr	r3, [pc, #136]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e03a      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005672:	4b22      	ldr	r3, [pc, #136]	; (80056fc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e037      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005678:	f7ff ffca 	bl	8005610 <LL_RCC_PLL_GetMainSource>
 800567c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d003      	beq.n	800568c <HAL_RCC_GetSysClockFreq+0x64>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d003      	beq.n	8005692 <HAL_RCC_GetSysClockFreq+0x6a>
 800568a:	e00d      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800568c:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800568e:	60bb      	str	r3, [r7, #8]
        break;
 8005690:	e015      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005692:	f7ff ff41 	bl	8005518 <LL_RCC_HSE_IsEnabledDiv2>
 8005696:	4603      	mov	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d102      	bne.n	80056a2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800569c:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800569e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80056a0:	e00d      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80056a2:	4b16      	ldr	r3, [pc, #88]	; (80056fc <HAL_RCC_GetSysClockFreq+0xd4>)
 80056a4:	60bb      	str	r3, [r7, #8]
        break;
 80056a6:	e00a      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056a8:	f7ff ff48 	bl	800553c <LL_RCC_MSI_GetRange>
 80056ac:	4603      	mov	r3, r0
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	4a0f      	ldr	r2, [pc, #60]	; (80056f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ba:	60bb      	str	r3, [r7, #8]
        break;
 80056bc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80056be:	f7ff ff82 	bl	80055c6 <LL_RCC_PLL_GetN>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	fb03 f402 	mul.w	r4, r3, r2
 80056ca:	f7ff ff95 	bl	80055f8 <LL_RCC_PLL_GetDivider>
 80056ce:	4603      	mov	r3, r0
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	3301      	adds	r3, #1
 80056d4:	fbb4 f4f3 	udiv	r4, r4, r3
 80056d8:	f7ff ff82 	bl	80055e0 <LL_RCC_PLL_GetR>
 80056dc:	4603      	mov	r3, r0
 80056de:	0f5b      	lsrs	r3, r3, #29
 80056e0:	3301      	adds	r3, #1
 80056e2:	fbb4 f3f3 	udiv	r3, r4, r3
 80056e6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80056e8:	68fb      	ldr	r3, [r7, #12]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd90      	pop	{r4, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	0800dcec 	.word	0x0800dcec
 80056f8:	00f42400 	.word	0x00f42400
 80056fc:	01e84800 	.word	0x01e84800

08005700 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005700:	b598      	push	{r3, r4, r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005704:	f7ff ff90 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 8005708:	4604      	mov	r4, r0
 800570a:	f7ff ff38 	bl	800557e <LL_RCC_GetAHBPrescaler>
 800570e:	4603      	mov	r3, r0
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	4a03      	ldr	r2, [pc, #12]	; (8005724 <HAL_RCC_GetHCLKFreq+0x24>)
 8005718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800571c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005720:	4618      	mov	r0, r3
 8005722:	bd98      	pop	{r3, r4, r7, pc}
 8005724:	0800dc8c 	.word	0x0800dc8c

08005728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005728:	b598      	push	{r3, r4, r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800572c:	f7ff ffe8 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005730:	4604      	mov	r4, r0
 8005732:	f7ff ff30 	bl	8005596 <LL_RCC_GetAPB1Prescaler>
 8005736:	4603      	mov	r3, r0
 8005738:	0a1b      	lsrs	r3, r3, #8
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	4a04      	ldr	r2, [pc, #16]	; (8005750 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	fa24 f303 	lsr.w	r3, r4, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd98      	pop	{r3, r4, r7, pc}
 8005750:	0800dccc 	.word	0x0800dccc

08005754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005754:	b598      	push	{r3, r4, r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005758:	f7ff ffd2 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 800575c:	4604      	mov	r4, r0
 800575e:	f7ff ff26 	bl	80055ae <LL_RCC_GetAPB2Prescaler>
 8005762:	4603      	mov	r3, r0
 8005764:	0adb      	lsrs	r3, r3, #11
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	4a04      	ldr	r2, [pc, #16]	; (800577c <HAL_RCC_GetPCLK2Freq+0x28>)
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd98      	pop	{r3, r4, r7, pc}
 800577c:	0800dccc 	.word	0x0800dccc

08005780 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e090      	b.n	80058b4 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f888 	bl	80058bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	22ca      	movs	r2, #202	; 0xca
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2253      	movs	r2, #83	; 0x53
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f8a9 	bl	800591c <RTC_EnterInitMode>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2204      	movs	r2, #4
 80057dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e067      	b.n	80058b4 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6899      	ldr	r1, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68d2      	ldr	r2, [r2, #12]
 800581e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6919      	ldr	r1, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	041a      	lsls	r2, r3, #16
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005842:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0203 	bic.w	r2, r2, #3
 8005852:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d113      	bne.n	80058a2 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f828 	bl	80058d0 <HAL_RTC_WaitForSynchro>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00d      	beq.n	80058a2 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	22ff      	movs	r2, #255	; 0xff
 800588c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2204      	movs	r2, #4
 8005892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e008      	b.n	80058b4 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	22ff      	movs	r2, #255	; 0xff
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80058b2:	2300      	movs	r3, #0
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058e6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80058e8:	f7fe ff48 	bl	800477c <HAL_GetTick>
 80058ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058ee:	e009      	b.n	8005904 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058f0:	f7fe ff44 	bl	800477c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058fe:	d901      	bls.n	8005904 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e007      	b.n	8005914 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0ee      	beq.n	80058f0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800593a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800593c:	f7fe ff1e 	bl	800477c <HAL_GetTick>
 8005940:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005942:	e009      	b.n	8005958 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005944:	f7fe ff1a 	bl	800477c <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005952:	d901      	bls.n	8005958 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e007      	b.n	8005968 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0ee      	beq.n	8005944 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <LL_RCC_GetUSARTClockSource>:
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4013      	ands	r3, r2
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <LL_RCC_GetLPUARTClockSource>:
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4013      	ands	r3, r2
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e042      	b.n	8005a48 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7fc f88f 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2224      	movs	r2, #36	; 0x24
 80059de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fcf4 	bl	80063e0 <UART_SetConfig>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e022      	b.n	8005a48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 feee 	bl	80067ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 ff75 	bl	8006930 <UART_CheckIdleState>
 8005a46:	4603      	mov	r3, r0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b091      	sub	sp, #68	; 0x44
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	f040 808c 	bne.w	8005b82 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_UART_Transmit_IT+0x26>
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e084      	b.n	8005b84 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Transmit_IT+0x38>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e07d      	b.n	8005b84 <HAL_UART_Transmit_IT+0x134>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2221      	movs	r2, #33	; 0x21
 8005ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ac4:	d12e      	bne.n	8005b24 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ace:	d107      	bne.n	8005ae0 <HAL_UART_Transmit_IT+0x90>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a2d      	ldr	r2, [pc, #180]	; (8005b90 <HAL_UART_Transmit_IT+0x140>)
 8005adc:	675a      	str	r2, [r3, #116]	; 0x74
 8005ade:	e002      	b.n	8005ae6 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <HAL_UART_Transmit_IT+0x144>)
 8005ae4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3308      	adds	r3, #8
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b0e:	637a      	str	r2, [r7, #52]	; 0x34
 8005b10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e5      	bne.n	8005aee <HAL_UART_Transmit_IT+0x9e>
 8005b22:	e02c      	b.n	8005b7e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2c:	d107      	bne.n	8005b3e <HAL_UART_Transmit_IT+0xee>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a17      	ldr	r2, [pc, #92]	; (8005b98 <HAL_UART_Transmit_IT+0x148>)
 8005b3a:	675a      	str	r2, [r3, #116]	; 0x74
 8005b3c:	e002      	b.n	8005b44 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a16      	ldr	r2, [pc, #88]	; (8005b9c <HAL_UART_Transmit_IT+0x14c>)
 8005b42:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	69f9      	ldr	r1, [r7, #28]
 8005b70:	6a3a      	ldr	r2, [r7, #32]
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e6      	bne.n	8005b4c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3744      	adds	r7, #68	; 0x44
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	0800726b 	.word	0x0800726b
 8005b94:	0800718b 	.word	0x0800718b
 8005b98:	080070c9 	.word	0x080070c9
 8005b9c:	08007011 	.word	0x08007011

08005ba0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d142      	bne.n	8005c3e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_UART_Receive_IT+0x24>
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e03b      	b.n	8005c40 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_UART_Receive_IT+0x36>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e034      	b.n	8005c40 <HAL_UART_Receive_IT+0xa0>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <HAL_UART_Receive_IT+0xa8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01f      	beq.n	8005c2e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d018      	beq.n	8005c2e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	69f9      	ldr	r1, [r7, #28]
 8005c20:	6a3a      	ldr	r2, [r7, #32]
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e6      	bne.n	8005bfc <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	461a      	mov	r2, r3
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 ff8f 	bl	8006b58 <UART_Start_Receive_IT>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	e000      	b.n	8005c40 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
  }
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3728      	adds	r7, #40	; 0x28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40008000 	.word	0x40008000

08005c4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d17a      	bne.n	8005d5a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Transmit_DMA+0x24>
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e073      	b.n	8005d5c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Transmit_DMA+0x36>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e06c      	b.n	8005d5c <HAL_UART_Transmit_DMA+0x110>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2221      	movs	r2, #33	; 0x21
 8005cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02c      	beq.n	8005d12 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <HAL_UART_Transmit_DMA+0x118>)
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc4:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <HAL_UART_Transmit_DMA+0x11c>)
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <HAL_UART_Transmit_DMA+0x120>)
 8005cce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3328      	adds	r3, #40	; 0x28
 8005ce8:	461a      	mov	r2, r3
 8005cea:	88fb      	ldrh	r3, [r7, #6]
 8005cec:	f7fe ffc0 	bl	8004c70 <HAL_DMA_Start_IT>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e024      	b.n	8005d5c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2240      	movs	r2, #64	; 0x40
 8005d18:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	613b      	str	r3, [r7, #16]
   return(result);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d42:	623a      	str	r2, [r7, #32]
 8005d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	69f9      	ldr	r1, [r7, #28]
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e5      	bne.n	8005d22 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e000      	b.n	8005d5c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005d5a:	2302      	movs	r3, #2
  }
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3728      	adds	r7, #40	; 0x28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	08006eaf 	.word	0x08006eaf
 8005d68:	08006f49 	.word	0x08006f49
 8005d6c:	08006f65 	.word	0x08006f65

08005d70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b0ba      	sub	sp, #232	; 0xe8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d9e:	4013      	ands	r3, r2
 8005da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11b      	bne.n	8005de4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d015      	beq.n	8005de4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 82d6 	beq.w	8006386 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4798      	blx	r3
      }
      return;
 8005de2:	e2d0      	b.n	8006386 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 811f 	beq.w	800602c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005dee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005df2:	4b8b      	ldr	r3, [pc, #556]	; (8006020 <HAL_UART_IRQHandler+0x2b0>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005dfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005dfe:	4b89      	ldr	r3, [pc, #548]	; (8006024 <HAL_UART_IRQHandler+0x2b4>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8112 	beq.w	800602c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d011      	beq.n	8005e38 <HAL_UART_IRQHandler+0xc8>
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2201      	movs	r2, #1
 8005e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e2e:	f043 0201 	orr.w	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d011      	beq.n	8005e68 <HAL_UART_IRQHandler+0xf8>
 8005e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2202      	movs	r2, #2
 8005e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e5e:	f043 0204 	orr.w	r2, r3, #4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d011      	beq.n	8005e98 <HAL_UART_IRQHandler+0x128>
 8005e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2204      	movs	r2, #4
 8005e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8e:	f043 0202 	orr.w	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d017      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005eb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005eb4:	4b5a      	ldr	r3, [pc, #360]	; (8006020 <HAL_UART_IRQHandler+0x2b0>)
 8005eb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eca:	f043 0208 	orr.w	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d012      	beq.n	8005f06 <HAL_UART_IRQHandler+0x196>
 8005ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00c      	beq.n	8005f06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 823c 	beq.w	800638a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d013      	beq.n	8005f46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d005      	beq.n	8005f6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d04f      	beq.n	800600a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 ff39 	bl	8006de2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d141      	bne.n	8006002 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3308      	adds	r3, #8
 8005f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005faa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1d9      	bne.n	8005f7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d013      	beq.n	8005ffa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd6:	4a14      	ldr	r2, [pc, #80]	; (8006028 <HAL_UART_IRQHandler+0x2b8>)
 8005fd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe ff20 	bl	8004e24 <HAL_DMA_Abort_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d017      	beq.n	800601a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	e00f      	b.n	800601a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f9da 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00b      	b.n	800601a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f9d6 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e007      	b.n	800601a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9d2 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006018:	e1b7      	b.n	800638a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601a:	bf00      	nop
    return;
 800601c:	e1b5      	b.n	800638a <HAL_UART_IRQHandler+0x61a>
 800601e:	bf00      	nop
 8006020:	10000001 	.word	0x10000001
 8006024:	04000120 	.word	0x04000120
 8006028:	08006fe5 	.word	0x08006fe5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006030:	2b01      	cmp	r3, #1
 8006032:	f040 814a 	bne.w	80062ca <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 8143 	beq.w	80062ca <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 813c 	beq.w	80062ca <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2210      	movs	r2, #16
 8006058:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	f040 80b5 	bne.w	80061d4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8006076:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8187 	beq.w	800638e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800608a:	429a      	cmp	r2, r3
 800608c:	f080 817f 	bcs.w	800638e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006096:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 8086 	bne.w	80061b8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1da      	bne.n	80060ac <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800611a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800611e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800612c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e1      	bne.n	80060f6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3308      	adds	r3, #8
 8006152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006156:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006158:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800615c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e3      	bne.n	8006132 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006188:	f023 0310 	bic.w	r3, r3, #16
 800618c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800619a:	65bb      	str	r3, [r7, #88]	; 0x58
 800619c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e4      	bne.n	8006178 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fdd7 	bl	8004d66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f8fb 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061d2:	e0dc      	b.n	800638e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80ce 	beq.w	8006392 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80061f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80c9 	beq.w	8006392 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006222:	647b      	str	r3, [r7, #68]	; 0x44
 8006224:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e4      	bne.n	8006200 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3308      	adds	r3, #8
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	623b      	str	r3, [r7, #32]
   return(result);
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800624c:	f023 0301 	bic.w	r3, r3, #1
 8006250:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800625e:	633a      	str	r2, [r7, #48]	; 0x30
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e1      	bne.n	8006236 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60fb      	str	r3, [r7, #12]
   return(result);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0310 	bic.w	r3, r3, #16
 800629a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	617b      	str	r3, [r7, #20]
   return(result);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e4      	bne.n	8006286 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f880 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80062c8:	e063      	b.n	8006392 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00e      	beq.n	80062f4 <HAL_UART_IRQHandler+0x584>
 80062d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 fcb9 	bl	8007c64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062f2:	e051      	b.n	8006398 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d014      	beq.n	800632a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	d105      	bne.n	8006318 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800630c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631c:	2b00      	cmp	r3, #0
 800631e:	d03a      	beq.n	8006396 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
    }
    return;
 8006328:	e035      	b.n	8006396 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <HAL_UART_IRQHandler+0x5da>
 8006336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 f806 	bl	8007354 <UART_EndTransmit_IT>
    return;
 8006348:	e026      	b.n	8006398 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <HAL_UART_IRQHandler+0x5fa>
 8006356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fc92 	bl	8007c8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006368:	e016      	b.n	8006398 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800636a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <HAL_UART_IRQHandler+0x628>
 8006376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637a:	2b00      	cmp	r3, #0
 800637c:	da0c      	bge.n	8006398 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 fc7a 	bl	8007c78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006384:	e008      	b.n	8006398 <HAL_UART_IRQHandler+0x628>
      return;
 8006386:	bf00      	nop
 8006388:	e006      	b.n	8006398 <HAL_UART_IRQHandler+0x628>
    return;
 800638a:	bf00      	nop
 800638c:	e004      	b.n	8006398 <HAL_UART_IRQHandler+0x628>
      return;
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <HAL_UART_IRQHandler+0x628>
      return;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_UART_IRQHandler+0x628>
    return;
 8006396:	bf00      	nop
  }
}
 8006398:	37e8      	adds	r7, #232	; 0xe8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop

080063a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e0:	b5b0      	push	{r4, r5, r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	4313      	orrs	r3, r2
 8006402:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4ba3      	ldr	r3, [pc, #652]	; (8006698 <UART_SetConfig+0x2b8>)
 800640c:	4013      	ands	r3, r2
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	69f9      	ldr	r1, [r7, #28]
 8006414:	430b      	orrs	r3, r1
 8006416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a98      	ldr	r2, [pc, #608]	; (800669c <UART_SetConfig+0x2bc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	4313      	orrs	r3, r2
 8006446:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006452:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	69f9      	ldr	r1, [r7, #28]
 800645c:	430b      	orrs	r3, r1
 800645e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	f023 010f 	bic.w	r1, r3, #15
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a89      	ldr	r2, [pc, #548]	; (80066a0 <UART_SetConfig+0x2c0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d120      	bne.n	80064c2 <UART_SetConfig+0xe2>
 8006480:	2003      	movs	r0, #3
 8006482:	f7ff fa75 	bl	8005970 <LL_RCC_GetUSARTClockSource>
 8006486:	4603      	mov	r3, r0
 8006488:	2b03      	cmp	r3, #3
 800648a:	d817      	bhi.n	80064bc <UART_SetConfig+0xdc>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0xb4>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064b1 	.word	0x080064b1
 800649c:	080064ab 	.word	0x080064ab
 80064a0:	080064b7 	.word	0x080064b7
 80064a4:	2301      	movs	r3, #1
 80064a6:	76fb      	strb	r3, [r7, #27]
 80064a8:	e038      	b.n	800651c <UART_SetConfig+0x13c>
 80064aa:	2302      	movs	r3, #2
 80064ac:	76fb      	strb	r3, [r7, #27]
 80064ae:	e035      	b.n	800651c <UART_SetConfig+0x13c>
 80064b0:	2304      	movs	r3, #4
 80064b2:	76fb      	strb	r3, [r7, #27]
 80064b4:	e032      	b.n	800651c <UART_SetConfig+0x13c>
 80064b6:	2308      	movs	r3, #8
 80064b8:	76fb      	strb	r3, [r7, #27]
 80064ba:	e02f      	b.n	800651c <UART_SetConfig+0x13c>
 80064bc:	2310      	movs	r3, #16
 80064be:	76fb      	strb	r3, [r7, #27]
 80064c0:	e02c      	b.n	800651c <UART_SetConfig+0x13c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a75      	ldr	r2, [pc, #468]	; (800669c <UART_SetConfig+0x2bc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d125      	bne.n	8006518 <UART_SetConfig+0x138>
 80064cc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80064d0:	f7ff fa5e 	bl	8005990 <LL_RCC_GetLPUARTClockSource>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064da:	d017      	beq.n	800650c <UART_SetConfig+0x12c>
 80064dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e0:	d817      	bhi.n	8006512 <UART_SetConfig+0x132>
 80064e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e6:	d00b      	beq.n	8006500 <UART_SetConfig+0x120>
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ec:	d811      	bhi.n	8006512 <UART_SetConfig+0x132>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <UART_SetConfig+0x11a>
 80064f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f6:	d006      	beq.n	8006506 <UART_SetConfig+0x126>
 80064f8:	e00b      	b.n	8006512 <UART_SetConfig+0x132>
 80064fa:	2300      	movs	r3, #0
 80064fc:	76fb      	strb	r3, [r7, #27]
 80064fe:	e00d      	b.n	800651c <UART_SetConfig+0x13c>
 8006500:	2302      	movs	r3, #2
 8006502:	76fb      	strb	r3, [r7, #27]
 8006504:	e00a      	b.n	800651c <UART_SetConfig+0x13c>
 8006506:	2304      	movs	r3, #4
 8006508:	76fb      	strb	r3, [r7, #27]
 800650a:	e007      	b.n	800651c <UART_SetConfig+0x13c>
 800650c:	2308      	movs	r3, #8
 800650e:	76fb      	strb	r3, [r7, #27]
 8006510:	e004      	b.n	800651c <UART_SetConfig+0x13c>
 8006512:	2310      	movs	r3, #16
 8006514:	76fb      	strb	r3, [r7, #27]
 8006516:	e001      	b.n	800651c <UART_SetConfig+0x13c>
 8006518:	2310      	movs	r3, #16
 800651a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a5e      	ldr	r2, [pc, #376]	; (800669c <UART_SetConfig+0x2bc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	f040 808b 	bne.w	800663e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006528:	7efb      	ldrb	r3, [r7, #27]
 800652a:	2b08      	cmp	r3, #8
 800652c:	d823      	bhi.n	8006576 <UART_SetConfig+0x196>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <UART_SetConfig+0x154>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	08006559 	.word	0x08006559
 8006538:	08006577 	.word	0x08006577
 800653c:	08006561 	.word	0x08006561
 8006540:	08006577 	.word	0x08006577
 8006544:	08006567 	.word	0x08006567
 8006548:	08006577 	.word	0x08006577
 800654c:	08006577 	.word	0x08006577
 8006550:	08006577 	.word	0x08006577
 8006554:	0800656f 	.word	0x0800656f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006558:	f7ff f8e6 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 800655c:	6178      	str	r0, [r7, #20]
        break;
 800655e:	e00f      	b.n	8006580 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006560:	4b50      	ldr	r3, [pc, #320]	; (80066a4 <UART_SetConfig+0x2c4>)
 8006562:	617b      	str	r3, [r7, #20]
        break;
 8006564:	e00c      	b.n	8006580 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006566:	f7ff f85f 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 800656a:	6178      	str	r0, [r7, #20]
        break;
 800656c:	e008      	b.n	8006580 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006572:	617b      	str	r3, [r7, #20]
        break;
 8006574:	e004      	b.n	8006580 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	76bb      	strb	r3, [r7, #26]
        break;
 800657e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 811a 	beq.w	80067bc <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	4a46      	ldr	r2, [pc, #280]	; (80066a8 <UART_SetConfig+0x2c8>)
 800658e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006592:	461a      	mov	r2, r3
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	fbb3 f3f2 	udiv	r3, r3, r2
 800659a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	4613      	mov	r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	4413      	add	r3, r2
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d305      	bcc.n	80065b8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d902      	bls.n	80065be <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	76bb      	strb	r3, [r7, #26]
 80065bc:	e0fe      	b.n	80067bc <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f04f 0100 	mov.w	r1, #0
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4a37      	ldr	r2, [pc, #220]	; (80066a8 <UART_SetConfig+0x2c8>)
 80065cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	f7f9 fe3b 	bl	8000250 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	020b      	lsls	r3, r1, #8
 80065ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065f0:	0202      	lsls	r2, r0, #8
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	6849      	ldr	r1, [r1, #4]
 80065f6:	0849      	lsrs	r1, r1, #1
 80065f8:	4608      	mov	r0, r1
 80065fa:	f04f 0100 	mov.w	r1, #0
 80065fe:	1814      	adds	r4, r2, r0
 8006600:	eb43 0501 	adc.w	r5, r3, r1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	461a      	mov	r2, r3
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	4620      	mov	r0, r4
 8006610:	4629      	mov	r1, r5
 8006612:	f7f9 fe1d 	bl	8000250 <__aeabi_uldivmod>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4613      	mov	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006624:	d308      	bcc.n	8006638 <UART_SetConfig+0x258>
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800662c:	d204      	bcs.n	8006638 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	e0c1      	b.n	80067bc <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	76bb      	strb	r3, [r7, #26]
 800663c:	e0be      	b.n	80067bc <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006646:	d16a      	bne.n	800671e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006648:	7efb      	ldrb	r3, [r7, #27]
 800664a:	3b01      	subs	r3, #1
 800664c:	2b07      	cmp	r3, #7
 800664e:	d82d      	bhi.n	80066ac <UART_SetConfig+0x2cc>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0x278>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006679 	.word	0x08006679
 800665c:	08006681 	.word	0x08006681
 8006660:	080066ad 	.word	0x080066ad
 8006664:	08006687 	.word	0x08006687
 8006668:	080066ad 	.word	0x080066ad
 800666c:	080066ad 	.word	0x080066ad
 8006670:	080066ad 	.word	0x080066ad
 8006674:	0800668f 	.word	0x0800668f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006678:	f7ff f86c 	bl	8005754 <HAL_RCC_GetPCLK2Freq>
 800667c:	6178      	str	r0, [r7, #20]
        break;
 800667e:	e01a      	b.n	80066b6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <UART_SetConfig+0x2c4>)
 8006682:	617b      	str	r3, [r7, #20]
        break;
 8006684:	e017      	b.n	80066b6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006686:	f7fe ffcf 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 800668a:	6178      	str	r0, [r7, #20]
        break;
 800668c:	e013      	b.n	80066b6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006692:	617b      	str	r3, [r7, #20]
        break;
 8006694:	e00f      	b.n	80066b6 <UART_SetConfig+0x2d6>
 8006696:	bf00      	nop
 8006698:	cfff69f3 	.word	0xcfff69f3
 800669c:	40008000 	.word	0x40008000
 80066a0:	40013800 	.word	0x40013800
 80066a4:	00f42400 	.word	0x00f42400
 80066a8:	0800dd40 	.word	0x0800dd40
      default:
        pclk = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	76bb      	strb	r3, [r7, #26]
        break;
 80066b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d07f      	beq.n	80067bc <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	4a48      	ldr	r2, [pc, #288]	; (80067e4 <UART_SetConfig+0x404>)
 80066c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c6:	461a      	mov	r2, r3
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ce:	005a      	lsls	r2, r3, #1
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	441a      	add	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b0f      	cmp	r3, #15
 80066e8:	d916      	bls.n	8006718 <UART_SetConfig+0x338>
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f0:	d212      	bcs.n	8006718 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f023 030f 	bic.w	r3, r3, #15
 80066fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	b29b      	uxth	r3, r3
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	b29a      	uxth	r2, r3
 8006708:	89fb      	ldrh	r3, [r7, #14]
 800670a:	4313      	orrs	r3, r2
 800670c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	89fa      	ldrh	r2, [r7, #14]
 8006714:	60da      	str	r2, [r3, #12]
 8006716:	e051      	b.n	80067bc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	76bb      	strb	r3, [r7, #26]
 800671c:	e04e      	b.n	80067bc <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800671e:	7efb      	ldrb	r3, [r7, #27]
 8006720:	3b01      	subs	r3, #1
 8006722:	2b07      	cmp	r3, #7
 8006724:	d821      	bhi.n	800676a <UART_SetConfig+0x38a>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0x34c>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	0800674d 	.word	0x0800674d
 8006730:	08006755 	.word	0x08006755
 8006734:	0800676b 	.word	0x0800676b
 8006738:	0800675b 	.word	0x0800675b
 800673c:	0800676b 	.word	0x0800676b
 8006740:	0800676b 	.word	0x0800676b
 8006744:	0800676b 	.word	0x0800676b
 8006748:	08006763 	.word	0x08006763
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800674c:	f7ff f802 	bl	8005754 <HAL_RCC_GetPCLK2Freq>
 8006750:	6178      	str	r0, [r7, #20]
        break;
 8006752:	e00f      	b.n	8006774 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <UART_SetConfig+0x408>)
 8006756:	617b      	str	r3, [r7, #20]
        break;
 8006758:	e00c      	b.n	8006774 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675a:	f7fe ff65 	bl	8005628 <HAL_RCC_GetSysClockFreq>
 800675e:	6178      	str	r0, [r7, #20]
        break;
 8006760:	e008      	b.n	8006774 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006766:	617b      	str	r3, [r7, #20]
        break;
 8006768:	e004      	b.n	8006774 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	76bb      	strb	r3, [r7, #26]
        break;
 8006772:	bf00      	nop
    }

    if (pclk != 0U)
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d020      	beq.n	80067bc <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	4a19      	ldr	r2, [pc, #100]	; (80067e4 <UART_SetConfig+0x404>)
 8006780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006784:	461a      	mov	r2, r3
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	fbb3 f2f2 	udiv	r2, r3, r2
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	085b      	lsrs	r3, r3, #1
 8006792:	441a      	add	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	b29b      	uxth	r3, r3
 800679e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	d908      	bls.n	80067b8 <UART_SetConfig+0x3d8>
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d204      	bcs.n	80067b8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	e001      	b.n	80067bc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80067d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bdb0      	pop	{r4, r5, r7, pc}
 80067e2:	bf00      	nop
 80067e4:	0800dd40 	.word	0x0800dd40
 80067e8:	00f42400 	.word	0x00f42400

080067ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01a      	beq.n	8006902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ea:	d10a      	bne.n	8006902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	605a      	str	r2, [r3, #4]
  }
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af02      	add	r7, sp, #8
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006940:	f7fd ff1c 	bl	800477c <HAL_GetTick>
 8006944:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b08      	cmp	r3, #8
 8006952:	d10e      	bne.n	8006972 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f82f 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e025      	b.n	80069be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b04      	cmp	r3, #4
 800697e:	d10e      	bne.n	800699e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f819 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e00f      	b.n	80069be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b09c      	sub	sp, #112	; 0x70
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d6:	e0a9      	b.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069de:	f000 80a5 	beq.w	8006b2c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fd fecb 	bl	800477c <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80069f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d140      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e6      	bne.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	663b      	str	r3, [r7, #96]	; 0x60
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e069      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d051      	beq.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a96:	d149      	bne.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006af4:	623a      	str	r2, [r7, #32]
 8006af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	69f9      	ldr	r1, [r7, #28]
 8006afa:	6a3a      	ldr	r2, [r7, #32]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e010      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4013      	ands	r3, r2
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	f43f af46 	beq.w	80069d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3770      	adds	r7, #112	; 0x70
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b09d      	sub	sp, #116	; 0x74
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	d10e      	bne.n	8006baa <UART_Start_Receive_IT+0x52>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <UART_Start_Receive_IT+0x48>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b9e:	e02d      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	22ff      	movs	r2, #255	; 0xff
 8006ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ba8:	e028      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <UART_Start_Receive_IT+0x76>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <UART_Start_Receive_IT+0x6c>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	22ff      	movs	r2, #255	; 0xff
 8006bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bc2:	e01b      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	227f      	movs	r2, #127	; 0x7f
 8006bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bcc:	e016      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bd6:	d10d      	bne.n	8006bf4 <UART_Start_Receive_IT+0x9c>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <UART_Start_Receive_IT+0x92>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	227f      	movs	r2, #127	; 0x7f
 8006be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006be8:	e008      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	223f      	movs	r2, #63	; 0x3f
 8006bee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bf2:	e003      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2222      	movs	r2, #34	; 0x22
 8006c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c2c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c2e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c48:	d14d      	bne.n	8006ce6 <UART_Start_Receive_IT+0x18e>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d347      	bcc.n	8006ce6 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5e:	d107      	bne.n	8006c70 <UART_Start_Receive_IT+0x118>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4a39      	ldr	r2, [pc, #228]	; (8006d50 <UART_Start_Receive_IT+0x1f8>)
 8006c6c:	671a      	str	r2, [r3, #112]	; 0x70
 8006c6e:	e002      	b.n	8006c76 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a38      	ldr	r2, [pc, #224]	; (8006d54 <UART_Start_Receive_IT+0x1fc>)
 8006c74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c9e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	667b      	str	r3, [r7, #100]	; 0x64
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006cd0:	637a      	str	r2, [r7, #52]	; 0x34
 8006cd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e5      	bne.n	8006cb0 <UART_Start_Receive_IT+0x158>
 8006ce4:	e02c      	b.n	8006d40 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	d107      	bne.n	8006d00 <UART_Start_Receive_IT+0x1a8>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <UART_Start_Receive_IT+0x200>)
 8006cfc:	671a      	str	r2, [r3, #112]	; 0x70
 8006cfe:	e002      	b.n	8006d06 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <UART_Start_Receive_IT+0x204>)
 8006d04:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006d22:	663b      	str	r3, [r7, #96]	; 0x60
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d2c:	623b      	str	r3, [r7, #32]
 8006d2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	69f9      	ldr	r1, [r7, #28]
 8006d32:	6a3a      	ldr	r2, [r7, #32]
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e6      	bne.n	8006d0e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3774      	adds	r7, #116	; 0x74
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	08007965 	.word	0x08007965
 8006d54:	0800766d 	.word	0x0800766d
 8006d58:	0800750b 	.word	0x0800750b
 8006d5c:	080073ab 	.word	0x080073ab

08006d60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b08f      	sub	sp, #60	; 0x3c
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d88:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e6      	bne.n	8006d68 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006db0:	633b      	str	r3, [r7, #48]	; 0x30
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dba:	61ba      	str	r2, [r7, #24]
 8006dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6979      	ldr	r1, [r7, #20]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e5      	bne.n	8006d9a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006dd6:	bf00      	nop
 8006dd8:	373c      	adds	r7, #60	; 0x3c
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b095      	sub	sp, #84	; 0x54
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e08:	643b      	str	r3, [r7, #64]	; 0x40
 8006e0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e3      	bne.n	8006e1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d118      	bne.n	8006e8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f023 0310 	bic.w	r3, r3, #16
 8006e70:	647b      	str	r3, [r7, #68]	; 0x44
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6979      	ldr	r1, [r7, #20]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006ea2:	bf00      	nop
 8006ea4:	3754      	adds	r7, #84	; 0x54
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b090      	sub	sp, #64	; 0x40
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d137      	bne.n	8006f3a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	461a      	mov	r2, r3
 8006f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	617b      	str	r3, [r7, #20]
   return(result);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e6      	bne.n	8006f06 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f38:	e002      	b.n	8006f40 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f3c:	f7fa ff26 	bl	8001d8c <HAL_UART_TxCpltCallback>
}
 8006f40:	bf00      	nop
 8006f42:	3740      	adds	r7, #64	; 0x40
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff fa22 	bl	80063a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f78:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8c:	2b80      	cmp	r3, #128	; 0x80
 8006f8e:	d109      	bne.n	8006fa4 <UART_DMAError+0x40>
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b21      	cmp	r3, #33	; 0x21
 8006f94:	d106      	bne.n	8006fa4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006f9e:	6978      	ldr	r0, [r7, #20]
 8006fa0:	f7ff fede 	bl	8006d60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d109      	bne.n	8006fc6 <UART_DMAError+0x62>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b22      	cmp	r3, #34	; 0x22
 8006fb6:	d106      	bne.n	8006fc6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006fc0:	6978      	ldr	r0, [r7, #20]
 8006fc2:	f7ff ff0e 	bl	8006de2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fcc:	f043 0210 	orr.w	r2, r3, #16
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd6:	6978      	ldr	r0, [r7, #20]
 8006fd8:	f7ff f9ec 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fdc:	bf00      	nop
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff f9d6 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b08f      	sub	sp, #60	; 0x3c
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800701e:	2b21      	cmp	r3, #33	; 0x21
 8007020:	d14c      	bne.n	80070bc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d132      	bne.n	8007094 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	61fb      	str	r3, [r7, #28]
   return(result);
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800704e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e6      	bne.n	800702e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	60bb      	str	r3, [r7, #8]
   return(result);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007074:	633b      	str	r3, [r7, #48]	; 0x30
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	61bb      	str	r3, [r7, #24]
 8007080:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6979      	ldr	r1, [r7, #20]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	613b      	str	r3, [r7, #16]
   return(result);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e6      	bne.n	8007060 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007092:	e013      	b.n	80070bc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80070bc:	bf00      	nop
 80070be:	373c      	adds	r7, #60	; 0x3c
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b091      	sub	sp, #68	; 0x44
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d6:	2b21      	cmp	r3, #33	; 0x21
 80070d8:	d151      	bne.n	800717e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d132      	bne.n	800714c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	623b      	str	r3, [r7, #32]
   return(result);
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
 8007106:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800710a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	60fb      	str	r3, [r7, #12]
   return(result);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	69b9      	ldr	r1, [r7, #24]
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	617b      	str	r3, [r7, #20]
   return(result);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e6      	bne.n	8007118 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800714a:	e018      	b.n	800717e <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007160:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007166:	1c9a      	adds	r2, r3, #2
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800717e:	bf00      	nop
 8007180:	3744      	adds	r7, #68	; 0x44
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800718a:	b480      	push	{r7}
 800718c:	b091      	sub	sp, #68	; 0x44
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007198:	2b21      	cmp	r3, #33	; 0x21
 800719a:	d160      	bne.n	800725e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80071a4:	e057      	b.n	8007256 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d133      	bne.n	800721a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	623b      	str	r3, [r7, #32]
   return(result);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071d2:	633a      	str	r2, [r7, #48]	; 0x30
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e5      	bne.n	80071b2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	e853 3f00 	ldrex	r3, [r3]
 80071f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	69b9      	ldr	r1, [r7, #24]
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	e841 2300 	strex	r3, r2, [r1]
 8007210:	617b      	str	r3, [r7, #20]
   return(result);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e6      	bne.n	80071e6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007218:	e021      	b.n	800725e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007224:	2b00      	cmp	r3, #0
 8007226:	d013      	beq.n	8007250 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722c:	781a      	ldrb	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007250:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007252:	3b01      	subs	r3, #1
 8007254:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007256:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1a4      	bne.n	80071a6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800725c:	e7ff      	b.n	800725e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800725e:	bf00      	nop
 8007260:	3744      	adds	r7, #68	; 0x44
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800726a:	b480      	push	{r7}
 800726c:	b091      	sub	sp, #68	; 0x44
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007278:	2b21      	cmp	r3, #33	; 0x21
 800727a:	d165      	bne.n	8007348 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007282:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007284:	e05c      	b.n	8007340 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d133      	bne.n	80072fa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072da:	633b      	str	r3, [r7, #48]	; 0x30
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6979      	ldr	r1, [r7, #20]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	613b      	str	r3, [r7, #16]
   return(result);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80072f8:	e026      	b.n	8007348 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007304:	2b00      	cmp	r3, #0
 8007306:	d018      	beq.n	800733a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800731c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007322:	1c9a      	adds	r2, r3, #2
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800733a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800733c:	3b01      	subs	r3, #1
 800733e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007340:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007342:	2b00      	cmp	r3, #0
 8007344:	d19f      	bne.n	8007286 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007346:	e7ff      	b.n	8007348 <UART_TxISR_16BIT_FIFOEN+0xde>
 8007348:	bf00      	nop
 800734a:	3744      	adds	r7, #68	; 0x44
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	60bb      	str	r3, [r7, #8]
   return(result);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	61bb      	str	r3, [r7, #24]
 800737c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6979      	ldr	r1, [r7, #20]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	613b      	str	r3, [r7, #16]
   return(result);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e6      	bne.n	800735c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2220      	movs	r2, #32
 8007392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7fa fcf5 	bl	8001d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a2:	bf00      	nop
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b096      	sub	sp, #88	; 0x58
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	2b22      	cmp	r3, #34	; 0x22
 80073c4:	f040 8095 	bne.w	80074f2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80073d6:	b2d9      	uxtb	r1, r3
 80073d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e2:	400a      	ands	r2, r1
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d178      	bne.n	8007502 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800741e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007424:	653b      	str	r3, [r7, #80]	; 0x50
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800742e:	647b      	str	r3, [r7, #68]	; 0x44
 8007430:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800743c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e6      	bne.n	8007410 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	623b      	str	r3, [r7, #32]
   return(result);
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007462:	633a      	str	r2, [r7, #48]	; 0x30
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d12e      	bne.n	80074ea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	69b9      	ldr	r1, [r7, #24]
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	617b      	str	r3, [r7, #20]
   return(result);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d103      	bne.n	80074da <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2210      	movs	r2, #16
 80074d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fe ff70 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e8:	e00b      	b.n	8007502 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7fa fc20 	bl	8001d30 <HAL_UART_RxCpltCallback>
}
 80074f0:	e007      	b.n	8007502 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0208 	orr.w	r2, r2, #8
 8007500:	619a      	str	r2, [r3, #24]
}
 8007502:	bf00      	nop
 8007504:	3758      	adds	r7, #88	; 0x58
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b096      	sub	sp, #88	; 0x58
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007518:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007522:	2b22      	cmp	r3, #34	; 0x22
 8007524:	f040 8095 	bne.w	8007652 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007536:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007538:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800753c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007540:	4013      	ands	r3, r2
 8007542:	b29a      	uxth	r2, r3
 8007544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007546:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754c:	1c9a      	adds	r2, r3, #2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d178      	bne.n	8007662 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758e:	643b      	str	r3, [r7, #64]	; 0x40
 8007590:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e6      	bne.n	8007570 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d12e      	bne.n	800764a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f023 0310 	bic.w	r3, r3, #16
 8007606:	647b      	str	r3, [r7, #68]	; 0x44
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6979      	ldr	r1, [r7, #20]
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	613b      	str	r3, [r7, #16]
   return(result);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e6      	bne.n	80075f2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b10      	cmp	r3, #16
 8007630:	d103      	bne.n	800763a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2210      	movs	r2, #16
 8007638:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fe fec0 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007648:	e00b      	b.n	8007662 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fa fb70 	bl	8001d30 <HAL_UART_RxCpltCallback>
}
 8007650:	e007      	b.n	8007662 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0208 	orr.w	r2, r2, #8
 8007660:	619a      	str	r2, [r3, #24]
}
 8007662:	bf00      	nop
 8007664:	3758      	adds	r7, #88	; 0x58
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b0a6      	sub	sp, #152	; 0x98
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800767a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a2:	2b22      	cmp	r3, #34	; 0x22
 80076a4:	f040 814f 	bne.w	8007946 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076b2:	e0f6      	b.n	80078a2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80076c2:	b2d9      	uxtb	r1, r3
 80076c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ce:	400a      	ands	r2, r1
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80076fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b00      	cmp	r3, #0
 8007704:	d053      	beq.n	80077ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007706:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d011      	beq.n	8007736 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2201      	movs	r2, #1
 8007724:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800772c:	f043 0201 	orr.w	r2, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d011      	beq.n	8007766 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2202      	movs	r2, #2
 8007754:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800775c:	f043 0204 	orr.w	r2, r3, #4
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	d011      	beq.n	8007796 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2204      	movs	r2, #4
 8007784:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800778c:	f043 0202 	orr.w	r2, r3, #2
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe fe07 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d173      	bne.n	80078a2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80077c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80077de:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80077e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80077ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e4      	bne.n	80077ba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007806:	f023 0301 	bic.w	r3, r3, #1
 800780a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007814:	657a      	str	r2, [r7, #84]	; 0x54
 8007816:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800781a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e3      	bne.n	80077f0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d12e      	bne.n	800789c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	f023 0310 	bic.w	r3, r3, #16
 8007858:	67bb      	str	r3, [r7, #120]	; 0x78
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007862:	643b      	str	r3, [r7, #64]	; 0x40
 8007864:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e6      	bne.n	8007844 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b10      	cmp	r3, #16
 8007882:	d103      	bne.n	800788c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2210      	movs	r2, #16
 800788a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7fe fd97 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
 800789a:	e002      	b.n	80078a2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7fa fa47 	bl	8001d30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d006      	beq.n	80078b8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80078aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f47f aefe 	bne.w	80076b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80078c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d045      	beq.n	8007956 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80078d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d23e      	bcs.n	8007956 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3308      	adds	r3, #8
 80078de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ee:	673b      	str	r3, [r7, #112]	; 0x70
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80078f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e5      	bne.n	80078d8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a14      	ldr	r2, [pc, #80]	; (8007960 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007910:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f043 0320 	orr.w	r3, r3, #32
 8007926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6979      	ldr	r1, [r7, #20]
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	613b      	str	r3, [r7, #16]
   return(result);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e6      	bne.n	8007912 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007944:	e007      	b.n	8007956 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0208 	orr.w	r2, r2, #8
 8007954:	619a      	str	r2, [r3, #24]
}
 8007956:	bf00      	nop
 8007958:	3798      	adds	r7, #152	; 0x98
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	080073ab 	.word	0x080073ab

08007964 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b0a8      	sub	sp, #160	; 0xa0
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007972:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799a:	2b22      	cmp	r3, #34	; 0x22
 800799c:	f040 8153 	bne.w	8007c46 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079aa:	e0fa      	b.n	8007ba2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80079be:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80079c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80079c6:	4013      	ands	r3, r2
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d4:	1c9a      	adds	r2, r3, #2
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80079f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d053      	beq.n	8007aaa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d011      	beq.n	8007a32 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00b      	beq.n	8007a32 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a28:	f043 0201 	orr.w	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d011      	beq.n	8007a62 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a58:	f043 0204 	orr.w	r2, r3, #4
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d011      	beq.n	8007a92 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a88:	f043 0202 	orr.w	r2, r3, #2
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d006      	beq.n	8007aaa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fe fc89 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d175      	bne.n	8007ba2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ada:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e4      	bne.n	8007ab6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3308      	adds	r3, #8
 8007af2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b14:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e1      	bne.n	8007aec <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d12e      	bne.n	8007b9c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b54:	f023 0310 	bic.w	r3, r3, #16
 8007b58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b62:	647b      	str	r3, [r7, #68]	; 0x44
 8007b64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e6      	bne.n	8007b44 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	f003 0310 	and.w	r3, r3, #16
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d103      	bne.n	8007b8c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2210      	movs	r2, #16
 8007b8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7fe fc17 	bl	80063c8 <HAL_UARTEx_RxEventCallback>
 8007b9a:	e002      	b.n	8007ba2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fa f8c7 	bl	8001d30 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ba2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d006      	beq.n	8007bb8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007baa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f47f aefa 	bne.w	80079ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007bc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d045      	beq.n	8007c56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bd0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d23e      	bcs.n	8007c56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	623b      	str	r3, [r7, #32]
   return(result);
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bee:	677b      	str	r3, [r7, #116]	; 0x74
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007bf8:	633a      	str	r2, [r7, #48]	; 0x30
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e5      	bne.n	8007bd8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a14      	ldr	r2, [pc, #80]	; (8007c60 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007c10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f043 0320 	orr.w	r3, r3, #32
 8007c26:	673b      	str	r3, [r7, #112]	; 0x70
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	69b9      	ldr	r1, [r7, #24]
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c44:	e007      	b.n	8007c56 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699a      	ldr	r2, [r3, #24]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0208 	orr.w	r2, r2, #8
 8007c54:	619a      	str	r2, [r3, #24]
}
 8007c56:	bf00      	nop
 8007c58:	37a0      	adds	r7, #160	; 0xa0
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	0800750b 	.word	0x0800750b

08007c64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08a      	sub	sp, #40	; 0x28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2bff      	cmp	r3, #255	; 0xff
 8007cba:	d14f      	bne.n	8007d5c <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f640 4301 	movw	r3, #3073	; 0xc01
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d140      	bne.n	8007d54 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	3302      	adds	r3, #2
 8007cd6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	885b      	ldrh	r3, [r3, #2]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4b22      	ldr	r3, [pc, #136]	; (8007d6c <PeerToPeer_Event_Handler+0xcc>)
 8007ce2:	889b      	ldrh	r3, [r3, #4]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d118      	bne.n	8007d1c <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	7a1b      	ldrb	r3, [r3, #8]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d007      	beq.n	8007d0c <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007d00:	f107 0308 	add.w	r3, r7, #8
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fb fe8d 	bl	8003a24 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8007d0a:	e025      	b.n	8007d58 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007d10:	f107 0308 	add.w	r3, r7, #8
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fb fe85 	bl	8003a24 <P2PS_STM_App_Notification>
        break;
 8007d1a:	e01d      	b.n	8007d58 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <PeerToPeer_Event_Handler+0xcc>)
 8007d26:	885b      	ldrh	r3, [r3, #2]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d114      	bne.n	8007d58 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8007d2e:	4810      	ldr	r0, [pc, #64]	; (8007d70 <PeerToPeer_Event_Handler+0xd0>)
 8007d30:	f004 f83e 	bl	800bdb0 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	88db      	ldrh	r3, [r3, #6]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	3308      	adds	r3, #8
 8007d46:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8007d48:	f107 0308 	add.w	r3, r7, #8
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fb fe69 	bl	8003a24 <P2PS_STM_App_Notification>
        break;
 8007d52:	e001      	b.n	8007d58 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 8007d54:	bf00      	nop
 8007d56:	e002      	b.n	8007d5e <PeerToPeer_Event_Handler+0xbe>
        break;
 8007d58:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007d5a:	e000      	b.n	8007d5e <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 8007d5c:	bf00      	nop
  }

  return(return_value);
 8007d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8007d62:	4618      	mov	r0, r3
 8007d64:	3728      	adds	r7, #40	; 0x28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	200001f0 	.word	0x200001f0
 8007d70:	0800dc34 	.word	0x0800dc34

08007d74 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8007d7a:	484a      	ldr	r0, [pc, #296]	; (8007ea4 <P2PS_STM_Init+0x130>)
 8007d7c:	f000 f96c 	bl	8008058 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8007d80:	238f      	movs	r3, #143	; 0x8f
 8007d82:	703b      	strb	r3, [r7, #0]
 8007d84:	23e5      	movs	r3, #229	; 0xe5
 8007d86:	707b      	strb	r3, [r7, #1]
 8007d88:	23b3      	movs	r3, #179	; 0xb3
 8007d8a:	70bb      	strb	r3, [r7, #2]
 8007d8c:	23d5      	movs	r3, #213	; 0xd5
 8007d8e:	70fb      	strb	r3, [r7, #3]
 8007d90:	232e      	movs	r3, #46	; 0x2e
 8007d92:	713b      	strb	r3, [r7, #4]
 8007d94:	237f      	movs	r3, #127	; 0x7f
 8007d96:	717b      	strb	r3, [r7, #5]
 8007d98:	234a      	movs	r3, #74	; 0x4a
 8007d9a:	71bb      	strb	r3, [r7, #6]
 8007d9c:	2398      	movs	r3, #152	; 0x98
 8007d9e:	71fb      	strb	r3, [r7, #7]
 8007da0:	232a      	movs	r3, #42	; 0x2a
 8007da2:	723b      	strb	r3, [r7, #8]
 8007da4:	2348      	movs	r3, #72	; 0x48
 8007da6:	727b      	strb	r3, [r7, #9]
 8007da8:	237a      	movs	r3, #122	; 0x7a
 8007daa:	72bb      	strb	r3, [r7, #10]
 8007dac:	23cc      	movs	r3, #204	; 0xcc
 8007dae:	72fb      	strb	r3, [r7, #11]
 8007db0:	2340      	movs	r3, #64	; 0x40
 8007db2:	733b      	strb	r3, [r7, #12]
 8007db4:	23fe      	movs	r3, #254	; 0xfe
 8007db6:	737b      	strb	r3, [r7, #13]
 8007db8:	2300      	movs	r3, #0
 8007dba:	73bb      	strb	r3, [r7, #14]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	4b39      	ldr	r3, [pc, #228]	; (8007ea8 <P2PS_STM_Init+0x134>)
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	2308      	movs	r3, #8
 8007dc8:	2201      	movs	r2, #1
 8007dca:	2002      	movs	r0, #2
 8007dcc:	f000 fcd6 	bl	800877c <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8007dd0:	2319      	movs	r3, #25
 8007dd2:	703b      	strb	r3, [r7, #0]
 8007dd4:	23ed      	movs	r3, #237	; 0xed
 8007dd6:	707b      	strb	r3, [r7, #1]
 8007dd8:	2382      	movs	r3, #130	; 0x82
 8007dda:	70bb      	strb	r3, [r7, #2]
 8007ddc:	23ae      	movs	r3, #174	; 0xae
 8007dde:	70fb      	strb	r3, [r7, #3]
 8007de0:	23ed      	movs	r3, #237	; 0xed
 8007de2:	713b      	strb	r3, [r7, #4]
 8007de4:	2321      	movs	r3, #33	; 0x21
 8007de6:	717b      	strb	r3, [r7, #5]
 8007de8:	234c      	movs	r3, #76	; 0x4c
 8007dea:	71bb      	strb	r3, [r7, #6]
 8007dec:	239d      	movs	r3, #157	; 0x9d
 8007dee:	71fb      	strb	r3, [r7, #7]
 8007df0:	2341      	movs	r3, #65	; 0x41
 8007df2:	723b      	strb	r3, [r7, #8]
 8007df4:	2345      	movs	r3, #69	; 0x45
 8007df6:	727b      	strb	r3, [r7, #9]
 8007df8:	2322      	movs	r3, #34	; 0x22
 8007dfa:	72bb      	strb	r3, [r7, #10]
 8007dfc:	238e      	movs	r3, #142	; 0x8e
 8007dfe:	72fb      	strb	r3, [r7, #11]
 8007e00:	2341      	movs	r3, #65	; 0x41
 8007e02:	733b      	strb	r3, [r7, #12]
 8007e04:	23fe      	movs	r3, #254	; 0xfe
 8007e06:	737b      	strb	r3, [r7, #13]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73bb      	strb	r3, [r7, #14]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007e10:	4b25      	ldr	r3, [pc, #148]	; (8007ea8 <P2PS_STM_Init+0x134>)
 8007e12:	8818      	ldrh	r0, [r3, #0]
 8007e14:	463a      	mov	r2, r7
 8007e16:	4b25      	ldr	r3, [pc, #148]	; (8007eac <P2PS_STM_Init+0x138>)
 8007e18:	9305      	str	r3, [sp, #20]
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	230a      	movs	r3, #10
 8007e20:	9303      	str	r3, [sp, #12]
 8007e22:	2301      	movs	r3, #1
 8007e24:	9302      	str	r3, [sp, #8]
 8007e26:	2300      	movs	r3, #0
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	2306      	movs	r3, #6
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2302      	movs	r3, #2
 8007e30:	2102      	movs	r1, #2
 8007e32:	f000 fd52 	bl	80088da <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8007e36:	2319      	movs	r3, #25
 8007e38:	703b      	strb	r3, [r7, #0]
 8007e3a:	23ed      	movs	r3, #237	; 0xed
 8007e3c:	707b      	strb	r3, [r7, #1]
 8007e3e:	2382      	movs	r3, #130	; 0x82
 8007e40:	70bb      	strb	r3, [r7, #2]
 8007e42:	23ae      	movs	r3, #174	; 0xae
 8007e44:	70fb      	strb	r3, [r7, #3]
 8007e46:	23ed      	movs	r3, #237	; 0xed
 8007e48:	713b      	strb	r3, [r7, #4]
 8007e4a:	2321      	movs	r3, #33	; 0x21
 8007e4c:	717b      	strb	r3, [r7, #5]
 8007e4e:	234c      	movs	r3, #76	; 0x4c
 8007e50:	71bb      	strb	r3, [r7, #6]
 8007e52:	239d      	movs	r3, #157	; 0x9d
 8007e54:	71fb      	strb	r3, [r7, #7]
 8007e56:	2341      	movs	r3, #65	; 0x41
 8007e58:	723b      	strb	r3, [r7, #8]
 8007e5a:	2345      	movs	r3, #69	; 0x45
 8007e5c:	727b      	strb	r3, [r7, #9]
 8007e5e:	2322      	movs	r3, #34	; 0x22
 8007e60:	72bb      	strb	r3, [r7, #10]
 8007e62:	238e      	movs	r3, #142	; 0x8e
 8007e64:	72fb      	strb	r3, [r7, #11]
 8007e66:	2342      	movs	r3, #66	; 0x42
 8007e68:	733b      	strb	r3, [r7, #12]
 8007e6a:	23fe      	movs	r3, #254	; 0xfe
 8007e6c:	737b      	strb	r3, [r7, #13]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73bb      	strb	r3, [r7, #14]
 8007e72:	2300      	movs	r3, #0
 8007e74:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007e76:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <P2PS_STM_Init+0x134>)
 8007e78:	8818      	ldrh	r0, [r3, #0]
 8007e7a:	463a      	mov	r2, r7
 8007e7c:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <P2PS_STM_Init+0x13c>)
 8007e7e:	9305      	str	r3, [sp, #20]
 8007e80:	2301      	movs	r3, #1
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	230a      	movs	r3, #10
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	2301      	movs	r3, #1
 8007e8a:	9302      	str	r3, [sp, #8]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	2310      	movs	r3, #16
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2302      	movs	r3, #2
 8007e96:	2102      	movs	r1, #2
 8007e98:	f000 fd1f 	bl	80088da <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8007e9c:	bf00      	nop
}
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	08007ca1 	.word	0x08007ca1
 8007ea8:	200001f0 	.word	0x200001f0
 8007eac:	200001f2 	.word	0x200001f2
 8007eb0:	200001f4 	.word	0x200001f4

08007eb4 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	4603      	mov	r3, r0
 8007ebc:	6039      	str	r1, [r7, #0]
 8007ebe:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8007ec0:	2392      	movs	r3, #146	; 0x92
 8007ec2:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8007ec4:	88fb      	ldrh	r3, [r7, #6]
 8007ec6:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d10c      	bne.n	8007ee8 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007ece:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <P2PS_STM_App_Update_Char+0x40>)
 8007ed0:	8818      	ldrh	r0, [r3, #0]
 8007ed2:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <P2PS_STM_App_Update_Char+0x40>)
 8007ed4:	8899      	ldrh	r1, [r3, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	2302      	movs	r3, #2
 8007edc:	2200      	movs	r2, #0
 8007ede:	f000 fde6 	bl	8008aae <aci_gatt_update_char_value>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8007ee6:	e000      	b.n	8007eea <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8007ee8:	bf00      	nop
  }

  return result;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	200001f0 	.word	0x200001f0

08007ef8 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
  return;
 8007efc:	bf00      	nop
}
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <BLS_Init>:

__weak void BLS_Init( void )
{
 8007f06:	b480      	push	{r7}
 8007f08:	af00      	add	r7, sp, #0
  return;
 8007f0a:	bf00      	nop
}
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
  return;
 8007f18:	bf00      	nop
}
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <DIS_Init>:
__weak void DIS_Init( void )
{
 8007f22:	b480      	push	{r7}
 8007f24:	af00      	add	r7, sp, #0
  return;
 8007f26:	bf00      	nop
}
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
  return;
 8007f34:	bf00      	nop
}
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007f3e:	b480      	push	{r7}
 8007f40:	af00      	add	r7, sp, #0
  return;
 8007f42:	bf00      	nop
}
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HRS_Init>:
__weak void HRS_Init( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0
  return;
 8007f50:	bf00      	nop
}
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HTS_Init>:
__weak void HTS_Init( void )
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	af00      	add	r7, sp, #0
  return;
 8007f5e:	bf00      	nop
}
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <IAS_Init>:
__weak void IAS_Init( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
  return;
 8007f6c:	bf00      	nop
}
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <LLS_Init>:
__weak void LLS_Init( void )
{
 8007f76:	b480      	push	{r7}
 8007f78:	af00      	add	r7, sp, #0
  return;
 8007f7a:	bf00      	nop
}
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <TPS_Init>:
__weak void TPS_Init( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
  return;
 8007f88:	bf00      	nop
}
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8007f92:	b480      	push	{r7}
 8007f94:	af00      	add	r7, sp, #0
  return;
 8007f96:	bf00      	nop
}
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <ZDD_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void ZDD_STM_Init( void )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
  return;
 8007fa4:	bf00      	nop
}
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8007fae:	b480      	push	{r7}
 8007fb0:	af00      	add	r7, sp, #0
  return;
 8007fb2:	bf00      	nop
}
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <MESH_Init>:
__weak void MESH_Init( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  return;
 8007fc0:	bf00      	nop
}
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007fca:	b480      	push	{r7}
 8007fcc:	af00      	add	r7, sp, #0
  return;
 8007fce:	bf00      	nop
}
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  return;
 8007fdc:	bf00      	nop
}
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007fec:	4b04      	ldr	r3, [pc, #16]	; (8008000 <SVCCTL_Init+0x18>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007ff2:	4b04      	ldr	r3, [pc, #16]	; (8008004 <SVCCTL_Init+0x1c>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007ff8:	f000 f806 	bl	8008008 <SVCCTL_SvcInit>

  return;
 8007ffc:	bf00      	nop
}
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200001f8 	.word	0x200001f8
 8008004:	20000200 	.word	0x20000200

08008008 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
  BAS_Init();
 800800c:	f7ff ff74 	bl	8007ef8 <BAS_Init>

  BLS_Init();
 8008010:	f7ff ff79 	bl	8007f06 <BLS_Init>

  CRS_STM_Init();
 8008014:	f7ff ff7e 	bl	8007f14 <CRS_STM_Init>

  DIS_Init();
 8008018:	f7ff ff83 	bl	8007f22 <DIS_Init>

  EDS_STM_Init();
 800801c:	f7ff ff88 	bl	8007f30 <EDS_STM_Init>

  HIDS_Init();
 8008020:	f7ff ff8d 	bl	8007f3e <HIDS_Init>

  HRS_Init();
 8008024:	f7ff ff92 	bl	8007f4c <HRS_Init>

  HTS_Init();
 8008028:	f7ff ff97 	bl	8007f5a <HTS_Init>

  IAS_Init();
 800802c:	f7ff ff9c 	bl	8007f68 <IAS_Init>

  LLS_Init();
 8008030:	f7ff ffa1 	bl	8007f76 <LLS_Init>

  TPS_Init();
 8008034:	f7ff ffa6 	bl	8007f84 <TPS_Init>

  MOTENV_STM_Init();
 8008038:	f7ff ffab 	bl	8007f92 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800803c:	f7ff fe9a 	bl	8007d74 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008040:	f7ff ffae 	bl	8007fa0 <ZDD_STM_Init>

  OTAS_STM_Init();
 8008044:	f7ff ffb3 	bl	8007fae <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008048:	f7ff ffbf 	bl	8007fca <BVOPUS_STM_Init>

  MESH_Init();
 800804c:	f7ff ffb6 	bl	8007fbc <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008050:	f7ff ffc2 	bl	8007fd8 <SVCCTL_InitCustomSvc>
  
  return;
 8008054:	bf00      	nop
}
 8008056:	bd80      	pop	{r7, pc}

08008058 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008060:	4b09      	ldr	r3, [pc, #36]	; (8008088 <SVCCTL_RegisterSvcHandler+0x30>)
 8008062:	791b      	ldrb	r3, [r3, #4]
 8008064:	4619      	mov	r1, r3
 8008066:	4a08      	ldr	r2, [pc, #32]	; (8008088 <SVCCTL_RegisterSvcHandler+0x30>)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <SVCCTL_RegisterSvcHandler+0x30>)
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	3301      	adds	r3, #1
 8008074:	b2da      	uxtb	r2, r3
 8008076:	4b04      	ldr	r3, [pc, #16]	; (8008088 <SVCCTL_RegisterSvcHandler+0x30>)
 8008078:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800807a:	bf00      	nop
}
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	200001f8 	.word	0x200001f8

0800808c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3301      	adds	r3, #1
 8008098:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800809a:	2300      	movs	r3, #0
 800809c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2bff      	cmp	r3, #255	; 0xff
 80080a4:	d125      	bne.n	80080f2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	3302      	adds	r3, #2
 80080aa:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080ba:	d118      	bne.n	80080ee <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80080bc:	2300      	movs	r3, #0
 80080be:	757b      	strb	r3, [r7, #21]
 80080c0:	e00d      	b.n	80080de <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80080c2:	7d7b      	ldrb	r3, [r7, #21]
 80080c4:	4a1a      	ldr	r2, [pc, #104]	; (8008130 <SVCCTL_UserEvtRx+0xa4>)
 80080c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	4798      	blx	r3
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d108      	bne.n	80080ea <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80080d8:	7d7b      	ldrb	r3, [r7, #21]
 80080da:	3301      	adds	r3, #1
 80080dc:	757b      	strb	r3, [r7, #21]
 80080de:	4b14      	ldr	r3, [pc, #80]	; (8008130 <SVCCTL_UserEvtRx+0xa4>)
 80080e0:	791b      	ldrb	r3, [r3, #4]
 80080e2:	7d7a      	ldrb	r2, [r7, #21]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d3ec      	bcc.n	80080c2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80080e8:	e002      	b.n	80080f0 <SVCCTL_UserEvtRx+0x64>
              break;
 80080ea:	bf00      	nop
          break;
 80080ec:	e000      	b.n	80080f0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80080ee:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80080f0:	e000      	b.n	80080f4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80080f2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d00f      	beq.n	800811a <SVCCTL_UserEvtRx+0x8e>
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	dc10      	bgt.n	8008120 <SVCCTL_UserEvtRx+0x94>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <SVCCTL_UserEvtRx+0x7c>
 8008102:	2b01      	cmp	r3, #1
 8008104:	d006      	beq.n	8008114 <SVCCTL_UserEvtRx+0x88>
 8008106:	e00b      	b.n	8008120 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fa fb9f 	bl	800284c <SVCCTL_App_Notification>
 800810e:	4603      	mov	r3, r0
 8008110:	75bb      	strb	r3, [r7, #22]
      break;
 8008112:	e008      	b.n	8008126 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008114:	2301      	movs	r3, #1
 8008116:	75bb      	strb	r3, [r7, #22]
      break;
 8008118:	e005      	b.n	8008126 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800811a:	2300      	movs	r3, #0
 800811c:	75bb      	strb	r3, [r7, #22]
      break;
 800811e:	e002      	b.n	8008126 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008120:	2301      	movs	r3, #1
 8008122:	75bb      	strb	r3, [r7, #22]
      break;
 8008124:	bf00      	nop
  }

  return (return_status);
 8008126:	7dbb      	ldrb	r3, [r7, #22]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200001f8 	.word	0x200001f8

08008134 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800813e:	f107 0308 	add.w	r3, r7, #8
 8008142:	2218      	movs	r2, #24
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fedd 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 800814c:	233f      	movs	r3, #63	; 0x3f
 800814e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008150:	2381      	movs	r3, #129	; 0x81
 8008152:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008154:	1dfb      	adds	r3, r7, #7
 8008156:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008158:	2301      	movs	r3, #1
 800815a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800815c:	f107 0308 	add.w	r3, r7, #8
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f001 f858 	bl	8009218 <hci_send_req>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	da01      	bge.n	8008172 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800816e:	23ff      	movs	r3, #255	; 0xff
 8008170:	e000      	b.n	8008174 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008172:	79fb      	ldrb	r3, [r7, #7]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3720      	adds	r7, #32
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800817c:	b5b0      	push	{r4, r5, r7, lr}
 800817e:	b0ce      	sub	sp, #312	; 0x138
 8008180:	af00      	add	r7, sp, #0
 8008182:	4605      	mov	r5, r0
 8008184:	460c      	mov	r4, r1
 8008186:	4610      	mov	r0, r2
 8008188:	4619      	mov	r1, r3
 800818a:	1dfb      	adds	r3, r7, #7
 800818c:	462a      	mov	r2, r5
 800818e:	701a      	strb	r2, [r3, #0]
 8008190:	1d3b      	adds	r3, r7, #4
 8008192:	4622      	mov	r2, r4
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	1cbb      	adds	r3, r7, #2
 8008198:	4602      	mov	r2, r0
 800819a:	801a      	strh	r2, [r3, #0]
 800819c:	1dbb      	adds	r3, r7, #6
 800819e:	460a      	mov	r2, r1
 80081a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80081a2:	f107 0310 	add.w	r3, r7, #16
 80081a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80081aa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80081ae:	3308      	adds	r3, #8
 80081b0:	f107 0210 	add.w	r2, r7, #16
 80081b4:	4413      	add	r3, r2
 80081b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80081ba:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80081be:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80081c2:	4413      	add	r3, r2
 80081c4:	3309      	adds	r3, #9
 80081c6:	f107 0210 	add.w	r2, r7, #16
 80081ca:	4413      	add	r3, r2
 80081cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80081d0:	f107 030f 	add.w	r3, r7, #15
 80081d4:	2200      	movs	r2, #0
 80081d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80081de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081e2:	1dfa      	adds	r2, r7, #7
 80081e4:	7812      	ldrb	r2, [r2, #0]
 80081e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081ec:	3301      	adds	r3, #1
 80081ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80081f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081f6:	1d3a      	adds	r2, r7, #4
 80081f8:	8812      	ldrh	r2, [r2, #0]
 80081fa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80081fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008202:	3302      	adds	r3, #2
 8008204:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800820c:	1cba      	adds	r2, r7, #2
 800820e:	8812      	ldrh	r2, [r2, #0]
 8008210:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008214:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008218:	3302      	adds	r3, #2
 800821a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800821e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008222:	1dba      	adds	r2, r7, #6
 8008224:	7812      	ldrb	r2, [r2, #0]
 8008226:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008228:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800822c:	3301      	adds	r3, #1
 800822e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008232:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008236:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800823a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800823c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008240:	3301      	adds	r3, #1
 8008242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008246:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800824a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800824e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008250:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008254:	3301      	adds	r3, #1
 8008256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800825a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800825e:	3308      	adds	r3, #8
 8008260:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008264:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fe3c 	bl	8008ee6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800826e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008272:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008276:	4413      	add	r3, r2
 8008278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800827c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008280:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008284:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800828a:	3301      	adds	r3, #1
 800828c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008290:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008294:	3301      	adds	r3, #1
 8008296:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800829a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fe21 	bl	8008ee6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80082a4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80082a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80082ac:	4413      	add	r3, r2
 80082ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80082b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80082ba:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80082bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082c0:	3302      	adds	r3, #2
 80082c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80082c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ca:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80082ce:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80082d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082d4:	3302      	adds	r3, #2
 80082d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082de:	2218      	movs	r2, #24
 80082e0:	2100      	movs	r1, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fe0f 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082e8:	233f      	movs	r3, #63	; 0x3f
 80082ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80082ee:	2383      	movs	r3, #131	; 0x83
 80082f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80082f4:	f107 0310 	add.w	r3, r7, #16
 80082f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80082fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008300:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008304:	f107 030f 	add.w	r3, r7, #15
 8008308:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800830c:	2301      	movs	r3, #1
 800830e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f000 ff7d 	bl	8009218 <hci_send_req>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	da01      	bge.n	8008328 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8008324:	23ff      	movs	r3, #255	; 0xff
 8008326:	e002      	b.n	800832e <aci_gap_set_discoverable+0x1b2>
  return status;
 8008328:	f107 030f 	add.w	r3, r7, #15
 800832c:	781b      	ldrb	r3, [r3, #0]
}
 800832e:	4618      	mov	r0, r3
 8008330:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008334:	46bd      	mov	sp, r7
 8008336:	bdb0      	pop	{r4, r5, r7, pc}

08008338 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b0cc      	sub	sp, #304	; 0x130
 800833c:	af00      	add	r7, sp, #0
 800833e:	4602      	mov	r2, r0
 8008340:	1dfb      	adds	r3, r7, #7
 8008342:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008344:	f107 0310 	add.w	r3, r7, #16
 8008348:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800834c:	f107 030f 	add.w	r3, r7, #15
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800835a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800835e:	1dfa      	adds	r2, r7, #7
 8008360:	7812      	ldrb	r2, [r2, #0]
 8008362:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008368:	3301      	adds	r3, #1
 800836a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800836e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008372:	2218      	movs	r2, #24
 8008374:	2100      	movs	r1, #0
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fdc5 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 800837c:	233f      	movs	r3, #63	; 0x3f
 800837e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008382:	2385      	movs	r3, #133	; 0x85
 8008384:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008394:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008398:	f107 030f 	add.w	r3, r7, #15
 800839c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80083a0:	2301      	movs	r3, #1
 80083a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 ff33 	bl	8009218 <hci_send_req>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	da01      	bge.n	80083bc <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80083b8:	23ff      	movs	r3, #255	; 0xff
 80083ba:	e002      	b.n	80083c2 <aci_gap_set_io_capability+0x8a>
  return status;
 80083bc:	f107 030f 	add.w	r3, r7, #15
 80083c0:	781b      	ldrb	r3, [r3, #0]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80083cc:	b5b0      	push	{r4, r5, r7, lr}
 80083ce:	b0cc      	sub	sp, #304	; 0x130
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4605      	mov	r5, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	4610      	mov	r0, r2
 80083d8:	4619      	mov	r1, r3
 80083da:	1dfb      	adds	r3, r7, #7
 80083dc:	462a      	mov	r2, r5
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	1dbb      	adds	r3, r7, #6
 80083e2:	4622      	mov	r2, r4
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	1d7b      	adds	r3, r7, #5
 80083e8:	4602      	mov	r2, r0
 80083ea:	701a      	strb	r2, [r3, #0]
 80083ec:	1d3b      	adds	r3, r7, #4
 80083ee:	460a      	mov	r2, r1
 80083f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80083f2:	f107 0310 	add.w	r3, r7, #16
 80083f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083fa:	f107 030f 	add.w	r3, r7, #15
 80083fe:	2200      	movs	r2, #0
 8008400:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800840c:	1dfa      	adds	r2, r7, #7
 800840e:	7812      	ldrb	r2, [r2, #0]
 8008410:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008412:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008416:	3301      	adds	r3, #1
 8008418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800841c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008420:	1dba      	adds	r2, r7, #6
 8008422:	7812      	ldrb	r2, [r2, #0]
 8008424:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800842a:	3301      	adds	r3, #1
 800842c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008434:	1d7a      	adds	r2, r7, #5
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800843a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800843e:	3301      	adds	r3, #1
 8008440:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008448:	1d3a      	adds	r2, r7, #4
 800844a:	7812      	ldrb	r2, [r2, #0]
 800844c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800844e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008452:	3301      	adds	r3, #1
 8008454:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008460:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008462:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008466:	3301      	adds	r3, #1
 8008468:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800846c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008470:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008474:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008476:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800847a:	3301      	adds	r3, #1
 800847c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008484:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008488:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800848a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800848e:	3301      	adds	r3, #1
 8008490:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008498:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800849c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80084a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084a4:	3304      	adds	r3, #4
 80084a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80084aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ae:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80084b2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80084b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084b8:	3301      	adds	r3, #1
 80084ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084c2:	2218      	movs	r2, #24
 80084c4:	2100      	movs	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fd1d 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084cc:	233f      	movs	r3, #63	; 0x3f
 80084ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80084d2:	2386      	movs	r3, #134	; 0x86
 80084d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80084d8:	f107 0310 	add.w	r3, r7, #16
 80084dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084e8:	f107 030f 	add.w	r3, r7, #15
 80084ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084fa:	2100      	movs	r1, #0
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fe8b 	bl	8009218 <hci_send_req>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	da01      	bge.n	800850c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8008508:	23ff      	movs	r3, #255	; 0xff
 800850a:	e002      	b.n	8008512 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800850c:	f107 030f 	add.w	r3, r7, #15
 8008510:	781b      	ldrb	r3, [r3, #0]
}
 8008512:	4618      	mov	r0, r3
 8008514:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008518:	46bd      	mov	sp, r7
 800851a:	bdb0      	pop	{r4, r5, r7, pc}

0800851c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b0cd      	sub	sp, #308	; 0x134
 8008520:	af00      	add	r7, sp, #0
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	4611      	mov	r1, r2
 8008528:	463a      	mov	r2, r7
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	1dfb      	adds	r3, r7, #7
 800852e:	4622      	mov	r2, r4
 8008530:	701a      	strb	r2, [r3, #0]
 8008532:	1dbb      	adds	r3, r7, #6
 8008534:	4602      	mov	r2, r0
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	1d7b      	adds	r3, r7, #5
 800853a:	460a      	mov	r2, r1
 800853c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800853e:	f107 0310 	add.w	r3, r7, #16
 8008542:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008546:	f107 0308 	add.w	r3, r7, #8
 800854a:	2207      	movs	r2, #7
 800854c:	2100      	movs	r1, #0
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fcd9 	bl	8008f06 <Osal_MemSet>
  int index_input = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800855a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800855e:	1dfa      	adds	r2, r7, #7
 8008560:	7812      	ldrb	r2, [r2, #0]
 8008562:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008568:	3301      	adds	r3, #1
 800856a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800856e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008572:	1dba      	adds	r2, r7, #6
 8008574:	7812      	ldrb	r2, [r2, #0]
 8008576:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008578:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800857c:	3301      	adds	r3, #1
 800857e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008586:	1d7a      	adds	r2, r7, #5
 8008588:	7812      	ldrb	r2, [r2, #0]
 800858a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800858c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008590:	3301      	adds	r3, #1
 8008592:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008596:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800859a:	2218      	movs	r2, #24
 800859c:	2100      	movs	r1, #0
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fcb1 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085a4:	233f      	movs	r3, #63	; 0x3f
 80085a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80085aa:	238a      	movs	r3, #138	; 0x8a
 80085ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80085b0:	f107 0310 	add.w	r3, r7, #16
 80085b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80085b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80085c0:	f107 0308 	add.w	r3, r7, #8
 80085c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80085c8:	2307      	movs	r3, #7
 80085ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085d2:	2100      	movs	r1, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fe1f 	bl	8009218 <hci_send_req>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	da01      	bge.n	80085e4 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80085e0:	23ff      	movs	r3, #255	; 0xff
 80085e2:	e021      	b.n	8008628 <aci_gap_init+0x10c>
  if ( resp.Status )
 80085e4:	f107 0308 	add.w	r3, r7, #8
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <aci_gap_init+0xda>
    return resp.Status;
 80085ee:	f107 0308 	add.w	r3, r7, #8
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	e018      	b.n	8008628 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 80085f6:	f107 0308 	add.w	r3, r7, #8
 80085fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	463b      	mov	r3, r7
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008606:	f107 0308 	add.w	r3, r7, #8
 800860a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008614:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008616:	f107 0308 	add.w	r3, r7, #8
 800861a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800861e:	b29a      	uxth	r2, r3
 8008620:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008624:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800862e:	46bd      	mov	sp, r7
 8008630:	bd90      	pop	{r4, r7, pc}

08008632 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b0cc      	sub	sp, #304	; 0x130
 8008636:	af00      	add	r7, sp, #0
 8008638:	4602      	mov	r2, r0
 800863a:	463b      	mov	r3, r7
 800863c:	6019      	str	r1, [r3, #0]
 800863e:	1dfb      	adds	r3, r7, #7
 8008640:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008642:	f107 0310 	add.w	r3, r7, #16
 8008646:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800864a:	f107 030f 	add.w	r3, r7, #15
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800865c:	1dfa      	adds	r2, r7, #7
 800865e:	7812      	ldrb	r2, [r2, #0]
 8008660:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008666:	3301      	adds	r3, #1
 8008668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800866c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008670:	1c58      	adds	r0, r3, #1
 8008672:	1dfb      	adds	r3, r7, #7
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	463b      	mov	r3, r7
 8008678:	6819      	ldr	r1, [r3, #0]
 800867a:	f000 fc34 	bl	8008ee6 <Osal_MemCpy>
  index_input += AdvDataLen;
 800867e:	1dfb      	adds	r3, r7, #7
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008686:	4413      	add	r3, r2
 8008688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800868c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008690:	2218      	movs	r2, #24
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fc36 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 800869a:	233f      	movs	r3, #63	; 0x3f
 800869c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80086a0:	238e      	movs	r3, #142	; 0x8e
 80086a2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80086a6:	f107 0310 	add.w	r3, r7, #16
 80086aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80086b6:	f107 030f 	add.w	r3, r7, #15
 80086ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80086be:	2301      	movs	r3, #1
 80086c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086c8:	2100      	movs	r1, #0
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fda4 	bl	8009218 <hci_send_req>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da01      	bge.n	80086da <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80086d6:	23ff      	movs	r3, #255	; 0xff
 80086d8:	e002      	b.n	80086e0 <aci_gap_update_adv_data+0xae>
  return status;
 80086da:	f107 030f 	add.w	r3, r7, #15
 80086de:	781b      	ldrb	r3, [r3, #0]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b088      	sub	sp, #32
 80086ee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086f4:	f107 0308 	add.w	r3, r7, #8
 80086f8:	2218      	movs	r2, #24
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fc02 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008702:	233f      	movs	r3, #63	; 0x3f
 8008704:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008706:	2392      	movs	r3, #146	; 0x92
 8008708:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800870a:	1dfb      	adds	r3, r7, #7
 800870c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800870e:	2301      	movs	r3, #1
 8008710:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008712:	f107 0308 	add.w	r3, r7, #8
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fd7d 	bl	8009218 <hci_send_req>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	da01      	bge.n	8008728 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008724:	23ff      	movs	r3, #255	; 0xff
 8008726:	e000      	b.n	800872a <aci_gap_configure_whitelist+0x40>
  return status;
 8008728:	79fb      	ldrb	r3, [r7, #7]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3720      	adds	r7, #32
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b088      	sub	sp, #32
 8008736:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800873c:	f107 0308 	add.w	r3, r7, #8
 8008740:	2218      	movs	r2, #24
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fbde 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 800874a:	233f      	movs	r3, #63	; 0x3f
 800874c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800874e:	f240 1301 	movw	r3, #257	; 0x101
 8008752:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008754:	1dfb      	adds	r3, r7, #7
 8008756:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008758:	2301      	movs	r3, #1
 800875a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800875c:	f107 0308 	add.w	r3, r7, #8
 8008760:	2100      	movs	r1, #0
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fd58 	bl	8009218 <hci_send_req>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	da01      	bge.n	8008772 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800876e:	23ff      	movs	r3, #255	; 0xff
 8008770:	e000      	b.n	8008774 <aci_gatt_init+0x42>
  return status;
 8008772:	79fb      	ldrb	r3, [r7, #7]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3720      	adds	r7, #32
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800877c:	b590      	push	{r4, r7, lr}
 800877e:	b0cf      	sub	sp, #316	; 0x13c
 8008780:	af00      	add	r7, sp, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4638      	mov	r0, r7
 8008786:	6001      	str	r1, [r0, #0]
 8008788:	4610      	mov	r0, r2
 800878a:	4619      	mov	r1, r3
 800878c:	1dfb      	adds	r3, r7, #7
 800878e:	4622      	mov	r2, r4
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	1dbb      	adds	r3, r7, #6
 8008794:	4602      	mov	r2, r0
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	1d7b      	adds	r3, r7, #5
 800879a:	460a      	mov	r2, r1
 800879c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800879e:	f107 0310 	add.w	r3, r7, #16
 80087a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80087a6:	1dfb      	adds	r3, r7, #7
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d007      	beq.n	80087be <aci_gatt_add_service+0x42>
 80087ae:	1dfb      	adds	r3, r7, #7
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d101      	bne.n	80087ba <aci_gatt_add_service+0x3e>
 80087b6:	2311      	movs	r3, #17
 80087b8:	e002      	b.n	80087c0 <aci_gatt_add_service+0x44>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <aci_gatt_add_service+0x44>
 80087be:	2303      	movs	r3, #3
 80087c0:	f107 0210 	add.w	r2, r7, #16
 80087c4:	4413      	add	r3, r2
 80087c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80087ca:	f107 030c 	add.w	r3, r7, #12
 80087ce:	2203      	movs	r2, #3
 80087d0:	2100      	movs	r1, #0
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fb97 	bl	8008f06 <Osal_MemSet>
  int index_input = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80087de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80087e2:	1dfa      	adds	r2, r7, #7
 80087e4:	7812      	ldrb	r2, [r2, #0]
 80087e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80087e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087ec:	3301      	adds	r3, #1
 80087ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80087f2:	1dfb      	adds	r3, r7, #7
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d002      	beq.n	8008800 <aci_gatt_add_service+0x84>
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d004      	beq.n	8008808 <aci_gatt_add_service+0x8c>
 80087fe:	e007      	b.n	8008810 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8008800:	2302      	movs	r3, #2
 8008802:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008806:	e005      	b.n	8008814 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8008808:	2310      	movs	r3, #16
 800880a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800880e:	e001      	b.n	8008814 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8008810:	2397      	movs	r3, #151	; 0x97
 8008812:	e05d      	b.n	80088d0 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008814:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008818:	1c58      	adds	r0, r3, #1
 800881a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800881e:	463b      	mov	r3, r7
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	f000 fb60 	bl	8008ee6 <Osal_MemCpy>
    index_input += size;
 8008826:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800882a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800882e:	4413      	add	r3, r2
 8008830:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008838:	1dba      	adds	r2, r7, #6
 800883a:	7812      	ldrb	r2, [r2, #0]
 800883c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800883e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008842:	3301      	adds	r3, #1
 8008844:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884c:	1d7a      	adds	r2, r7, #5
 800884e:	7812      	ldrb	r2, [r2, #0]
 8008850:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008856:	3301      	adds	r3, #1
 8008858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800885c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008860:	2218      	movs	r2, #24
 8008862:	2100      	movs	r1, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fb4e 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 800886a:	233f      	movs	r3, #63	; 0x3f
 800886c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008870:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008874:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008878:	f107 0310 	add.w	r3, r7, #16
 800887c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008880:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008888:	f107 030c 	add.w	r3, r7, #12
 800888c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008890:	2303      	movs	r3, #3
 8008892:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800889a:	2100      	movs	r1, #0
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fcbb 	bl	8009218 <hci_send_req>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	da01      	bge.n	80088ac <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80088a8:	23ff      	movs	r3, #255	; 0xff
 80088aa:	e011      	b.n	80088d0 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80088ac:	f107 030c 	add.w	r3, r7, #12
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <aci_gatt_add_service+0x142>
    return resp.Status;
 80088b6:	f107 030c 	add.w	r3, r7, #12
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	e008      	b.n	80088d0 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80088be:	f107 030c 	add.w	r3, r7, #12
 80088c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80088cc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd90      	pop	{r4, r7, pc}

080088da <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80088da:	b590      	push	{r4, r7, lr}
 80088dc:	b0d1      	sub	sp, #324	; 0x144
 80088de:	af00      	add	r7, sp, #0
 80088e0:	4604      	mov	r4, r0
 80088e2:	4608      	mov	r0, r1
 80088e4:	f107 0108 	add.w	r1, r7, #8
 80088e8:	600a      	str	r2, [r1, #0]
 80088ea:	4619      	mov	r1, r3
 80088ec:	f107 030e 	add.w	r3, r7, #14
 80088f0:	4622      	mov	r2, r4
 80088f2:	801a      	strh	r2, [r3, #0]
 80088f4:	f107 030d 	add.w	r3, r7, #13
 80088f8:	4602      	mov	r2, r0
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	1dbb      	adds	r3, r7, #6
 80088fe:	460a      	mov	r2, r1
 8008900:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008902:	f107 0318 	add.w	r3, r7, #24
 8008906:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800890a:	f107 030d 	add.w	r3, r7, #13
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d008      	beq.n	8008926 <aci_gatt_add_char+0x4c>
 8008914:	f107 030d 	add.w	r3, r7, #13
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d101      	bne.n	8008922 <aci_gatt_add_char+0x48>
 800891e:	2313      	movs	r3, #19
 8008920:	e002      	b.n	8008928 <aci_gatt_add_char+0x4e>
 8008922:	2303      	movs	r3, #3
 8008924:	e000      	b.n	8008928 <aci_gatt_add_char+0x4e>
 8008926:	2305      	movs	r3, #5
 8008928:	f107 0218 	add.w	r2, r7, #24
 800892c:	4413      	add	r3, r2
 800892e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008932:	f107 0314 	add.w	r3, r7, #20
 8008936:	2203      	movs	r2, #3
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fae3 	bl	8008f06 <Osal_MemSet>
  int index_input = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008946:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800894a:	f107 020e 	add.w	r2, r7, #14
 800894e:	8812      	ldrh	r2, [r2, #0]
 8008950:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008952:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008956:	3302      	adds	r3, #2
 8008958:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800895c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008960:	f107 020d 	add.w	r2, r7, #13
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008968:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800896c:	3301      	adds	r3, #1
 800896e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008972:	f107 030d 	add.w	r3, r7, #13
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d002      	beq.n	8008982 <aci_gatt_add_char+0xa8>
 800897c:	2b02      	cmp	r3, #2
 800897e:	d004      	beq.n	800898a <aci_gatt_add_char+0xb0>
 8008980:	e007      	b.n	8008992 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8008982:	2302      	movs	r3, #2
 8008984:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008988:	e005      	b.n	8008996 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800898a:	2310      	movs	r3, #16
 800898c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008990:	e001      	b.n	8008996 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8008992:	2397      	movs	r3, #151	; 0x97
 8008994:	e086      	b.n	8008aa4 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008996:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800899a:	1cd8      	adds	r0, r3, #3
 800899c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80089a0:	f107 0308 	add.w	r3, r7, #8
 80089a4:	6819      	ldr	r1, [r3, #0]
 80089a6:	f000 fa9e 	bl	8008ee6 <Osal_MemCpy>
    index_input += size;
 80089aa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80089ae:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80089b2:	4413      	add	r3, r2
 80089b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80089b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089bc:	1dba      	adds	r2, r7, #6
 80089be:	8812      	ldrh	r2, [r2, #0]
 80089c0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80089c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089c6:	3302      	adds	r3, #2
 80089c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80089cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089d0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80089d4:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80089d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089da:	3301      	adds	r3, #1
 80089dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80089e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089e4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80089e8:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80089ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089ee:	3301      	adds	r3, #1
 80089f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80089f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089f8:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80089fc:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80089fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a02:	3301      	adds	r3, #1
 8008a04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008a08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a0c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008a10:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008a12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a16:	3301      	adds	r3, #1
 8008a18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008a1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a20:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008a24:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008a26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a34:	2218      	movs	r2, #24
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fa64 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a3e:	233f      	movs	r3, #63	; 0x3f
 8008a40:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008a44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008a48:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008a4c:	f107 0318 	add.w	r3, r7, #24
 8008a50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008a54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008a64:	2303      	movs	r3, #3
 8008a66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a6e:	2100      	movs	r1, #0
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fbd1 	bl	8009218 <hci_send_req>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da01      	bge.n	8008a80 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8008a7c:	23ff      	movs	r3, #255	; 0xff
 8008a7e:	e011      	b.n	8008aa4 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8008a80:	f107 0314 	add.w	r3, r7, #20
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8008a8a:	f107 0314 	add.w	r3, r7, #20
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	e008      	b.n	8008aa4 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8008a92:	f107 0314 	add.w	r3, r7, #20
 8008a96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008aa0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd90      	pop	{r4, r7, pc}

08008aae <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008aae:	b5b0      	push	{r4, r5, r7, lr}
 8008ab0:	b0cc      	sub	sp, #304	; 0x130
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	4610      	mov	r0, r2
 8008aba:	4619      	mov	r1, r3
 8008abc:	1dbb      	adds	r3, r7, #6
 8008abe:	462a      	mov	r2, r5
 8008ac0:	801a      	strh	r2, [r3, #0]
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	1cfb      	adds	r3, r7, #3
 8008aca:	4602      	mov	r2, r0
 8008acc:	701a      	strb	r2, [r3, #0]
 8008ace:	1cbb      	adds	r3, r7, #2
 8008ad0:	460a      	mov	r2, r1
 8008ad2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008ad4:	f107 0310 	add.w	r3, r7, #16
 8008ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008adc:	f107 030f 	add.w	r3, r7, #15
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aee:	1dba      	adds	r2, r7, #6
 8008af0:	8812      	ldrh	r2, [r2, #0]
 8008af2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008af8:	3302      	adds	r3, #2
 8008afa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b02:	1d3a      	adds	r2, r7, #4
 8008b04:	8812      	ldrh	r2, [r2, #0]
 8008b06:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008b08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b16:	1cfa      	adds	r2, r7, #3
 8008b18:	7812      	ldrb	r2, [r2, #0]
 8008b1a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b20:	3301      	adds	r3, #1
 8008b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2a:	1cba      	adds	r2, r7, #2
 8008b2c:	7812      	ldrb	r2, [r2, #0]
 8008b2e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b34:	3301      	adds	r3, #1
 8008b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3e:	1d98      	adds	r0, r3, #6
 8008b40:	1cbb      	adds	r3, r7, #2
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008b4a:	f000 f9cc 	bl	8008ee6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008b4e:	1cbb      	adds	r3, r7, #2
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b56:	4413      	add	r3, r2
 8008b58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b60:	2218      	movs	r2, #24
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 f9ce 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b6a:	233f      	movs	r3, #63	; 0x3f
 8008b6c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008b70:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008b74:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b78:	f107 0310 	add.w	r3, r7, #16
 8008b7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b88:	f107 030f 	add.w	r3, r7, #15
 8008b8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b90:	2301      	movs	r3, #1
 8008b92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fb3b 	bl	8009218 <hci_send_req>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da01      	bge.n	8008bac <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8008ba8:	23ff      	movs	r3, #255	; 0xff
 8008baa:	e002      	b.n	8008bb2 <aci_gatt_update_char_value+0x104>
  return status;
 8008bac:	f107 030f 	add.w	r3, r7, #15
 8008bb0:	781b      	ldrb	r3, [r3, #0]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bdb0      	pop	{r4, r5, r7, pc}

08008bbc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b0cc      	sub	sp, #304	; 0x130
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	463b      	mov	r3, r7
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	1dfb      	adds	r3, r7, #7
 8008bc8:	4602      	mov	r2, r0
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	1dbb      	adds	r3, r7, #6
 8008bce:	460a      	mov	r2, r1
 8008bd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008bd2:	f107 0310 	add.w	r3, r7, #16
 8008bd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bda:	f107 030f 	add.w	r3, r7, #15
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bec:	1dfa      	adds	r2, r7, #7
 8008bee:	7812      	ldrb	r2, [r2, #0]
 8008bf0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c00:	1dba      	adds	r2, r7, #6
 8008c02:	7812      	ldrb	r2, [r2, #0]
 8008c04:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c14:	1c98      	adds	r0, r3, #2
 8008c16:	1dbb      	adds	r3, r7, #6
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	463b      	mov	r3, r7
 8008c1c:	6819      	ldr	r1, [r3, #0]
 8008c1e:	f000 f962 	bl	8008ee6 <Osal_MemCpy>
  index_input += Length;
 8008c22:	1dbb      	adds	r3, r7, #6
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c34:	2218      	movs	r2, #24
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 f964 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c3e:	233f      	movs	r3, #63	; 0x3f
 8008c40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008c44:	230c      	movs	r3, #12
 8008c46:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c4a:	f107 0310 	add.w	r3, r7, #16
 8008c4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c5a:	f107 030f 	add.w	r3, r7, #15
 8008c5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c62:	2301      	movs	r3, #1
 8008c64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fad2 	bl	8009218 <hci_send_req>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da01      	bge.n	8008c7e <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008c7a:	23ff      	movs	r3, #255	; 0xff
 8008c7c:	e002      	b.n	8008c84 <aci_hal_write_config_data+0xc8>
  return status;
 8008c7e:	f107 030f 	add.w	r3, r7, #15
 8008c82:	781b      	ldrb	r3, [r3, #0]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b0cc      	sub	sp, #304	; 0x130
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	4602      	mov	r2, r0
 8008c96:	1dfb      	adds	r3, r7, #7
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	1dbb      	adds	r3, r7, #6
 8008c9c:	460a      	mov	r2, r1
 8008c9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008ca0:	f107 0310 	add.w	r3, r7, #16
 8008ca4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ca8:	f107 030f 	add.w	r3, r7, #15
 8008cac:	2200      	movs	r2, #0
 8008cae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cba:	1dfa      	adds	r2, r7, #7
 8008cbc:	7812      	ldrb	r2, [r2, #0]
 8008cbe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cce:	1dba      	adds	r2, r7, #6
 8008cd0:	7812      	ldrb	r2, [r2, #0]
 8008cd2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cd8:	3301      	adds	r3, #1
 8008cda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ce2:	2218      	movs	r2, #24
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f90d 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cec:	233f      	movs	r3, #63	; 0x3f
 8008cee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008cf2:	230f      	movs	r3, #15
 8008cf4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cf8:	f107 0310 	add.w	r3, r7, #16
 8008cfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d08:	f107 030f 	add.w	r3, r7, #15
 8008d0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d10:	2301      	movs	r3, #1
 8008d12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 fa7b 	bl	8009218 <hci_send_req>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	da01      	bge.n	8008d2c <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008d28:	23ff      	movs	r3, #255	; 0xff
 8008d2a:	e002      	b.n	8008d32 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8008d2c:	f107 030f 	add.w	r3, r7, #15
 8008d30:	781b      	ldrb	r3, [r3, #0]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b0cc      	sub	sp, #304	; 0x130
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4602      	mov	r2, r0
 8008d44:	1dbb      	adds	r3, r7, #6
 8008d46:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008d48:	f107 0310 	add.w	r3, r7, #16
 8008d4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d50:	f107 030f 	add.w	r3, r7, #15
 8008d54:	2200      	movs	r2, #0
 8008d56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d62:	1dba      	adds	r2, r7, #6
 8008d64:	8812      	ldrh	r2, [r2, #0]
 8008d66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d76:	2218      	movs	r2, #24
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 f8c3 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d80:	233f      	movs	r3, #63	; 0x3f
 8008d82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008d86:	2318      	movs	r3, #24
 8008d88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d8c:	f107 0310 	add.w	r3, r7, #16
 8008d90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d9c:	f107 030f 	add.w	r3, r7, #15
 8008da0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008da4:	2301      	movs	r3, #1
 8008da6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fa31 	bl	8009218 <hci_send_req>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da01      	bge.n	8008dc0 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8008dbc:	23ff      	movs	r3, #255	; 0xff
 8008dbe:	e002      	b.n	8008dc6 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8008dc0:	f107 030f 	add.w	r3, r7, #15
 8008dc4:	781b      	ldrb	r3, [r3, #0]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dda:	f107 0308 	add.w	r3, r7, #8
 8008dde:	2218      	movs	r2, #24
 8008de0:	2100      	movs	r1, #0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f88f 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x03;
 8008de8:	2303      	movs	r3, #3
 8008dea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008dec:	2303      	movs	r3, #3
 8008dee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008df0:	1dfb      	adds	r3, r7, #7
 8008df2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008df4:	2301      	movs	r3, #1
 8008df6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008df8:	f107 0308 	add.w	r3, r7, #8
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fa0a 	bl	8009218 <hci_send_req>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da01      	bge.n	8008e0e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008e0a:	23ff      	movs	r3, #255	; 0xff
 8008e0c:	e000      	b.n	8008e10 <hci_reset+0x40>
  return status;
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008e18:	b590      	push	{r4, r7, lr}
 8008e1a:	b0cd      	sub	sp, #308	; 0x134
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	4611      	mov	r1, r2
 8008e24:	1dfb      	adds	r3, r7, #7
 8008e26:	4622      	mov	r2, r4
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	1dbb      	adds	r3, r7, #6
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	701a      	strb	r2, [r3, #0]
 8008e30:	1d7b      	adds	r3, r7, #5
 8008e32:	460a      	mov	r2, r1
 8008e34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008e36:	f107 0310 	add.w	r3, r7, #16
 8008e3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e3e:	f107 030f 	add.w	r3, r7, #15
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e50:	1dfa      	adds	r2, r7, #7
 8008e52:	7812      	ldrb	r2, [r2, #0]
 8008e54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e64:	1dba      	adds	r2, r7, #6
 8008e66:	7812      	ldrb	r2, [r2, #0]
 8008e68:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e6e:	3301      	adds	r3, #1
 8008e70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e78:	1d7a      	adds	r2, r7, #5
 8008e7a:	7812      	ldrb	r2, [r2, #0]
 8008e7c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e82:	3301      	adds	r3, #1
 8008e84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e8c:	2218      	movs	r2, #24
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f838 	bl	8008f06 <Osal_MemSet>
  rq.ogf = 0x08;
 8008e96:	2308      	movs	r3, #8
 8008e98:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008e9c:	2331      	movs	r3, #49	; 0x31
 8008e9e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ea2:	f107 0310 	add.w	r3, r7, #16
 8008ea6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008eaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008eb2:	f107 030f 	add.w	r3, r7, #15
 8008eb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ec0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f9a6 	bl	8009218 <hci_send_req>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da01      	bge.n	8008ed6 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008ed2:	23ff      	movs	r3, #255	; 0xff
 8008ed4:	e002      	b.n	8008edc <hci_le_set_default_phy+0xc4>
  return status;
 8008ed6:	f107 030f 	add.w	r3, r7, #15
 8008eda:	781b      	ldrb	r3, [r3, #0]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd90      	pop	{r4, r7, pc}

08008ee6 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f002 febe 	bl	800bc78 <memcpy>
 8008efc:	4603      	mov	r3, r0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f002 febc 	bl	800bc94 <memset>
 8008f1c:	4603      	mov	r3, r0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b088      	sub	sp, #32
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008f2e:	f107 030c 	add.w	r3, r7, #12
 8008f32:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	2125      	movs	r1, #37	; 0x25
 8008f3e:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008f42:	f000 faff 	bl	8009544 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	330b      	adds	r3, #11
 8008f4a:	78db      	ldrb	r3, [r3, #3]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3720      	adds	r7, #32
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <SHCI_C2_THREAD_Init>:

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008f5a:	1d3b      	adds	r3, r7, #4
 8008f5c:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2200      	movs	r2, #0
 8008f62:	2100      	movs	r1, #0
 8008f64:	f64f 4067 	movw	r0, #64615	; 0xfc67
 8008f68:	f000 faec 	bl	8009544 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	330b      	adds	r3, #11
 8008f70:	78db      	ldrb	r3, [r3, #3]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b088      	sub	sp, #32
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	4603      	mov	r3, r0
 8008f82:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008f84:	f107 030c 	add.w	r3, r7, #12
 8008f88:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 8008f8e:	f107 020c 	add.w	r2, r7, #12
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	2101      	movs	r1, #1
 8008f96:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 8008f9a:	f000 fad3 	bl	8009544 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	330b      	adds	r3, #11
 8008fa2:	78db      	ldrb	r3, [r3, #3]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <SHCI_C2_RADIO_AllowLowPower>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_RADIO_AllowLowPower( SHCI_C2_FLASH_Ip_t Ip,uint8_t  FlagRadioLowPowerOn)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	460a      	mov	r2, r1
 8008fb6:	71fb      	strb	r3, [r7, #7]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	71bb      	strb	r3, [r7, #6]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	733b      	strb	r3, [r7, #12]
  local_buffer[1] = FlagRadioLowPowerOn;
 8008fc6:	79bb      	ldrb	r3, [r7, #6]
 8008fc8:	737b      	strb	r3, [r7, #13]

  shci_send( SHCI_OPCODE_C2_RADIO_ALLOW_LOW_POWER,
 8008fca:	f107 020c 	add.w	r2, r7, #12
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	2102      	movs	r1, #2
 8008fd2:	f64f 406d 	movw	r0, #64621	; 0xfc6d
 8008fd6:	f000 fab5 	bl	8009544 <shci_send>
             2,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	330b      	adds	r3, #11
 8008fde:	78db      	ldrb	r3, [r3, #3]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b08b      	sub	sp, #44	; 0x2c
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009004:	2300      	movs	r3, #0
 8009006:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009010:	4b4a      	ldr	r3, [pc, #296]	; (800913c <SHCI_GetWirelessFwInfo+0x154>)
 8009012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009014:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009018:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009022:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a44      	ldr	r2, [pc, #272]	; (8009140 <SHCI_GetWirelessFwInfo+0x158>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d10f      	bne.n	8009054 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	e01a      	b.n	800908a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800905c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009060:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	0e1b      	lsrs	r3, r3, #24
 800908e:	b2da      	uxtb	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	b2da      	uxtb	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	091b      	lsrs	r3, r3, #4
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	f003 030f 	and.w	r3, r3, #15
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	0e1b      	lsrs	r3, r3, #24
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	0e1b      	lsrs	r3, r3, #24
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	0c1b      	lsrs	r3, r3, #16
 8009102:	b2da      	uxtb	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	0a1b      	lsrs	r3, r3, #8
 800910c:	b2da      	uxtb	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	0e1b      	lsrs	r3, r3, #24
 8009116:	b2da      	uxtb	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	0c1b      	lsrs	r3, r3, #16
 8009120:	b2da      	uxtb	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	b2da      	uxtb	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	372c      	adds	r7, #44	; 0x2c
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	58004000 	.word	0x58004000
 8009140:	a94656b9 	.word	0xa94656b9

08009144 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	4a08      	ldr	r2, [pc, #32]	; (8009174 <hci_init+0x30>)
 8009154:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009156:	4a08      	ldr	r2, [pc, #32]	; (8009178 <hci_init+0x34>)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800915c:	4806      	ldr	r0, [pc, #24]	; (8009178 <hci_init+0x34>)
 800915e:	f000 f973 	bl	8009448 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f8d4 	bl	8009314 <TlInit>

  return;
 800916c:	bf00      	nop
}
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200006ec 	.word	0x200006ec
 8009178:	200006c4 	.word	0x200006c4

0800917c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009182:	4822      	ldr	r0, [pc, #136]	; (800920c <hci_user_evt_proc+0x90>)
 8009184:	f001 fdfe 	bl	800ad84 <LST_is_empty>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d12b      	bne.n	80091e6 <hci_user_evt_proc+0x6a>
 800918e:	4b20      	ldr	r3, [pc, #128]	; (8009210 <hci_user_evt_proc+0x94>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d027      	beq.n	80091e6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009196:	f107 030c 	add.w	r3, r7, #12
 800919a:	4619      	mov	r1, r3
 800919c:	481b      	ldr	r0, [pc, #108]	; (800920c <hci_user_evt_proc+0x90>)
 800919e:	f001 fe80 	bl	800aea2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80091a2:	4b1c      	ldr	r3, [pc, #112]	; (8009214 <hci_user_evt_proc+0x98>)
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00c      	beq.n	80091c4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80091ae:	2301      	movs	r3, #1
 80091b0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80091b2:	4b18      	ldr	r3, [pc, #96]	; (8009214 <hci_user_evt_proc+0x98>)
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	1d3a      	adds	r2, r7, #4
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80091bc:	793a      	ldrb	r2, [r7, #4]
 80091be:	4b14      	ldr	r3, [pc, #80]	; (8009210 <hci_user_evt_proc+0x94>)
 80091c0:	701a      	strb	r2, [r3, #0]
 80091c2:	e002      	b.n	80091ca <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80091c4:	4b12      	ldr	r3, [pc, #72]	; (8009210 <hci_user_evt_proc+0x94>)
 80091c6:	2201      	movs	r2, #1
 80091c8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80091ca:	4b11      	ldr	r3, [pc, #68]	; (8009210 <hci_user_evt_proc+0x94>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d004      	beq.n	80091dc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fc7b 	bl	8009ad0 <TL_MM_EvtDone>
 80091da:	e004      	b.n	80091e6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4619      	mov	r1, r3
 80091e0:	480a      	ldr	r0, [pc, #40]	; (800920c <hci_user_evt_proc+0x90>)
 80091e2:	f001 fdf1 	bl	800adc8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80091e6:	4809      	ldr	r0, [pc, #36]	; (800920c <hci_user_evt_proc+0x90>)
 80091e8:	f001 fdcc 	bl	800ad84 <LST_is_empty>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d107      	bne.n	8009202 <hci_user_evt_proc+0x86>
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <hci_user_evt_proc+0x94>)
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80091fa:	4804      	ldr	r0, [pc, #16]	; (800920c <hci_user_evt_proc+0x90>)
 80091fc:	f7f9 fe01 	bl	8002e02 <hci_notify_asynch_evt>
  }


  return;
 8009200:	bf00      	nop
 8009202:	bf00      	nop
}
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000208 	.word	0x20000208
 8009210:	20000214 	.word	0x20000214
 8009214:	200006c4 	.word	0x200006c4

08009218 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b088      	sub	sp, #32
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009224:	2000      	movs	r0, #0
 8009226:	f000 f8cb 	bl	80093c0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800922a:	2300      	movs	r3, #0
 800922c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	b21b      	sxth	r3, r3
 8009234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009238:	b21a      	sxth	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	029b      	lsls	r3, r3, #10
 8009240:	b21b      	sxth	r3, r3
 8009242:	4313      	orrs	r3, r2
 8009244:	b21b      	sxth	r3, r3
 8009246:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	b2d9      	uxtb	r1, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	8bbb      	ldrh	r3, [r7, #28]
 8009254:	4618      	mov	r0, r3
 8009256:	f000 f88d 	bl	8009374 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800925a:	e04e      	b.n	80092fa <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800925c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009260:	f7f9 fde6 	bl	8002e30 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009264:	e043      	b.n	80092ee <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009266:	f107 030c 	add.w	r3, r7, #12
 800926a:	4619      	mov	r1, r3
 800926c:	4828      	ldr	r0, [pc, #160]	; (8009310 <hci_send_req+0xf8>)
 800926e:	f001 fe18 	bl	800aea2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	7a5b      	ldrb	r3, [r3, #9]
 8009276:	2b0f      	cmp	r3, #15
 8009278:	d114      	bne.n	80092a4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	330b      	adds	r3, #11
 800927e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	885b      	ldrh	r3, [r3, #2]
 8009284:	b29b      	uxth	r3, r3
 8009286:	8bba      	ldrh	r2, [r7, #28]
 8009288:	429a      	cmp	r2, r3
 800928a:	d104      	bne.n	8009296 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	7812      	ldrb	r2, [r2, #0]
 8009294:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	785b      	ldrb	r3, [r3, #1]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d027      	beq.n	80092ee <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800929e:	2301      	movs	r3, #1
 80092a0:	77fb      	strb	r3, [r7, #31]
 80092a2:	e024      	b.n	80092ee <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	330b      	adds	r3, #11
 80092a8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	8bba      	ldrh	r2, [r7, #28]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d114      	bne.n	80092e2 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	7a9b      	ldrb	r3, [r3, #10]
 80092bc:	3b03      	subs	r3, #3
 80092be:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695a      	ldr	r2, [r3, #20]
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	bfa8      	it	ge
 80092ca:	461a      	movge	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6918      	ldr	r0, [r3, #16]
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	1cd9      	adds	r1, r3, #3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	461a      	mov	r2, r3
 80092de:	f002 fccb 	bl	800bc78 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80092ea:	2301      	movs	r3, #1
 80092ec:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80092ee:	4808      	ldr	r0, [pc, #32]	; (8009310 <hci_send_req+0xf8>)
 80092f0:	f001 fd48 	bl	800ad84 <LST_is_empty>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0b5      	beq.n	8009266 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80092fa:	7ffb      	ldrb	r3, [r7, #31]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0ad      	beq.n	800925c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009300:	2001      	movs	r0, #1
 8009302:	f000 f85d 	bl	80093c0 <NotifyCmdStatus>

  return 0;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3720      	adds	r7, #32
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	200006e4 	.word	0x200006e4

08009314 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800931c:	480f      	ldr	r0, [pc, #60]	; (800935c <TlInit+0x48>)
 800931e:	f001 fd21 	bl	800ad64 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009322:	4a0f      	ldr	r2, [pc, #60]	; (8009360 <TlInit+0x4c>)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009328:	480e      	ldr	r0, [pc, #56]	; (8009364 <TlInit+0x50>)
 800932a:	f001 fd1b 	bl	800ad64 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800932e:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <TlInit+0x54>)
 8009330:	2201      	movs	r2, #1
 8009332:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009334:	4b0d      	ldr	r3, [pc, #52]	; (800936c <TlInit+0x58>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <TlInit+0x5c>)
 8009342:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009344:	4b09      	ldr	r3, [pc, #36]	; (800936c <TlInit+0x58>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f107 0208 	add.w	r2, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
  }

  return;
 8009350:	bf00      	nop
 8009352:	bf00      	nop
}
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	200006e4 	.word	0x200006e4
 8009360:	20000210 	.word	0x20000210
 8009364:	20000208 	.word	0x20000208
 8009368:	20000214 	.word	0x20000214
 800936c:	200006c4 	.word	0x200006c4
 8009370:	08009401 	.word	0x08009401

08009374 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	603a      	str	r2, [r7, #0]
 800937e:	80fb      	strh	r3, [r7, #6]
 8009380:	460b      	mov	r3, r1
 8009382:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009384:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <SendCmd+0x44>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	88fa      	ldrh	r2, [r7, #6]
 800938a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800938e:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <SendCmd+0x44>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	797a      	ldrb	r2, [r7, #5]
 8009394:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009396:	4b08      	ldr	r3, [pc, #32]	; (80093b8 <SendCmd+0x44>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	330c      	adds	r3, #12
 800939c:	797a      	ldrb	r2, [r7, #5]
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f002 fc69 	bl	800bc78 <memcpy>

  hciContext.io.Send(0,0);
 80093a6:	4b05      	ldr	r3, [pc, #20]	; (80093bc <SendCmd+0x48>)
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2100      	movs	r1, #0
 80093ac:	2000      	movs	r0, #0
 80093ae:	4798      	blx	r3

  return;
 80093b0:	bf00      	nop
}
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000210 	.word	0x20000210
 80093bc:	200006c4 	.word	0x200006c4

080093c0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d108      	bne.n	80093e2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80093d0:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <NotifyCmdStatus+0x3c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00d      	beq.n	80093f4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80093d8:	4b08      	ldr	r3, [pc, #32]	; (80093fc <NotifyCmdStatus+0x3c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2000      	movs	r0, #0
 80093de:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80093e0:	e008      	b.n	80093f4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80093e2:	4b06      	ldr	r3, [pc, #24]	; (80093fc <NotifyCmdStatus+0x3c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d004      	beq.n	80093f4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80093ea:	4b04      	ldr	r3, [pc, #16]	; (80093fc <NotifyCmdStatus+0x3c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2001      	movs	r0, #1
 80093f0:	4798      	blx	r3
  return;
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
}
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	200006ec 	.word	0x200006ec

08009400 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7a5b      	ldrb	r3, [r3, #9]
 800940c:	2b0f      	cmp	r3, #15
 800940e:	d003      	beq.n	8009418 <TlEvtReceived+0x18>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	7a5b      	ldrb	r3, [r3, #9]
 8009414:	2b0e      	cmp	r3, #14
 8009416:	d107      	bne.n	8009428 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	4809      	ldr	r0, [pc, #36]	; (8009440 <TlEvtReceived+0x40>)
 800941c:	f001 fcfa 	bl	800ae14 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009420:	2000      	movs	r0, #0
 8009422:	f7f9 fcfa 	bl	8002e1a <hci_cmd_resp_release>
 8009426:	e006      	b.n	8009436 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4806      	ldr	r0, [pc, #24]	; (8009444 <TlEvtReceived+0x44>)
 800942c:	f001 fcf2 	bl	800ae14 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009430:	4804      	ldr	r0, [pc, #16]	; (8009444 <TlEvtReceived+0x44>)
 8009432:	f7f9 fce6 	bl	8002e02 <hci_notify_asynch_evt>
  }

  return;
 8009436:	bf00      	nop
}
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200006e4 	.word	0x200006e4
 8009444:	20000208 	.word	0x20000208

08009448 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a05      	ldr	r2, [pc, #20]	; (8009468 <hci_register_io_bus+0x20>)
 8009454:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a04      	ldr	r2, [pc, #16]	; (800946c <hci_register_io_bus+0x24>)
 800945a:	611a      	str	r2, [r3, #16]

  return;
 800945c:	bf00      	nop
}
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	08009759 	.word	0x08009759
 800946c:	080097c1 	.word	0x080097c1

08009470 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	4a08      	ldr	r2, [pc, #32]	; (80094a0 <shci_init+0x30>)
 8009480:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009482:	4a08      	ldr	r2, [pc, #32]	; (80094a4 <shci_init+0x34>)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009488:	4806      	ldr	r0, [pc, #24]	; (80094a4 <shci_init+0x34>)
 800948a:	f000 f911 	bl	80096b0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f894 	bl	80095c0 <TlInit>

  return;
 8009498:	bf00      	nop
}
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000710 	.word	0x20000710
 80094a4:	200006f0 	.word	0x200006f0

080094a8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80094ae:	4822      	ldr	r0, [pc, #136]	; (8009538 <shci_user_evt_proc+0x90>)
 80094b0:	f001 fc68 	bl	800ad84 <LST_is_empty>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d12b      	bne.n	8009512 <shci_user_evt_proc+0x6a>
 80094ba:	4b20      	ldr	r3, [pc, #128]	; (800953c <shci_user_evt_proc+0x94>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d027      	beq.n	8009512 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80094c2:	f107 030c 	add.w	r3, r7, #12
 80094c6:	4619      	mov	r1, r3
 80094c8:	481b      	ldr	r0, [pc, #108]	; (8009538 <shci_user_evt_proc+0x90>)
 80094ca:	f001 fcea 	bl	800aea2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80094ce:	4b1c      	ldr	r3, [pc, #112]	; (8009540 <shci_user_evt_proc+0x98>)
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00c      	beq.n	80094f0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80094da:	2301      	movs	r3, #1
 80094dc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80094de:	4b18      	ldr	r3, [pc, #96]	; (8009540 <shci_user_evt_proc+0x98>)
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	1d3a      	adds	r2, r7, #4
 80094e4:	4610      	mov	r0, r2
 80094e6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80094e8:	793a      	ldrb	r2, [r7, #4]
 80094ea:	4b14      	ldr	r3, [pc, #80]	; (800953c <shci_user_evt_proc+0x94>)
 80094ec:	701a      	strb	r2, [r3, #0]
 80094ee:	e002      	b.n	80094f6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80094f0:	4b12      	ldr	r3, [pc, #72]	; (800953c <shci_user_evt_proc+0x94>)
 80094f2:	2201      	movs	r2, #1
 80094f4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80094f6:	4b11      	ldr	r3, [pc, #68]	; (800953c <shci_user_evt_proc+0x94>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d004      	beq.n	8009508 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fae5 	bl	8009ad0 <TL_MM_EvtDone>
 8009506:	e004      	b.n	8009512 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4619      	mov	r1, r3
 800950c:	480a      	ldr	r0, [pc, #40]	; (8009538 <shci_user_evt_proc+0x90>)
 800950e:	f001 fc5b 	bl	800adc8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009512:	4809      	ldr	r0, [pc, #36]	; (8009538 <shci_user_evt_proc+0x90>)
 8009514:	f001 fc36 	bl	800ad84 <LST_is_empty>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d107      	bne.n	800952e <shci_user_evt_proc+0x86>
 800951e:	4b07      	ldr	r3, [pc, #28]	; (800953c <shci_user_evt_proc+0x94>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009526:	4804      	ldr	r0, [pc, #16]	; (8009538 <shci_user_evt_proc+0x90>)
 8009528:	f7f7 f9ea 	bl	8000900 <shci_notify_asynch_evt>
  }


  return;
 800952c:	bf00      	nop
 800952e:	bf00      	nop
}
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20000218 	.word	0x20000218
 800953c:	20000228 	.word	0x20000228
 8009540:	200006f0 	.word	0x200006f0

08009544 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	60ba      	str	r2, [r7, #8]
 800954c:	607b      	str	r3, [r7, #4]
 800954e:	4603      	mov	r3, r0
 8009550:	81fb      	strh	r3, [r7, #14]
 8009552:	460b      	mov	r3, r1
 8009554:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009556:	2000      	movs	r0, #0
 8009558:	f000 f864 	bl	8009624 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800955c:	4b16      	ldr	r3, [pc, #88]	; (80095b8 <shci_send+0x74>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	89fa      	ldrh	r2, [r7, #14]
 8009562:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009566:	4b14      	ldr	r3, [pc, #80]	; (80095b8 <shci_send+0x74>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	7b7a      	ldrb	r2, [r7, #13]
 800956c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800956e:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <shci_send+0x74>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	330c      	adds	r3, #12
 8009574:	7b7a      	ldrb	r2, [r7, #13]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	4618      	mov	r0, r3
 800957a:	f002 fb7d 	bl	800bc78 <memcpy>

  shciContext.io.Send(0,0);
 800957e:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <shci_send+0x78>)
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2100      	movs	r1, #0
 8009584:	2000      	movs	r0, #0
 8009586:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009588:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800958c:	f7f7 f9d0 	bl	8000930 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f103 0008 	add.w	r0, r3, #8
 8009596:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <shci_send+0x74>)
 8009598:	6819      	ldr	r1, [r3, #0]
 800959a:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <shci_send+0x74>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	789b      	ldrb	r3, [r3, #2]
 80095a0:	3303      	adds	r3, #3
 80095a2:	461a      	mov	r2, r3
 80095a4:	f002 fb68 	bl	800bc78 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80095a8:	2001      	movs	r0, #1
 80095aa:	f000 f83b 	bl	8009624 <Cmd_SetStatus>

  return;
 80095ae:	bf00      	nop
}
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20000224 	.word	0x20000224
 80095bc:	200006f0 	.word	0x200006f0

080095c0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80095c8:	4a10      	ldr	r2, [pc, #64]	; (800960c <TlInit+0x4c>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80095ce:	4810      	ldr	r0, [pc, #64]	; (8009610 <TlInit+0x50>)
 80095d0:	f001 fbc8 	bl	800ad64 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80095d4:	2001      	movs	r0, #1
 80095d6:	f000 f825 	bl	8009624 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80095da:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <TlInit+0x54>)
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <TlInit+0x58>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00c      	beq.n	8009602 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80095ec:	4b0b      	ldr	r3, [pc, #44]	; (800961c <TlInit+0x5c>)
 80095ee:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80095f0:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <TlInit+0x60>)
 80095f2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80095f4:	4b08      	ldr	r3, [pc, #32]	; (8009618 <TlInit+0x58>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f107 020c 	add.w	r2, r7, #12
 80095fc:	4610      	mov	r0, r2
 80095fe:	4798      	blx	r3
  }

  return;
 8009600:	bf00      	nop
 8009602:	bf00      	nop
}
 8009604:	3718      	adds	r7, #24
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20000224 	.word	0x20000224
 8009610:	20000218 	.word	0x20000218
 8009614:	20000228 	.word	0x20000228
 8009618:	200006f0 	.word	0x200006f0
 800961c:	08009675 	.word	0x08009675
 8009620:	0800968d 	.word	0x0800968d

08009624 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10b      	bne.n	800964c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009634:	4b0d      	ldr	r3, [pc, #52]	; (800966c <Cmd_SetStatus+0x48>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800963c:	4b0b      	ldr	r3, [pc, #44]	; (800966c <Cmd_SetStatus+0x48>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2000      	movs	r0, #0
 8009642:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <Cmd_SetStatus+0x4c>)
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800964a:	e00b      	b.n	8009664 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800964c:	4b08      	ldr	r3, [pc, #32]	; (8009670 <Cmd_SetStatus+0x4c>)
 800964e:	2201      	movs	r2, #1
 8009650:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009652:	4b06      	ldr	r3, [pc, #24]	; (800966c <Cmd_SetStatus+0x48>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d004      	beq.n	8009664 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800965a:	4b04      	ldr	r3, [pc, #16]	; (800966c <Cmd_SetStatus+0x48>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2001      	movs	r0, #1
 8009660:	4798      	blx	r3
  return;
 8009662:	bf00      	nop
 8009664:	bf00      	nop
}
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000710 	.word	0x20000710
 8009670:	20000220 	.word	0x20000220

08009674 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800967c:	2000      	movs	r0, #0
 800967e:	f7f7 f94c 	bl	800091a <shci_cmd_resp_release>

  return;
 8009682:	bf00      	nop
}
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4805      	ldr	r0, [pc, #20]	; (80096ac <TlUserEvtReceived+0x20>)
 8009698:	f001 fbbc 	bl	800ae14 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800969c:	4803      	ldr	r0, [pc, #12]	; (80096ac <TlUserEvtReceived+0x20>)
 800969e:	f7f7 f92f 	bl	8000900 <shci_notify_asynch_evt>

  return;
 80096a2:	bf00      	nop
}
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000218 	.word	0x20000218

080096b0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a05      	ldr	r2, [pc, #20]	; (80096d0 <shci_register_io_bus+0x20>)
 80096bc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a04      	ldr	r2, [pc, #16]	; (80096d4 <shci_register_io_bus+0x24>)
 80096c2:	611a      	str	r2, [r3, #16]

  return;
 80096c4:	bf00      	nop
}
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	0800986d 	.word	0x0800986d
 80096d4:	080098c1 	.word	0x080098c1

080096d8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80096dc:	f7fa fc7c 	bl	8003fd8 <HW_IPCC_Enable>

  return;
 80096e0:	bf00      	nop
}
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <TL_Init>:


void TL_Init( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80096e8:	4b10      	ldr	r3, [pc, #64]	; (800972c <TL_Init+0x48>)
 80096ea:	4a11      	ldr	r2, [pc, #68]	; (8009730 <TL_Init+0x4c>)
 80096ec:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <TL_Init+0x48>)
 80096f0:	4a10      	ldr	r2, [pc, #64]	; (8009734 <TL_Init+0x50>)
 80096f2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80096f4:	4b0d      	ldr	r3, [pc, #52]	; (800972c <TL_Init+0x48>)
 80096f6:	4a10      	ldr	r2, [pc, #64]	; (8009738 <TL_Init+0x54>)
 80096f8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <TL_Init+0x48>)
 80096fc:	4a0f      	ldr	r2, [pc, #60]	; (800973c <TL_Init+0x58>)
 80096fe:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009700:	4b0a      	ldr	r3, [pc, #40]	; (800972c <TL_Init+0x48>)
 8009702:	4a0f      	ldr	r2, [pc, #60]	; (8009740 <TL_Init+0x5c>)
 8009704:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <TL_Init+0x48>)
 8009708:	4a0e      	ldr	r2, [pc, #56]	; (8009744 <TL_Init+0x60>)
 800970a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800970c:	4b07      	ldr	r3, [pc, #28]	; (800972c <TL_Init+0x48>)
 800970e:	4a0e      	ldr	r2, [pc, #56]	; (8009748 <TL_Init+0x64>)
 8009710:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009712:	4b06      	ldr	r3, [pc, #24]	; (800972c <TL_Init+0x48>)
 8009714:	4a0d      	ldr	r2, [pc, #52]	; (800974c <TL_Init+0x68>)
 8009716:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009718:	4b04      	ldr	r3, [pc, #16]	; (800972c <TL_Init+0x48>)
 800971a:	4a0d      	ldr	r2, [pc, #52]	; (8009750 <TL_Init+0x6c>)
 800971c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800971e:	4b03      	ldr	r3, [pc, #12]	; (800972c <TL_Init+0x48>)
 8009720:	4a0c      	ldr	r2, [pc, #48]	; (8009754 <TL_Init+0x70>)
 8009722:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009724:	f7fa fc6c 	bl	8004000 <HW_IPCC_Init>

  return;
 8009728:	bf00      	nop
}
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20030000 	.word	0x20030000
 8009730:	20030140 	.word	0x20030140
 8009734:	20030160 	.word	0x20030160
 8009738:	20030170 	.word	0x20030170
 800973c:	2003017c 	.word	0x2003017c
 8009740:	20030184 	.word	0x20030184
 8009744:	2003018c 	.word	0x2003018c
 8009748:	20030194 	.word	0x20030194
 800974c:	200301b0 	.word	0x200301b0
 8009750:	200301b4 	.word	0x200301b4
 8009754:	200301c0 	.word	0x200301c0

08009758 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009764:	4811      	ldr	r0, [pc, #68]	; (80097ac <TL_BLE_Init+0x54>)
 8009766:	f001 fafd 	bl	800ad64 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800976a:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <TL_BLE_Init+0x58>)
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4a0c      	ldr	r2, [pc, #48]	; (80097b4 <TL_BLE_Init+0x5c>)
 8009784:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4a08      	ldr	r2, [pc, #32]	; (80097ac <TL_BLE_Init+0x54>)
 800978a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800978c:	f7fa fc4e 	bl	800402c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a08      	ldr	r2, [pc, #32]	; (80097b8 <TL_BLE_Init+0x60>)
 8009796:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	4a07      	ldr	r2, [pc, #28]	; (80097bc <TL_BLE_Init+0x64>)
 800979e:	6013      	str	r3, [r2, #0]

  return 0;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	200301dc 	.word	0x200301dc
 80097b0:	20030000 	.word	0x20030000
 80097b4:	20030d70 	.word	0x20030d70
 80097b8:	2000071c 	.word	0x2000071c
 80097bc:	20000720 	.word	0x20000720

080097c0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80097cc:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <TL_BLE_SendCmd+0x34>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2201      	movs	r2, #1
 80097d4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80097d6:	4b07      	ldr	r3, [pc, #28]	; (80097f4 <TL_BLE_SendCmd+0x34>)
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4619      	mov	r1, r3
 80097de:	2001      	movs	r0, #1
 80097e0:	f000 f9da 	bl	8009b98 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80097e4:	f7fa fc2c 	bl	8004040 <HW_IPCC_BLE_SendCmd>

  return 0;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20030000 	.word	0x20030000

080097f8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80097fe:	e01c      	b.n	800983a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009800:	1d3b      	adds	r3, r7, #4
 8009802:	4619      	mov	r1, r3
 8009804:	4812      	ldr	r0, [pc, #72]	; (8009850 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009806:	f001 fb4c 	bl	800aea2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	7a5b      	ldrb	r3, [r3, #9]
 800980e:	2b0f      	cmp	r3, #15
 8009810:	d003      	beq.n	800981a <HW_IPCC_BLE_RxEvtNot+0x22>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	7a5b      	ldrb	r3, [r3, #9]
 8009816:	2b0e      	cmp	r3, #14
 8009818:	d105      	bne.n	8009826 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4619      	mov	r1, r3
 800981e:	2002      	movs	r0, #2
 8009820:	f000 f9ba 	bl	8009b98 <OutputDbgTrace>
 8009824:	e004      	b.n	8009830 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4619      	mov	r1, r3
 800982a:	2003      	movs	r0, #3
 800982c:	f000 f9b4 	bl	8009b98 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009830:	4b08      	ldr	r3, [pc, #32]	; (8009854 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	4610      	mov	r0, r2
 8009838:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800983a:	4805      	ldr	r0, [pc, #20]	; (8009850 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800983c:	f001 faa2 	bl	800ad84 <LST_is_empty>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0dc      	beq.n	8009800 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009846:	bf00      	nop
}
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	200301dc 	.word	0x200301dc
 8009854:	2000071c 	.word	0x2000071c

08009858 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800985c:	4b02      	ldr	r3, [pc, #8]	; (8009868 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4798      	blx	r3

  return;
 8009862:	bf00      	nop
}
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20000720 	.word	0x20000720

0800986c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009878:	480d      	ldr	r0, [pc, #52]	; (80098b0 <TL_SYS_Init+0x44>)
 800987a:	f001 fa73 	bl	800ad64 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800987e:	4b0d      	ldr	r3, [pc, #52]	; (80098b4 <TL_SYS_Init+0x48>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4a08      	ldr	r2, [pc, #32]	; (80098b0 <TL_SYS_Init+0x44>)
 8009890:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009892:	f7fa fbf7 	bl	8004084 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a07      	ldr	r2, [pc, #28]	; (80098b8 <TL_SYS_Init+0x4c>)
 800989c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	4a06      	ldr	r2, [pc, #24]	; (80098bc <TL_SYS_Init+0x50>)
 80098a4:	6013      	str	r3, [r2, #0]

  return 0;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	200301e4 	.word	0x200301e4
 80098b4:	20030000 	.word	0x20030000
 80098b8:	20000724 	.word	0x20000724
 80098bc:	20000728 	.word	0x20000728

080098c0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80098cc:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <TL_SYS_SendCmd+0x34>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2210      	movs	r2, #16
 80098d4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80098d6:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <TL_SYS_SendCmd+0x34>)
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4619      	mov	r1, r3
 80098de:	2004      	movs	r0, #4
 80098e0:	f000 f95a 	bl	8009b98 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80098e4:	f7fa fbd8 	bl	8004098 <HW_IPCC_SYS_SendCmd>

  return 0;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	20030000 	.word	0x20030000

080098f8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80098fc:	4b07      	ldr	r3, [pc, #28]	; (800991c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4619      	mov	r1, r3
 8009904:	2005      	movs	r0, #5
 8009906:	f000 f947 	bl	8009b98 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800990a:	4b05      	ldr	r3, [pc, #20]	; (8009920 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a03      	ldr	r2, [pc, #12]	; (800991c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009910:	68d2      	ldr	r2, [r2, #12]
 8009912:	6812      	ldr	r2, [r2, #0]
 8009914:	4610      	mov	r0, r2
 8009916:	4798      	blx	r3

  return;
 8009918:	bf00      	nop
}
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20030000 	.word	0x20030000
 8009920:	20000724 	.word	0x20000724

08009924 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800992a:	e00e      	b.n	800994a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800992c:	1d3b      	adds	r3, r7, #4
 800992e:	4619      	mov	r1, r3
 8009930:	480b      	ldr	r0, [pc, #44]	; (8009960 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009932:	f001 fab6 	bl	800aea2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4619      	mov	r1, r3
 800993a:	2006      	movs	r0, #6
 800993c:	f000 f92c 	bl	8009b98 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009940:	4b08      	ldr	r3, [pc, #32]	; (8009964 <HW_IPCC_SYS_EvtNot+0x40>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	4610      	mov	r0, r2
 8009948:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800994a:	4805      	ldr	r0, [pc, #20]	; (8009960 <HW_IPCC_SYS_EvtNot+0x3c>)
 800994c:	f001 fa1a 	bl	800ad84 <LST_is_empty>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0ea      	beq.n	800992c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009956:	bf00      	nop
}
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	200301e4 	.word	0x200301e4
 8009964:	20000728 	.word	0x20000728

08009968 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 8009970:	4b0a      	ldr	r3, [pc, #40]	; (800999c <TL_THREAD_Init+0x34>)
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800998e:	f7fa fba9 	bl	80040e4 <HW_IPCC_THREAD_Init>

  return;
 8009992:	bf00      	nop
}
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20030000 	.word	0x20030000

080099a0 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 80099a4:	4b04      	ldr	r3, [pc, #16]	; (80099b8 <TL_OT_SendCmd+0x18>)
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	2208      	movs	r2, #8
 80099ac:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 80099ae:	f7fa fba7 	bl	8004100 <HW_IPCC_OT_SendCmd>

  return;
 80099b2:	bf00      	nop
}
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20030000 	.word	0x20030000

080099bc <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <TL_CLI_SendCmd+0x18>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	220a      	movs	r2, #10
 80099c8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 80099ca:	f7fa fba7 	bl	800411c <HW_IPCC_CLI_SendCmd>

  return;
 80099ce:	bf00      	nop
}
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20030000 	.word	0x20030000

080099d8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80099dc:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <TL_THREAD_SendAck+0x18>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	220d      	movs	r2, #13
 80099e4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 80099e6:	f7fa fba3 	bl	8004130 <HW_IPCC_THREAD_SendAck>

  return;
 80099ea:	bf00      	nop
}
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20030000 	.word	0x20030000

080099f4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80099f8:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <TL_THREAD_CliSendAck+0x18>)
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	220d      	movs	r2, #13
 8009a00:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 8009a02:	f7fa fba3 	bl	800414c <HW_IPCC_THREAD_CliSendAck>

  return;
 8009a06:	bf00      	nop
}
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20030000 	.word	0x20030000

08009a10 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 8009a14:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <HW_IPCC_OT_CmdEvtNot+0x14>)
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7f9 fede 	bl	80037dc <TL_OT_CmdEvtReceived>

  return;
 8009a20:	bf00      	nop
}
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20030000 	.word	0x20030000

08009a28 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 8009a2c:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <HW_IPCC_THREAD_EvtNot+0x14>)
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f9 fee2 	bl	80037fc <TL_THREAD_NotReceived>

  return;
 8009a38:	bf00      	nop
}
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20030000 	.word	0x20030000

08009a40 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 8009a44:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f9 ffa6 	bl	800399c <TL_THREAD_CliNotReceived>

  return;
 8009a50:	bf00      	nop
}
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20030000 	.word	0x20030000

08009a58 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009a60:	4817      	ldr	r0, [pc, #92]	; (8009ac0 <TL_MM_Init+0x68>)
 8009a62:	f001 f97f 	bl	800ad64 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009a66:	4817      	ldr	r0, [pc, #92]	; (8009ac4 <TL_MM_Init+0x6c>)
 8009a68:	f001 f97c 	bl	800ad64 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009a6c:	4b16      	ldr	r3, [pc, #88]	; (8009ac8 <TL_MM_Init+0x70>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a16      	ldr	r2, [pc, #88]	; (8009acc <TL_MM_Init+0x74>)
 8009a72:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009a74:	4b15      	ldr	r3, [pc, #84]	; (8009acc <TL_MM_Init+0x74>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6892      	ldr	r2, [r2, #8]
 8009a7c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <TL_MM_Init+0x74>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	68d2      	ldr	r2, [r2, #12]
 8009a86:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009a88:	4b10      	ldr	r3, [pc, #64]	; (8009acc <TL_MM_Init+0x74>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a0c      	ldr	r2, [pc, #48]	; (8009ac0 <TL_MM_Init+0x68>)
 8009a8e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <TL_MM_Init+0x74>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009a9a:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <TL_MM_Init+0x74>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6852      	ldr	r2, [r2, #4]
 8009aa2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009aa4:	4b09      	ldr	r3, [pc, #36]	; (8009acc <TL_MM_Init+0x74>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6912      	ldr	r2, [r2, #16]
 8009aac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009aae:	4b07      	ldr	r3, [pc, #28]	; (8009acc <TL_MM_Init+0x74>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6952      	ldr	r2, [r2, #20]
 8009ab6:	619a      	str	r2, [r3, #24]

  return;
 8009ab8:	bf00      	nop
}
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200301cc 	.word	0x200301cc
 8009ac4:	20000714 	.word	0x20000714
 8009ac8:	20030000 	.word	0x20030000
 8009acc:	2000072c 	.word	0x2000072c

08009ad0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	4807      	ldr	r0, [pc, #28]	; (8009af8 <TL_MM_EvtDone+0x28>)
 8009adc:	f001 f99a 	bl	800ae14 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	f000 f858 	bl	8009b98 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009ae8:	4804      	ldr	r0, [pc, #16]	; (8009afc <TL_MM_EvtDone+0x2c>)
 8009aea:	f7fa fb61 	bl	80041b0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009aee:	bf00      	nop
}
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000714 	.word	0x20000714
 8009afc:	08009b01 	.word	0x08009b01

08009b00 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009b06:	e00c      	b.n	8009b22 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009b08:	1d3b      	adds	r3, r7, #4
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	480a      	ldr	r0, [pc, #40]	; (8009b38 <SendFreeBuf+0x38>)
 8009b0e:	f001 f9c8 	bl	800aea2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009b12:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <SendFreeBuf+0x3c>)
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 f979 	bl	800ae14 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009b22:	4805      	ldr	r0, [pc, #20]	; (8009b38 <SendFreeBuf+0x38>)
 8009b24:	f001 f92e 	bl	800ad84 <LST_is_empty>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0ec      	beq.n	8009b08 <SendFreeBuf+0x8>
  }

  return;
 8009b2e:	bf00      	nop
}
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000714 	.word	0x20000714
 8009b3c:	20030000 	.word	0x20030000

08009b40 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009b44:	4805      	ldr	r0, [pc, #20]	; (8009b5c <TL_TRACES_Init+0x1c>)
 8009b46:	f001 f90d 	bl	800ad64 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <TL_TRACES_Init+0x20>)
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	4a03      	ldr	r2, [pc, #12]	; (8009b5c <TL_TRACES_Init+0x1c>)
 8009b50:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009b52:	f7fa fb63 	bl	800421c <HW_IPCC_TRACES_Init>

  return;
 8009b56:	bf00      	nop
}
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	200301d4 	.word	0x200301d4
 8009b60:	20030000 	.word	0x20030000

08009b64 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009b6a:	e008      	b.n	8009b7e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4808      	ldr	r0, [pc, #32]	; (8009b94 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009b72:	f001 f996 	bl	800aea2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f6 fee4 	bl	8000946 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009b7e:	4805      	ldr	r0, [pc, #20]	; (8009b94 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009b80:	f001 f900 	bl	800ad84 <LST_is_empty>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0f0      	beq.n	8009b6c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009b8a:	bf00      	nop
}
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	200301d4 	.word	0x200301d4

08009b98 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6039      	str	r1, [r7, #0]
 8009ba2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009ba4:	79fb      	ldrb	r3, [r7, #7]
 8009ba6:	2b06      	cmp	r3, #6
 8009ba8:	d845      	bhi.n	8009c36 <OutputDbgTrace+0x9e>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <OutputDbgTrace+0x18>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bcd 	.word	0x08009bcd
 8009bb4:	08009bf1 	.word	0x08009bf1
 8009bb8:	08009bf7 	.word	0x08009bf7
 8009bbc:	08009c0b 	.word	0x08009c0b
 8009bc0:	08009c17 	.word	0x08009c17
 8009bc4:	08009c1d 	.word	0x08009c1d
 8009bc8:	08009c2b 	.word	0x08009c2b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	7a5b      	ldrb	r3, [r3, #9]
 8009bd4:	2bff      	cmp	r3, #255	; 0xff
 8009bd6:	d005      	beq.n	8009be4 <OutputDbgTrace+0x4c>
 8009bd8:	2bff      	cmp	r3, #255	; 0xff
 8009bda:	dc05      	bgt.n	8009be8 <OutputDbgTrace+0x50>
 8009bdc:	2b0e      	cmp	r3, #14
 8009bde:	d005      	beq.n	8009bec <OutputDbgTrace+0x54>
 8009be0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009be2:	e001      	b.n	8009be8 <OutputDbgTrace+0x50>
          break;
 8009be4:	bf00      	nop
 8009be6:	e027      	b.n	8009c38 <OutputDbgTrace+0xa0>
          break;
 8009be8:	bf00      	nop
 8009bea:	e025      	b.n	8009c38 <OutputDbgTrace+0xa0>
          break;
 8009bec:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009bee:	e023      	b.n	8009c38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009bf4:	e020      	b.n	8009c38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	7a5b      	ldrb	r3, [r3, #9]
 8009bfe:	2b0e      	cmp	r3, #14
 8009c00:	d001      	beq.n	8009c06 <OutputDbgTrace+0x6e>
 8009c02:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009c04:	e000      	b.n	8009c08 <OutputDbgTrace+0x70>
          break;
 8009c06:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009c08:	e016      	b.n	8009c38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	7a5b      	ldrb	r3, [r3, #9]
 8009c12:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009c14:	e010      	b.n	8009c38 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009c1a:	e00d      	b.n	8009c38 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	7a5b      	ldrb	r3, [r3, #9]
 8009c24:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009c26:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009c28:	e006      	b.n	8009c38 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	7a5b      	ldrb	r3, [r3, #9]
 8009c32:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009c34:	e000      	b.n	8009c38 <OutputDbgTrace+0xa0>

    default:
      break;
 8009c36:	bf00      	nop
  }

  return;
 8009c38:	bf00      	nop
}
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <otCoapMessageInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_CONFIG_COAP_API_ENABLE

void otCoapMessageInit(otMessage *aMessage, otCoapType aType, otCoapCode aCode)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
 8009c50:	4613      	mov	r3, r2
 8009c52:	70bb      	strb	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8009c54:	f7f9 fde2 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009c58:	f7f9 fd72 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009c5c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_INIT;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f062 025a 	orn	r2, r2, #90	; 0x5a
 8009c66:	701a      	strb	r2, [r3, #0]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	705a      	strb	r2, [r3, #1]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	709a      	strb	r2, [r3, #2]
 8009c70:	2200      	movs	r2, #0
 8009c72:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f042 0203 	orr.w	r2, r2, #3
 8009c7c:	711a      	strb	r2, [r3, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	715a      	strb	r2, [r3, #5]
 8009c82:	2200      	movs	r2, #0
 8009c84:	719a      	strb	r2, [r3, #6]
 8009c86:	2200      	movs	r2, #0
 8009c88:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aType;
 8009c90:	78fa      	ldrb	r2, [r7, #3]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aCode;
 8009c96:	78ba      	ldrb	r2, [r7, #2]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	611a      	str	r2, [r3, #16]

  Ot_Cmd_Transfer();
 8009c9c:	f7f9 fd98 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ca0:	f7f9 fd5a 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009ca4:	60f8      	str	r0, [r7, #12]
}
 8009ca6:	bf00      	nop
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <otCoapMessageAppendUriPathOptions>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageAppendUriPathOptions(otMessage *aMessage, const char *aUriPath)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009cb8:	f7f9 fdb0 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009cbc:	f7f9 fd40 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009cc0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_APPEND_URI_PATH_OPTIONS;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f062 0252 	orn	r2, r2, #82	; 0x52
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	705a      	strb	r2, [r3, #1]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	709a      	strb	r2, [r3, #2]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f042 0202 	orr.w	r2, r2, #2
 8009ce0:	711a      	strb	r2, [r3, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	715a      	strb	r2, [r3, #5]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	719a      	strb	r2, [r3, #6]
 8009cea:	2200      	movs	r2, #0
 8009cec:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aUriPath;
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 8009cfa:	f7f9 fd69 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009cfe:	f7f9 fd2b 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d02:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	b2db      	uxtb	r3, r3
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <otCoapMessageSetPayloadMarker>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError) p_ot_req->Data[0];
}

otError otCoapMessageSetPayloadMarker(otMessage *aMessage)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009d1a:	f7f9 fd7f 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d1e:	f7f9 fd0f 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009d22:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_SET_PAYLOAD_MARKER;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f062 024e 	orn	r2, r2, #78	; 0x4e
 8009d2c:	701a      	strb	r2, [r3, #0]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	705a      	strb	r2, [r3, #1]
 8009d32:	2200      	movs	r2, #0
 8009d34:	709a      	strb	r2, [r3, #2]
 8009d36:	2200      	movs	r2, #0
 8009d38:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	711a      	strb	r2, [r3, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	715a      	strb	r2, [r3, #5]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	719a      	strb	r2, [r3, #6]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009d56:	f7f9 fd3b 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009d5a:	f7f9 fcfd 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009d5e:	60f8      	str	r0, [r7, #12]
  return (otError) p_ot_req->Data[0];
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	b2db      	uxtb	r3, r3
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <otCoapMessageGetType>:

otCoapType otCoapMessageGetType(const otMessage *aMessage)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009d76:	f7f9 fd51 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009d7a:	f7f9 fce1 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009d7e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_TYPE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f062 024d 	orn	r2, r2, #77	; 0x4d
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	705a      	strb	r2, [r3, #1]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	709a      	strb	r2, [r3, #2]
 8009d92:	2200      	movs	r2, #0
 8009d94:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f042 0201 	orr.w	r2, r2, #1
 8009d9e:	711a      	strb	r2, [r3, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	715a      	strb	r2, [r3, #5]
 8009da4:	2200      	movs	r2, #0
 8009da6:	719a      	strb	r2, [r3, #6]
 8009da8:	2200      	movs	r2, #0
 8009daa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009db2:	f7f9 fd0d 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009db6:	f7f9 fccf 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009dba:	60f8      	str	r0, [r7, #12]
  return (otCoapType)p_ot_req->Data[0];
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	b2db      	uxtb	r3, r3
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <otCoapMessageGetCode>:

otCoapCode otCoapMessageGetCode(const otMessage *aMessage)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 8009dd2:	f7f9 fd23 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009dd6:	f7f9 fcb3 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009dda:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_MESSAGE_GET_CODE;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f062 024c 	orn	r2, r2, #76	; 0x4c
 8009de4:	701a      	strb	r2, [r3, #0]
 8009de6:	2200      	movs	r2, #0
 8009de8:	705a      	strb	r2, [r3, #1]
 8009dea:	2200      	movs	r2, #0
 8009dec:	709a      	strb	r2, [r3, #2]
 8009dee:	2200      	movs	r2, #0
 8009df0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f042 0201 	orr.w	r2, r2, #1
 8009dfa:	711a      	strb	r2, [r3, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	715a      	strb	r2, [r3, #5]
 8009e00:	2200      	movs	r2, #0
 8009e02:	719a      	strb	r2, [r3, #6]
 8009e04:	2200      	movs	r2, #0
 8009e06:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009e0e:	f7f9 fcdf 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e12:	f7f9 fca1 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e16:	60f8      	str	r0, [r7, #12]
  return (otCoapCode)p_ot_req->Data[0];
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	b2db      	uxtb	r3, r3
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <otCoapNewMessage>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otMessageSettings *aSettings)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009e30:	f7f9 fcf4 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e34:	f7f9 fc84 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009e38:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f062 0244 	orn	r2, r2, #68	; 0x44
 8009e42:	701a      	strb	r2, [r3, #0]
 8009e44:	2200      	movs	r2, #0
 8009e46:	705a      	strb	r2, [r3, #1]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	709a      	strb	r2, [r3, #2]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f042 0201 	orr.w	r2, r2, #1
 8009e58:	711a      	strb	r2, [r3, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	715a      	strb	r2, [r3, #5]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	719a      	strb	r2, [r3, #6]
 8009e62:	2200      	movs	r2, #0
 8009e64:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aSettings;
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009e6c:	f7f9 fcb0 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009e70:	f7f9 fc72 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009e74:	60f8      	str	r0, [r7, #12]
  return (otMessage *)p_ot_req->Data[0];
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689b      	ldr	r3, [r3, #8]

}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
    otCoapResponseHandler aHandler, void *aContext)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b086      	sub	sp, #24
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	607a      	str	r2, [r7, #4]
 8009e8e:	603b      	str	r3, [r7, #0]
  Pre_OtCmdProcessing();
 8009e90:	f7f9 fcc4 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009e94:	f7f9 fc54 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009e98:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f062 0243 	orn	r2, r2, #67	; 0x43
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	705a      	strb	r2, [r3, #1]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	709a      	strb	r2, [r3, #2]
 8009eac:	2200      	movs	r2, #0
 8009eae:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=3;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f042 0203 	orr.w	r2, r2, #3
 8009eb8:	711a      	strb	r2, [r3, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	715a      	strb	r2, [r3, #5]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	719a      	strb	r2, [r3, #6]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aMessage;
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aHandler;
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aContext;
 8009ed8:	6a3a      	ldr	r2, [r7, #32]
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 8009ede:	f7f9 fc77 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ee2:	f7f9 fc39 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009ee6:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	b2db      	uxtb	r3, r3
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 8009f02:	f7f9 fc8b 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f06:	f7f9 fc1b 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009f0a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f062 0242 	orn	r2, r2, #66	; 0x42
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	2200      	movs	r2, #0
 8009f18:	705a      	strb	r2, [r3, #1]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	709a      	strb	r2, [r3, #2]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	711a      	strb	r2, [r3, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	715a      	strb	r2, [r3, #5]
 8009f30:	2200      	movs	r2, #0
 8009f32:	719a      	strb	r2, [r3, #6]
 8009f34:	2200      	movs	r2, #0
 8009f36:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint16_t) aPort;
 8009f38:	887a      	ldrh	r2, [r7, #2]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009f3e:	f7f9 fc47 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009f42:	f7f9 fc09 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009f46:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	b2db      	uxtb	r3, r3
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <otCoapAddResource>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 8009f60:	f7f9 fc5c 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009f64:	f7f9 fbec 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009f68:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESOURCE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f062 0240 	orn	r2, r2, #64	; 0x40
 8009f72:	701a      	strb	r2, [r3, #0]
 8009f74:	2200      	movs	r2, #0
 8009f76:	705a      	strb	r2, [r3, #1]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	709a      	strb	r2, [r3, #2]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f042 0201 	orr.w	r2, r2, #1
 8009f88:	711a      	strb	r2, [r3, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	715a      	strb	r2, [r3, #5]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	719a      	strb	r2, [r3, #6]
 8009f92:	2200      	movs	r2, #0
 8009f94:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aResource;
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 8009f9c:	f7f9 fc18 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009fa0:	f7f9 fbda 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009fa4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	b2db      	uxtb	r3, r3
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <otInstanceInitSingle>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
  Pre_OtCmdProcessing();
 8009fba:	f7f9 fc2f 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 8009fbe:	f7f9 fbbf 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 8009fc2:	6078      	str	r0, [r7, #4]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f062 0264 	orn	r2, r2, #100	; 0x64
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	705a      	strb	r2, [r3, #1]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	709a      	strb	r2, [r3, #2]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	711a      	strb	r2, [r3, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	715a      	strb	r2, [r3, #5]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	719a      	strb	r2, [r3, #6]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 8009fec:	f7f9 fbf0 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 8009ff0:	f7f9 fbb2 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 8009ff4:	6078      	str	r0, [r7, #4]
  return (otInstance *)p_ot_req->Data[0];
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <otInstanceFinalize>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800a00a:	f7f9 fc07 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a00e:	f7f9 fb97 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a012:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f062 0262 	orn	r2, r2, #98	; 0x62
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	2200      	movs	r2, #0
 800a020:	705a      	strb	r2, [r3, #1]
 800a022:	2200      	movs	r2, #0
 800a024:	709a      	strb	r2, [r3, #2]
 800a026:	2200      	movs	r2, #0
 800a028:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	711a      	strb	r2, [r3, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	715a      	strb	r2, [r3, #5]
 800a034:	2200      	movs	r2, #0
 800a036:	719a      	strb	r2, [r3, #6]
 800a038:	2200      	movs	r2, #0
 800a03a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800a03c:	f7f9 fbc8 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a040:	f7f9 fb8a 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a044:	60f8      	str	r0, [r7, #12]
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <otSetStateChangedCallback>:

#if OPENTHREAD_MTD || OPENTHREAD_FTD
otError otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
    void *aContext)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  Pre_OtCmdProcessing();
 800a05c:	f7f9 fbde 	bl	800381c <Pre_OtCmdProcessing>
  /* Store the callback function */
  otStateChangedCb = aCallback;
 800a060:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <otSetStateChangedCallback+0x68>)
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	6013      	str	r3, [r2, #0]
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a066:	f7f9 fb6b 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a06a:	6178      	str	r0, [r7, #20]

  p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2200      	movs	r2, #0
 800a070:	f062 0261 	orn	r2, r2, #97	; 0x61
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	2200      	movs	r2, #0
 800a078:	705a      	strb	r2, [r3, #1]
 800a07a:	2200      	movs	r2, #0
 800a07c:	709a      	strb	r2, [r3, #2]
 800a07e:	2200      	movs	r2, #0
 800a080:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2200      	movs	r2, #0
 800a086:	f042 0201 	orr.w	r2, r2, #1
 800a08a:	711a      	strb	r2, [r3, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	715a      	strb	r2, [r3, #5]
 800a090:	2200      	movs	r2, #0
 800a092:	719a      	strb	r2, [r3, #6]
 800a094:	2200      	movs	r2, #0
 800a096:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aContext;
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a09e:	f7f9 fb97 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a0a2:	f7f9 fb59 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a0a6:	6178      	str	r0, [r7, #20]
  return (otError)p_ot_req->Data[0];
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	b2db      	uxtb	r3, r3
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000730 	.word	0x20000730

0800a0bc <otIp6SetEnabled>:
extern otIp6ReceiveCallback otIp6ReceiveCb;
extern otIp6AddressCallback otIp6AddressCb;


otError otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a0c8:	f7f9 fba8 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a0cc:	f7f9 fb38 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a0d0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800a0da:	701a      	strb	r2, [r3, #0]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	705a      	strb	r2, [r3, #1]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	709a      	strb	r2, [r3, #2]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f042 0201 	orr.w	r2, r2, #1
 800a0f0:	711a      	strb	r2, [r3, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	715a      	strb	r2, [r3, #5]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	719a      	strb	r2, [r3, #6]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a104:	f7f9 fb64 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a108:	f7f9 fb26 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a10c:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	b2db      	uxtb	r3, r3
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

otError otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a126:	f7f9 fb79 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a12a:	f7f9 fb09 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a12e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	2200      	movs	r2, #0
 800a13c:	705a      	strb	r2, [r3, #1]
 800a13e:	2200      	movs	r2, #0
 800a140:	709a      	strb	r2, [r3, #2]
 800a142:	2200      	movs	r2, #0
 800a144:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f042 0202 	orr.w	r2, r2, #2
 800a14e:	711a      	strb	r2, [r3, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	715a      	strb	r2, [r3, #5]
 800a154:	2200      	movs	r2, #0
 800a156:	719a      	strb	r2, [r3, #6]
 800a158:	2200      	movs	r2, #0
 800a15a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800a168:	f7f9 fb32 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a16c:	f7f9 faf4 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a170:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	b2db      	uxtb	r3, r3
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

otError otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800a18c:	f7f9 fb46 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a190:	f7f9 fad6 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a194:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f042 0208 	orr.w	r2, r2, #8
 800a19e:	701a      	strb	r2, [r3, #0]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	705a      	strb	r2, [r3, #1]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	709a      	strb	r2, [r3, #2]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f042 0201 	orr.w	r2, r2, #1
 800a1b4:	711a      	strb	r2, [r3, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	715a      	strb	r2, [r3, #5]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	719a      	strb	r2, [r3, #6]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800a1c2:	78fa      	ldrb	r2, [r7, #3]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a1c8:	f7f9 fb02 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a1cc:	f7f9 fac4 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a1d0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	b2db      	uxtb	r3, r3
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

otError otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800a1ec:	f7f9 fb16 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a1f0:	f7f9 faa6 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a1f4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f042 020f 	orr.w	r2, r2, #15
 800a1fe:	701a      	strb	r2, [r3, #0]
 800a200:	2200      	movs	r2, #0
 800a202:	705a      	strb	r2, [r3, #1]
 800a204:	2200      	movs	r2, #0
 800a206:	709a      	strb	r2, [r3, #2]
 800a208:	2200      	movs	r2, #0
 800a20a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f042 0201 	orr.w	r2, r2, #1
 800a214:	711a      	strb	r2, [r3, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	715a      	strb	r2, [r3, #5]
 800a21a:	2200      	movs	r2, #0
 800a21c:	719a      	strb	r2, [r3, #6]
 800a21e:	2200      	movs	r2, #0
 800a220:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800a222:	887a      	ldrh	r2, [r7, #2]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a228:	f7f9 fad2 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a22c:	f7f9 fa94 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a230:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	b2db      	uxtb	r3, r3
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <otLinkSetPollPeriod>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

otError otLinkSetPollPeriod(otInstance *aInstance, uint32_t aPollPeriod)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800a24a:	f7f9 fae7 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a24e:	f7f9 fa77 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a252:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_POLL_PERIOD;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f042 0211 	orr.w	r2, r2, #17
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	2200      	movs	r2, #0
 800a260:	705a      	strb	r2, [r3, #1]
 800a262:	2200      	movs	r2, #0
 800a264:	709a      	strb	r2, [r3, #2]
 800a266:	2200      	movs	r2, #0
 800a268:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f042 0201 	orr.w	r2, r2, #1
 800a272:	711a      	strb	r2, [r3, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	715a      	strb	r2, [r3, #5]
 800a278:	2200      	movs	r2, #0
 800a27a:	719a      	strb	r2, [r3, #6]
 800a27c:	2200      	movs	r2, #0
 800a27e:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPollPeriod;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800a286:	f7f9 faa3 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a28a:	f7f9 fa65 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a28e:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	b2db      	uxtb	r3, r3
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a2a6:	f7f9 fab9 	bl	800381c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a2aa:	f7f9 fa49 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a2ae:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f062 022b 	orn	r2, r2, #43	; 0x2b
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	705a      	strb	r2, [r3, #1]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	709a      	strb	r2, [r3, #2]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f042 0201 	orr.w	r2, r2, #1
 800a2ce:	711a      	strb	r2, [r3, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	715a      	strb	r2, [r3, #5]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	719a      	strb	r2, [r3, #6]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a2e2:	f7f9 fa75 	bl	80037d0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a2e6:	f7f9 fa37 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a2ea:	60f8      	str	r0, [r7, #12]
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(const otMessage *aMessage)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800a2fc:	f7f9 fa8e 	bl	800381c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a300:	f7f9 fa1e 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a304:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	f062 0228 	orn	r2, r2, #40	; 0x28
 800a30e:	701a      	strb	r2, [r3, #0]
 800a310:	2200      	movs	r2, #0
 800a312:	705a      	strb	r2, [r3, #1]
 800a314:	2200      	movs	r2, #0
 800a316:	709a      	strb	r2, [r3, #2]
 800a318:	2200      	movs	r2, #0
 800a31a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f042 0201 	orr.w	r2, r2, #1
 800a324:	711a      	strb	r2, [r3, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	715a      	strb	r2, [r3, #5]
 800a32a:	2200      	movs	r2, #0
 800a32c:	719a      	strb	r2, [r3, #6]
 800a32e:	2200      	movs	r2, #0
 800a330:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800a338:	f7f9 fa4a 	bl	80037d0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a33c:	f7f9 fa0c 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a340:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	b29b      	uxth	r3, r3
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800a35e:	f7f9 fa5d 	bl	800381c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a362:	f7f9 f9ed 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a366:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f062 0223 	orn	r2, r2, #35	; 0x23
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	2200      	movs	r2, #0
 800a374:	705a      	strb	r2, [r3, #1]
 800a376:	2200      	movs	r2, #0
 800a378:	709a      	strb	r2, [r3, #2]
 800a37a:	2200      	movs	r2, #0
 800a37c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2200      	movs	r2, #0
 800a382:	f042 0203 	orr.w	r2, r2, #3
 800a386:	711a      	strb	r2, [r3, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	715a      	strb	r2, [r3, #5]
 800a38c:	2200      	movs	r2, #0
 800a38e:	719a      	strb	r2, [r3, #6]
 800a390:	2200      	movs	r2, #0
 800a392:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800a3a0:	88fa      	ldrh	r2, [r7, #6]
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800a3a6:	f7f9 fa13 	bl	80037d0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a3aa:	f7f9 f9d5 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a3ae:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	b2db      	uxtb	r3, r3
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <otMessageRead>:

uint16_t otMessageRead(const otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b086      	sub	sp, #24
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	817b      	strh	r3, [r7, #10]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800a3d2:	f7f9 fa23 	bl	800381c <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800a3d6:	f7f9 f9b3 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800a3da:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f062 0222 	orn	r2, r2, #34	; 0x22
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	705a      	strb	r2, [r3, #1]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	709a      	strb	r2, [r3, #2]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f042 0204 	orr.w	r2, r2, #4
 800a3fa:	711a      	strb	r2, [r3, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	715a      	strb	r2, [r3, #5]
 800a400:	2200      	movs	r2, #0
 800a402:	719a      	strb	r2, [r3, #6]
 800a404:	2200      	movs	r2, #0
 800a406:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800a40e:	897a      	ldrh	r2, [r7, #10]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800a41a:	893a      	ldrh	r2, [r7, #8]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800a420:	f7f9 f9d6 	bl	80037d0 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800a424:	f7f9 f998 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800a428:	6178      	str	r0, [r7, #20]
    return (uint16_t)p_ot_req->Data[0];
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	b29b      	uxth	r3, r3
}
 800a430:	4618      	mov	r0, r3
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <OpenThread_CallBack_Processing>:
 * @param  None
 * @retval None
 */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800a438:	b5b0      	push	{r4, r5, r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	71fb      	strb	r3, [r7, #7]

  /* Get pointer on received event buffer from M0 */
  Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800a442:	f7f9 f995 	bl	8003770 <THREAD_Get_NotificationPayloadBuffer>
 800a446:	6038      	str	r0, [r7, #0]

  switch(p_notification->ID)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	2b25      	cmp	r3, #37	; 0x25
 800a450:	f200 82a7 	bhi.w	800a9a2 <OpenThread_CallBack_Processing+0x56a>
 800a454:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <OpenThread_CallBack_Processing+0x24>)
 800a456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45a:	bf00      	nop
 800a45c:	0800a4f5 	.word	0x0800a4f5
 800a460:	0800a52f 	.word	0x0800a52f
 800a464:	0800a587 	.word	0x0800a587
 800a468:	0800a633 	.word	0x0800a633
 800a46c:	0800a63f 	.word	0x0800a63f
 800a470:	0800a65d 	.word	0x0800a65d
 800a474:	0800a9a3 	.word	0x0800a9a3
 800a478:	0800a68d 	.word	0x0800a68d
 800a47c:	0800a6a7 	.word	0x0800a6a7
 800a480:	0800a6c5 	.word	0x0800a6c5
 800a484:	0800a6e3 	.word	0x0800a6e3
 800a488:	0800a70d 	.word	0x0800a70d
 800a48c:	0800a72f 	.word	0x0800a72f
 800a490:	0800a74d 	.word	0x0800a74d
 800a494:	0800a7bd 	.word	0x0800a7bd
 800a498:	0800a7dd 	.word	0x0800a7dd
 800a49c:	0800a7fb 	.word	0x0800a7fb
 800a4a0:	0800a81d 	.word	0x0800a81d
 800a4a4:	0800a851 	.word	0x0800a851
 800a4a8:	0800a879 	.word	0x0800a879
 800a4ac:	0800a897 	.word	0x0800a897
 800a4b0:	0800a8bb 	.word	0x0800a8bb
 800a4b4:	0800a8e5 	.word	0x0800a8e5
 800a4b8:	0800a9a3 	.word	0x0800a9a3
 800a4bc:	0800a905 	.word	0x0800a905
 800a4c0:	0800a9a3 	.word	0x0800a9a3
 800a4c4:	0800a9a3 	.word	0x0800a9a3
 800a4c8:	0800a9a3 	.word	0x0800a9a3
 800a4cc:	0800a9a3 	.word	0x0800a9a3
 800a4d0:	0800a9a3 	.word	0x0800a9a3
 800a4d4:	0800a565 	.word	0x0800a565
 800a4d8:	0800a5c5 	.word	0x0800a5c5
 800a4dc:	0800a5eb 	.word	0x0800a5eb
 800a4e0:	0800a611 	.word	0x0800a611
 800a4e4:	0800a927 	.word	0x0800a927
 800a4e8:	0800a963 	.word	0x0800a963
 800a4ec:	0800a979 	.word	0x0800a979
 800a4f0:	0800a511 	.word	0x0800a511
  {
  case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
    if (otStateChangedCb != NULL)
 800a4f4:	4b9f      	ldr	r3, [pc, #636]	; (800a774 <OpenThread_CallBack_Processing+0x33c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 8255 	beq.w	800a9a8 <OpenThread_CallBack_Processing+0x570>
    {
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800a4fe:	4b9d      	ldr	r3, [pc, #628]	; (800a774 <OpenThread_CallBack_Processing+0x33c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	6890      	ldr	r0, [r2, #8]
          (void*) p_notification->Data[1]);
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	68d2      	ldr	r2, [r2, #12]
      otStateChangedCb((uint32_t) p_notification->Data[0],
 800a50a:	4611      	mov	r1, r2
 800a50c:	4798      	blx	r3
    }
    break;
 800a50e:	e24b      	b.n	800a9a8 <OpenThread_CallBack_Processing+0x570>
  case MSG_M0TOM4_THREAD_PARENT_RESPONSE_HANDLER:
    if (otThreadParentResponseCb != NULL)
 800a510:	4b99      	ldr	r3, [pc, #612]	; (800a778 <OpenThread_CallBack_Processing+0x340>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 8249 	beq.w	800a9ac <OpenThread_CallBack_Processing+0x574>
    {
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800a51a:	4b97      	ldr	r3, [pc, #604]	; (800a778 <OpenThread_CallBack_Processing+0x340>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	6892      	ldr	r2, [r2, #8]
 800a522:	4610      	mov	r0, r2
          (void *) p_notification->Data[1]);
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	68d2      	ldr	r2, [r2, #12]
      otThreadParentResponseCb((otThreadParentResponseInfo *) p_notification->Data[0],
 800a528:	4611      	mov	r1, r2
 800a52a:	4798      	blx	r3
    }
    break;
 800a52c:	e23e      	b.n	800a9ac <OpenThread_CallBack_Processing+0x574>
  case MSG_M0TOM4_COAP_REQUEST_HANDLER:
    mySTCoapRequestContext = (STCoapRequestContextType*) p_notification->Data[0];
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	461a      	mov	r2, r3
 800a534:	4b91      	ldr	r3, [pc, #580]	; (800a77c <OpenThread_CallBack_Processing+0x344>)
 800a536:	601a      	str	r2, [r3, #0]

    coapRequestHandlerCb = mySTCoapRequestContext->mHandler;
 800a538:	4b90      	ldr	r3, [pc, #576]	; (800a77c <OpenThread_CallBack_Processing+0x344>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	4a90      	ldr	r2, [pc, #576]	; (800a780 <OpenThread_CallBack_Processing+0x348>)
 800a540:	6013      	str	r3, [r2, #0]

    if (coapRequestHandlerCb != NULL)
 800a542:	4b8f      	ldr	r3, [pc, #572]	; (800a780 <OpenThread_CallBack_Processing+0x348>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 8232 	beq.w	800a9b0 <OpenThread_CallBack_Processing+0x578>
    {
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800a54c:	4b8c      	ldr	r3, [pc, #560]	; (800a780 <OpenThread_CallBack_Processing+0x348>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a8a      	ldr	r2, [pc, #552]	; (800a77c <OpenThread_CallBack_Processing+0x344>)
 800a552:	6812      	ldr	r2, [r2, #0]
 800a554:	6810      	ldr	r0, [r2, #0]
          (otMessage *) p_notification->Data[1],
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	68d2      	ldr	r2, [r2, #12]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800a55a:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	6912      	ldr	r2, [r2, #16]
      coapRequestHandlerCb(mySTCoapRequestContext->mContext,
 800a560:	4798      	blx	r3
    }
    break;
 800a562:	e225      	b.n	800a9b0 <OpenThread_CallBack_Processing+0x578>
  case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
    if (defaultCoapRequestHandlerCb != NULL)
 800a564:	4b87      	ldr	r3, [pc, #540]	; (800a784 <OpenThread_CallBack_Processing+0x34c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 8223 	beq.w	800a9b4 <OpenThread_CallBack_Processing+0x57c>
    {
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a56e:	4b85      	ldr	r3, [pc, #532]	; (800a784 <OpenThread_CallBack_Processing+0x34c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	6892      	ldr	r2, [r2, #8]
 800a576:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	68d2      	ldr	r2, [r2, #12]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a57c:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	6912      	ldr	r2, [r2, #16]
      defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800a582:	4798      	blx	r3
    }
    break;
 800a584:	e216      	b.n	800a9b4 <OpenThread_CallBack_Processing+0x57c>
  case MSG_M0TOM4_COAP_RESPONSE_HANDLER:
    mySTCoapResponseContext = (STCoapResponseContextType*) p_notification->Data[0];
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	461a      	mov	r2, r3
 800a58c:	4b7e      	ldr	r3, [pc, #504]	; (800a788 <OpenThread_CallBack_Processing+0x350>)
 800a58e:	601a      	str	r2, [r3, #0]
    coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800a590:	4b7d      	ldr	r3, [pc, #500]	; (800a788 <OpenThread_CallBack_Processing+0x350>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	4a7d      	ldr	r2, [pc, #500]	; (800a78c <OpenThread_CallBack_Processing+0x354>)
 800a598:	6013      	str	r3, [r2, #0]
    if (coapResponseHandlerCb != NULL)
 800a59a:	4b7c      	ldr	r3, [pc, #496]	; (800a78c <OpenThread_CallBack_Processing+0x354>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 820a 	beq.w	800a9b8 <OpenThread_CallBack_Processing+0x580>
    {
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a5a4:	4b79      	ldr	r3, [pc, #484]	; (800a78c <OpenThread_CallBack_Processing+0x354>)
 800a5a6:	681c      	ldr	r4, [r3, #0]
 800a5a8:	4b77      	ldr	r3, [pc, #476]	; (800a788 <OpenThread_CallBack_Processing+0x350>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6818      	ldr	r0, [r3, #0]
          (otMessage *) p_notification->Data[1],
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	68db      	ldr	r3, [r3, #12]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a5b2:	4619      	mov	r1, r3
          (otMessageInfo *) p_notification->Data[2],
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a5b8:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	695b      	ldr	r3, [r3, #20]
      coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	47a0      	blx	r4
    }
    break;
 800a5c2:	e1f9      	b.n	800a9b8 <OpenThread_CallBack_Processing+0x580>
  case MSG_M0TOM4_COAP_SECURE_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800a5c4:	4b72      	ldr	r3, [pc, #456]	; (800a790 <OpenThread_CallBack_Processing+0x358>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 81f7 	beq.w	800a9bc <OpenThread_CallBack_Processing+0x584>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800a5ce:	4b70      	ldr	r3, [pc, #448]	; (800a790 <OpenThread_CallBack_Processing+0x358>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	6892      	ldr	r2, [r2, #8]
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	bf14      	ite	ne
 800a5da:	2201      	movne	r2, #1
 800a5dc:	2200      	moveq	r2, #0
 800a5de:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	4798      	blx	r3
    }
    break;
 800a5e8:	e1e8      	b.n	800a9bc <OpenThread_CallBack_Processing+0x584>
  case MSG_M0TOM4_COAP_SECURE_SET_CLIENT_CONNECT:
    if (coapSecureClientConnectCb != NULL)
 800a5ea:	4b69      	ldr	r3, [pc, #420]	; (800a790 <OpenThread_CallBack_Processing+0x358>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 81e6 	beq.w	800a9c0 <OpenThread_CallBack_Processing+0x588>
    {
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800a5f4:	4b66      	ldr	r3, [pc, #408]	; (800a790 <OpenThread_CallBack_Processing+0x358>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	6892      	ldr	r2, [r2, #8]
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	bf14      	ite	ne
 800a600:	2201      	movne	r2, #1
 800a602:	2200      	moveq	r2, #0
 800a604:	b2d0      	uxtb	r0, r2
          (void *) p_notification->Data[1]);
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	68d2      	ldr	r2, [r2, #12]
      coapSecureClientConnectCb((bool) p_notification->Data[0],
 800a60a:	4611      	mov	r1, r2
 800a60c:	4798      	blx	r3
    }
    break;
 800a60e:	e1d7      	b.n	800a9c0 <OpenThread_CallBack_Processing+0x588>
  case MSG_M0TOM4_COAP_SECURE_DEFAULT_REQUEST_HANDLER:
    if (defaultCoapSecureRequestHandlerCb != NULL)
 800a610:	4b60      	ldr	r3, [pc, #384]	; (800a794 <OpenThread_CallBack_Processing+0x35c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 81d5 	beq.w	800a9c4 <OpenThread_CallBack_Processing+0x58c>
    {
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800a61a:	4b5e      	ldr	r3, [pc, #376]	; (800a794 <OpenThread_CallBack_Processing+0x35c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	6892      	ldr	r2, [r2, #8]
 800a622:	4610      	mov	r0, r2
          (otMessage *) p_notification->Data[1],
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	68d2      	ldr	r2, [r2, #12]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800a628:	4611      	mov	r1, r2
          (otMessageInfo *) p_notification->Data[2]);
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	6912      	ldr	r2, [r2, #16]
      defaultCoapSecureRequestHandlerCb((void *) p_notification->Data[0],
 800a62e:	4798      	blx	r3
    }
    break;
 800a630:	e1c8      	b.n	800a9c4 <OpenThread_CallBack_Processing+0x58c>
  case MSG_M0TOM4_NOTIFY_STACK_RESET:
    /* Store Thread NVM data in Flash*/
    SHCI_C2_FLASH_StoreData(THREAD_IP);
 800a632:	2001      	movs	r0, #1
 800a634:	f7fe fca1 	bl	8008f7a <SHCI_C2_FLASH_StoreData>
    /* Perform an NVIC Reset in order to reinitalize the device */
    HAL_NVIC_SystemReset();
 800a638:	f7fa fa45 	bl	8004ac6 <HAL_NVIC_SystemReset>
    break;
 800a63c:	e1ef      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
  case MSG_M0TOM4_IP6_RECEIVE:
    if (otIp6ReceiveCb != NULL)
 800a63e:	4b56      	ldr	r3, [pc, #344]	; (800a798 <OpenThread_CallBack_Processing+0x360>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 81c0 	beq.w	800a9c8 <OpenThread_CallBack_Processing+0x590>
    {
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a648:	4b53      	ldr	r3, [pc, #332]	; (800a798 <OpenThread_CallBack_Processing+0x360>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	6892      	ldr	r2, [r2, #8]
 800a650:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	68d2      	ldr	r2, [r2, #12]
      otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800a656:	4611      	mov	r1, r2
 800a658:	4798      	blx	r3
    }
    break;
 800a65a:	e1b5      	b.n	800a9c8 <OpenThread_CallBack_Processing+0x590>
  case MSG_M0TOM4_IP6_ADDRESS:
    if (otIp6AddressCb != NULL)
 800a65c:	4b4f      	ldr	r3, [pc, #316]	; (800a79c <OpenThread_CallBack_Processing+0x364>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 81b3 	beq.w	800a9cc <OpenThread_CallBack_Processing+0x594>
    {
      otIp6AddressCb((const otIp6Address *) p_notification->Data[0],
 800a666:	4b4d      	ldr	r3, [pc, #308]	; (800a79c <OpenThread_CallBack_Processing+0x364>)
 800a668:	681c      	ldr	r4, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	4618      	mov	r0, r3
          (uint8_t) p_notification->Data[1],
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
      otIp6AddressCb((const otIp6Address *) p_notification->Data[0],
 800a674:	b2d9      	uxtb	r1, r3
          (bool) p_notification->Data[2],
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	691b      	ldr	r3, [r3, #16]
      otIp6AddressCb((const otIp6Address *) p_notification->Data[0],
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	bf14      	ite	ne
 800a67e:	2301      	movne	r3, #1
 800a680:	2300      	moveq	r3, #0
 800a682:	b2da      	uxtb	r2, r3
          (void *) p_notification->Data[3]);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	695b      	ldr	r3, [r3, #20]
      otIp6AddressCb((const otIp6Address *) p_notification->Data[0],
 800a688:	47a0      	blx	r4
    }
    break;
 800a68a:	e19f      	b.n	800a9cc <OpenThread_CallBack_Processing+0x594>
#if OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_IP6_SLAAC_PREFIX_FILTER:
    if (otIp6SlaacPrefixFilterCb != NULL)
 800a68c:	4b44      	ldr	r3, [pc, #272]	; (800a7a0 <OpenThread_CallBack_Processing+0x368>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 819d 	beq.w	800a9d0 <OpenThread_CallBack_Processing+0x598>
    {
      /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
      otIp6SlaacPrefixFilterCb(NULL,
 800a696:	4b42      	ldr	r3, [pc, #264]	; (800a7a0 <OpenThread_CallBack_Processing+0x368>)
 800a698:	681b      	ldr	r3, [r3, #0]
          (const otIp6Prefix *) p_notification->Data[0]);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	6892      	ldr	r2, [r2, #8]
      otIp6SlaacPrefixFilterCb(NULL,
 800a69e:	4611      	mov	r1, r2
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	4798      	blx	r3
    }
    break;
 800a6a4:	e194      	b.n	800a9d0 <OpenThread_CallBack_Processing+0x598>
#endif // OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE
  case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
    if (otHandleActiveScanResultCb != NULL)
 800a6a6:	4b3f      	ldr	r3, [pc, #252]	; (800a7a4 <OpenThread_CallBack_Processing+0x36c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8192 	beq.w	800a9d4 <OpenThread_CallBack_Processing+0x59c>
    {
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a6b0:	4b3c      	ldr	r3, [pc, #240]	; (800a7a4 <OpenThread_CallBack_Processing+0x36c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	6892      	ldr	r2, [r2, #8]
 800a6b8:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	68d2      	ldr	r2, [r2, #12]
      otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4798      	blx	r3
    }
    break;
 800a6c2:	e187      	b.n	800a9d4 <OpenThread_CallBack_Processing+0x59c>
  case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
    if (otHandleEnergyScanResultCb != NULL)
 800a6c4:	4b38      	ldr	r3, [pc, #224]	; (800a7a8 <OpenThread_CallBack_Processing+0x370>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 8185 	beq.w	800a9d8 <OpenThread_CallBack_Processing+0x5a0>
    {
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a6ce:	4b36      	ldr	r3, [pc, #216]	; (800a7a8 <OpenThread_CallBack_Processing+0x370>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	6892      	ldr	r2, [r2, #8]
 800a6d6:	4610      	mov	r0, r2
          (void*) p_notification->Data[1]);
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	68d2      	ldr	r2, [r2, #12]
      otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4798      	blx	r3
    }
    break;
 800a6e0:	e17a      	b.n	800a9d8 <OpenThread_CallBack_Processing+0x5a0>
  case MSG_M0TOM4_HANDLE_LINK_PCAP:
    if (otLinkPcapCb != NULL)
 800a6e2:	4b32      	ldr	r3, [pc, #200]	; (800a7ac <OpenThread_CallBack_Processing+0x374>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 8178 	beq.w	800a9dc <OpenThread_CallBack_Processing+0x5a4>
    {
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a6ec:	4b2f      	ldr	r3, [pc, #188]	; (800a7ac <OpenThread_CallBack_Processing+0x374>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	6892      	ldr	r2, [r2, #8]
 800a6f4:	4610      	mov	r0, r2
          p_notification->Data[1],
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	68d2      	ldr	r2, [r2, #12]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a6fa:	2a00      	cmp	r2, #0
 800a6fc:	bf14      	ite	ne
 800a6fe:	2201      	movne	r2, #1
 800a700:	2200      	moveq	r2, #0
 800a702:	b2d1      	uxtb	r1, r2
          (void*) p_notification->Data[2]);
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	6912      	ldr	r2, [r2, #16]
      otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800a708:	4798      	blx	r3
    }
    break;
 800a70a:	e167      	b.n	800a9dc <OpenThread_CallBack_Processing+0x5a4>
  case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
    if (otReceiveDiagnosticGetCb != NULL)
 800a70c:	4b28      	ldr	r3, [pc, #160]	; (800a7b0 <OpenThread_CallBack_Processing+0x378>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 8165 	beq.w	800a9e0 <OpenThread_CallBack_Processing+0x5a8>
    {
      otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a716:	4b26      	ldr	r3, [pc, #152]	; (800a7b0 <OpenThread_CallBack_Processing+0x378>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	6892      	ldr	r2, [r2, #8]
 800a71e:	4610      	mov	r0, r2
          (otMessageInfo*) p_notification->Data[1],
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	68d2      	ldr	r2, [r2, #12]
      otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a724:	4611      	mov	r1, r2
          (void*) p_notification->Data[2]);
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	6912      	ldr	r2, [r2, #16]
      otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800a72a:	4798      	blx	r3
    }
    break;
 800a72c:	e158      	b.n	800a9e0 <OpenThread_CallBack_Processing+0x5a8>
#if OPENTHREAD_FTD
  case MSG_M0TOM4_THREAD_FTD_NEIGHBOR_TABLE_CALLBACK:
    if (otNeighborTableCb != NULL)
 800a72e:	4b21      	ldr	r3, [pc, #132]	; (800a7b4 <OpenThread_CallBack_Processing+0x37c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 8156 	beq.w	800a9e4 <OpenThread_CallBack_Processing+0x5ac>
    {
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800a738:	4b1e      	ldr	r3, [pc, #120]	; (800a7b4 <OpenThread_CallBack_Processing+0x37c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	6892      	ldr	r2, [r2, #8]
 800a740:	b2d0      	uxtb	r0, r2
          (const otNeighborTableEntryInfo *)p_notification->Data[1]);
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	68d2      	ldr	r2, [r2, #12]
      otNeighborTableCb((otNeighborTableEvent) p_notification->Data[0],
 800a746:	4611      	mov	r1, r2
 800a748:	4798      	blx	r3
    }
    break;
 800a74a:	e14b      	b.n	800a9e4 <OpenThread_CallBack_Processing+0x5ac>
#endif
  case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
    if (otCommissionerEnergyReportCb != NULL)
 800a74c:	4b1a      	ldr	r3, [pc, #104]	; (800a7b8 <OpenThread_CallBack_Processing+0x380>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 8149 	beq.w	800a9e8 <OpenThread_CallBack_Processing+0x5b0>
    {
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a756:	4b18      	ldr	r3, [pc, #96]	; (800a7b8 <OpenThread_CallBack_Processing+0x380>)
 800a758:	681c      	ldr	r4, [r3, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6898      	ldr	r0, [r3, #8]
          (uint8_t*) p_notification->Data[1],
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a762:	4619      	mov	r1, r3
          (uint8_t) p_notification->Data[2],
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	691b      	ldr	r3, [r3, #16]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a768:	b2da      	uxtb	r2, r3
          (void*) p_notification->Data[3]);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
      otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800a76e:	47a0      	blx	r4
    }
    break;
 800a770:	e13a      	b.n	800a9e8 <OpenThread_CallBack_Processing+0x5b0>
 800a772:	bf00      	nop
 800a774:	20000730 	.word	0x20000730
 800a778:	20000750 	.word	0x20000750
 800a77c:	20001894 	.word	0x20001894
 800a780:	2000078c 	.word	0x2000078c
 800a784:	20000790 	.word	0x20000790
 800a788:	20001898 	.word	0x20001898
 800a78c:	20000794 	.word	0x20000794
 800a790:	2000079c 	.word	0x2000079c
 800a794:	20000798 	.word	0x20000798
 800a798:	20000738 	.word	0x20000738
 800a79c:	2000073c 	.word	0x2000073c
 800a7a0:	20000734 	.word	0x20000734
 800a7a4:	20000740 	.word	0x20000740
 800a7a8:	20000744 	.word	0x20000744
 800a7ac:	20000748 	.word	0x20000748
 800a7b0:	2000074c 	.word	0x2000074c
 800a7b4:	20000754 	.word	0x20000754
 800a7b8:	20000760 	.word	0x20000760
  case MSG_M0TOM4_COMMISSIONER_PANID_CONFLICT_CALLBACK:
    if (otCommissionerPanIdConflictCb != NULL)
 800a7bc:	4b9b      	ldr	r3, [pc, #620]	; (800aa2c <OpenThread_CallBack_Processing+0x5f4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 8113 	beq.w	800a9ec <OpenThread_CallBack_Processing+0x5b4>
    {
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800a7c6:	4b99      	ldr	r3, [pc, #612]	; (800aa2c <OpenThread_CallBack_Processing+0x5f4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	6892      	ldr	r2, [r2, #8]
 800a7ce:	b290      	uxth	r0, r2
          (uint32_t) p_notification->Data[1],
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	68d1      	ldr	r1, [r2, #12]
          (void*) p_notification->Data[2]);
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	6912      	ldr	r2, [r2, #16]
      otCommissionerPanIdConflictCb((uint16_t) p_notification->Data[0],
 800a7d8:	4798      	blx	r3
    }
    break;
 800a7da:	e107      	b.n	800a9ec <OpenThread_CallBack_Processing+0x5b4>
  case MSG_M0TOM4_COMMISSIONER_STATE_CALLBACK:
    if (otCommissionerStateCb != NULL)
 800a7dc:	4b94      	ldr	r3, [pc, #592]	; (800aa30 <OpenThread_CallBack_Processing+0x5f8>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 8105 	beq.w	800a9f0 <OpenThread_CallBack_Processing+0x5b8>
    {
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800a7e6:	4b92      	ldr	r3, [pc, #584]	; (800aa30 <OpenThread_CallBack_Processing+0x5f8>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	6892      	ldr	r2, [r2, #8]
 800a7ee:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	68d2      	ldr	r2, [r2, #12]
      otCommissionerStateCb((otCommissionerState) p_notification->Data[0],
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4798      	blx	r3
    }
    break;
 800a7f8:	e0fa      	b.n	800a9f0 <OpenThread_CallBack_Processing+0x5b8>
  case MSG_M0TOM4_COMMISSIONER_JOINER_CALLBACK:
    if (otCommissionerJoinerCb != NULL)
 800a7fa:	4b8e      	ldr	r3, [pc, #568]	; (800aa34 <OpenThread_CallBack_Processing+0x5fc>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 80f8 	beq.w	800a9f4 <OpenThread_CallBack_Processing+0x5bc>
    {
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800a804:	4b8b      	ldr	r3, [pc, #556]	; (800aa34 <OpenThread_CallBack_Processing+0x5fc>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	6892      	ldr	r2, [r2, #8]
 800a80c:	b2d0      	uxtb	r0, r2
          (otExtAddress*) p_notification->Data[1],
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	68d2      	ldr	r2, [r2, #12]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800a812:	4611      	mov	r1, r2
          (void*) p_notification->Data[2]);
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	6912      	ldr	r2, [r2, #16]
      otCommissionerJoinerCb((otCommissionerJoinerEvent) p_notification->Data[0],
 800a818:	4798      	blx	r3
    }
    break;
 800a81a:	e0eb      	b.n	800a9f4 <OpenThread_CallBack_Processing+0x5bc>
  case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
    if (otDnsResponseHandlerCb != NULL)
 800a81c:	4b86      	ldr	r3, [pc, #536]	; (800aa38 <OpenThread_CallBack_Processing+0x600>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 80e9 	beq.w	800a9f8 <OpenThread_CallBack_Processing+0x5c0>
    {
      otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a826:	4b84      	ldr	r3, [pc, #528]	; (800aa38 <OpenThread_CallBack_Processing+0x600>)
 800a828:	681c      	ldr	r4, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	4618      	mov	r0, r3
          (char*) p_notification->Data[1],
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
      otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a834:	4619      	mov	r1, r3
          (otIp6Address*) p_notification->Data[2],
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	691b      	ldr	r3, [r3, #16]
      otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a83a:	461d      	mov	r5, r3
          (uint32_t) p_notification->Data[3],
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	695a      	ldr	r2, [r3, #20]
          (otError) p_notification->Data[4]);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
      otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800a844:	b2db      	uxtb	r3, r3
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	4613      	mov	r3, r2
 800a84a:	462a      	mov	r2, r5
 800a84c:	47a0      	blx	r4
    }
    break;
 800a84e:	e0d3      	b.n	800a9f8 <OpenThread_CallBack_Processing+0x5c0>
  case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
    if (otIcmp6ReceiveCb != NULL)
 800a850:	4b7a      	ldr	r3, [pc, #488]	; (800aa3c <OpenThread_CallBack_Processing+0x604>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 80d1 	beq.w	800a9fc <OpenThread_CallBack_Processing+0x5c4>
    {
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a85a:	4b78      	ldr	r3, [pc, #480]	; (800aa3c <OpenThread_CallBack_Processing+0x604>)
 800a85c:	681c      	ldr	r4, [r3, #0]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	4618      	mov	r0, r3
          (otMessage*) p_notification->Data[1],
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a868:	4619      	mov	r1, r3
          (otMessageInfo*) p_notification->Data[2],
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a86e:	461a      	mov	r2, r3
          (otIcmp6Header*) p_notification->Data[3]);
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	695b      	ldr	r3, [r3, #20]
      otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800a874:	47a0      	blx	r4
    }
    break;
 800a876:	e0c1      	b.n	800a9fc <OpenThread_CallBack_Processing+0x5c4>
  case MSG_M0TOM4_JOINER_CALLBACK:
    if (otJoinerCb != NULL)
 800a878:	4b71      	ldr	r3, [pc, #452]	; (800aa40 <OpenThread_CallBack_Processing+0x608>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 80bf 	beq.w	800aa00 <OpenThread_CallBack_Processing+0x5c8>
    {
      otJoinerCb((otError) p_notification->Data[0],
 800a882:	4b6f      	ldr	r3, [pc, #444]	; (800aa40 <OpenThread_CallBack_Processing+0x608>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	6892      	ldr	r2, [r2, #8]
 800a88a:	b2d0      	uxtb	r0, r2
          (void*) p_notification->Data[1]);
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	68d2      	ldr	r2, [r2, #12]
      otJoinerCb((otError) p_notification->Data[0],
 800a890:	4611      	mov	r1, r2
 800a892:	4798      	blx	r3
    }
    break;
 800a894:	e0b4      	b.n	800aa00 <OpenThread_CallBack_Processing+0x5c8>
  case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
    if (otLinkRawReceiveDoneCb != NULL)
 800a896:	4b6b      	ldr	r3, [pc, #428]	; (800aa44 <OpenThread_CallBack_Processing+0x60c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 80b2 	beq.w	800aa04 <OpenThread_CallBack_Processing+0x5cc>
    {
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a8a0:	4b68      	ldr	r3, [pc, #416]	; (800aa44 <OpenThread_CallBack_Processing+0x60c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	6892      	ldr	r2, [r2, #8]
 800a8a8:	4610      	mov	r0, r2
          (otRadioFrame*) p_notification->Data[1],
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	68d2      	ldr	r2, [r2, #12]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a8ae:	4611      	mov	r1, r2
          (otError) p_notification->Data[2]);
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	6912      	ldr	r2, [r2, #16]
      otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800a8b4:	b2d2      	uxtb	r2, r2
 800a8b6:	4798      	blx	r3
    }
    break;
 800a8b8:	e0a4      	b.n	800aa04 <OpenThread_CallBack_Processing+0x5cc>
  case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
    if (otLinkRawTransmitDoneCb != NULL)
 800a8ba:	4b63      	ldr	r3, [pc, #396]	; (800aa48 <OpenThread_CallBack_Processing+0x610>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 80a2 	beq.w	800aa08 <OpenThread_CallBack_Processing+0x5d0>
    {
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a8c4:	4b60      	ldr	r3, [pc, #384]	; (800aa48 <OpenThread_CallBack_Processing+0x610>)
 800a8c6:	681c      	ldr	r4, [r3, #0]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	4618      	mov	r0, r3
          (otRadioFrame*) p_notification->Data[1],
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a8d2:	4619      	mov	r1, r3
          (otRadioFrame*) p_notification->Data[2],
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	691b      	ldr	r3, [r3, #16]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a8d8:	461a      	mov	r2, r3
          (otError) p_notification->Data[3]);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	695b      	ldr	r3, [r3, #20]
      otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	47a0      	blx	r4
    }
    break;
 800a8e2:	e091      	b.n	800aa08 <OpenThread_CallBack_Processing+0x5d0>
  case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
    if (otLinkRawEnergyScanDoneCb != NULL)
 800a8e4:	4b59      	ldr	r3, [pc, #356]	; (800aa4c <OpenThread_CallBack_Processing+0x614>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 808f 	beq.w	800aa0c <OpenThread_CallBack_Processing+0x5d4>
    {
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a8ee:	4b57      	ldr	r3, [pc, #348]	; (800aa4c <OpenThread_CallBack_Processing+0x614>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	6892      	ldr	r2, [r2, #8]
 800a8f6:	4610      	mov	r0, r2
          (int8_t) p_notification->Data[1]);
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	68d2      	ldr	r2, [r2, #12]
      otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800a8fc:	b252      	sxtb	r2, r2
 800a8fe:	4611      	mov	r1, r2
 800a900:	4798      	blx	r3
    }
    break;
 800a902:	e083      	b.n	800aa0c <OpenThread_CallBack_Processing+0x5d4>
  case MSG_M0TOM4_UDP_RECEIVE:
    if (otUdpReceiveCb != NULL)
 800a904:	4b52      	ldr	r3, [pc, #328]	; (800aa50 <OpenThread_CallBack_Processing+0x618>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 8081 	beq.w	800aa10 <OpenThread_CallBack_Processing+0x5d8>
    {
      otUdpReceiveCb((void*) p_notification->Data[0],
 800a90e:	4b50      	ldr	r3, [pc, #320]	; (800aa50 <OpenThread_CallBack_Processing+0x618>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	6892      	ldr	r2, [r2, #8]
 800a916:	4610      	mov	r0, r2
          (otMessage*) p_notification->Data[1],
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	68d2      	ldr	r2, [r2, #12]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800a91c:	4611      	mov	r1, r2
          (otMessageInfo*) p_notification->Data[2]);
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	6912      	ldr	r2, [r2, #16]
      otUdpReceiveCb((void*) p_notification->Data[0],
 800a922:	4798      	blx	r3
    }
    break;
 800a924:	e074      	b.n	800aa10 <OpenThread_CallBack_Processing+0x5d8>
  case MSG_M0TOM4_UDP_HANDLER:
      mySTUdpHandlerContext = (STUdpHandlerContextType*) p_notification->Data[0];
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	461a      	mov	r2, r3
 800a92c:	4b49      	ldr	r3, [pc, #292]	; (800aa54 <OpenThread_CallBack_Processing+0x61c>)
 800a92e:	601a      	str	r2, [r3, #0]

      otUdpHandlerCb = mySTUdpHandlerContext->mHandler;
 800a930:	4b48      	ldr	r3, [pc, #288]	; (800aa54 <OpenThread_CallBack_Processing+0x61c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	4a48      	ldr	r2, [pc, #288]	; (800aa58 <OpenThread_CallBack_Processing+0x620>)
 800a938:	6013      	str	r3, [r2, #0]

      if (otUdpHandlerCb != NULL)
 800a93a:	4b47      	ldr	r3, [pc, #284]	; (800aa58 <OpenThread_CallBack_Processing+0x620>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d068      	beq.n	800aa14 <OpenThread_CallBack_Processing+0x5dc>
      {
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800a942:	4b45      	ldr	r3, [pc, #276]	; (800aa58 <OpenThread_CallBack_Processing+0x620>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a43      	ldr	r2, [pc, #268]	; (800aa54 <OpenThread_CallBack_Processing+0x61c>)
 800a948:	6812      	ldr	r2, [r2, #0]
 800a94a:	6810      	ldr	r0, [r2, #0]
            (otMessage *) p_notification->Data[1],
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	68d2      	ldr	r2, [r2, #12]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800a950:	4611      	mov	r1, r2
            (otMessageInfo *) p_notification->Data[2]);
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	6912      	ldr	r2, [r2, #16]
        p_notification->Data[0] = otUdpHandlerCb(mySTUdpHandlerContext->mContext,
 800a956:	4798      	blx	r3
 800a958:	4603      	mov	r3, r0
 800a95a:	461a      	mov	r2, r3
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	609a      	str	r2, [r3, #8]
      }
      break;
 800a960:	e058      	b.n	800aa14 <OpenThread_CallBack_Processing+0x5dc>
          (void *) p_notification->Data[4]);
    }
    break;
#endif /* OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE */
  case MSG_M0TOM4_NETWORK_TIME_SYNC_CALLBACK_FN:
    if (otNetworkTimeSyncCb != NULL)
 800a962:	4b3e      	ldr	r3, [pc, #248]	; (800aa5c <OpenThread_CallBack_Processing+0x624>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d056      	beq.n	800aa18 <OpenThread_CallBack_Processing+0x5e0>
    {
      otNetworkTimeSyncCb((void *)p_notification->Data[0]);
 800a96a:	4b3c      	ldr	r3, [pc, #240]	; (800aa5c <OpenThread_CallBack_Processing+0x624>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	6892      	ldr	r2, [r2, #8]
 800a972:	4610      	mov	r0, r2
 800a974:	4798      	blx	r3
    }
    break;
 800a976:	e04f      	b.n	800aa18 <OpenThread_CallBack_Processing+0x5e0>
  case MSG_M0TOM4_SNTP_RESPONSE_HANDLER:
    if (otSntpResponseHandlerCb != NULL)
 800a978:	4b39      	ldr	r3, [pc, #228]	; (800aa60 <OpenThread_CallBack_Processing+0x628>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d04d      	beq.n	800aa1c <OpenThread_CallBack_Processing+0x5e4>
    {
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800a980:	4b37      	ldr	r3, [pc, #220]	; (800aa60 <OpenThread_CallBack_Processing+0x628>)
 800a982:	6819      	ldr	r1, [r3, #0]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	461c      	mov	r4, r3
          (uint64_t)p_notification->Data[1],
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800a98e:	461a      	mov	r2, r3
 800a990:	f04f 0300 	mov.w	r3, #0
          (otError)p_notification->Data[2]);
 800a994:	6838      	ldr	r0, [r7, #0]
 800a996:	6900      	ldr	r0, [r0, #16]
      otSntpResponseHandlerCb((void *)p_notification->Data[0],
 800a998:	b2c0      	uxtb	r0, r0
 800a99a:	9000      	str	r0, [sp, #0]
 800a99c:	4620      	mov	r0, r4
 800a99e:	4788      	blx	r1
    }
    break;
 800a9a0:	e03c      	b.n	800aa1c <OpenThread_CallBack_Processing+0x5e4>
          (void *) p_notification->Data[1]);
    }
    break;
#endif
  default:
    status = HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	71fb      	strb	r3, [r7, #7]
    break;
 800a9a6:	e03a      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9a8:	bf00      	nop
 800a9aa:	e038      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9ac:	bf00      	nop
 800a9ae:	e036      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9b0:	bf00      	nop
 800a9b2:	e034      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9b4:	bf00      	nop
 800a9b6:	e032      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9b8:	bf00      	nop
 800a9ba:	e030      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9bc:	bf00      	nop
 800a9be:	e02e      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9c0:	bf00      	nop
 800a9c2:	e02c      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9c4:	bf00      	nop
 800a9c6:	e02a      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9c8:	bf00      	nop
 800a9ca:	e028      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9cc:	bf00      	nop
 800a9ce:	e026      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9d0:	bf00      	nop
 800a9d2:	e024      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9d4:	bf00      	nop
 800a9d6:	e022      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9d8:	bf00      	nop
 800a9da:	e020      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9dc:	bf00      	nop
 800a9de:	e01e      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9e0:	bf00      	nop
 800a9e2:	e01c      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9e4:	bf00      	nop
 800a9e6:	e01a      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9e8:	bf00      	nop
 800a9ea:	e018      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9ec:	bf00      	nop
 800a9ee:	e016      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9f0:	bf00      	nop
 800a9f2:	e014      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9f4:	bf00      	nop
 800a9f6:	e012      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9f8:	bf00      	nop
 800a9fa:	e010      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800a9fc:	bf00      	nop
 800a9fe:	e00e      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800aa00:	bf00      	nop
 800aa02:	e00c      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800aa04:	bf00      	nop
 800aa06:	e00a      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800aa08:	bf00      	nop
 800aa0a:	e008      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800aa0c:	bf00      	nop
 800aa0e:	e006      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800aa10:	bf00      	nop
 800aa12:	e004      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
      break;
 800aa14:	bf00      	nop
 800aa16:	e002      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800aa18:	bf00      	nop
 800aa1a:	e000      	b.n	800aa1e <OpenThread_CallBack_Processing+0x5e6>
    break;
 800aa1c:	bf00      	nop
  }

  TL_THREAD_SendAck();
 800aa1e:	f7fe ffdb 	bl	80099d8 <TL_THREAD_SendAck>
  return status;
 800aa22:	79fb      	ldrb	r3, [r7, #7]

}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bdb0      	pop	{r4, r5, r7, pc}
 800aa2c:	20000764 	.word	0x20000764
 800aa30:	20000758 	.word	0x20000758
 800aa34:	2000075c 	.word	0x2000075c
 800aa38:	20000768 	.word	0x20000768
 800aa3c:	2000076c 	.word	0x2000076c
 800aa40:	20000770 	.word	0x20000770
 800aa44:	20000774 	.word	0x20000774
 800aa48:	20000778 	.word	0x20000778
 800aa4c:	2000077c 	.word	0x2000077c
 800aa50:	20000780 	.word	0x20000780
 800aa54:	20000788 	.word	0x20000788
 800aa58:	20000784 	.word	0x20000784
 800aa5c:	200007a0 	.word	0x200007a0
 800aa60:	200007a4 	.word	0x200007a4

0800aa64 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;
extern otThreadParentResponseCallback otThreadParentResponseCb;

otError otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800aa70:	f7f8 fed4 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aa74:	f7f8 fe64 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800aa78:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	2200      	movs	r2, #0
 800aa86:	705a      	strb	r2, [r3, #1]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	709a      	strb	r2, [r3, #2]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f042 0201 	orr.w	r2, r2, #1
 800aa98:	711a      	strb	r2, [r3, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	715a      	strb	r2, [r3, #5]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	719a      	strb	r2, [r3, #6]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800aaa6:	78fa      	ldrb	r2, [r7, #3]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800aaac:	f7f8 fe90 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800aab0:	f7f8 fe52 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800aab4:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	b2db      	uxtb	r3, r3
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <otThreadSetLinkMode>:

  return otLinkModeConfig_received;
}

otError otThreadSetLinkMode(otInstance *aInstance, otLinkModeConfig aConfig)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	7039      	strb	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800aace:	f7f8 fea5 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800aad2:	f7f8 fe35 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800aad6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_LINK_MODE;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800aae0:	701a      	strb	r2, [r3, #0]
 800aae2:	2200      	movs	r2, #0
 800aae4:	705a      	strb	r2, [r3, #1]
 800aae6:	2200      	movs	r2, #0
 800aae8:	709a      	strb	r2, [r3, #2]
 800aaea:	2200      	movs	r2, #0
 800aaec:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=4;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f042 0204 	orr.w	r2, r2, #4
 800aaf6:	711a      	strb	r2, [r3, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	715a      	strb	r2, [r3, #5]
 800aafc:	2200      	movs	r2, #0
 800aafe:	719a      	strb	r2, [r3, #6]
 800ab00:	2200      	movs	r2, #0
 800ab02:	71da      	strb	r2, [r3, #7]

  /* Workaround for passing otLinkModeConfig, should return pointer instead of instance... */
  p_ot_req->Data[0] = (uint32_t) aConfig.mRxOnWhenIdle;
 800ab04:	783b      	ldrb	r3, [r7, #0]
 800ab06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aConfig.mSecureDataRequests;
 800ab12:	783b      	ldrb	r3, [r7, #0]
 800ab14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	60da      	str	r2, [r3, #12]
  p_ot_req->Data[2] = (uint32_t) aConfig.mDeviceType;
 800ab20:	783b      	ldrb	r3, [r7, #0]
 800ab22:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	461a      	mov	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	611a      	str	r2, [r3, #16]
  p_ot_req->Data[3] = (uint32_t) aConfig.mNetworkData;
 800ab2e:	783b      	ldrb	r3, [r7, #0]
 800ab30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	461a      	mov	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	615a      	str	r2, [r3, #20]

  Ot_Cmd_Transfer();
 800ab3c:	f7f8 fe48 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ab40:	f7f8 fe0a 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ab44:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	b2db      	uxtb	r3, r3
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

otDeviceRole otThreadGetDeviceRole(otInstance *aInstance)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ab5c:	f7f8 fe5e 	bl	800381c <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ab60:	f7f8 fdee 	bl	8003740 <THREAD_Get_OTCmdPayloadBuffer>
 800ab64:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800ab6e:	701a      	strb	r2, [r3, #0]
 800ab70:	2200      	movs	r2, #0
 800ab72:	705a      	strb	r2, [r3, #1]
 800ab74:	2200      	movs	r2, #0
 800ab76:	709a      	strb	r2, [r3, #2]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	711a      	strb	r2, [r3, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	715a      	strb	r2, [r3, #5]
 800ab86:	2200      	movs	r2, #0
 800ab88:	719a      	strb	r2, [r3, #6]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ab8e:	f7f8 fe1f 	bl	80037d0 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ab92:	f7f8 fde1 	bl	8003758 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ab96:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	b2db      	uxtb	r3, r3
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abae:	f3ef 8310 	mrs	r3, PRIMASK
 800abb2:	60fb      	str	r3, [r7, #12]
  return(result);
 800abb4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800abb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abb8:	b672      	cpsid	i
}
 800abba:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800abbc:	1cbb      	adds	r3, r7, #2
 800abbe:	4619      	mov	r1, r3
 800abc0:	4812      	ldr	r0, [pc, #72]	; (800ac0c <DbgTrace_TxCpltCallback+0x64>)
 800abc2:	f000 fbe6 	bl	800b392 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800abc6:	1cbb      	adds	r3, r7, #2
 800abc8:	4619      	mov	r1, r3
 800abca:	4810      	ldr	r0, [pc, #64]	; (800ac0c <DbgTrace_TxCpltCallback+0x64>)
 800abcc:	f000 fcd2 	bl	800b574 <CircularQueue_Sense>
 800abd0:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00c      	beq.n	800abf2 <DbgTrace_TxCpltCallback+0x4a>
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f383 8810 	msr	PRIMASK, r3
}
 800abe2:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800abe4:	887b      	ldrh	r3, [r7, #2]
 800abe6:	4a0a      	ldr	r2, [pc, #40]	; (800ac10 <DbgTrace_TxCpltCallback+0x68>)
 800abe8:	4619      	mov	r1, r3
 800abea:	6938      	ldr	r0, [r7, #16]
 800abec:	f7f5 fec7 	bl	800097e <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800abf0:	e008      	b.n	800ac04 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800abf2:	4b08      	ldr	r3, [pc, #32]	; (800ac14 <DbgTrace_TxCpltCallback+0x6c>)
 800abf4:	2201      	movs	r2, #1
 800abf6:	701a      	strb	r2, [r3, #0]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f383 8810 	msr	PRIMASK, r3
}
 800ac02:	bf00      	nop
}
 800ac04:	bf00      	nop
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	200007a8 	.word	0x200007a8
 800ac10:	0800aba9 	.word	0x0800aba9
 800ac14:	20000045 	.word	0x20000045

0800ac18 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ac1e:	f7f5 fea7 	bl	8000970 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ac22:	2302      	movs	r3, #2
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	2300      	movs	r3, #0
 800ac28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac2c:	4903      	ldr	r1, [pc, #12]	; (800ac3c <DbgTraceInit+0x24>)
 800ac2e:	4804      	ldr	r0, [pc, #16]	; (800ac40 <DbgTraceInit+0x28>)
 800ac30:	f000 f956 	bl	800aee0 <CircularQueue_Init>
#endif 
#endif
  return;
 800ac34:	bf00      	nop
}
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	200007c8 	.word	0x200007c8
 800ac40:	200007a8 	.word	0x200007a8

0800ac44 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 f805 	bl	800ac64 <DbgTraceWrite>
 800ac5a:	4603      	mov	r3, r0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08a      	sub	sp, #40	; 0x28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac74:	f3ef 8310 	mrs	r3, PRIMASK
 800ac78:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac7a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ac7c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac84:	d102      	bne.n	800ac8c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
 800ac8a:	e037      	b.n	800acfc <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d006      	beq.n	800aca0 <DbgTraceWrite+0x3c>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d003      	beq.n	800aca0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ac9e:	e02d      	b.n	800acfc <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d02a      	beq.n	800acfc <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800acaa:	b672      	cpsid	i
}
 800acac:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	2301      	movs	r3, #1
 800acb4:	68b9      	ldr	r1, [r7, #8]
 800acb6:	4814      	ldr	r0, [pc, #80]	; (800ad08 <DbgTraceWrite+0xa4>)
 800acb8:	f000 f944 	bl	800af44 <CircularQueue_Add>
 800acbc:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d015      	beq.n	800acf0 <DbgTraceWrite+0x8c>
 800acc4:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <DbgTraceWrite+0xa8>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d010      	beq.n	800acf0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <DbgTraceWrite+0xa8>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	701a      	strb	r2, [r3, #0]
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	f383 8810 	msr	PRIMASK, r3
}
 800acde:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	4a0a      	ldr	r2, [pc, #40]	; (800ad10 <DbgTraceWrite+0xac>)
 800ace6:	4619      	mov	r1, r3
 800ace8:	69f8      	ldr	r0, [r7, #28]
 800acea:	f7f5 fe48 	bl	800097e <DbgOutputTraces>
 800acee:	e005      	b.n	800acfc <DbgTraceWrite+0x98>
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f383 8810 	msr	PRIMASK, r3
}
 800acfa:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3728      	adds	r7, #40	; 0x28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	200007a8 	.word	0x200007a8
 800ad0c:	20000045 	.word	0x20000045
 800ad10:	0800aba9 	.word	0x0800aba9

0800ad14 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ad1e:	4b0f      	ldr	r3, [pc, #60]	; (800ad5c <OTP_Read+0x48>)
 800ad20:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ad22:	e002      	b.n	800ad2a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3b08      	subs	r3, #8
 800ad28:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3307      	adds	r3, #7
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	79fa      	ldrb	r2, [r7, #7]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d003      	beq.n	800ad3e <OTP_Read+0x2a>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <OTP_Read+0x4c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d1f2      	bne.n	800ad24 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	3307      	adds	r3, #7
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	79fa      	ldrb	r2, [r7, #7]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d001      	beq.n	800ad4e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	1fff73f8 	.word	0x1fff73f8
 800ad60:	1fff7000 	.word	0x1fff7000

0800ad64 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	605a      	str	r2, [r3, #4]
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ad90:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad92:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ad94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad96:	b672      	cpsid	i
}
 800ad98:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d102      	bne.n	800adaa <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ada4:	2301      	movs	r3, #1
 800ada6:	75fb      	strb	r3, [r7, #23]
 800ada8:	e001      	b.n	800adae <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800adaa:	2300      	movs	r3, #0
 800adac:	75fb      	strb	r3, [r7, #23]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f383 8810 	msr	PRIMASK, r3
}
 800adb8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800adba:	7dfb      	ldrb	r3, [r7, #23]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800add2:	f3ef 8310 	mrs	r3, PRIMASK
 800add6:	60fb      	str	r3, [r7, #12]
  return(result);
 800add8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800adda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800addc:	b672      	cpsid	i
}
 800adde:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	605a      	str	r2, [r3, #4]
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f383 8810 	msr	PRIMASK, r3
}
 800ae06:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ae08:	bf00      	nop
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae22:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae24:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae28:	b672      	cpsid	i
}
 800ae2a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f383 8810 	msr	PRIMASK, r3
}
 800ae52:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ae54:	bf00      	nop
 800ae56:	371c      	adds	r7, #28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae68:	f3ef 8310 	mrs	r3, PRIMASK
 800ae6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae72:	b672      	cpsid	i
}
 800ae74:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	6812      	ldr	r2, [r2, #0]
 800ae7e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	6852      	ldr	r2, [r2, #4]
 800ae88:	605a      	str	r2, [r3, #4]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f383 8810 	msr	PRIMASK, r3
}
 800ae94:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ae96:	bf00      	nop
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b086      	sub	sp, #24
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeac:	f3ef 8310 	mrs	r3, PRIMASK
 800aeb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aeb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeb6:	b672      	cpsid	i
}
 800aeb8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7ff ffca 	bl	800ae60 <LST_remove_node>
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f383 8810 	msr	PRIMASK, r3
}
 800aed6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aed8:	bf00      	nop
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	887a      	ldrh	r2, [r7, #2]
 800af16:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	7e3a      	ldrb	r2, [r7, #24]
 800af1c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800af1e:	7e3b      	ldrb	r3, [r7, #24]
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <CircularQueue_Init+0x56>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	891b      	ldrh	r3, [r3, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800af30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af34:	e000      	b.n	800af38 <CircularQueue_Init+0x58>
  }
  return 0;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08e      	sub	sp, #56	; 0x38
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	603b      	str	r3, [r7, #0]
 800af50:	4613      	mov	r3, r2
 800af52:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800af54:	2300      	movs	r3, #0
 800af56:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800af58:	2300      	movs	r3, #0
 800af5a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800af5c:	2300      	movs	r3, #0
 800af5e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800af60:	2300      	movs	r3, #0
 800af62:	62bb      	str	r3, [r7, #40]	; 0x28
 800af64:	2300      	movs	r3, #0
 800af66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800af68:	2300      	movs	r3, #0
 800af6a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800af6c:	2300      	movs	r3, #0
 800af6e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	891b      	ldrh	r3, [r3, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <CircularQueue_Add+0x38>
 800af78:	2302      	movs	r3, #2
 800af7a:	e000      	b.n	800af7e <CircularQueue_Add+0x3a>
 800af7c:	2300      	movs	r3, #0
 800af7e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d02a      	beq.n	800afde <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	891b      	ldrh	r3, [r3, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d123      	bne.n	800afd8 <CircularQueue_Add+0x94>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	4413      	add	r3, r2
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6819      	ldr	r1, [r3, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	1c58      	adds	r0, r3, #1
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	4298      	cmp	r0, r3
 800afae:	d306      	bcc.n	800afbe <CircularQueue_Add+0x7a>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6918      	ldr	r0, [r3, #16]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	1ac3      	subs	r3, r0, r3
 800afba:	3301      	adds	r3, #1
 800afbc:	e002      	b.n	800afc4 <CircularQueue_Add+0x80>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	3301      	adds	r3, #1
 800afc4:	440b      	add	r3, r1
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	021b      	lsls	r3, r3, #8
 800afcc:	b29b      	uxth	r3, r3
 800afce:	4413      	add	r3, r2
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	3302      	adds	r3, #2
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	e001      	b.n	800afdc <CircularQueue_Add+0x98>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	891b      	ldrh	r3, [r3, #8]
 800afdc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	891b      	ldrh	r3, [r3, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d002      	beq.n	800afec <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	891b      	ldrh	r3, [r3, #8]
 800afea:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	691a      	ldr	r2, [r3, #16]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d307      	bcc.n	800b008 <CircularQueue_Add+0xc4>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6919      	ldr	r1, [r3, #16]
 800b000:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b002:	440b      	add	r3, r1
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	e000      	b.n	800b00a <CircularQueue_Add+0xc6>
 800b008:	2300      	movs	r3, #0
 800b00a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b00c:	88fa      	ldrh	r2, [r7, #6]
 800b00e:	7ffb      	ldrb	r3, [r7, #31]
 800b010:	4413      	add	r3, r2
 800b012:	461a      	mov	r2, r3
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	fb03 f302 	mul.w	r3, r3, r2
 800b01a:	69ba      	ldr	r2, [r7, #24]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d80b      	bhi.n	800b038 <CircularQueue_Add+0xf4>
 800b020:	88fa      	ldrh	r2, [r7, #6]
 800b022:	7ffb      	ldrb	r3, [r7, #31]
 800b024:	4413      	add	r3, r2
 800b026:	461a      	mov	r2, r3
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b02e:	fb02 f201 	mul.w	r2, r2, r1
 800b032:	1a9b      	subs	r3, r3, r2
 800b034:	b2db      	uxtb	r3, r3
 800b036:	e000      	b.n	800b03a <CircularQueue_Add+0xf6>
 800b038:	2300      	movs	r3, #0
 800b03a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b03c:	7dfa      	ldrb	r2, [r7, #23]
 800b03e:	7ffb      	ldrb	r3, [r7, #31]
 800b040:	429a      	cmp	r2, r3
 800b042:	bf8c      	ite	hi
 800b044:	2301      	movhi	r3, #1
 800b046:	2300      	movls	r3, #0
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b04c:	7fbb      	ldrb	r3, [r7, #30]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d008      	beq.n	800b064 <CircularQueue_Add+0x120>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	7f1b      	ldrb	r3, [r3, #28]
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <CircularQueue_Add+0x120>
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
 800b060:	b29b      	uxth	r3, r3
 800b062:	e000      	b.n	800b066 <CircularQueue_Add+0x122>
 800b064:	8bbb      	ldrh	r3, [r7, #28]
 800b066:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b068:	7fbb      	ldrb	r3, [r7, #30]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d008      	beq.n	800b080 <CircularQueue_Add+0x13c>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	7f1b      	ldrb	r3, [r3, #28]
 800b072:	f003 0302 	and.w	r3, r3, #2
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <CircularQueue_Add+0x13c>
 800b07a:	7ffb      	ldrb	r3, [r7, #31]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	e000      	b.n	800b082 <CircularQueue_Add+0x13e>
 800b080:	8bbb      	ldrh	r3, [r7, #28]
 800b082:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b084:	88fb      	ldrh	r3, [r7, #6]
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 817e 	beq.w	800b388 <CircularQueue_Add+0x444>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	695a      	ldr	r2, [r3, #20]
 800b090:	88f9      	ldrh	r1, [r7, #6]
 800b092:	7ffb      	ldrb	r3, [r7, #31]
 800b094:	440b      	add	r3, r1
 800b096:	4619      	mov	r1, r3
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	fb03 f301 	mul.w	r3, r3, r1
 800b09e:	441a      	add	r2, r3
 800b0a0:	8bbb      	ldrh	r3, [r7, #28]
 800b0a2:	441a      	add	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	f200 816d 	bhi.w	800b388 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0b2:	e14a      	b.n	800b34a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	691a      	ldr	r2, [r3, #16]
 800b0b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0ba:	441a      	add	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d307      	bcc.n	800b0d4 <CircularQueue_Add+0x190>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	691a      	ldr	r2, [r3, #16]
 800b0c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0ca:	441a      	add	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	e003      	b.n	800b0dc <CircularQueue_Add+0x198>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	691a      	ldr	r2, [r3, #16]
 800b0d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0da:	4413      	add	r3, r2
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	891b      	ldrh	r3, [r3, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d130      	bne.n	800b150 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	1c59      	adds	r1, r3, #1
 800b0f6:	6339      	str	r1, [r7, #48]	; 0x30
 800b0f8:	4413      	add	r3, r2
 800b0fa:	88fa      	ldrh	r2, [r7, #6]
 800b0fc:	b2d2      	uxtb	r2, r2
 800b0fe:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b106:	429a      	cmp	r2, r3
 800b108:	d304      	bcc.n	800b114 <CircularQueue_Add+0x1d0>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	e000      	b.n	800b116 <CircularQueue_Add+0x1d2>
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	0a1b      	lsrs	r3, r3, #8
 800b11c:	b298      	uxth	r0, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	1c59      	adds	r1, r3, #1
 800b126:	6339      	str	r1, [r7, #48]	; 0x30
 800b128:	4413      	add	r3, r2
 800b12a:	b2c2      	uxtb	r2, r0
 800b12c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b134:	429a      	cmp	r2, r3
 800b136:	d304      	bcc.n	800b142 <CircularQueue_Add+0x1fe>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	e000      	b.n	800b144 <CircularQueue_Add+0x200>
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	1c9a      	adds	r2, r3, #2
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b150:	88fa      	ldrh	r2, [r7, #6]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6859      	ldr	r1, [r3, #4]
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	1acb      	subs	r3, r1, r3
 800b15a:	4293      	cmp	r3, r2
 800b15c:	bf28      	it	cs
 800b15e:	4613      	movcs	r3, r2
 800b160:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b162:	88fb      	ldrh	r3, [r7, #6]
 800b164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b166:	429a      	cmp	r2, r3
 800b168:	d007      	beq.n	800b17a <CircularQueue_Add+0x236>
 800b16a:	88fb      	ldrh	r3, [r7, #6]
 800b16c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b16e:	429a      	cmp	r2, r3
 800b170:	d225      	bcs.n	800b1be <CircularQueue_Add+0x27a>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	7f1b      	ldrb	r3, [r3, #28]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d121      	bne.n	800b1be <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b180:	18d0      	adds	r0, r2, r3
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b186:	fb02 f303 	mul.w	r3, r2, r3
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	4413      	add	r3, r2
 800b18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b190:	4619      	mov	r1, r3
 800b192:	f000 fd71 	bl	800bc78 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	695a      	ldr	r2, [r3, #20]
 800b19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19c:	441a      	add	r2, r3
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b1aa:	88fa      	ldrh	r2, [r7, #6]
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b1b2:	7ffb      	ldrb	r3, [r7, #31]
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	88fb      	ldrh	r3, [r7, #6]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b1bc:	e0a4      	b.n	800b308 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80a1 	beq.w	800b308 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	7f1b      	ldrb	r3, [r3, #28]
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d03a      	beq.n	800b248 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	891b      	ldrh	r3, [r3, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10d      	bne.n	800b1f6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	3b02      	subs	r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	22ff      	movs	r2, #255	; 0xff
 800b1e6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	4413      	add	r3, r2
 800b1f2:	22ff      	movs	r2, #255	; 0xff
 800b1f4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	695a      	ldr	r2, [r3, #20]
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	441a      	add	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b206:	88fb      	ldrh	r3, [r7, #6]
 800b208:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b20a:	2300      	movs	r3, #0
 800b20c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	891b      	ldrh	r3, [r3, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d16f      	bne.n	800b2f6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	1c59      	adds	r1, r3, #1
 800b21e:	6339      	str	r1, [r7, #48]	; 0x30
 800b220:	4413      	add	r3, r2
 800b222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b224:	b2d2      	uxtb	r2, r2
 800b226:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	0a18      	lsrs	r0, r3, #8
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	1c59      	adds	r1, r3, #1
 800b234:	6339      	str	r1, [r7, #48]	; 0x30
 800b236:	4413      	add	r3, r2
 800b238:	b2c2      	uxtb	r2, r0
 800b23a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	1c9a      	adds	r2, r3, #2
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	615a      	str	r2, [r3, #20]
 800b246:	e056      	b.n	800b2f6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	7f1b      	ldrb	r3, [r3, #28]
 800b24c:	f003 0302 	and.w	r3, r3, #2
 800b250:	2b00      	cmp	r3, #0
 800b252:	d050      	beq.n	800b2f6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	891b      	ldrh	r3, [r3, #8]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d14a      	bne.n	800b2f2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	3b02      	subs	r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b268:	b2d2      	uxtb	r2, r2
 800b26a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	0a19      	lsrs	r1, r3, #8
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	3b01      	subs	r3, #1
 800b278:	4413      	add	r3, r2
 800b27a:	b2ca      	uxtb	r2, r1
 800b27c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	18d0      	adds	r0, r2, r3
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b28a:	fb02 f303 	mul.w	r3, r2, r3
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	4413      	add	r3, r2
 800b292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b294:	4619      	mov	r1, r3
 800b296:	f000 fcef 	bl	800bc78 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	695a      	ldr	r2, [r3, #20]
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	441a      	add	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b2aa:	88fa      	ldrh	r2, [r7, #6]
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b2bc:	2300      	movs	r3, #0
 800b2be:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	1c59      	adds	r1, r3, #1
 800b2c8:	6339      	str	r1, [r7, #48]	; 0x30
 800b2ca:	4413      	add	r3, r2
 800b2cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ce:	b2d2      	uxtb	r2, r2
 800b2d0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	0a18      	lsrs	r0, r3, #8
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	1c59      	adds	r1, r3, #1
 800b2de:	6339      	str	r1, [r7, #48]	; 0x30
 800b2e0:	4413      	add	r3, r2
 800b2e2:	b2c2      	uxtb	r2, r0
 800b2e4:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	1c9a      	adds	r2, r3, #2
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	615a      	str	r2, [r3, #20]
 800b2f0:	e001      	b.n	800b2f6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e049      	b.n	800b38a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b2f6:	7ffb      	ldrb	r3, [r7, #31]
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	4413      	add	r3, r2
 800b300:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d015      	beq.n	800b33a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	18d0      	adds	r0, r2, r3
 800b316:	88fb      	ldrh	r3, [r7, #6]
 800b318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b31a:	fb02 f203 	mul.w	r2, r2, r3
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	4413      	add	r3, r2
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	4413      	add	r3, r2
 800b326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b328:	4619      	mov	r1, r3
 800b32a:	f000 fca5 	bl	800bc78 <memcpy>
        q->byteCount += NbBytesToCopy;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	695a      	ldr	r2, [r3, #20]
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	441a      	add	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	3301      	adds	r3, #1
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	f4ff aeb0 	bcc.w	800b0b4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6919      	ldr	r1, [r3, #16]
 800b35c:	7ffb      	ldrb	r3, [r7, #31]
 800b35e:	4419      	add	r1, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	4299      	cmp	r1, r3
 800b366:	d307      	bcc.n	800b378 <CircularQueue_Add+0x434>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6919      	ldr	r1, [r3, #16]
 800b36c:	7ffb      	ldrb	r3, [r7, #31]
 800b36e:	4419      	add	r1, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	1acb      	subs	r3, r1, r3
 800b376:	e003      	b.n	800b380 <CircularQueue_Add+0x43c>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6919      	ldr	r1, [r3, #16]
 800b37c:	7ffb      	ldrb	r3, [r7, #31]
 800b37e:	440b      	add	r3, r1
 800b380:	4413      	add	r3, r2
 800b382:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	e000      	b.n	800b38a <CircularQueue_Add+0x446>
    return NULL;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3738      	adds	r7, #56	; 0x38
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b392:	b480      	push	{r7}
 800b394:	b085      	sub	sp, #20
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	891b      	ldrh	r3, [r3, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <CircularQueue_Remove+0x1e>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e000      	b.n	800b3b2 <CircularQueue_Remove+0x20>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 80cc 	beq.w	800b55a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	891b      	ldrh	r3, [r3, #8]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d121      	bne.n	800b40e <CircularQueue_Remove+0x7c>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6819      	ldr	r1, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	1c58      	adds	r0, r3, #1
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	4298      	cmp	r0, r3
 800b3e8:	d306      	bcc.n	800b3f8 <CircularQueue_Remove+0x66>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68d8      	ldr	r0, [r3, #12]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	1ac3      	subs	r3, r0, r3
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	e002      	b.n	800b3fe <CircularQueue_Remove+0x6c>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	440b      	add	r3, r1
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	021b      	lsls	r3, r3, #8
 800b406:	b29b      	uxth	r3, r3
 800b408:	4413      	add	r3, r2
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	e001      	b.n	800b412 <CircularQueue_Remove+0x80>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	891b      	ldrh	r3, [r3, #8]
 800b412:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7f1b      	ldrb	r3, [r3, #28]
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d057      	beq.n	800b4d0 <CircularQueue_Remove+0x13e>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	7f1b      	ldrb	r3, [r3, #28]
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d151      	bne.n	800b4d0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b42c:	897b      	ldrh	r3, [r7, #10]
 800b42e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b432:	4293      	cmp	r3, r2
 800b434:	d103      	bne.n	800b43e <CircularQueue_Remove+0xac>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	891b      	ldrh	r3, [r3, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d012      	beq.n	800b464 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68da      	ldr	r2, [r3, #12]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b446:	429a      	cmp	r2, r3
 800b448:	d942      	bls.n	800b4d0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	891b      	ldrh	r3, [r3, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d03e      	beq.n	800b4d0 <CircularQueue_Remove+0x13e>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	8912      	ldrh	r2, [r2, #8]
 800b460:	4293      	cmp	r3, r2
 800b462:	d235      	bcs.n	800b4d0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	695a      	ldr	r2, [r3, #20]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68d9      	ldr	r1, [r3, #12]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	1acb      	subs	r3, r1, r3
 800b472:	441a      	add	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	891b      	ldrh	r3, [r3, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d121      	bne.n	800b4ca <CircularQueue_Remove+0x138>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	4413      	add	r3, r2
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b29a      	uxth	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6819      	ldr	r1, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	1c58      	adds	r0, r3, #1
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	4298      	cmp	r0, r3
 800b4a4:	d306      	bcc.n	800b4b4 <CircularQueue_Remove+0x122>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68d8      	ldr	r0, [r3, #12]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	1ac3      	subs	r3, r0, r3
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	e002      	b.n	800b4ba <CircularQueue_Remove+0x128>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	440b      	add	r3, r1
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	021b      	lsls	r3, r3, #8
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	4413      	add	r3, r2
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	e001      	b.n	800b4ce <CircularQueue_Remove+0x13c>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	891b      	ldrh	r3, [r3, #8]
 800b4ce:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68d9      	ldr	r1, [r3, #12]
 800b4d8:	7a7b      	ldrb	r3, [r7, #9]
 800b4da:	4419      	add	r1, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	4299      	cmp	r1, r3
 800b4e2:	d307      	bcc.n	800b4f4 <CircularQueue_Remove+0x162>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68d9      	ldr	r1, [r3, #12]
 800b4e8:	7a7b      	ldrb	r3, [r7, #9]
 800b4ea:	4419      	add	r1, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	1acb      	subs	r3, r1, r3
 800b4f2:	e003      	b.n	800b4fc <CircularQueue_Remove+0x16a>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68d9      	ldr	r1, [r3, #12]
 800b4f8:	7a7b      	ldrb	r3, [r7, #9]
 800b4fa:	440b      	add	r3, r1
 800b4fc:	4413      	add	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	8979      	ldrh	r1, [r7, #10]
 800b506:	7a7a      	ldrb	r2, [r7, #9]
 800b508:	440a      	add	r2, r1
 800b50a:	1a9a      	subs	r2, r3, r2
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d01b      	beq.n	800b550 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68da      	ldr	r2, [r3, #12]
 800b51c:	897b      	ldrh	r3, [r7, #10]
 800b51e:	441a      	add	r2, r3
 800b520:	7a7b      	ldrb	r3, [r7, #9]
 800b522:	441a      	add	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d309      	bcc.n	800b540 <CircularQueue_Remove+0x1ae>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	897b      	ldrh	r3, [r7, #10]
 800b532:	441a      	add	r2, r3
 800b534:	7a7b      	ldrb	r3, [r7, #9]
 800b536:	441a      	add	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	e005      	b.n	800b54c <CircularQueue_Remove+0x1ba>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68da      	ldr	r2, [r3, #12]
 800b544:	897b      	ldrh	r3, [r7, #10]
 800b546:	441a      	add	r2, r3
 800b548:	7a7b      	ldrb	r3, [r7, #9]
 800b54a:	4413      	add	r3, r2
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	1e5a      	subs	r2, r3, #1
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	897a      	ldrh	r2, [r7, #10]
 800b564:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b566:	68fb      	ldr	r3, [r7, #12]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b574:	b480      	push	{r7}
 800b576:	b087      	sub	sp, #28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	891b      	ldrh	r3, [r3, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <CircularQueue_Sense+0x1e>
 800b58e:	2302      	movs	r3, #2
 800b590:	e000      	b.n	800b594 <CircularQueue_Sense+0x20>
 800b592:	2300      	movs	r3, #0
 800b594:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 8090 	beq.w	800b6c8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	891b      	ldrh	r3, [r3, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d121      	bne.n	800b5fa <CircularQueue_Sense+0x86>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6819      	ldr	r1, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	1c58      	adds	r0, r3, #1
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	4298      	cmp	r0, r3
 800b5d4:	d306      	bcc.n	800b5e4 <CircularQueue_Sense+0x70>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68d8      	ldr	r0, [r3, #12]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	1ac3      	subs	r3, r0, r3
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	e002      	b.n	800b5ea <CircularQueue_Sense+0x76>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	440b      	add	r3, r1
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	021b      	lsls	r3, r3, #8
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	e001      	b.n	800b5fe <CircularQueue_Sense+0x8a>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	891b      	ldrh	r3, [r3, #8]
 800b5fe:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	7f1b      	ldrb	r3, [r3, #28]
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d048      	beq.n	800b69e <CircularQueue_Sense+0x12a>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	7f1b      	ldrb	r3, [r3, #28]
 800b610:	f003 0302 	and.w	r3, r3, #2
 800b614:	2b00      	cmp	r3, #0
 800b616:	d142      	bne.n	800b69e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b618:	8a7b      	ldrh	r3, [r7, #18]
 800b61a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b61e:	4293      	cmp	r3, r2
 800b620:	d103      	bne.n	800b62a <CircularQueue_Sense+0xb6>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	891b      	ldrh	r3, [r3, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d012      	beq.n	800b650 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b632:	429a      	cmp	r2, r3
 800b634:	d933      	bls.n	800b69e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	891b      	ldrh	r3, [r3, #8]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d02f      	beq.n	800b69e <CircularQueue_Sense+0x12a>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685a      	ldr	r2, [r3, #4]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	8912      	ldrh	r2, [r2, #8]
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d226      	bcs.n	800b69e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b650:	2300      	movs	r3, #0
 800b652:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	891b      	ldrh	r3, [r3, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d11d      	bne.n	800b698 <CircularQueue_Sense+0x124>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	4413      	add	r3, r2
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6819      	ldr	r1, [r3, #0]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	1c58      	adds	r0, r3, #1
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	4298      	cmp	r0, r3
 800b676:	d305      	bcc.n	800b684 <CircularQueue_Sense+0x110>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	1ac3      	subs	r3, r0, r3
 800b680:	3301      	adds	r3, #1
 800b682:	e001      	b.n	800b688 <CircularQueue_Sense+0x114>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	3301      	adds	r3, #1
 800b688:	440b      	add	r3, r1
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	021b      	lsls	r3, r3, #8
 800b690:	b29b      	uxth	r3, r3
 800b692:	4413      	add	r3, r2
 800b694:	b29b      	uxth	r3, r3
 800b696:	e001      	b.n	800b69c <CircularQueue_Sense+0x128>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	891b      	ldrh	r3, [r3, #8]
 800b69c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	7af9      	ldrb	r1, [r7, #11]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4419      	add	r1, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	4299      	cmp	r1, r3
 800b6ae:	d306      	bcc.n	800b6be <CircularQueue_Sense+0x14a>
 800b6b0:	7af9      	ldrb	r1, [r7, #11]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4419      	add	r1, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	1acb      	subs	r3, r1, r3
 800b6bc:	e002      	b.n	800b6c4 <CircularQueue_Sense+0x150>
 800b6be:	7af9      	ldrb	r1, [r7, #11]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	440b      	add	r3, r1
 800b6c4:	4413      	add	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d002      	beq.n	800b6d4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	8a7a      	ldrh	r2, [r7, #18]
 800b6d2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b6d4:	697b      	ldr	r3, [r7, #20]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	371c      	adds	r7, #28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
	...

0800b6e4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b6e8:	4b05      	ldr	r3, [pc, #20]	; (800b700 <UTIL_LPM_Init+0x1c>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b6ee:	4b05      	ldr	r3, [pc, #20]	; (800b704 <UTIL_LPM_Init+0x20>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b6f4:	bf00      	nop
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	200017c8 	.word	0x200017c8
 800b704:	200017cc 	.word	0x200017cc

0800b708 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b714:	f3ef 8310 	mrs	r3, PRIMASK
 800b718:	613b      	str	r3, [r7, #16]
  return(result);
 800b71a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b71c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b71e:	b672      	cpsid	i
}
 800b720:	bf00      	nop
  
  switch( state )
 800b722:	78fb      	ldrb	r3, [r7, #3]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d008      	beq.n	800b73a <UTIL_LPM_SetStopMode+0x32>
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d10e      	bne.n	800b74a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800b72c:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <UTIL_LPM_SetStopMode+0x5c>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4313      	orrs	r3, r2
 800b734:	4a0b      	ldr	r2, [pc, #44]	; (800b764 <UTIL_LPM_SetStopMode+0x5c>)
 800b736:	6013      	str	r3, [r2, #0]
      break;
 800b738:	e008      	b.n	800b74c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	43da      	mvns	r2, r3
 800b73e:	4b09      	ldr	r3, [pc, #36]	; (800b764 <UTIL_LPM_SetStopMode+0x5c>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4013      	ands	r3, r2
 800b744:	4a07      	ldr	r2, [pc, #28]	; (800b764 <UTIL_LPM_SetStopMode+0x5c>)
 800b746:	6013      	str	r3, [r2, #0]
      break;
 800b748:	e000      	b.n	800b74c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800b74a:	bf00      	nop
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f383 8810 	msr	PRIMASK, r3
}
 800b756:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b758:	bf00      	nop
 800b75a:	371c      	adds	r7, #28
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	200017c8 	.word	0x200017c8

0800b768 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b768:	b480      	push	{r7}
 800b76a:	b087      	sub	sp, #28
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	460b      	mov	r3, r1
 800b772:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b774:	f3ef 8310 	mrs	r3, PRIMASK
 800b778:	613b      	str	r3, [r7, #16]
  return(result);
 800b77a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b77c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b77e:	b672      	cpsid	i
}
 800b780:	bf00      	nop
  
  switch(state)
 800b782:	78fb      	ldrb	r3, [r7, #3]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d008      	beq.n	800b79a <UTIL_LPM_SetOffMode+0x32>
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d10e      	bne.n	800b7aa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b78c:	4b0d      	ldr	r3, [pc, #52]	; (800b7c4 <UTIL_LPM_SetOffMode+0x5c>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4313      	orrs	r3, r2
 800b794:	4a0b      	ldr	r2, [pc, #44]	; (800b7c4 <UTIL_LPM_SetOffMode+0x5c>)
 800b796:	6013      	str	r3, [r2, #0]
      break;
 800b798:	e008      	b.n	800b7ac <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	43da      	mvns	r2, r3
 800b79e:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <UTIL_LPM_SetOffMode+0x5c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	4a07      	ldr	r2, [pc, #28]	; (800b7c4 <UTIL_LPM_SetOffMode+0x5c>)
 800b7a6:	6013      	str	r3, [r2, #0]
      break;
 800b7a8:	e000      	b.n	800b7ac <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b7aa:	bf00      	nop
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f383 8810 	msr	PRIMASK, r3
}
 800b7b6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b7b8:	bf00      	nop
 800b7ba:	371c      	adds	r7, #28
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	200017cc 	.word	0x200017cc

0800b7c8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08c      	sub	sp, #48	; 0x30
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b7d0:	4b6a      	ldr	r3, [pc, #424]	; (800b97c <UTIL_SEQ_Run+0x1b4>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800b7d6:	4b69      	ldr	r3, [pc, #420]	; (800b97c <UTIL_SEQ_Run+0x1b4>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4013      	ands	r3, r2
 800b7de:	4a67      	ldr	r2, [pc, #412]	; (800b97c <UTIL_SEQ_Run+0x1b4>)
 800b7e0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b7e2:	4b67      	ldr	r3, [pc, #412]	; (800b980 <UTIL_SEQ_Run+0x1b8>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b7e8:	e086      	b.n	800b8f8 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b7ee:	e002      	b.n	800b7f6 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800b7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b7f6:	4a63      	ldr	r2, [pc, #396]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b7fe:	4b62      	ldr	r3, [pc, #392]	; (800b988 <UTIL_SEQ_Run+0x1c0>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	401a      	ands	r2, r3
 800b804:	4b5d      	ldr	r3, [pc, #372]	; (800b97c <UTIL_SEQ_Run+0x1b4>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4013      	ands	r3, r2
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d0f0      	beq.n	800b7f0 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800b80e:	4a5d      	ldr	r2, [pc, #372]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b816:	4b5c      	ldr	r3, [pc, #368]	; (800b988 <UTIL_SEQ_Run+0x1c0>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	401a      	ands	r2, r3
 800b81c:	4b57      	ldr	r3, [pc, #348]	; (800b97c <UTIL_SEQ_Run+0x1b4>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4013      	ands	r3, r2
 800b822:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b824:	4a57      	ldr	r2, [pc, #348]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	4413      	add	r3, r2
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	6a3b      	ldr	r3, [r7, #32]
 800b830:	4013      	ands	r3, r2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d106      	bne.n	800b844 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b836:	4a53      	ldr	r2, [pc, #332]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	00db      	lsls	r3, r3, #3
 800b83c:	4413      	add	r3, r2
 800b83e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b842:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b844:	4a4f      	ldr	r2, [pc, #316]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	00db      	lsls	r3, r3, #3
 800b84a:	4413      	add	r3, r2
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	6a3b      	ldr	r3, [r7, #32]
 800b850:	4013      	ands	r3, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f000 f9ac 	bl	800bbb0 <SEQ_BitPosition>
 800b858:	4603      	mov	r3, r0
 800b85a:	461a      	mov	r2, r3
 800b85c:	4b4b      	ldr	r3, [pc, #300]	; (800b98c <UTIL_SEQ_Run+0x1c4>)
 800b85e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b860:	4a48      	ldr	r2, [pc, #288]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	4413      	add	r3, r2
 800b868:	685a      	ldr	r2, [r3, #4]
 800b86a:	4b48      	ldr	r3, [pc, #288]	; (800b98c <UTIL_SEQ_Run+0x1c4>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2101      	movs	r1, #1
 800b870:	fa01 f303 	lsl.w	r3, r1, r3
 800b874:	43db      	mvns	r3, r3
 800b876:	401a      	ands	r2, r3
 800b878:	4942      	ldr	r1, [pc, #264]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	440b      	add	r3, r1
 800b880:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b882:	f3ef 8310 	mrs	r3, PRIMASK
 800b886:	617b      	str	r3, [r7, #20]
  return(result);
 800b888:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b88a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b88c:	b672      	cpsid	i
}
 800b88e:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b890:	4b3e      	ldr	r3, [pc, #248]	; (800b98c <UTIL_SEQ_Run+0x1c4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2201      	movs	r2, #1
 800b896:	fa02 f303 	lsl.w	r3, r2, r3
 800b89a:	43da      	mvns	r2, r3
 800b89c:	4b38      	ldr	r3, [pc, #224]	; (800b980 <UTIL_SEQ_Run+0x1b8>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	4a37      	ldr	r2, [pc, #220]	; (800b980 <UTIL_SEQ_Run+0x1b8>)
 800b8a4:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8aa:	e013      	b.n	800b8d4 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	4a34      	ldr	r2, [pc, #208]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b8b2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b8b6:	4b35      	ldr	r3, [pc, #212]	; (800b98c <UTIL_SEQ_Run+0x1c4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c0:	43da      	mvns	r2, r3
 800b8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	400a      	ands	r2, r1
 800b8c8:	492e      	ldr	r1, [pc, #184]	; (800b984 <UTIL_SEQ_Run+0x1bc>)
 800b8ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e8      	bne.n	800b8ac <UTIL_SEQ_Run+0xe4>
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f383 8810 	msr	PRIMASK, r3
}
 800b8e4:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b8e6:	4b29      	ldr	r3, [pc, #164]	; (800b98c <UTIL_SEQ_Run+0x1c4>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a29      	ldr	r2, [pc, #164]	; (800b990 <UTIL_SEQ_Run+0x1c8>)
 800b8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8f0:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800b8f2:	4b23      	ldr	r3, [pc, #140]	; (800b980 <UTIL_SEQ_Run+0x1b8>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b8f8:	4b23      	ldr	r3, [pc, #140]	; (800b988 <UTIL_SEQ_Run+0x1c0>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	401a      	ands	r2, r3
 800b900:	4b1e      	ldr	r3, [pc, #120]	; (800b97c <UTIL_SEQ_Run+0x1b4>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4013      	ands	r3, r2
 800b906:	2b00      	cmp	r3, #0
 800b908:	d007      	beq.n	800b91a <UTIL_SEQ_Run+0x152>
 800b90a:	4b22      	ldr	r3, [pc, #136]	; (800b994 <UTIL_SEQ_Run+0x1cc>)
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	4b22      	ldr	r3, [pc, #136]	; (800b998 <UTIL_SEQ_Run+0x1d0>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4013      	ands	r3, r2
 800b914:	2b00      	cmp	r3, #0
 800b916:	f43f af68 	beq.w	800b7ea <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b91a:	4b1c      	ldr	r3, [pc, #112]	; (800b98c <UTIL_SEQ_Run+0x1c4>)
 800b91c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b920:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b922:	f000 f937 	bl	800bb94 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b926:	f3ef 8310 	mrs	r3, PRIMASK
 800b92a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b92c:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b92e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b930:	b672      	cpsid	i
}
 800b932:	bf00      	nop
  local_taskset = TaskSet;
 800b934:	4b12      	ldr	r3, [pc, #72]	; (800b980 <UTIL_SEQ_Run+0x1b8>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800b93a:	4b13      	ldr	r3, [pc, #76]	; (800b988 <UTIL_SEQ_Run+0x1c0>)
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	401a      	ands	r2, r3
 800b942:	4b0e      	ldr	r3, [pc, #56]	; (800b97c <UTIL_SEQ_Run+0x1b4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4013      	ands	r3, r2
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d108      	bne.n	800b95e <UTIL_SEQ_Run+0x196>
 800b94c:	4b11      	ldr	r3, [pc, #68]	; (800b994 <UTIL_SEQ_Run+0x1cc>)
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	4b11      	ldr	r3, [pc, #68]	; (800b998 <UTIL_SEQ_Run+0x1d0>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4013      	ands	r3, r2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800b95a:	f7f4 ff9f 	bl	800089c <UTIL_SEQ_Idle>
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	f383 8810 	msr	PRIMASK, r3
}
 800b968:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800b96a:	f000 f91a 	bl	800bba2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b96e:	4a03      	ldr	r2, [pc, #12]	; (800b97c <UTIL_SEQ_Run+0x1b4>)
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	6013      	str	r3, [r2, #0]

  return;
 800b974:	bf00      	nop
}
 800b976:	3730      	adds	r7, #48	; 0x30
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	2000004c 	.word	0x2000004c
 800b980:	200017d0 	.word	0x200017d0
 800b984:	20001860 	.word	0x20001860
 800b988:	20000048 	.word	0x20000048
 800b98c:	200017dc 	.word	0x200017dc
 800b990:	200017e0 	.word	0x200017e0
 800b994:	200017d4 	.word	0x200017d4
 800b998:	200017d8 	.word	0x200017d8

0800b99c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ac:	617b      	str	r3, [r7, #20]
  return(result);
 800b9ae:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b9b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9b2:	b672      	cpsid	i
}
 800b9b4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 f8fa 	bl	800bbb0 <SEQ_BitPosition>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	4619      	mov	r1, r3
 800b9c0:	4a06      	ldr	r2, [pc, #24]	; (800b9dc <UTIL_SEQ_RegTask+0x40>)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	f383 8810 	msr	PRIMASK, r3
}
 800b9d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b9d4:	bf00      	nop
}
 800b9d6:	3720      	adds	r7, #32
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	200017e0 	.word	0x200017e0

0800b9e0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b9f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9f4:	b672      	cpsid	i
}
 800b9f6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ba30 <UTIL_SEQ_SetTask+0x50>)
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	4a0b      	ldr	r2, [pc, #44]	; (800ba30 <UTIL_SEQ_SetTask+0x50>)
 800ba02:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ba04:	4a0b      	ldr	r2, [pc, #44]	; (800ba34 <UTIL_SEQ_SetTask+0x54>)
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	431a      	orrs	r2, r3
 800ba10:	4908      	ldr	r1, [pc, #32]	; (800ba34 <UTIL_SEQ_SetTask+0x54>)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f383 8810 	msr	PRIMASK, r3
}
 800ba22:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ba24:	bf00      	nop
}
 800ba26:	371c      	adds	r7, #28
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr
 800ba30:	200017d0 	.word	0x200017d0
 800ba34:	20001860 	.word	0x20001860

0800ba38 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba40:	f3ef 8310 	mrs	r3, PRIMASK
 800ba44:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba46:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ba48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba4a:	b672      	cpsid	i
}
 800ba4c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	43da      	mvns	r2, r3
 800ba52:	4b08      	ldr	r3, [pc, #32]	; (800ba74 <UTIL_SEQ_PauseTask+0x3c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4013      	ands	r3, r2
 800ba58:	4a06      	ldr	r2, [pc, #24]	; (800ba74 <UTIL_SEQ_PauseTask+0x3c>)
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f383 8810 	msr	PRIMASK, r3
}
 800ba66:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ba68:	bf00      	nop
}
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	20000048 	.word	0x20000048

0800ba78 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba80:	f3ef 8310 	mrs	r3, PRIMASK
 800ba84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba86:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ba88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba8a:	b672      	cpsid	i
}
 800ba8c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ba8e:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <UTIL_SEQ_ResumeTask+0x3c>)
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	4a07      	ldr	r2, [pc, #28]	; (800bab4 <UTIL_SEQ_ResumeTask+0x3c>)
 800ba98:	6013      	str	r3, [r2, #0]
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f383 8810 	msr	PRIMASK, r3
}
 800baa4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800baa6:	bf00      	nop
}
 800baa8:	371c      	adds	r7, #28
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	20000048 	.word	0x20000048

0800bab8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bac0:	f3ef 8310 	mrs	r3, PRIMASK
 800bac4:	60fb      	str	r3, [r7, #12]
  return(result);
 800bac6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800baca:	b672      	cpsid	i
}
 800bacc:	bf00      	nop

  EvtSet |= EvtId_bm;
 800bace:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <UTIL_SEQ_SetEvt+0x3c>)
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	4a07      	ldr	r2, [pc, #28]	; (800baf4 <UTIL_SEQ_SetEvt+0x3c>)
 800bad8:	6013      	str	r3, [r2, #0]
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f383 8810 	msr	PRIMASK, r3
}
 800bae4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bae6:	bf00      	nop
}
 800bae8:	371c      	adds	r7, #28
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	200017d4 	.word	0x200017d4

0800baf8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800bb00:	4b21      	ldr	r3, [pc, #132]	; (800bb88 <UTIL_SEQ_WaitEvt+0x90>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800bb06:	4b20      	ldr	r3, [pc, #128]	; (800bb88 <UTIL_SEQ_WaitEvt+0x90>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb0e:	d102      	bne.n	800bb16 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	61fb      	str	r3, [r7, #28]
 800bb14:	e005      	b.n	800bb22 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800bb16:	4b1c      	ldr	r3, [pc, #112]	; (800bb88 <UTIL_SEQ_WaitEvt+0x90>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb20:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800bb22:	4b1a      	ldr	r3, [pc, #104]	; (800bb8c <UTIL_SEQ_WaitEvt+0x94>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800bb28:	4a18      	ldr	r2, [pc, #96]	; (800bb8c <UTIL_SEQ_WaitEvt+0x94>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800bb2e:	e005      	b.n	800bb3c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800bb30:	4b16      	ldr	r3, [pc, #88]	; (800bb8c <UTIL_SEQ_WaitEvt+0x94>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4619      	mov	r1, r3
 800bb36:	69f8      	ldr	r0, [r7, #28]
 800bb38:	f7f4 feb8 	bl	80008ac <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800bb3c:	4b14      	ldr	r3, [pc, #80]	; (800bb90 <UTIL_SEQ_WaitEvt+0x98>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	4b12      	ldr	r3, [pc, #72]	; (800bb8c <UTIL_SEQ_WaitEvt+0x94>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4013      	ands	r3, r2
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0f2      	beq.n	800bb30 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800bb4a:	4a0f      	ldr	r2, [pc, #60]	; (800bb88 <UTIL_SEQ_WaitEvt+0x90>)
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb50:	f3ef 8310 	mrs	r3, PRIMASK
 800bb54:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb56:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bb58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb5a:	b672      	cpsid	i
}
 800bb5c:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800bb5e:	4b0b      	ldr	r3, [pc, #44]	; (800bb8c <UTIL_SEQ_WaitEvt+0x94>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	43da      	mvns	r2, r3
 800bb64:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <UTIL_SEQ_WaitEvt+0x98>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	4a09      	ldr	r2, [pc, #36]	; (800bb90 <UTIL_SEQ_WaitEvt+0x98>)
 800bb6c:	6013      	str	r3, [r2, #0]
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f383 8810 	msr	PRIMASK, r3
}
 800bb78:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800bb7a:	4a04      	ldr	r2, [pc, #16]	; (800bb8c <UTIL_SEQ_WaitEvt+0x94>)
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	6013      	str	r3, [r2, #0]

  return;
 800bb80:	bf00      	nop
}
 800bb82:	3720      	adds	r7, #32
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	200017dc 	.word	0x200017dc
 800bb8c:	200017d8 	.word	0x200017d8
 800bb90:	200017d4 	.word	0x200017d4

0800bb94 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800bb94:	b480      	push	{r7}
 800bb96:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bb98:	bf00      	nop
}
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800bba2:	b480      	push	{r7}
 800bba4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bba6:	bf00      	nop
}
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	0c1b      	lsrs	r3, r3, #16
 800bbc0:	041b      	lsls	r3, r3, #16
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d104      	bne.n	800bbd0 <SEQ_BitPosition+0x20>
 800bbc6:	2310      	movs	r3, #16
 800bbc8:	73fb      	strb	r3, [r7, #15]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	041b      	lsls	r3, r3, #16
 800bbce:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d105      	bne.n	800bbe6 <SEQ_BitPosition+0x36>
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	3308      	adds	r3, #8
 800bbde:	73fb      	strb	r3, [r7, #15]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	021b      	lsls	r3, r3, #8
 800bbe4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d105      	bne.n	800bbfc <SEQ_BitPosition+0x4c>
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	73fb      	strb	r3, [r7, #15]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	011b      	lsls	r3, r3, #4
 800bbfa:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	0f1b      	lsrs	r3, r3, #28
 800bc00:	4a07      	ldr	r2, [pc, #28]	; (800bc20 <SEQ_BitPosition+0x70>)
 800bc02:	5cd2      	ldrb	r2, [r2, r3]
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
 800bc06:	4413      	add	r3, r2
 800bc08:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
 800bc0c:	f1c3 031f 	rsb	r3, r3, #31
 800bc10:	b2db      	uxtb	r3, r3
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	0800dd58 	.word	0x0800dd58

0800bc24 <__errno>:
 800bc24:	4b01      	ldr	r3, [pc, #4]	; (800bc2c <__errno+0x8>)
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	20000050 	.word	0x20000050

0800bc30 <__libc_init_array>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	4d0d      	ldr	r5, [pc, #52]	; (800bc68 <__libc_init_array+0x38>)
 800bc34:	4c0d      	ldr	r4, [pc, #52]	; (800bc6c <__libc_init_array+0x3c>)
 800bc36:	1b64      	subs	r4, r4, r5
 800bc38:	10a4      	asrs	r4, r4, #2
 800bc3a:	2600      	movs	r6, #0
 800bc3c:	42a6      	cmp	r6, r4
 800bc3e:	d109      	bne.n	800bc54 <__libc_init_array+0x24>
 800bc40:	4d0b      	ldr	r5, [pc, #44]	; (800bc70 <__libc_init_array+0x40>)
 800bc42:	4c0c      	ldr	r4, [pc, #48]	; (800bc74 <__libc_init_array+0x44>)
 800bc44:	f001 fa0c 	bl	800d060 <_init>
 800bc48:	1b64      	subs	r4, r4, r5
 800bc4a:	10a4      	asrs	r4, r4, #2
 800bc4c:	2600      	movs	r6, #0
 800bc4e:	42a6      	cmp	r6, r4
 800bc50:	d105      	bne.n	800bc5e <__libc_init_array+0x2e>
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
 800bc54:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc58:	4798      	blx	r3
 800bc5a:	3601      	adds	r6, #1
 800bc5c:	e7ee      	b.n	800bc3c <__libc_init_array+0xc>
 800bc5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc62:	4798      	blx	r3
 800bc64:	3601      	adds	r6, #1
 800bc66:	e7f2      	b.n	800bc4e <__libc_init_array+0x1e>
 800bc68:	0800de08 	.word	0x0800de08
 800bc6c:	0800de08 	.word	0x0800de08
 800bc70:	0800de08 	.word	0x0800de08
 800bc74:	0800de0c 	.word	0x0800de0c

0800bc78 <memcpy>:
 800bc78:	440a      	add	r2, r1
 800bc7a:	4291      	cmp	r1, r2
 800bc7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bc80:	d100      	bne.n	800bc84 <memcpy+0xc>
 800bc82:	4770      	bx	lr
 800bc84:	b510      	push	{r4, lr}
 800bc86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc8e:	4291      	cmp	r1, r2
 800bc90:	d1f9      	bne.n	800bc86 <memcpy+0xe>
 800bc92:	bd10      	pop	{r4, pc}

0800bc94 <memset>:
 800bc94:	4402      	add	r2, r0
 800bc96:	4603      	mov	r3, r0
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d100      	bne.n	800bc9e <memset+0xa>
 800bc9c:	4770      	bx	lr
 800bc9e:	f803 1b01 	strb.w	r1, [r3], #1
 800bca2:	e7f9      	b.n	800bc98 <memset+0x4>

0800bca4 <iprintf>:
 800bca4:	b40f      	push	{r0, r1, r2, r3}
 800bca6:	4b0a      	ldr	r3, [pc, #40]	; (800bcd0 <iprintf+0x2c>)
 800bca8:	b513      	push	{r0, r1, r4, lr}
 800bcaa:	681c      	ldr	r4, [r3, #0]
 800bcac:	b124      	cbz	r4, 800bcb8 <iprintf+0x14>
 800bcae:	69a3      	ldr	r3, [r4, #24]
 800bcb0:	b913      	cbnz	r3, 800bcb8 <iprintf+0x14>
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 facc 	bl	800c250 <__sinit>
 800bcb8:	ab05      	add	r3, sp, #20
 800bcba:	9a04      	ldr	r2, [sp, #16]
 800bcbc:	68a1      	ldr	r1, [r4, #8]
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 fdf9 	bl	800c8b8 <_vfiprintf_r>
 800bcc6:	b002      	add	sp, #8
 800bcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bccc:	b004      	add	sp, #16
 800bcce:	4770      	bx	lr
 800bcd0:	20000050 	.word	0x20000050

0800bcd4 <_puts_r>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	460e      	mov	r6, r1
 800bcd8:	4605      	mov	r5, r0
 800bcda:	b118      	cbz	r0, 800bce4 <_puts_r+0x10>
 800bcdc:	6983      	ldr	r3, [r0, #24]
 800bcde:	b90b      	cbnz	r3, 800bce4 <_puts_r+0x10>
 800bce0:	f000 fab6 	bl	800c250 <__sinit>
 800bce4:	69ab      	ldr	r3, [r5, #24]
 800bce6:	68ac      	ldr	r4, [r5, #8]
 800bce8:	b913      	cbnz	r3, 800bcf0 <_puts_r+0x1c>
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 fab0 	bl	800c250 <__sinit>
 800bcf0:	4b2c      	ldr	r3, [pc, #176]	; (800bda4 <_puts_r+0xd0>)
 800bcf2:	429c      	cmp	r4, r3
 800bcf4:	d120      	bne.n	800bd38 <_puts_r+0x64>
 800bcf6:	686c      	ldr	r4, [r5, #4]
 800bcf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcfa:	07db      	lsls	r3, r3, #31
 800bcfc:	d405      	bmi.n	800bd0a <_puts_r+0x36>
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	0598      	lsls	r0, r3, #22
 800bd02:	d402      	bmi.n	800bd0a <_puts_r+0x36>
 800bd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd06:	f000 fb41 	bl	800c38c <__retarget_lock_acquire_recursive>
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	0719      	lsls	r1, r3, #28
 800bd0e:	d51d      	bpl.n	800bd4c <_puts_r+0x78>
 800bd10:	6923      	ldr	r3, [r4, #16]
 800bd12:	b1db      	cbz	r3, 800bd4c <_puts_r+0x78>
 800bd14:	3e01      	subs	r6, #1
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	60a3      	str	r3, [r4, #8]
 800bd20:	bb39      	cbnz	r1, 800bd72 <_puts_r+0x9e>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	da38      	bge.n	800bd98 <_puts_r+0xc4>
 800bd26:	4622      	mov	r2, r4
 800bd28:	210a      	movs	r1, #10
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	f000 f8b6 	bl	800be9c <__swbuf_r>
 800bd30:	3001      	adds	r0, #1
 800bd32:	d011      	beq.n	800bd58 <_puts_r+0x84>
 800bd34:	250a      	movs	r5, #10
 800bd36:	e011      	b.n	800bd5c <_puts_r+0x88>
 800bd38:	4b1b      	ldr	r3, [pc, #108]	; (800bda8 <_puts_r+0xd4>)
 800bd3a:	429c      	cmp	r4, r3
 800bd3c:	d101      	bne.n	800bd42 <_puts_r+0x6e>
 800bd3e:	68ac      	ldr	r4, [r5, #8]
 800bd40:	e7da      	b.n	800bcf8 <_puts_r+0x24>
 800bd42:	4b1a      	ldr	r3, [pc, #104]	; (800bdac <_puts_r+0xd8>)
 800bd44:	429c      	cmp	r4, r3
 800bd46:	bf08      	it	eq
 800bd48:	68ec      	ldreq	r4, [r5, #12]
 800bd4a:	e7d5      	b.n	800bcf8 <_puts_r+0x24>
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f000 f8f6 	bl	800bf40 <__swsetup_r>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d0dd      	beq.n	800bd14 <_puts_r+0x40>
 800bd58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bd5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd5e:	07da      	lsls	r2, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_puts_r+0x9a>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	059b      	lsls	r3, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_puts_r+0x9a>
 800bd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd6a:	f000 fb10 	bl	800c38e <__retarget_lock_release_recursive>
 800bd6e:	4628      	mov	r0, r5
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	da04      	bge.n	800bd80 <_puts_r+0xac>
 800bd76:	69a2      	ldr	r2, [r4, #24]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	dc06      	bgt.n	800bd8a <_puts_r+0xb6>
 800bd7c:	290a      	cmp	r1, #10
 800bd7e:	d004      	beq.n	800bd8a <_puts_r+0xb6>
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	6022      	str	r2, [r4, #0]
 800bd86:	7019      	strb	r1, [r3, #0]
 800bd88:	e7c5      	b.n	800bd16 <_puts_r+0x42>
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f000 f885 	bl	800be9c <__swbuf_r>
 800bd92:	3001      	adds	r0, #1
 800bd94:	d1bf      	bne.n	800bd16 <_puts_r+0x42>
 800bd96:	e7df      	b.n	800bd58 <_puts_r+0x84>
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	250a      	movs	r5, #10
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	6022      	str	r2, [r4, #0]
 800bda0:	701d      	strb	r5, [r3, #0]
 800bda2:	e7db      	b.n	800bd5c <_puts_r+0x88>
 800bda4:	0800dd8c 	.word	0x0800dd8c
 800bda8:	0800ddac 	.word	0x0800ddac
 800bdac:	0800dd6c 	.word	0x0800dd6c

0800bdb0 <puts>:
 800bdb0:	4b02      	ldr	r3, [pc, #8]	; (800bdbc <puts+0xc>)
 800bdb2:	4601      	mov	r1, r0
 800bdb4:	6818      	ldr	r0, [r3, #0]
 800bdb6:	f7ff bf8d 	b.w	800bcd4 <_puts_r>
 800bdba:	bf00      	nop
 800bdbc:	20000050 	.word	0x20000050

0800bdc0 <sniprintf>:
 800bdc0:	b40c      	push	{r2, r3}
 800bdc2:	b530      	push	{r4, r5, lr}
 800bdc4:	4b17      	ldr	r3, [pc, #92]	; (800be24 <sniprintf+0x64>)
 800bdc6:	1e0c      	subs	r4, r1, #0
 800bdc8:	681d      	ldr	r5, [r3, #0]
 800bdca:	b09d      	sub	sp, #116	; 0x74
 800bdcc:	da08      	bge.n	800bde0 <sniprintf+0x20>
 800bdce:	238b      	movs	r3, #139	; 0x8b
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdd6:	b01d      	add	sp, #116	; 0x74
 800bdd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bddc:	b002      	add	sp, #8
 800bdde:	4770      	bx	lr
 800bde0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bde4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bde8:	bf14      	ite	ne
 800bdea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bdee:	4623      	moveq	r3, r4
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	9307      	str	r3, [sp, #28]
 800bdf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdf8:	9002      	str	r0, [sp, #8]
 800bdfa:	9006      	str	r0, [sp, #24]
 800bdfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be02:	ab21      	add	r3, sp, #132	; 0x84
 800be04:	a902      	add	r1, sp, #8
 800be06:	4628      	mov	r0, r5
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	f000 fc2b 	bl	800c664 <_svfiprintf_r>
 800be0e:	1c43      	adds	r3, r0, #1
 800be10:	bfbc      	itt	lt
 800be12:	238b      	movlt	r3, #139	; 0x8b
 800be14:	602b      	strlt	r3, [r5, #0]
 800be16:	2c00      	cmp	r4, #0
 800be18:	d0dd      	beq.n	800bdd6 <sniprintf+0x16>
 800be1a:	9b02      	ldr	r3, [sp, #8]
 800be1c:	2200      	movs	r2, #0
 800be1e:	701a      	strb	r2, [r3, #0]
 800be20:	e7d9      	b.n	800bdd6 <sniprintf+0x16>
 800be22:	bf00      	nop
 800be24:	20000050 	.word	0x20000050

0800be28 <_vsniprintf_r>:
 800be28:	b530      	push	{r4, r5, lr}
 800be2a:	1e14      	subs	r4, r2, #0
 800be2c:	4605      	mov	r5, r0
 800be2e:	b09b      	sub	sp, #108	; 0x6c
 800be30:	4618      	mov	r0, r3
 800be32:	da05      	bge.n	800be40 <_vsniprintf_r+0x18>
 800be34:	238b      	movs	r3, #139	; 0x8b
 800be36:	602b      	str	r3, [r5, #0]
 800be38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be3c:	b01b      	add	sp, #108	; 0x6c
 800be3e:	bd30      	pop	{r4, r5, pc}
 800be40:	f44f 7302 	mov.w	r3, #520	; 0x208
 800be44:	f8ad 300c 	strh.w	r3, [sp, #12]
 800be48:	bf14      	ite	ne
 800be4a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800be4e:	4623      	moveq	r3, r4
 800be50:	9302      	str	r3, [sp, #8]
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be58:	9100      	str	r1, [sp, #0]
 800be5a:	9104      	str	r1, [sp, #16]
 800be5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800be60:	4602      	mov	r2, r0
 800be62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800be64:	4669      	mov	r1, sp
 800be66:	4628      	mov	r0, r5
 800be68:	f000 fbfc 	bl	800c664 <_svfiprintf_r>
 800be6c:	1c43      	adds	r3, r0, #1
 800be6e:	bfbc      	itt	lt
 800be70:	238b      	movlt	r3, #139	; 0x8b
 800be72:	602b      	strlt	r3, [r5, #0]
 800be74:	2c00      	cmp	r4, #0
 800be76:	d0e1      	beq.n	800be3c <_vsniprintf_r+0x14>
 800be78:	9b00      	ldr	r3, [sp, #0]
 800be7a:	2200      	movs	r2, #0
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	e7dd      	b.n	800be3c <_vsniprintf_r+0x14>

0800be80 <vsniprintf>:
 800be80:	b507      	push	{r0, r1, r2, lr}
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	4613      	mov	r3, r2
 800be86:	460a      	mov	r2, r1
 800be88:	4601      	mov	r1, r0
 800be8a:	4803      	ldr	r0, [pc, #12]	; (800be98 <vsniprintf+0x18>)
 800be8c:	6800      	ldr	r0, [r0, #0]
 800be8e:	f7ff ffcb 	bl	800be28 <_vsniprintf_r>
 800be92:	b003      	add	sp, #12
 800be94:	f85d fb04 	ldr.w	pc, [sp], #4
 800be98:	20000050 	.word	0x20000050

0800be9c <__swbuf_r>:
 800be9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9e:	460e      	mov	r6, r1
 800bea0:	4614      	mov	r4, r2
 800bea2:	4605      	mov	r5, r0
 800bea4:	b118      	cbz	r0, 800beae <__swbuf_r+0x12>
 800bea6:	6983      	ldr	r3, [r0, #24]
 800bea8:	b90b      	cbnz	r3, 800beae <__swbuf_r+0x12>
 800beaa:	f000 f9d1 	bl	800c250 <__sinit>
 800beae:	4b21      	ldr	r3, [pc, #132]	; (800bf34 <__swbuf_r+0x98>)
 800beb0:	429c      	cmp	r4, r3
 800beb2:	d12b      	bne.n	800bf0c <__swbuf_r+0x70>
 800beb4:	686c      	ldr	r4, [r5, #4]
 800beb6:	69a3      	ldr	r3, [r4, #24]
 800beb8:	60a3      	str	r3, [r4, #8]
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	071a      	lsls	r2, r3, #28
 800bebe:	d52f      	bpl.n	800bf20 <__swbuf_r+0x84>
 800bec0:	6923      	ldr	r3, [r4, #16]
 800bec2:	b36b      	cbz	r3, 800bf20 <__swbuf_r+0x84>
 800bec4:	6923      	ldr	r3, [r4, #16]
 800bec6:	6820      	ldr	r0, [r4, #0]
 800bec8:	1ac0      	subs	r0, r0, r3
 800beca:	6963      	ldr	r3, [r4, #20]
 800becc:	b2f6      	uxtb	r6, r6
 800bece:	4283      	cmp	r3, r0
 800bed0:	4637      	mov	r7, r6
 800bed2:	dc04      	bgt.n	800bede <__swbuf_r+0x42>
 800bed4:	4621      	mov	r1, r4
 800bed6:	4628      	mov	r0, r5
 800bed8:	f000 f926 	bl	800c128 <_fflush_r>
 800bedc:	bb30      	cbnz	r0, 800bf2c <__swbuf_r+0x90>
 800bede:	68a3      	ldr	r3, [r4, #8]
 800bee0:	3b01      	subs	r3, #1
 800bee2:	60a3      	str	r3, [r4, #8]
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	6022      	str	r2, [r4, #0]
 800beea:	701e      	strb	r6, [r3, #0]
 800beec:	6963      	ldr	r3, [r4, #20]
 800beee:	3001      	adds	r0, #1
 800bef0:	4283      	cmp	r3, r0
 800bef2:	d004      	beq.n	800befe <__swbuf_r+0x62>
 800bef4:	89a3      	ldrh	r3, [r4, #12]
 800bef6:	07db      	lsls	r3, r3, #31
 800bef8:	d506      	bpl.n	800bf08 <__swbuf_r+0x6c>
 800befa:	2e0a      	cmp	r6, #10
 800befc:	d104      	bne.n	800bf08 <__swbuf_r+0x6c>
 800befe:	4621      	mov	r1, r4
 800bf00:	4628      	mov	r0, r5
 800bf02:	f000 f911 	bl	800c128 <_fflush_r>
 800bf06:	b988      	cbnz	r0, 800bf2c <__swbuf_r+0x90>
 800bf08:	4638      	mov	r0, r7
 800bf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <__swbuf_r+0x9c>)
 800bf0e:	429c      	cmp	r4, r3
 800bf10:	d101      	bne.n	800bf16 <__swbuf_r+0x7a>
 800bf12:	68ac      	ldr	r4, [r5, #8]
 800bf14:	e7cf      	b.n	800beb6 <__swbuf_r+0x1a>
 800bf16:	4b09      	ldr	r3, [pc, #36]	; (800bf3c <__swbuf_r+0xa0>)
 800bf18:	429c      	cmp	r4, r3
 800bf1a:	bf08      	it	eq
 800bf1c:	68ec      	ldreq	r4, [r5, #12]
 800bf1e:	e7ca      	b.n	800beb6 <__swbuf_r+0x1a>
 800bf20:	4621      	mov	r1, r4
 800bf22:	4628      	mov	r0, r5
 800bf24:	f000 f80c 	bl	800bf40 <__swsetup_r>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d0cb      	beq.n	800bec4 <__swbuf_r+0x28>
 800bf2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bf30:	e7ea      	b.n	800bf08 <__swbuf_r+0x6c>
 800bf32:	bf00      	nop
 800bf34:	0800dd8c 	.word	0x0800dd8c
 800bf38:	0800ddac 	.word	0x0800ddac
 800bf3c:	0800dd6c 	.word	0x0800dd6c

0800bf40 <__swsetup_r>:
 800bf40:	4b32      	ldr	r3, [pc, #200]	; (800c00c <__swsetup_r+0xcc>)
 800bf42:	b570      	push	{r4, r5, r6, lr}
 800bf44:	681d      	ldr	r5, [r3, #0]
 800bf46:	4606      	mov	r6, r0
 800bf48:	460c      	mov	r4, r1
 800bf4a:	b125      	cbz	r5, 800bf56 <__swsetup_r+0x16>
 800bf4c:	69ab      	ldr	r3, [r5, #24]
 800bf4e:	b913      	cbnz	r3, 800bf56 <__swsetup_r+0x16>
 800bf50:	4628      	mov	r0, r5
 800bf52:	f000 f97d 	bl	800c250 <__sinit>
 800bf56:	4b2e      	ldr	r3, [pc, #184]	; (800c010 <__swsetup_r+0xd0>)
 800bf58:	429c      	cmp	r4, r3
 800bf5a:	d10f      	bne.n	800bf7c <__swsetup_r+0x3c>
 800bf5c:	686c      	ldr	r4, [r5, #4]
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf64:	0719      	lsls	r1, r3, #28
 800bf66:	d42c      	bmi.n	800bfc2 <__swsetup_r+0x82>
 800bf68:	06dd      	lsls	r5, r3, #27
 800bf6a:	d411      	bmi.n	800bf90 <__swsetup_r+0x50>
 800bf6c:	2309      	movs	r3, #9
 800bf6e:	6033      	str	r3, [r6, #0]
 800bf70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf74:	81a3      	strh	r3, [r4, #12]
 800bf76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf7a:	e03e      	b.n	800bffa <__swsetup_r+0xba>
 800bf7c:	4b25      	ldr	r3, [pc, #148]	; (800c014 <__swsetup_r+0xd4>)
 800bf7e:	429c      	cmp	r4, r3
 800bf80:	d101      	bne.n	800bf86 <__swsetup_r+0x46>
 800bf82:	68ac      	ldr	r4, [r5, #8]
 800bf84:	e7eb      	b.n	800bf5e <__swsetup_r+0x1e>
 800bf86:	4b24      	ldr	r3, [pc, #144]	; (800c018 <__swsetup_r+0xd8>)
 800bf88:	429c      	cmp	r4, r3
 800bf8a:	bf08      	it	eq
 800bf8c:	68ec      	ldreq	r4, [r5, #12]
 800bf8e:	e7e6      	b.n	800bf5e <__swsetup_r+0x1e>
 800bf90:	0758      	lsls	r0, r3, #29
 800bf92:	d512      	bpl.n	800bfba <__swsetup_r+0x7a>
 800bf94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf96:	b141      	cbz	r1, 800bfaa <__swsetup_r+0x6a>
 800bf98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf9c:	4299      	cmp	r1, r3
 800bf9e:	d002      	beq.n	800bfa6 <__swsetup_r+0x66>
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f000 fa59 	bl	800c458 <_free_r>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	6363      	str	r3, [r4, #52]	; 0x34
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfb0:	81a3      	strh	r3, [r4, #12]
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	6063      	str	r3, [r4, #4]
 800bfb6:	6923      	ldr	r3, [r4, #16]
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	89a3      	ldrh	r3, [r4, #12]
 800bfbc:	f043 0308 	orr.w	r3, r3, #8
 800bfc0:	81a3      	strh	r3, [r4, #12]
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	b94b      	cbnz	r3, 800bfda <__swsetup_r+0x9a>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfd0:	d003      	beq.n	800bfda <__swsetup_r+0x9a>
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f000 f9ff 	bl	800c3d8 <__smakebuf_r>
 800bfda:	89a0      	ldrh	r0, [r4, #12]
 800bfdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfe0:	f010 0301 	ands.w	r3, r0, #1
 800bfe4:	d00a      	beq.n	800bffc <__swsetup_r+0xbc>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	60a3      	str	r3, [r4, #8]
 800bfea:	6963      	ldr	r3, [r4, #20]
 800bfec:	425b      	negs	r3, r3
 800bfee:	61a3      	str	r3, [r4, #24]
 800bff0:	6923      	ldr	r3, [r4, #16]
 800bff2:	b943      	cbnz	r3, 800c006 <__swsetup_r+0xc6>
 800bff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bff8:	d1ba      	bne.n	800bf70 <__swsetup_r+0x30>
 800bffa:	bd70      	pop	{r4, r5, r6, pc}
 800bffc:	0781      	lsls	r1, r0, #30
 800bffe:	bf58      	it	pl
 800c000:	6963      	ldrpl	r3, [r4, #20]
 800c002:	60a3      	str	r3, [r4, #8]
 800c004:	e7f4      	b.n	800bff0 <__swsetup_r+0xb0>
 800c006:	2000      	movs	r0, #0
 800c008:	e7f7      	b.n	800bffa <__swsetup_r+0xba>
 800c00a:	bf00      	nop
 800c00c:	20000050 	.word	0x20000050
 800c010:	0800dd8c 	.word	0x0800dd8c
 800c014:	0800ddac 	.word	0x0800ddac
 800c018:	0800dd6c 	.word	0x0800dd6c

0800c01c <__sflush_r>:
 800c01c:	898a      	ldrh	r2, [r1, #12]
 800c01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c022:	4605      	mov	r5, r0
 800c024:	0710      	lsls	r0, r2, #28
 800c026:	460c      	mov	r4, r1
 800c028:	d458      	bmi.n	800c0dc <__sflush_r+0xc0>
 800c02a:	684b      	ldr	r3, [r1, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dc05      	bgt.n	800c03c <__sflush_r+0x20>
 800c030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c032:	2b00      	cmp	r3, #0
 800c034:	dc02      	bgt.n	800c03c <__sflush_r+0x20>
 800c036:	2000      	movs	r0, #0
 800c038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c03c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c03e:	2e00      	cmp	r6, #0
 800c040:	d0f9      	beq.n	800c036 <__sflush_r+0x1a>
 800c042:	2300      	movs	r3, #0
 800c044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c048:	682f      	ldr	r7, [r5, #0]
 800c04a:	602b      	str	r3, [r5, #0]
 800c04c:	d032      	beq.n	800c0b4 <__sflush_r+0x98>
 800c04e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	075a      	lsls	r2, r3, #29
 800c054:	d505      	bpl.n	800c062 <__sflush_r+0x46>
 800c056:	6863      	ldr	r3, [r4, #4]
 800c058:	1ac0      	subs	r0, r0, r3
 800c05a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c05c:	b10b      	cbz	r3, 800c062 <__sflush_r+0x46>
 800c05e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c060:	1ac0      	subs	r0, r0, r3
 800c062:	2300      	movs	r3, #0
 800c064:	4602      	mov	r2, r0
 800c066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c068:	6a21      	ldr	r1, [r4, #32]
 800c06a:	4628      	mov	r0, r5
 800c06c:	47b0      	blx	r6
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	d106      	bne.n	800c082 <__sflush_r+0x66>
 800c074:	6829      	ldr	r1, [r5, #0]
 800c076:	291d      	cmp	r1, #29
 800c078:	d82c      	bhi.n	800c0d4 <__sflush_r+0xb8>
 800c07a:	4a2a      	ldr	r2, [pc, #168]	; (800c124 <__sflush_r+0x108>)
 800c07c:	40ca      	lsrs	r2, r1
 800c07e:	07d6      	lsls	r6, r2, #31
 800c080:	d528      	bpl.n	800c0d4 <__sflush_r+0xb8>
 800c082:	2200      	movs	r2, #0
 800c084:	6062      	str	r2, [r4, #4]
 800c086:	04d9      	lsls	r1, r3, #19
 800c088:	6922      	ldr	r2, [r4, #16]
 800c08a:	6022      	str	r2, [r4, #0]
 800c08c:	d504      	bpl.n	800c098 <__sflush_r+0x7c>
 800c08e:	1c42      	adds	r2, r0, #1
 800c090:	d101      	bne.n	800c096 <__sflush_r+0x7a>
 800c092:	682b      	ldr	r3, [r5, #0]
 800c094:	b903      	cbnz	r3, 800c098 <__sflush_r+0x7c>
 800c096:	6560      	str	r0, [r4, #84]	; 0x54
 800c098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c09a:	602f      	str	r7, [r5, #0]
 800c09c:	2900      	cmp	r1, #0
 800c09e:	d0ca      	beq.n	800c036 <__sflush_r+0x1a>
 800c0a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0a4:	4299      	cmp	r1, r3
 800c0a6:	d002      	beq.n	800c0ae <__sflush_r+0x92>
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f000 f9d5 	bl	800c458 <_free_r>
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c0b2:	e7c1      	b.n	800c038 <__sflush_r+0x1c>
 800c0b4:	6a21      	ldr	r1, [r4, #32]
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	47b0      	blx	r6
 800c0bc:	1c41      	adds	r1, r0, #1
 800c0be:	d1c7      	bne.n	800c050 <__sflush_r+0x34>
 800c0c0:	682b      	ldr	r3, [r5, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0c4      	beq.n	800c050 <__sflush_r+0x34>
 800c0c6:	2b1d      	cmp	r3, #29
 800c0c8:	d001      	beq.n	800c0ce <__sflush_r+0xb2>
 800c0ca:	2b16      	cmp	r3, #22
 800c0cc:	d101      	bne.n	800c0d2 <__sflush_r+0xb6>
 800c0ce:	602f      	str	r7, [r5, #0]
 800c0d0:	e7b1      	b.n	800c036 <__sflush_r+0x1a>
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0d8:	81a3      	strh	r3, [r4, #12]
 800c0da:	e7ad      	b.n	800c038 <__sflush_r+0x1c>
 800c0dc:	690f      	ldr	r7, [r1, #16]
 800c0de:	2f00      	cmp	r7, #0
 800c0e0:	d0a9      	beq.n	800c036 <__sflush_r+0x1a>
 800c0e2:	0793      	lsls	r3, r2, #30
 800c0e4:	680e      	ldr	r6, [r1, #0]
 800c0e6:	bf08      	it	eq
 800c0e8:	694b      	ldreq	r3, [r1, #20]
 800c0ea:	600f      	str	r7, [r1, #0]
 800c0ec:	bf18      	it	ne
 800c0ee:	2300      	movne	r3, #0
 800c0f0:	eba6 0807 	sub.w	r8, r6, r7
 800c0f4:	608b      	str	r3, [r1, #8]
 800c0f6:	f1b8 0f00 	cmp.w	r8, #0
 800c0fa:	dd9c      	ble.n	800c036 <__sflush_r+0x1a>
 800c0fc:	6a21      	ldr	r1, [r4, #32]
 800c0fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c100:	4643      	mov	r3, r8
 800c102:	463a      	mov	r2, r7
 800c104:	4628      	mov	r0, r5
 800c106:	47b0      	blx	r6
 800c108:	2800      	cmp	r0, #0
 800c10a:	dc06      	bgt.n	800c11a <__sflush_r+0xfe>
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c112:	81a3      	strh	r3, [r4, #12]
 800c114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c118:	e78e      	b.n	800c038 <__sflush_r+0x1c>
 800c11a:	4407      	add	r7, r0
 800c11c:	eba8 0800 	sub.w	r8, r8, r0
 800c120:	e7e9      	b.n	800c0f6 <__sflush_r+0xda>
 800c122:	bf00      	nop
 800c124:	20400001 	.word	0x20400001

0800c128 <_fflush_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	690b      	ldr	r3, [r1, #16]
 800c12c:	4605      	mov	r5, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	b913      	cbnz	r3, 800c138 <_fflush_r+0x10>
 800c132:	2500      	movs	r5, #0
 800c134:	4628      	mov	r0, r5
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	b118      	cbz	r0, 800c142 <_fflush_r+0x1a>
 800c13a:	6983      	ldr	r3, [r0, #24]
 800c13c:	b90b      	cbnz	r3, 800c142 <_fflush_r+0x1a>
 800c13e:	f000 f887 	bl	800c250 <__sinit>
 800c142:	4b14      	ldr	r3, [pc, #80]	; (800c194 <_fflush_r+0x6c>)
 800c144:	429c      	cmp	r4, r3
 800c146:	d11b      	bne.n	800c180 <_fflush_r+0x58>
 800c148:	686c      	ldr	r4, [r5, #4]
 800c14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d0ef      	beq.n	800c132 <_fflush_r+0xa>
 800c152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c154:	07d0      	lsls	r0, r2, #31
 800c156:	d404      	bmi.n	800c162 <_fflush_r+0x3a>
 800c158:	0599      	lsls	r1, r3, #22
 800c15a:	d402      	bmi.n	800c162 <_fflush_r+0x3a>
 800c15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c15e:	f000 f915 	bl	800c38c <__retarget_lock_acquire_recursive>
 800c162:	4628      	mov	r0, r5
 800c164:	4621      	mov	r1, r4
 800c166:	f7ff ff59 	bl	800c01c <__sflush_r>
 800c16a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c16c:	07da      	lsls	r2, r3, #31
 800c16e:	4605      	mov	r5, r0
 800c170:	d4e0      	bmi.n	800c134 <_fflush_r+0xc>
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	059b      	lsls	r3, r3, #22
 800c176:	d4dd      	bmi.n	800c134 <_fflush_r+0xc>
 800c178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c17a:	f000 f908 	bl	800c38e <__retarget_lock_release_recursive>
 800c17e:	e7d9      	b.n	800c134 <_fflush_r+0xc>
 800c180:	4b05      	ldr	r3, [pc, #20]	; (800c198 <_fflush_r+0x70>)
 800c182:	429c      	cmp	r4, r3
 800c184:	d101      	bne.n	800c18a <_fflush_r+0x62>
 800c186:	68ac      	ldr	r4, [r5, #8]
 800c188:	e7df      	b.n	800c14a <_fflush_r+0x22>
 800c18a:	4b04      	ldr	r3, [pc, #16]	; (800c19c <_fflush_r+0x74>)
 800c18c:	429c      	cmp	r4, r3
 800c18e:	bf08      	it	eq
 800c190:	68ec      	ldreq	r4, [r5, #12]
 800c192:	e7da      	b.n	800c14a <_fflush_r+0x22>
 800c194:	0800dd8c 	.word	0x0800dd8c
 800c198:	0800ddac 	.word	0x0800ddac
 800c19c:	0800dd6c 	.word	0x0800dd6c

0800c1a0 <std>:
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	b510      	push	{r4, lr}
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1ae:	6083      	str	r3, [r0, #8]
 800c1b0:	8181      	strh	r1, [r0, #12]
 800c1b2:	6643      	str	r3, [r0, #100]	; 0x64
 800c1b4:	81c2      	strh	r2, [r0, #14]
 800c1b6:	6183      	str	r3, [r0, #24]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	2208      	movs	r2, #8
 800c1bc:	305c      	adds	r0, #92	; 0x5c
 800c1be:	f7ff fd69 	bl	800bc94 <memset>
 800c1c2:	4b05      	ldr	r3, [pc, #20]	; (800c1d8 <std+0x38>)
 800c1c4:	6263      	str	r3, [r4, #36]	; 0x24
 800c1c6:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <std+0x3c>)
 800c1c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1ca:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <std+0x40>)
 800c1cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1ce:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <std+0x44>)
 800c1d0:	6224      	str	r4, [r4, #32]
 800c1d2:	6323      	str	r3, [r4, #48]	; 0x30
 800c1d4:	bd10      	pop	{r4, pc}
 800c1d6:	bf00      	nop
 800c1d8:	0800ce61 	.word	0x0800ce61
 800c1dc:	0800ce83 	.word	0x0800ce83
 800c1e0:	0800cebb 	.word	0x0800cebb
 800c1e4:	0800cedf 	.word	0x0800cedf

0800c1e8 <_cleanup_r>:
 800c1e8:	4901      	ldr	r1, [pc, #4]	; (800c1f0 <_cleanup_r+0x8>)
 800c1ea:	f000 b8af 	b.w	800c34c <_fwalk_reent>
 800c1ee:	bf00      	nop
 800c1f0:	0800c129 	.word	0x0800c129

0800c1f4 <__sfmoreglue>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	1e4a      	subs	r2, r1, #1
 800c1f8:	2568      	movs	r5, #104	; 0x68
 800c1fa:	4355      	muls	r5, r2
 800c1fc:	460e      	mov	r6, r1
 800c1fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c202:	f000 f979 	bl	800c4f8 <_malloc_r>
 800c206:	4604      	mov	r4, r0
 800c208:	b140      	cbz	r0, 800c21c <__sfmoreglue+0x28>
 800c20a:	2100      	movs	r1, #0
 800c20c:	e9c0 1600 	strd	r1, r6, [r0]
 800c210:	300c      	adds	r0, #12
 800c212:	60a0      	str	r0, [r4, #8]
 800c214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c218:	f7ff fd3c 	bl	800bc94 <memset>
 800c21c:	4620      	mov	r0, r4
 800c21e:	bd70      	pop	{r4, r5, r6, pc}

0800c220 <__sfp_lock_acquire>:
 800c220:	4801      	ldr	r0, [pc, #4]	; (800c228 <__sfp_lock_acquire+0x8>)
 800c222:	f000 b8b3 	b.w	800c38c <__retarget_lock_acquire_recursive>
 800c226:	bf00      	nop
 800c228:	200018ac 	.word	0x200018ac

0800c22c <__sfp_lock_release>:
 800c22c:	4801      	ldr	r0, [pc, #4]	; (800c234 <__sfp_lock_release+0x8>)
 800c22e:	f000 b8ae 	b.w	800c38e <__retarget_lock_release_recursive>
 800c232:	bf00      	nop
 800c234:	200018ac 	.word	0x200018ac

0800c238 <__sinit_lock_acquire>:
 800c238:	4801      	ldr	r0, [pc, #4]	; (800c240 <__sinit_lock_acquire+0x8>)
 800c23a:	f000 b8a7 	b.w	800c38c <__retarget_lock_acquire_recursive>
 800c23e:	bf00      	nop
 800c240:	200018a7 	.word	0x200018a7

0800c244 <__sinit_lock_release>:
 800c244:	4801      	ldr	r0, [pc, #4]	; (800c24c <__sinit_lock_release+0x8>)
 800c246:	f000 b8a2 	b.w	800c38e <__retarget_lock_release_recursive>
 800c24a:	bf00      	nop
 800c24c:	200018a7 	.word	0x200018a7

0800c250 <__sinit>:
 800c250:	b510      	push	{r4, lr}
 800c252:	4604      	mov	r4, r0
 800c254:	f7ff fff0 	bl	800c238 <__sinit_lock_acquire>
 800c258:	69a3      	ldr	r3, [r4, #24]
 800c25a:	b11b      	cbz	r3, 800c264 <__sinit+0x14>
 800c25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c260:	f7ff bff0 	b.w	800c244 <__sinit_lock_release>
 800c264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c268:	6523      	str	r3, [r4, #80]	; 0x50
 800c26a:	4b13      	ldr	r3, [pc, #76]	; (800c2b8 <__sinit+0x68>)
 800c26c:	4a13      	ldr	r2, [pc, #76]	; (800c2bc <__sinit+0x6c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	62a2      	str	r2, [r4, #40]	; 0x28
 800c272:	42a3      	cmp	r3, r4
 800c274:	bf04      	itt	eq
 800c276:	2301      	moveq	r3, #1
 800c278:	61a3      	streq	r3, [r4, #24]
 800c27a:	4620      	mov	r0, r4
 800c27c:	f000 f820 	bl	800c2c0 <__sfp>
 800c280:	6060      	str	r0, [r4, #4]
 800c282:	4620      	mov	r0, r4
 800c284:	f000 f81c 	bl	800c2c0 <__sfp>
 800c288:	60a0      	str	r0, [r4, #8]
 800c28a:	4620      	mov	r0, r4
 800c28c:	f000 f818 	bl	800c2c0 <__sfp>
 800c290:	2200      	movs	r2, #0
 800c292:	60e0      	str	r0, [r4, #12]
 800c294:	2104      	movs	r1, #4
 800c296:	6860      	ldr	r0, [r4, #4]
 800c298:	f7ff ff82 	bl	800c1a0 <std>
 800c29c:	68a0      	ldr	r0, [r4, #8]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	2109      	movs	r1, #9
 800c2a2:	f7ff ff7d 	bl	800c1a0 <std>
 800c2a6:	68e0      	ldr	r0, [r4, #12]
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	2112      	movs	r1, #18
 800c2ac:	f7ff ff78 	bl	800c1a0 <std>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	61a3      	str	r3, [r4, #24]
 800c2b4:	e7d2      	b.n	800c25c <__sinit+0xc>
 800c2b6:	bf00      	nop
 800c2b8:	0800dd68 	.word	0x0800dd68
 800c2bc:	0800c1e9 	.word	0x0800c1e9

0800c2c0 <__sfp>:
 800c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c2:	4607      	mov	r7, r0
 800c2c4:	f7ff ffac 	bl	800c220 <__sfp_lock_acquire>
 800c2c8:	4b1e      	ldr	r3, [pc, #120]	; (800c344 <__sfp+0x84>)
 800c2ca:	681e      	ldr	r6, [r3, #0]
 800c2cc:	69b3      	ldr	r3, [r6, #24]
 800c2ce:	b913      	cbnz	r3, 800c2d6 <__sfp+0x16>
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f7ff ffbd 	bl	800c250 <__sinit>
 800c2d6:	3648      	adds	r6, #72	; 0x48
 800c2d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	d503      	bpl.n	800c2e8 <__sfp+0x28>
 800c2e0:	6833      	ldr	r3, [r6, #0]
 800c2e2:	b30b      	cbz	r3, 800c328 <__sfp+0x68>
 800c2e4:	6836      	ldr	r6, [r6, #0]
 800c2e6:	e7f7      	b.n	800c2d8 <__sfp+0x18>
 800c2e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2ec:	b9d5      	cbnz	r5, 800c324 <__sfp+0x64>
 800c2ee:	4b16      	ldr	r3, [pc, #88]	; (800c348 <__sfp+0x88>)
 800c2f0:	60e3      	str	r3, [r4, #12]
 800c2f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2f6:	6665      	str	r5, [r4, #100]	; 0x64
 800c2f8:	f000 f847 	bl	800c38a <__retarget_lock_init_recursive>
 800c2fc:	f7ff ff96 	bl	800c22c <__sfp_lock_release>
 800c300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c308:	6025      	str	r5, [r4, #0]
 800c30a:	61a5      	str	r5, [r4, #24]
 800c30c:	2208      	movs	r2, #8
 800c30e:	4629      	mov	r1, r5
 800c310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c314:	f7ff fcbe 	bl	800bc94 <memset>
 800c318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c31c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c320:	4620      	mov	r0, r4
 800c322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c324:	3468      	adds	r4, #104	; 0x68
 800c326:	e7d9      	b.n	800c2dc <__sfp+0x1c>
 800c328:	2104      	movs	r1, #4
 800c32a:	4638      	mov	r0, r7
 800c32c:	f7ff ff62 	bl	800c1f4 <__sfmoreglue>
 800c330:	4604      	mov	r4, r0
 800c332:	6030      	str	r0, [r6, #0]
 800c334:	2800      	cmp	r0, #0
 800c336:	d1d5      	bne.n	800c2e4 <__sfp+0x24>
 800c338:	f7ff ff78 	bl	800c22c <__sfp_lock_release>
 800c33c:	230c      	movs	r3, #12
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	e7ee      	b.n	800c320 <__sfp+0x60>
 800c342:	bf00      	nop
 800c344:	0800dd68 	.word	0x0800dd68
 800c348:	ffff0001 	.word	0xffff0001

0800c34c <_fwalk_reent>:
 800c34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c350:	4606      	mov	r6, r0
 800c352:	4688      	mov	r8, r1
 800c354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c358:	2700      	movs	r7, #0
 800c35a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c35e:	f1b9 0901 	subs.w	r9, r9, #1
 800c362:	d505      	bpl.n	800c370 <_fwalk_reent+0x24>
 800c364:	6824      	ldr	r4, [r4, #0]
 800c366:	2c00      	cmp	r4, #0
 800c368:	d1f7      	bne.n	800c35a <_fwalk_reent+0xe>
 800c36a:	4638      	mov	r0, r7
 800c36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c370:	89ab      	ldrh	r3, [r5, #12]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d907      	bls.n	800c386 <_fwalk_reent+0x3a>
 800c376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c37a:	3301      	adds	r3, #1
 800c37c:	d003      	beq.n	800c386 <_fwalk_reent+0x3a>
 800c37e:	4629      	mov	r1, r5
 800c380:	4630      	mov	r0, r6
 800c382:	47c0      	blx	r8
 800c384:	4307      	orrs	r7, r0
 800c386:	3568      	adds	r5, #104	; 0x68
 800c388:	e7e9      	b.n	800c35e <_fwalk_reent+0x12>

0800c38a <__retarget_lock_init_recursive>:
 800c38a:	4770      	bx	lr

0800c38c <__retarget_lock_acquire_recursive>:
 800c38c:	4770      	bx	lr

0800c38e <__retarget_lock_release_recursive>:
 800c38e:	4770      	bx	lr

0800c390 <__swhatbuf_r>:
 800c390:	b570      	push	{r4, r5, r6, lr}
 800c392:	460e      	mov	r6, r1
 800c394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c398:	2900      	cmp	r1, #0
 800c39a:	b096      	sub	sp, #88	; 0x58
 800c39c:	4614      	mov	r4, r2
 800c39e:	461d      	mov	r5, r3
 800c3a0:	da07      	bge.n	800c3b2 <__swhatbuf_r+0x22>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	602b      	str	r3, [r5, #0]
 800c3a6:	89b3      	ldrh	r3, [r6, #12]
 800c3a8:	061a      	lsls	r2, r3, #24
 800c3aa:	d410      	bmi.n	800c3ce <__swhatbuf_r+0x3e>
 800c3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3b0:	e00e      	b.n	800c3d0 <__swhatbuf_r+0x40>
 800c3b2:	466a      	mov	r2, sp
 800c3b4:	f000 fdba 	bl	800cf2c <_fstat_r>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	dbf2      	blt.n	800c3a2 <__swhatbuf_r+0x12>
 800c3bc:	9a01      	ldr	r2, [sp, #4]
 800c3be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3c6:	425a      	negs	r2, r3
 800c3c8:	415a      	adcs	r2, r3
 800c3ca:	602a      	str	r2, [r5, #0]
 800c3cc:	e7ee      	b.n	800c3ac <__swhatbuf_r+0x1c>
 800c3ce:	2340      	movs	r3, #64	; 0x40
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	6023      	str	r3, [r4, #0]
 800c3d4:	b016      	add	sp, #88	; 0x58
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}

0800c3d8 <__smakebuf_r>:
 800c3d8:	898b      	ldrh	r3, [r1, #12]
 800c3da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3dc:	079d      	lsls	r5, r3, #30
 800c3de:	4606      	mov	r6, r0
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	d507      	bpl.n	800c3f4 <__smakebuf_r+0x1c>
 800c3e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	6123      	str	r3, [r4, #16]
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	6163      	str	r3, [r4, #20]
 800c3f0:	b002      	add	sp, #8
 800c3f2:	bd70      	pop	{r4, r5, r6, pc}
 800c3f4:	ab01      	add	r3, sp, #4
 800c3f6:	466a      	mov	r2, sp
 800c3f8:	f7ff ffca 	bl	800c390 <__swhatbuf_r>
 800c3fc:	9900      	ldr	r1, [sp, #0]
 800c3fe:	4605      	mov	r5, r0
 800c400:	4630      	mov	r0, r6
 800c402:	f000 f879 	bl	800c4f8 <_malloc_r>
 800c406:	b948      	cbnz	r0, 800c41c <__smakebuf_r+0x44>
 800c408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c40c:	059a      	lsls	r2, r3, #22
 800c40e:	d4ef      	bmi.n	800c3f0 <__smakebuf_r+0x18>
 800c410:	f023 0303 	bic.w	r3, r3, #3
 800c414:	f043 0302 	orr.w	r3, r3, #2
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	e7e3      	b.n	800c3e4 <__smakebuf_r+0xc>
 800c41c:	4b0d      	ldr	r3, [pc, #52]	; (800c454 <__smakebuf_r+0x7c>)
 800c41e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	6020      	str	r0, [r4, #0]
 800c424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c428:	81a3      	strh	r3, [r4, #12]
 800c42a:	9b00      	ldr	r3, [sp, #0]
 800c42c:	6163      	str	r3, [r4, #20]
 800c42e:	9b01      	ldr	r3, [sp, #4]
 800c430:	6120      	str	r0, [r4, #16]
 800c432:	b15b      	cbz	r3, 800c44c <__smakebuf_r+0x74>
 800c434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c438:	4630      	mov	r0, r6
 800c43a:	f000 fd89 	bl	800cf50 <_isatty_r>
 800c43e:	b128      	cbz	r0, 800c44c <__smakebuf_r+0x74>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	f023 0303 	bic.w	r3, r3, #3
 800c446:	f043 0301 	orr.w	r3, r3, #1
 800c44a:	81a3      	strh	r3, [r4, #12]
 800c44c:	89a0      	ldrh	r0, [r4, #12]
 800c44e:	4305      	orrs	r5, r0
 800c450:	81a5      	strh	r5, [r4, #12]
 800c452:	e7cd      	b.n	800c3f0 <__smakebuf_r+0x18>
 800c454:	0800c1e9 	.word	0x0800c1e9

0800c458 <_free_r>:
 800c458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c45a:	2900      	cmp	r1, #0
 800c45c:	d048      	beq.n	800c4f0 <_free_r+0x98>
 800c45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c462:	9001      	str	r0, [sp, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	f1a1 0404 	sub.w	r4, r1, #4
 800c46a:	bfb8      	it	lt
 800c46c:	18e4      	addlt	r4, r4, r3
 800c46e:	f000 fdab 	bl	800cfc8 <__malloc_lock>
 800c472:	4a20      	ldr	r2, [pc, #128]	; (800c4f4 <_free_r+0x9c>)
 800c474:	9801      	ldr	r0, [sp, #4]
 800c476:	6813      	ldr	r3, [r2, #0]
 800c478:	4615      	mov	r5, r2
 800c47a:	b933      	cbnz	r3, 800c48a <_free_r+0x32>
 800c47c:	6063      	str	r3, [r4, #4]
 800c47e:	6014      	str	r4, [r2, #0]
 800c480:	b003      	add	sp, #12
 800c482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c486:	f000 bda5 	b.w	800cfd4 <__malloc_unlock>
 800c48a:	42a3      	cmp	r3, r4
 800c48c:	d90b      	bls.n	800c4a6 <_free_r+0x4e>
 800c48e:	6821      	ldr	r1, [r4, #0]
 800c490:	1862      	adds	r2, r4, r1
 800c492:	4293      	cmp	r3, r2
 800c494:	bf04      	itt	eq
 800c496:	681a      	ldreq	r2, [r3, #0]
 800c498:	685b      	ldreq	r3, [r3, #4]
 800c49a:	6063      	str	r3, [r4, #4]
 800c49c:	bf04      	itt	eq
 800c49e:	1852      	addeq	r2, r2, r1
 800c4a0:	6022      	streq	r2, [r4, #0]
 800c4a2:	602c      	str	r4, [r5, #0]
 800c4a4:	e7ec      	b.n	800c480 <_free_r+0x28>
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	b10b      	cbz	r3, 800c4b0 <_free_r+0x58>
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	d9fa      	bls.n	800c4a6 <_free_r+0x4e>
 800c4b0:	6811      	ldr	r1, [r2, #0]
 800c4b2:	1855      	adds	r5, r2, r1
 800c4b4:	42a5      	cmp	r5, r4
 800c4b6:	d10b      	bne.n	800c4d0 <_free_r+0x78>
 800c4b8:	6824      	ldr	r4, [r4, #0]
 800c4ba:	4421      	add	r1, r4
 800c4bc:	1854      	adds	r4, r2, r1
 800c4be:	42a3      	cmp	r3, r4
 800c4c0:	6011      	str	r1, [r2, #0]
 800c4c2:	d1dd      	bne.n	800c480 <_free_r+0x28>
 800c4c4:	681c      	ldr	r4, [r3, #0]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	6053      	str	r3, [r2, #4]
 800c4ca:	4421      	add	r1, r4
 800c4cc:	6011      	str	r1, [r2, #0]
 800c4ce:	e7d7      	b.n	800c480 <_free_r+0x28>
 800c4d0:	d902      	bls.n	800c4d8 <_free_r+0x80>
 800c4d2:	230c      	movs	r3, #12
 800c4d4:	6003      	str	r3, [r0, #0]
 800c4d6:	e7d3      	b.n	800c480 <_free_r+0x28>
 800c4d8:	6825      	ldr	r5, [r4, #0]
 800c4da:	1961      	adds	r1, r4, r5
 800c4dc:	428b      	cmp	r3, r1
 800c4de:	bf04      	itt	eq
 800c4e0:	6819      	ldreq	r1, [r3, #0]
 800c4e2:	685b      	ldreq	r3, [r3, #4]
 800c4e4:	6063      	str	r3, [r4, #4]
 800c4e6:	bf04      	itt	eq
 800c4e8:	1949      	addeq	r1, r1, r5
 800c4ea:	6021      	streq	r1, [r4, #0]
 800c4ec:	6054      	str	r4, [r2, #4]
 800c4ee:	e7c7      	b.n	800c480 <_free_r+0x28>
 800c4f0:	b003      	add	sp, #12
 800c4f2:	bd30      	pop	{r4, r5, pc}
 800c4f4:	20001870 	.word	0x20001870

0800c4f8 <_malloc_r>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	1ccd      	adds	r5, r1, #3
 800c4fc:	f025 0503 	bic.w	r5, r5, #3
 800c500:	3508      	adds	r5, #8
 800c502:	2d0c      	cmp	r5, #12
 800c504:	bf38      	it	cc
 800c506:	250c      	movcc	r5, #12
 800c508:	2d00      	cmp	r5, #0
 800c50a:	4606      	mov	r6, r0
 800c50c:	db01      	blt.n	800c512 <_malloc_r+0x1a>
 800c50e:	42a9      	cmp	r1, r5
 800c510:	d903      	bls.n	800c51a <_malloc_r+0x22>
 800c512:	230c      	movs	r3, #12
 800c514:	6033      	str	r3, [r6, #0]
 800c516:	2000      	movs	r0, #0
 800c518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c51a:	f000 fd55 	bl	800cfc8 <__malloc_lock>
 800c51e:	4921      	ldr	r1, [pc, #132]	; (800c5a4 <_malloc_r+0xac>)
 800c520:	680a      	ldr	r2, [r1, #0]
 800c522:	4614      	mov	r4, r2
 800c524:	b99c      	cbnz	r4, 800c54e <_malloc_r+0x56>
 800c526:	4f20      	ldr	r7, [pc, #128]	; (800c5a8 <_malloc_r+0xb0>)
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	b923      	cbnz	r3, 800c536 <_malloc_r+0x3e>
 800c52c:	4621      	mov	r1, r4
 800c52e:	4630      	mov	r0, r6
 800c530:	f000 fc86 	bl	800ce40 <_sbrk_r>
 800c534:	6038      	str	r0, [r7, #0]
 800c536:	4629      	mov	r1, r5
 800c538:	4630      	mov	r0, r6
 800c53a:	f000 fc81 	bl	800ce40 <_sbrk_r>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d123      	bne.n	800c58a <_malloc_r+0x92>
 800c542:	230c      	movs	r3, #12
 800c544:	6033      	str	r3, [r6, #0]
 800c546:	4630      	mov	r0, r6
 800c548:	f000 fd44 	bl	800cfd4 <__malloc_unlock>
 800c54c:	e7e3      	b.n	800c516 <_malloc_r+0x1e>
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	1b5b      	subs	r3, r3, r5
 800c552:	d417      	bmi.n	800c584 <_malloc_r+0x8c>
 800c554:	2b0b      	cmp	r3, #11
 800c556:	d903      	bls.n	800c560 <_malloc_r+0x68>
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	441c      	add	r4, r3
 800c55c:	6025      	str	r5, [r4, #0]
 800c55e:	e004      	b.n	800c56a <_malloc_r+0x72>
 800c560:	6863      	ldr	r3, [r4, #4]
 800c562:	42a2      	cmp	r2, r4
 800c564:	bf0c      	ite	eq
 800c566:	600b      	streq	r3, [r1, #0]
 800c568:	6053      	strne	r3, [r2, #4]
 800c56a:	4630      	mov	r0, r6
 800c56c:	f000 fd32 	bl	800cfd4 <__malloc_unlock>
 800c570:	f104 000b 	add.w	r0, r4, #11
 800c574:	1d23      	adds	r3, r4, #4
 800c576:	f020 0007 	bic.w	r0, r0, #7
 800c57a:	1ac2      	subs	r2, r0, r3
 800c57c:	d0cc      	beq.n	800c518 <_malloc_r+0x20>
 800c57e:	1a1b      	subs	r3, r3, r0
 800c580:	50a3      	str	r3, [r4, r2]
 800c582:	e7c9      	b.n	800c518 <_malloc_r+0x20>
 800c584:	4622      	mov	r2, r4
 800c586:	6864      	ldr	r4, [r4, #4]
 800c588:	e7cc      	b.n	800c524 <_malloc_r+0x2c>
 800c58a:	1cc4      	adds	r4, r0, #3
 800c58c:	f024 0403 	bic.w	r4, r4, #3
 800c590:	42a0      	cmp	r0, r4
 800c592:	d0e3      	beq.n	800c55c <_malloc_r+0x64>
 800c594:	1a21      	subs	r1, r4, r0
 800c596:	4630      	mov	r0, r6
 800c598:	f000 fc52 	bl	800ce40 <_sbrk_r>
 800c59c:	3001      	adds	r0, #1
 800c59e:	d1dd      	bne.n	800c55c <_malloc_r+0x64>
 800c5a0:	e7cf      	b.n	800c542 <_malloc_r+0x4a>
 800c5a2:	bf00      	nop
 800c5a4:	20001870 	.word	0x20001870
 800c5a8:	20001874 	.word	0x20001874

0800c5ac <__ssputs_r>:
 800c5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b0:	688e      	ldr	r6, [r1, #8]
 800c5b2:	429e      	cmp	r6, r3
 800c5b4:	4682      	mov	sl, r0
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	4690      	mov	r8, r2
 800c5ba:	461f      	mov	r7, r3
 800c5bc:	d838      	bhi.n	800c630 <__ssputs_r+0x84>
 800c5be:	898a      	ldrh	r2, [r1, #12]
 800c5c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5c4:	d032      	beq.n	800c62c <__ssputs_r+0x80>
 800c5c6:	6825      	ldr	r5, [r4, #0]
 800c5c8:	6909      	ldr	r1, [r1, #16]
 800c5ca:	eba5 0901 	sub.w	r9, r5, r1
 800c5ce:	6965      	ldr	r5, [r4, #20]
 800c5d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5d8:	3301      	adds	r3, #1
 800c5da:	444b      	add	r3, r9
 800c5dc:	106d      	asrs	r5, r5, #1
 800c5de:	429d      	cmp	r5, r3
 800c5e0:	bf38      	it	cc
 800c5e2:	461d      	movcc	r5, r3
 800c5e4:	0553      	lsls	r3, r2, #21
 800c5e6:	d531      	bpl.n	800c64c <__ssputs_r+0xa0>
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	f7ff ff85 	bl	800c4f8 <_malloc_r>
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	b950      	cbnz	r0, 800c608 <__ssputs_r+0x5c>
 800c5f2:	230c      	movs	r3, #12
 800c5f4:	f8ca 3000 	str.w	r3, [sl]
 800c5f8:	89a3      	ldrh	r3, [r4, #12]
 800c5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5fe:	81a3      	strh	r3, [r4, #12]
 800c600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c608:	6921      	ldr	r1, [r4, #16]
 800c60a:	464a      	mov	r2, r9
 800c60c:	f7ff fb34 	bl	800bc78 <memcpy>
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	6126      	str	r6, [r4, #16]
 800c61e:	6165      	str	r5, [r4, #20]
 800c620:	444e      	add	r6, r9
 800c622:	eba5 0509 	sub.w	r5, r5, r9
 800c626:	6026      	str	r6, [r4, #0]
 800c628:	60a5      	str	r5, [r4, #8]
 800c62a:	463e      	mov	r6, r7
 800c62c:	42be      	cmp	r6, r7
 800c62e:	d900      	bls.n	800c632 <__ssputs_r+0x86>
 800c630:	463e      	mov	r6, r7
 800c632:	4632      	mov	r2, r6
 800c634:	6820      	ldr	r0, [r4, #0]
 800c636:	4641      	mov	r1, r8
 800c638:	f000 fcac 	bl	800cf94 <memmove>
 800c63c:	68a3      	ldr	r3, [r4, #8]
 800c63e:	6822      	ldr	r2, [r4, #0]
 800c640:	1b9b      	subs	r3, r3, r6
 800c642:	4432      	add	r2, r6
 800c644:	60a3      	str	r3, [r4, #8]
 800c646:	6022      	str	r2, [r4, #0]
 800c648:	2000      	movs	r0, #0
 800c64a:	e7db      	b.n	800c604 <__ssputs_r+0x58>
 800c64c:	462a      	mov	r2, r5
 800c64e:	f000 fcc7 	bl	800cfe0 <_realloc_r>
 800c652:	4606      	mov	r6, r0
 800c654:	2800      	cmp	r0, #0
 800c656:	d1e1      	bne.n	800c61c <__ssputs_r+0x70>
 800c658:	6921      	ldr	r1, [r4, #16]
 800c65a:	4650      	mov	r0, sl
 800c65c:	f7ff fefc 	bl	800c458 <_free_r>
 800c660:	e7c7      	b.n	800c5f2 <__ssputs_r+0x46>
	...

0800c664 <_svfiprintf_r>:
 800c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	4698      	mov	r8, r3
 800c66a:	898b      	ldrh	r3, [r1, #12]
 800c66c:	061b      	lsls	r3, r3, #24
 800c66e:	b09d      	sub	sp, #116	; 0x74
 800c670:	4607      	mov	r7, r0
 800c672:	460d      	mov	r5, r1
 800c674:	4614      	mov	r4, r2
 800c676:	d50e      	bpl.n	800c696 <_svfiprintf_r+0x32>
 800c678:	690b      	ldr	r3, [r1, #16]
 800c67a:	b963      	cbnz	r3, 800c696 <_svfiprintf_r+0x32>
 800c67c:	2140      	movs	r1, #64	; 0x40
 800c67e:	f7ff ff3b 	bl	800c4f8 <_malloc_r>
 800c682:	6028      	str	r0, [r5, #0]
 800c684:	6128      	str	r0, [r5, #16]
 800c686:	b920      	cbnz	r0, 800c692 <_svfiprintf_r+0x2e>
 800c688:	230c      	movs	r3, #12
 800c68a:	603b      	str	r3, [r7, #0]
 800c68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c690:	e0d1      	b.n	800c836 <_svfiprintf_r+0x1d2>
 800c692:	2340      	movs	r3, #64	; 0x40
 800c694:	616b      	str	r3, [r5, #20]
 800c696:	2300      	movs	r3, #0
 800c698:	9309      	str	r3, [sp, #36]	; 0x24
 800c69a:	2320      	movs	r3, #32
 800c69c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a4:	2330      	movs	r3, #48	; 0x30
 800c6a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c850 <_svfiprintf_r+0x1ec>
 800c6aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ae:	f04f 0901 	mov.w	r9, #1
 800c6b2:	4623      	mov	r3, r4
 800c6b4:	469a      	mov	sl, r3
 800c6b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ba:	b10a      	cbz	r2, 800c6c0 <_svfiprintf_r+0x5c>
 800c6bc:	2a25      	cmp	r2, #37	; 0x25
 800c6be:	d1f9      	bne.n	800c6b4 <_svfiprintf_r+0x50>
 800c6c0:	ebba 0b04 	subs.w	fp, sl, r4
 800c6c4:	d00b      	beq.n	800c6de <_svfiprintf_r+0x7a>
 800c6c6:	465b      	mov	r3, fp
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	f7ff ff6d 	bl	800c5ac <__ssputs_r>
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	f000 80aa 	beq.w	800c82c <_svfiprintf_r+0x1c8>
 800c6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6da:	445a      	add	r2, fp
 800c6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c6de:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 80a2 	beq.w	800c82c <_svfiprintf_r+0x1c8>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6f2:	f10a 0a01 	add.w	sl, sl, #1
 800c6f6:	9304      	str	r3, [sp, #16]
 800c6f8:	9307      	str	r3, [sp, #28]
 800c6fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6fe:	931a      	str	r3, [sp, #104]	; 0x68
 800c700:	4654      	mov	r4, sl
 800c702:	2205      	movs	r2, #5
 800c704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c708:	4851      	ldr	r0, [pc, #324]	; (800c850 <_svfiprintf_r+0x1ec>)
 800c70a:	f7f3 fd51 	bl	80001b0 <memchr>
 800c70e:	9a04      	ldr	r2, [sp, #16]
 800c710:	b9d8      	cbnz	r0, 800c74a <_svfiprintf_r+0xe6>
 800c712:	06d0      	lsls	r0, r2, #27
 800c714:	bf44      	itt	mi
 800c716:	2320      	movmi	r3, #32
 800c718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c71c:	0711      	lsls	r1, r2, #28
 800c71e:	bf44      	itt	mi
 800c720:	232b      	movmi	r3, #43	; 0x2b
 800c722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c726:	f89a 3000 	ldrb.w	r3, [sl]
 800c72a:	2b2a      	cmp	r3, #42	; 0x2a
 800c72c:	d015      	beq.n	800c75a <_svfiprintf_r+0xf6>
 800c72e:	9a07      	ldr	r2, [sp, #28]
 800c730:	4654      	mov	r4, sl
 800c732:	2000      	movs	r0, #0
 800c734:	f04f 0c0a 	mov.w	ip, #10
 800c738:	4621      	mov	r1, r4
 800c73a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c73e:	3b30      	subs	r3, #48	; 0x30
 800c740:	2b09      	cmp	r3, #9
 800c742:	d94e      	bls.n	800c7e2 <_svfiprintf_r+0x17e>
 800c744:	b1b0      	cbz	r0, 800c774 <_svfiprintf_r+0x110>
 800c746:	9207      	str	r2, [sp, #28]
 800c748:	e014      	b.n	800c774 <_svfiprintf_r+0x110>
 800c74a:	eba0 0308 	sub.w	r3, r0, r8
 800c74e:	fa09 f303 	lsl.w	r3, r9, r3
 800c752:	4313      	orrs	r3, r2
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	46a2      	mov	sl, r4
 800c758:	e7d2      	b.n	800c700 <_svfiprintf_r+0x9c>
 800c75a:	9b03      	ldr	r3, [sp, #12]
 800c75c:	1d19      	adds	r1, r3, #4
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	9103      	str	r1, [sp, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	bfbb      	ittet	lt
 800c766:	425b      	neglt	r3, r3
 800c768:	f042 0202 	orrlt.w	r2, r2, #2
 800c76c:	9307      	strge	r3, [sp, #28]
 800c76e:	9307      	strlt	r3, [sp, #28]
 800c770:	bfb8      	it	lt
 800c772:	9204      	strlt	r2, [sp, #16]
 800c774:	7823      	ldrb	r3, [r4, #0]
 800c776:	2b2e      	cmp	r3, #46	; 0x2e
 800c778:	d10c      	bne.n	800c794 <_svfiprintf_r+0x130>
 800c77a:	7863      	ldrb	r3, [r4, #1]
 800c77c:	2b2a      	cmp	r3, #42	; 0x2a
 800c77e:	d135      	bne.n	800c7ec <_svfiprintf_r+0x188>
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	1d1a      	adds	r2, r3, #4
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	9203      	str	r2, [sp, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	bfb8      	it	lt
 800c78c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c790:	3402      	adds	r4, #2
 800c792:	9305      	str	r3, [sp, #20]
 800c794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c860 <_svfiprintf_r+0x1fc>
 800c798:	7821      	ldrb	r1, [r4, #0]
 800c79a:	2203      	movs	r2, #3
 800c79c:	4650      	mov	r0, sl
 800c79e:	f7f3 fd07 	bl	80001b0 <memchr>
 800c7a2:	b140      	cbz	r0, 800c7b6 <_svfiprintf_r+0x152>
 800c7a4:	2340      	movs	r3, #64	; 0x40
 800c7a6:	eba0 000a 	sub.w	r0, r0, sl
 800c7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800c7ae:	9b04      	ldr	r3, [sp, #16]
 800c7b0:	4303      	orrs	r3, r0
 800c7b2:	3401      	adds	r4, #1
 800c7b4:	9304      	str	r3, [sp, #16]
 800c7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ba:	4826      	ldr	r0, [pc, #152]	; (800c854 <_svfiprintf_r+0x1f0>)
 800c7bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7c0:	2206      	movs	r2, #6
 800c7c2:	f7f3 fcf5 	bl	80001b0 <memchr>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d038      	beq.n	800c83c <_svfiprintf_r+0x1d8>
 800c7ca:	4b23      	ldr	r3, [pc, #140]	; (800c858 <_svfiprintf_r+0x1f4>)
 800c7cc:	bb1b      	cbnz	r3, 800c816 <_svfiprintf_r+0x1b2>
 800c7ce:	9b03      	ldr	r3, [sp, #12]
 800c7d0:	3307      	adds	r3, #7
 800c7d2:	f023 0307 	bic.w	r3, r3, #7
 800c7d6:	3308      	adds	r3, #8
 800c7d8:	9303      	str	r3, [sp, #12]
 800c7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7dc:	4433      	add	r3, r6
 800c7de:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e0:	e767      	b.n	800c6b2 <_svfiprintf_r+0x4e>
 800c7e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	e7a5      	b.n	800c738 <_svfiprintf_r+0xd4>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	3401      	adds	r4, #1
 800c7f0:	9305      	str	r3, [sp, #20]
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	f04f 0c0a 	mov.w	ip, #10
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7fe:	3a30      	subs	r2, #48	; 0x30
 800c800:	2a09      	cmp	r2, #9
 800c802:	d903      	bls.n	800c80c <_svfiprintf_r+0x1a8>
 800c804:	2b00      	cmp	r3, #0
 800c806:	d0c5      	beq.n	800c794 <_svfiprintf_r+0x130>
 800c808:	9105      	str	r1, [sp, #20]
 800c80a:	e7c3      	b.n	800c794 <_svfiprintf_r+0x130>
 800c80c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c810:	4604      	mov	r4, r0
 800c812:	2301      	movs	r3, #1
 800c814:	e7f0      	b.n	800c7f8 <_svfiprintf_r+0x194>
 800c816:	ab03      	add	r3, sp, #12
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	462a      	mov	r2, r5
 800c81c:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <_svfiprintf_r+0x1f8>)
 800c81e:	a904      	add	r1, sp, #16
 800c820:	4638      	mov	r0, r7
 800c822:	f3af 8000 	nop.w
 800c826:	1c42      	adds	r2, r0, #1
 800c828:	4606      	mov	r6, r0
 800c82a:	d1d6      	bne.n	800c7da <_svfiprintf_r+0x176>
 800c82c:	89ab      	ldrh	r3, [r5, #12]
 800c82e:	065b      	lsls	r3, r3, #25
 800c830:	f53f af2c 	bmi.w	800c68c <_svfiprintf_r+0x28>
 800c834:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c836:	b01d      	add	sp, #116	; 0x74
 800c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83c:	ab03      	add	r3, sp, #12
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	462a      	mov	r2, r5
 800c842:	4b06      	ldr	r3, [pc, #24]	; (800c85c <_svfiprintf_r+0x1f8>)
 800c844:	a904      	add	r1, sp, #16
 800c846:	4638      	mov	r0, r7
 800c848:	f000 f9d4 	bl	800cbf4 <_printf_i>
 800c84c:	e7eb      	b.n	800c826 <_svfiprintf_r+0x1c2>
 800c84e:	bf00      	nop
 800c850:	0800ddcc 	.word	0x0800ddcc
 800c854:	0800ddd6 	.word	0x0800ddd6
 800c858:	00000000 	.word	0x00000000
 800c85c:	0800c5ad 	.word	0x0800c5ad
 800c860:	0800ddd2 	.word	0x0800ddd2

0800c864 <__sfputc_r>:
 800c864:	6893      	ldr	r3, [r2, #8]
 800c866:	3b01      	subs	r3, #1
 800c868:	2b00      	cmp	r3, #0
 800c86a:	b410      	push	{r4}
 800c86c:	6093      	str	r3, [r2, #8]
 800c86e:	da08      	bge.n	800c882 <__sfputc_r+0x1e>
 800c870:	6994      	ldr	r4, [r2, #24]
 800c872:	42a3      	cmp	r3, r4
 800c874:	db01      	blt.n	800c87a <__sfputc_r+0x16>
 800c876:	290a      	cmp	r1, #10
 800c878:	d103      	bne.n	800c882 <__sfputc_r+0x1e>
 800c87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c87e:	f7ff bb0d 	b.w	800be9c <__swbuf_r>
 800c882:	6813      	ldr	r3, [r2, #0]
 800c884:	1c58      	adds	r0, r3, #1
 800c886:	6010      	str	r0, [r2, #0]
 800c888:	7019      	strb	r1, [r3, #0]
 800c88a:	4608      	mov	r0, r1
 800c88c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <__sfputs_r>:
 800c892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c894:	4606      	mov	r6, r0
 800c896:	460f      	mov	r7, r1
 800c898:	4614      	mov	r4, r2
 800c89a:	18d5      	adds	r5, r2, r3
 800c89c:	42ac      	cmp	r4, r5
 800c89e:	d101      	bne.n	800c8a4 <__sfputs_r+0x12>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e007      	b.n	800c8b4 <__sfputs_r+0x22>
 800c8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a8:	463a      	mov	r2, r7
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	f7ff ffda 	bl	800c864 <__sfputc_r>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d1f3      	bne.n	800c89c <__sfputs_r+0xa>
 800c8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8b8 <_vfiprintf_r>:
 800c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	460d      	mov	r5, r1
 800c8be:	b09d      	sub	sp, #116	; 0x74
 800c8c0:	4614      	mov	r4, r2
 800c8c2:	4698      	mov	r8, r3
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	b118      	cbz	r0, 800c8d0 <_vfiprintf_r+0x18>
 800c8c8:	6983      	ldr	r3, [r0, #24]
 800c8ca:	b90b      	cbnz	r3, 800c8d0 <_vfiprintf_r+0x18>
 800c8cc:	f7ff fcc0 	bl	800c250 <__sinit>
 800c8d0:	4b89      	ldr	r3, [pc, #548]	; (800caf8 <_vfiprintf_r+0x240>)
 800c8d2:	429d      	cmp	r5, r3
 800c8d4:	d11b      	bne.n	800c90e <_vfiprintf_r+0x56>
 800c8d6:	6875      	ldr	r5, [r6, #4]
 800c8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8da:	07d9      	lsls	r1, r3, #31
 800c8dc:	d405      	bmi.n	800c8ea <_vfiprintf_r+0x32>
 800c8de:	89ab      	ldrh	r3, [r5, #12]
 800c8e0:	059a      	lsls	r2, r3, #22
 800c8e2:	d402      	bmi.n	800c8ea <_vfiprintf_r+0x32>
 800c8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8e6:	f7ff fd51 	bl	800c38c <__retarget_lock_acquire_recursive>
 800c8ea:	89ab      	ldrh	r3, [r5, #12]
 800c8ec:	071b      	lsls	r3, r3, #28
 800c8ee:	d501      	bpl.n	800c8f4 <_vfiprintf_r+0x3c>
 800c8f0:	692b      	ldr	r3, [r5, #16]
 800c8f2:	b9eb      	cbnz	r3, 800c930 <_vfiprintf_r+0x78>
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7ff fb22 	bl	800bf40 <__swsetup_r>
 800c8fc:	b1c0      	cbz	r0, 800c930 <_vfiprintf_r+0x78>
 800c8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c900:	07dc      	lsls	r4, r3, #31
 800c902:	d50e      	bpl.n	800c922 <_vfiprintf_r+0x6a>
 800c904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c908:	b01d      	add	sp, #116	; 0x74
 800c90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90e:	4b7b      	ldr	r3, [pc, #492]	; (800cafc <_vfiprintf_r+0x244>)
 800c910:	429d      	cmp	r5, r3
 800c912:	d101      	bne.n	800c918 <_vfiprintf_r+0x60>
 800c914:	68b5      	ldr	r5, [r6, #8]
 800c916:	e7df      	b.n	800c8d8 <_vfiprintf_r+0x20>
 800c918:	4b79      	ldr	r3, [pc, #484]	; (800cb00 <_vfiprintf_r+0x248>)
 800c91a:	429d      	cmp	r5, r3
 800c91c:	bf08      	it	eq
 800c91e:	68f5      	ldreq	r5, [r6, #12]
 800c920:	e7da      	b.n	800c8d8 <_vfiprintf_r+0x20>
 800c922:	89ab      	ldrh	r3, [r5, #12]
 800c924:	0598      	lsls	r0, r3, #22
 800c926:	d4ed      	bmi.n	800c904 <_vfiprintf_r+0x4c>
 800c928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c92a:	f7ff fd30 	bl	800c38e <__retarget_lock_release_recursive>
 800c92e:	e7e9      	b.n	800c904 <_vfiprintf_r+0x4c>
 800c930:	2300      	movs	r3, #0
 800c932:	9309      	str	r3, [sp, #36]	; 0x24
 800c934:	2320      	movs	r3, #32
 800c936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c93a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c93e:	2330      	movs	r3, #48	; 0x30
 800c940:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb04 <_vfiprintf_r+0x24c>
 800c944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c948:	f04f 0901 	mov.w	r9, #1
 800c94c:	4623      	mov	r3, r4
 800c94e:	469a      	mov	sl, r3
 800c950:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c954:	b10a      	cbz	r2, 800c95a <_vfiprintf_r+0xa2>
 800c956:	2a25      	cmp	r2, #37	; 0x25
 800c958:	d1f9      	bne.n	800c94e <_vfiprintf_r+0x96>
 800c95a:	ebba 0b04 	subs.w	fp, sl, r4
 800c95e:	d00b      	beq.n	800c978 <_vfiprintf_r+0xc0>
 800c960:	465b      	mov	r3, fp
 800c962:	4622      	mov	r2, r4
 800c964:	4629      	mov	r1, r5
 800c966:	4630      	mov	r0, r6
 800c968:	f7ff ff93 	bl	800c892 <__sfputs_r>
 800c96c:	3001      	adds	r0, #1
 800c96e:	f000 80aa 	beq.w	800cac6 <_vfiprintf_r+0x20e>
 800c972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c974:	445a      	add	r2, fp
 800c976:	9209      	str	r2, [sp, #36]	; 0x24
 800c978:	f89a 3000 	ldrb.w	r3, [sl]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 80a2 	beq.w	800cac6 <_vfiprintf_r+0x20e>
 800c982:	2300      	movs	r3, #0
 800c984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c98c:	f10a 0a01 	add.w	sl, sl, #1
 800c990:	9304      	str	r3, [sp, #16]
 800c992:	9307      	str	r3, [sp, #28]
 800c994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c998:	931a      	str	r3, [sp, #104]	; 0x68
 800c99a:	4654      	mov	r4, sl
 800c99c:	2205      	movs	r2, #5
 800c99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a2:	4858      	ldr	r0, [pc, #352]	; (800cb04 <_vfiprintf_r+0x24c>)
 800c9a4:	f7f3 fc04 	bl	80001b0 <memchr>
 800c9a8:	9a04      	ldr	r2, [sp, #16]
 800c9aa:	b9d8      	cbnz	r0, 800c9e4 <_vfiprintf_r+0x12c>
 800c9ac:	06d1      	lsls	r1, r2, #27
 800c9ae:	bf44      	itt	mi
 800c9b0:	2320      	movmi	r3, #32
 800c9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9b6:	0713      	lsls	r3, r2, #28
 800c9b8:	bf44      	itt	mi
 800c9ba:	232b      	movmi	r3, #43	; 0x2b
 800c9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9c6:	d015      	beq.n	800c9f4 <_vfiprintf_r+0x13c>
 800c9c8:	9a07      	ldr	r2, [sp, #28]
 800c9ca:	4654      	mov	r4, sl
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	f04f 0c0a 	mov.w	ip, #10
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9d8:	3b30      	subs	r3, #48	; 0x30
 800c9da:	2b09      	cmp	r3, #9
 800c9dc:	d94e      	bls.n	800ca7c <_vfiprintf_r+0x1c4>
 800c9de:	b1b0      	cbz	r0, 800ca0e <_vfiprintf_r+0x156>
 800c9e0:	9207      	str	r2, [sp, #28]
 800c9e2:	e014      	b.n	800ca0e <_vfiprintf_r+0x156>
 800c9e4:	eba0 0308 	sub.w	r3, r0, r8
 800c9e8:	fa09 f303 	lsl.w	r3, r9, r3
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	9304      	str	r3, [sp, #16]
 800c9f0:	46a2      	mov	sl, r4
 800c9f2:	e7d2      	b.n	800c99a <_vfiprintf_r+0xe2>
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	1d19      	adds	r1, r3, #4
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	9103      	str	r1, [sp, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	bfbb      	ittet	lt
 800ca00:	425b      	neglt	r3, r3
 800ca02:	f042 0202 	orrlt.w	r2, r2, #2
 800ca06:	9307      	strge	r3, [sp, #28]
 800ca08:	9307      	strlt	r3, [sp, #28]
 800ca0a:	bfb8      	it	lt
 800ca0c:	9204      	strlt	r2, [sp, #16]
 800ca0e:	7823      	ldrb	r3, [r4, #0]
 800ca10:	2b2e      	cmp	r3, #46	; 0x2e
 800ca12:	d10c      	bne.n	800ca2e <_vfiprintf_r+0x176>
 800ca14:	7863      	ldrb	r3, [r4, #1]
 800ca16:	2b2a      	cmp	r3, #42	; 0x2a
 800ca18:	d135      	bne.n	800ca86 <_vfiprintf_r+0x1ce>
 800ca1a:	9b03      	ldr	r3, [sp, #12]
 800ca1c:	1d1a      	adds	r2, r3, #4
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	9203      	str	r2, [sp, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	bfb8      	it	lt
 800ca26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca2a:	3402      	adds	r4, #2
 800ca2c:	9305      	str	r3, [sp, #20]
 800ca2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb14 <_vfiprintf_r+0x25c>
 800ca32:	7821      	ldrb	r1, [r4, #0]
 800ca34:	2203      	movs	r2, #3
 800ca36:	4650      	mov	r0, sl
 800ca38:	f7f3 fbba 	bl	80001b0 <memchr>
 800ca3c:	b140      	cbz	r0, 800ca50 <_vfiprintf_r+0x198>
 800ca3e:	2340      	movs	r3, #64	; 0x40
 800ca40:	eba0 000a 	sub.w	r0, r0, sl
 800ca44:	fa03 f000 	lsl.w	r0, r3, r0
 800ca48:	9b04      	ldr	r3, [sp, #16]
 800ca4a:	4303      	orrs	r3, r0
 800ca4c:	3401      	adds	r4, #1
 800ca4e:	9304      	str	r3, [sp, #16]
 800ca50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca54:	482c      	ldr	r0, [pc, #176]	; (800cb08 <_vfiprintf_r+0x250>)
 800ca56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca5a:	2206      	movs	r2, #6
 800ca5c:	f7f3 fba8 	bl	80001b0 <memchr>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d03f      	beq.n	800cae4 <_vfiprintf_r+0x22c>
 800ca64:	4b29      	ldr	r3, [pc, #164]	; (800cb0c <_vfiprintf_r+0x254>)
 800ca66:	bb1b      	cbnz	r3, 800cab0 <_vfiprintf_r+0x1f8>
 800ca68:	9b03      	ldr	r3, [sp, #12]
 800ca6a:	3307      	adds	r3, #7
 800ca6c:	f023 0307 	bic.w	r3, r3, #7
 800ca70:	3308      	adds	r3, #8
 800ca72:	9303      	str	r3, [sp, #12]
 800ca74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca76:	443b      	add	r3, r7
 800ca78:	9309      	str	r3, [sp, #36]	; 0x24
 800ca7a:	e767      	b.n	800c94c <_vfiprintf_r+0x94>
 800ca7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca80:	460c      	mov	r4, r1
 800ca82:	2001      	movs	r0, #1
 800ca84:	e7a5      	b.n	800c9d2 <_vfiprintf_r+0x11a>
 800ca86:	2300      	movs	r3, #0
 800ca88:	3401      	adds	r4, #1
 800ca8a:	9305      	str	r3, [sp, #20]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	f04f 0c0a 	mov.w	ip, #10
 800ca92:	4620      	mov	r0, r4
 800ca94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca98:	3a30      	subs	r2, #48	; 0x30
 800ca9a:	2a09      	cmp	r2, #9
 800ca9c:	d903      	bls.n	800caa6 <_vfiprintf_r+0x1ee>
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d0c5      	beq.n	800ca2e <_vfiprintf_r+0x176>
 800caa2:	9105      	str	r1, [sp, #20]
 800caa4:	e7c3      	b.n	800ca2e <_vfiprintf_r+0x176>
 800caa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800caaa:	4604      	mov	r4, r0
 800caac:	2301      	movs	r3, #1
 800caae:	e7f0      	b.n	800ca92 <_vfiprintf_r+0x1da>
 800cab0:	ab03      	add	r3, sp, #12
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	462a      	mov	r2, r5
 800cab6:	4b16      	ldr	r3, [pc, #88]	; (800cb10 <_vfiprintf_r+0x258>)
 800cab8:	a904      	add	r1, sp, #16
 800caba:	4630      	mov	r0, r6
 800cabc:	f3af 8000 	nop.w
 800cac0:	4607      	mov	r7, r0
 800cac2:	1c78      	adds	r0, r7, #1
 800cac4:	d1d6      	bne.n	800ca74 <_vfiprintf_r+0x1bc>
 800cac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cac8:	07d9      	lsls	r1, r3, #31
 800caca:	d405      	bmi.n	800cad8 <_vfiprintf_r+0x220>
 800cacc:	89ab      	ldrh	r3, [r5, #12]
 800cace:	059a      	lsls	r2, r3, #22
 800cad0:	d402      	bmi.n	800cad8 <_vfiprintf_r+0x220>
 800cad2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cad4:	f7ff fc5b 	bl	800c38e <__retarget_lock_release_recursive>
 800cad8:	89ab      	ldrh	r3, [r5, #12]
 800cada:	065b      	lsls	r3, r3, #25
 800cadc:	f53f af12 	bmi.w	800c904 <_vfiprintf_r+0x4c>
 800cae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cae2:	e711      	b.n	800c908 <_vfiprintf_r+0x50>
 800cae4:	ab03      	add	r3, sp, #12
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	462a      	mov	r2, r5
 800caea:	4b09      	ldr	r3, [pc, #36]	; (800cb10 <_vfiprintf_r+0x258>)
 800caec:	a904      	add	r1, sp, #16
 800caee:	4630      	mov	r0, r6
 800caf0:	f000 f880 	bl	800cbf4 <_printf_i>
 800caf4:	e7e4      	b.n	800cac0 <_vfiprintf_r+0x208>
 800caf6:	bf00      	nop
 800caf8:	0800dd8c 	.word	0x0800dd8c
 800cafc:	0800ddac 	.word	0x0800ddac
 800cb00:	0800dd6c 	.word	0x0800dd6c
 800cb04:	0800ddcc 	.word	0x0800ddcc
 800cb08:	0800ddd6 	.word	0x0800ddd6
 800cb0c:	00000000 	.word	0x00000000
 800cb10:	0800c893 	.word	0x0800c893
 800cb14:	0800ddd2 	.word	0x0800ddd2

0800cb18 <_printf_common>:
 800cb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb1c:	4616      	mov	r6, r2
 800cb1e:	4699      	mov	r9, r3
 800cb20:	688a      	ldr	r2, [r1, #8]
 800cb22:	690b      	ldr	r3, [r1, #16]
 800cb24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	bfb8      	it	lt
 800cb2c:	4613      	movlt	r3, r2
 800cb2e:	6033      	str	r3, [r6, #0]
 800cb30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb34:	4607      	mov	r7, r0
 800cb36:	460c      	mov	r4, r1
 800cb38:	b10a      	cbz	r2, 800cb3e <_printf_common+0x26>
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	6033      	str	r3, [r6, #0]
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	0699      	lsls	r1, r3, #26
 800cb42:	bf42      	ittt	mi
 800cb44:	6833      	ldrmi	r3, [r6, #0]
 800cb46:	3302      	addmi	r3, #2
 800cb48:	6033      	strmi	r3, [r6, #0]
 800cb4a:	6825      	ldr	r5, [r4, #0]
 800cb4c:	f015 0506 	ands.w	r5, r5, #6
 800cb50:	d106      	bne.n	800cb60 <_printf_common+0x48>
 800cb52:	f104 0a19 	add.w	sl, r4, #25
 800cb56:	68e3      	ldr	r3, [r4, #12]
 800cb58:	6832      	ldr	r2, [r6, #0]
 800cb5a:	1a9b      	subs	r3, r3, r2
 800cb5c:	42ab      	cmp	r3, r5
 800cb5e:	dc26      	bgt.n	800cbae <_printf_common+0x96>
 800cb60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb64:	1e13      	subs	r3, r2, #0
 800cb66:	6822      	ldr	r2, [r4, #0]
 800cb68:	bf18      	it	ne
 800cb6a:	2301      	movne	r3, #1
 800cb6c:	0692      	lsls	r2, r2, #26
 800cb6e:	d42b      	bmi.n	800cbc8 <_printf_common+0xb0>
 800cb70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb74:	4649      	mov	r1, r9
 800cb76:	4638      	mov	r0, r7
 800cb78:	47c0      	blx	r8
 800cb7a:	3001      	adds	r0, #1
 800cb7c:	d01e      	beq.n	800cbbc <_printf_common+0xa4>
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	68e5      	ldr	r5, [r4, #12]
 800cb82:	6832      	ldr	r2, [r6, #0]
 800cb84:	f003 0306 	and.w	r3, r3, #6
 800cb88:	2b04      	cmp	r3, #4
 800cb8a:	bf08      	it	eq
 800cb8c:	1aad      	subeq	r5, r5, r2
 800cb8e:	68a3      	ldr	r3, [r4, #8]
 800cb90:	6922      	ldr	r2, [r4, #16]
 800cb92:	bf0c      	ite	eq
 800cb94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb98:	2500      	movne	r5, #0
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	bfc4      	itt	gt
 800cb9e:	1a9b      	subgt	r3, r3, r2
 800cba0:	18ed      	addgt	r5, r5, r3
 800cba2:	2600      	movs	r6, #0
 800cba4:	341a      	adds	r4, #26
 800cba6:	42b5      	cmp	r5, r6
 800cba8:	d11a      	bne.n	800cbe0 <_printf_common+0xc8>
 800cbaa:	2000      	movs	r0, #0
 800cbac:	e008      	b.n	800cbc0 <_printf_common+0xa8>
 800cbae:	2301      	movs	r3, #1
 800cbb0:	4652      	mov	r2, sl
 800cbb2:	4649      	mov	r1, r9
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	47c0      	blx	r8
 800cbb8:	3001      	adds	r0, #1
 800cbba:	d103      	bne.n	800cbc4 <_printf_common+0xac>
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc4:	3501      	adds	r5, #1
 800cbc6:	e7c6      	b.n	800cb56 <_printf_common+0x3e>
 800cbc8:	18e1      	adds	r1, r4, r3
 800cbca:	1c5a      	adds	r2, r3, #1
 800cbcc:	2030      	movs	r0, #48	; 0x30
 800cbce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbd2:	4422      	add	r2, r4
 800cbd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbdc:	3302      	adds	r3, #2
 800cbde:	e7c7      	b.n	800cb70 <_printf_common+0x58>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	4649      	mov	r1, r9
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	47c0      	blx	r8
 800cbea:	3001      	adds	r0, #1
 800cbec:	d0e6      	beq.n	800cbbc <_printf_common+0xa4>
 800cbee:	3601      	adds	r6, #1
 800cbf0:	e7d9      	b.n	800cba6 <_printf_common+0x8e>
	...

0800cbf4 <_printf_i>:
 800cbf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	4691      	mov	r9, r2
 800cbfc:	7e27      	ldrb	r7, [r4, #24]
 800cbfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc00:	2f78      	cmp	r7, #120	; 0x78
 800cc02:	4680      	mov	r8, r0
 800cc04:	469a      	mov	sl, r3
 800cc06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc0a:	d807      	bhi.n	800cc1c <_printf_i+0x28>
 800cc0c:	2f62      	cmp	r7, #98	; 0x62
 800cc0e:	d80a      	bhi.n	800cc26 <_printf_i+0x32>
 800cc10:	2f00      	cmp	r7, #0
 800cc12:	f000 80d8 	beq.w	800cdc6 <_printf_i+0x1d2>
 800cc16:	2f58      	cmp	r7, #88	; 0x58
 800cc18:	f000 80a3 	beq.w	800cd62 <_printf_i+0x16e>
 800cc1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc24:	e03a      	b.n	800cc9c <_printf_i+0xa8>
 800cc26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc2a:	2b15      	cmp	r3, #21
 800cc2c:	d8f6      	bhi.n	800cc1c <_printf_i+0x28>
 800cc2e:	a001      	add	r0, pc, #4	; (adr r0, 800cc34 <_printf_i+0x40>)
 800cc30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cc34:	0800cc8d 	.word	0x0800cc8d
 800cc38:	0800cca1 	.word	0x0800cca1
 800cc3c:	0800cc1d 	.word	0x0800cc1d
 800cc40:	0800cc1d 	.word	0x0800cc1d
 800cc44:	0800cc1d 	.word	0x0800cc1d
 800cc48:	0800cc1d 	.word	0x0800cc1d
 800cc4c:	0800cca1 	.word	0x0800cca1
 800cc50:	0800cc1d 	.word	0x0800cc1d
 800cc54:	0800cc1d 	.word	0x0800cc1d
 800cc58:	0800cc1d 	.word	0x0800cc1d
 800cc5c:	0800cc1d 	.word	0x0800cc1d
 800cc60:	0800cdad 	.word	0x0800cdad
 800cc64:	0800ccd1 	.word	0x0800ccd1
 800cc68:	0800cd8f 	.word	0x0800cd8f
 800cc6c:	0800cc1d 	.word	0x0800cc1d
 800cc70:	0800cc1d 	.word	0x0800cc1d
 800cc74:	0800cdcf 	.word	0x0800cdcf
 800cc78:	0800cc1d 	.word	0x0800cc1d
 800cc7c:	0800ccd1 	.word	0x0800ccd1
 800cc80:	0800cc1d 	.word	0x0800cc1d
 800cc84:	0800cc1d 	.word	0x0800cc1d
 800cc88:	0800cd97 	.word	0x0800cd97
 800cc8c:	680b      	ldr	r3, [r1, #0]
 800cc8e:	1d1a      	adds	r2, r3, #4
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	600a      	str	r2, [r1, #0]
 800cc94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e0a3      	b.n	800cde8 <_printf_i+0x1f4>
 800cca0:	6825      	ldr	r5, [r4, #0]
 800cca2:	6808      	ldr	r0, [r1, #0]
 800cca4:	062e      	lsls	r6, r5, #24
 800cca6:	f100 0304 	add.w	r3, r0, #4
 800ccaa:	d50a      	bpl.n	800ccc2 <_printf_i+0xce>
 800ccac:	6805      	ldr	r5, [r0, #0]
 800ccae:	600b      	str	r3, [r1, #0]
 800ccb0:	2d00      	cmp	r5, #0
 800ccb2:	da03      	bge.n	800ccbc <_printf_i+0xc8>
 800ccb4:	232d      	movs	r3, #45	; 0x2d
 800ccb6:	426d      	negs	r5, r5
 800ccb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccbc:	485e      	ldr	r0, [pc, #376]	; (800ce38 <_printf_i+0x244>)
 800ccbe:	230a      	movs	r3, #10
 800ccc0:	e019      	b.n	800ccf6 <_printf_i+0x102>
 800ccc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ccc6:	6805      	ldr	r5, [r0, #0]
 800ccc8:	600b      	str	r3, [r1, #0]
 800ccca:	bf18      	it	ne
 800cccc:	b22d      	sxthne	r5, r5
 800ccce:	e7ef      	b.n	800ccb0 <_printf_i+0xbc>
 800ccd0:	680b      	ldr	r3, [r1, #0]
 800ccd2:	6825      	ldr	r5, [r4, #0]
 800ccd4:	1d18      	adds	r0, r3, #4
 800ccd6:	6008      	str	r0, [r1, #0]
 800ccd8:	0628      	lsls	r0, r5, #24
 800ccda:	d501      	bpl.n	800cce0 <_printf_i+0xec>
 800ccdc:	681d      	ldr	r5, [r3, #0]
 800ccde:	e002      	b.n	800cce6 <_printf_i+0xf2>
 800cce0:	0669      	lsls	r1, r5, #25
 800cce2:	d5fb      	bpl.n	800ccdc <_printf_i+0xe8>
 800cce4:	881d      	ldrh	r5, [r3, #0]
 800cce6:	4854      	ldr	r0, [pc, #336]	; (800ce38 <_printf_i+0x244>)
 800cce8:	2f6f      	cmp	r7, #111	; 0x6f
 800ccea:	bf0c      	ite	eq
 800ccec:	2308      	moveq	r3, #8
 800ccee:	230a      	movne	r3, #10
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccf6:	6866      	ldr	r6, [r4, #4]
 800ccf8:	60a6      	str	r6, [r4, #8]
 800ccfa:	2e00      	cmp	r6, #0
 800ccfc:	bfa2      	ittt	ge
 800ccfe:	6821      	ldrge	r1, [r4, #0]
 800cd00:	f021 0104 	bicge.w	r1, r1, #4
 800cd04:	6021      	strge	r1, [r4, #0]
 800cd06:	b90d      	cbnz	r5, 800cd0c <_printf_i+0x118>
 800cd08:	2e00      	cmp	r6, #0
 800cd0a:	d04d      	beq.n	800cda8 <_printf_i+0x1b4>
 800cd0c:	4616      	mov	r6, r2
 800cd0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd12:	fb03 5711 	mls	r7, r3, r1, r5
 800cd16:	5dc7      	ldrb	r7, [r0, r7]
 800cd18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd1c:	462f      	mov	r7, r5
 800cd1e:	42bb      	cmp	r3, r7
 800cd20:	460d      	mov	r5, r1
 800cd22:	d9f4      	bls.n	800cd0e <_printf_i+0x11a>
 800cd24:	2b08      	cmp	r3, #8
 800cd26:	d10b      	bne.n	800cd40 <_printf_i+0x14c>
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	07df      	lsls	r7, r3, #31
 800cd2c:	d508      	bpl.n	800cd40 <_printf_i+0x14c>
 800cd2e:	6923      	ldr	r3, [r4, #16]
 800cd30:	6861      	ldr	r1, [r4, #4]
 800cd32:	4299      	cmp	r1, r3
 800cd34:	bfde      	ittt	le
 800cd36:	2330      	movle	r3, #48	; 0x30
 800cd38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800cd40:	1b92      	subs	r2, r2, r6
 800cd42:	6122      	str	r2, [r4, #16]
 800cd44:	f8cd a000 	str.w	sl, [sp]
 800cd48:	464b      	mov	r3, r9
 800cd4a:	aa03      	add	r2, sp, #12
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4640      	mov	r0, r8
 800cd50:	f7ff fee2 	bl	800cb18 <_printf_common>
 800cd54:	3001      	adds	r0, #1
 800cd56:	d14c      	bne.n	800cdf2 <_printf_i+0x1fe>
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd5c:	b004      	add	sp, #16
 800cd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd62:	4835      	ldr	r0, [pc, #212]	; (800ce38 <_printf_i+0x244>)
 800cd64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	680e      	ldr	r6, [r1, #0]
 800cd6c:	061f      	lsls	r7, r3, #24
 800cd6e:	f856 5b04 	ldr.w	r5, [r6], #4
 800cd72:	600e      	str	r6, [r1, #0]
 800cd74:	d514      	bpl.n	800cda0 <_printf_i+0x1ac>
 800cd76:	07d9      	lsls	r1, r3, #31
 800cd78:	bf44      	itt	mi
 800cd7a:	f043 0320 	orrmi.w	r3, r3, #32
 800cd7e:	6023      	strmi	r3, [r4, #0]
 800cd80:	b91d      	cbnz	r5, 800cd8a <_printf_i+0x196>
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	f023 0320 	bic.w	r3, r3, #32
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	2310      	movs	r3, #16
 800cd8c:	e7b0      	b.n	800ccf0 <_printf_i+0xfc>
 800cd8e:	6823      	ldr	r3, [r4, #0]
 800cd90:	f043 0320 	orr.w	r3, r3, #32
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	2378      	movs	r3, #120	; 0x78
 800cd98:	4828      	ldr	r0, [pc, #160]	; (800ce3c <_printf_i+0x248>)
 800cd9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd9e:	e7e3      	b.n	800cd68 <_printf_i+0x174>
 800cda0:	065e      	lsls	r6, r3, #25
 800cda2:	bf48      	it	mi
 800cda4:	b2ad      	uxthmi	r5, r5
 800cda6:	e7e6      	b.n	800cd76 <_printf_i+0x182>
 800cda8:	4616      	mov	r6, r2
 800cdaa:	e7bb      	b.n	800cd24 <_printf_i+0x130>
 800cdac:	680b      	ldr	r3, [r1, #0]
 800cdae:	6826      	ldr	r6, [r4, #0]
 800cdb0:	6960      	ldr	r0, [r4, #20]
 800cdb2:	1d1d      	adds	r5, r3, #4
 800cdb4:	600d      	str	r5, [r1, #0]
 800cdb6:	0635      	lsls	r5, r6, #24
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	d501      	bpl.n	800cdc0 <_printf_i+0x1cc>
 800cdbc:	6018      	str	r0, [r3, #0]
 800cdbe:	e002      	b.n	800cdc6 <_printf_i+0x1d2>
 800cdc0:	0671      	lsls	r1, r6, #25
 800cdc2:	d5fb      	bpl.n	800cdbc <_printf_i+0x1c8>
 800cdc4:	8018      	strh	r0, [r3, #0]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	6123      	str	r3, [r4, #16]
 800cdca:	4616      	mov	r6, r2
 800cdcc:	e7ba      	b.n	800cd44 <_printf_i+0x150>
 800cdce:	680b      	ldr	r3, [r1, #0]
 800cdd0:	1d1a      	adds	r2, r3, #4
 800cdd2:	600a      	str	r2, [r1, #0]
 800cdd4:	681e      	ldr	r6, [r3, #0]
 800cdd6:	6862      	ldr	r2, [r4, #4]
 800cdd8:	2100      	movs	r1, #0
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7f3 f9e8 	bl	80001b0 <memchr>
 800cde0:	b108      	cbz	r0, 800cde6 <_printf_i+0x1f2>
 800cde2:	1b80      	subs	r0, r0, r6
 800cde4:	6060      	str	r0, [r4, #4]
 800cde6:	6863      	ldr	r3, [r4, #4]
 800cde8:	6123      	str	r3, [r4, #16]
 800cdea:	2300      	movs	r3, #0
 800cdec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdf0:	e7a8      	b.n	800cd44 <_printf_i+0x150>
 800cdf2:	6923      	ldr	r3, [r4, #16]
 800cdf4:	4632      	mov	r2, r6
 800cdf6:	4649      	mov	r1, r9
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	47d0      	blx	sl
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d0ab      	beq.n	800cd58 <_printf_i+0x164>
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	079b      	lsls	r3, r3, #30
 800ce04:	d413      	bmi.n	800ce2e <_printf_i+0x23a>
 800ce06:	68e0      	ldr	r0, [r4, #12]
 800ce08:	9b03      	ldr	r3, [sp, #12]
 800ce0a:	4298      	cmp	r0, r3
 800ce0c:	bfb8      	it	lt
 800ce0e:	4618      	movlt	r0, r3
 800ce10:	e7a4      	b.n	800cd5c <_printf_i+0x168>
 800ce12:	2301      	movs	r3, #1
 800ce14:	4632      	mov	r2, r6
 800ce16:	4649      	mov	r1, r9
 800ce18:	4640      	mov	r0, r8
 800ce1a:	47d0      	blx	sl
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d09b      	beq.n	800cd58 <_printf_i+0x164>
 800ce20:	3501      	adds	r5, #1
 800ce22:	68e3      	ldr	r3, [r4, #12]
 800ce24:	9903      	ldr	r1, [sp, #12]
 800ce26:	1a5b      	subs	r3, r3, r1
 800ce28:	42ab      	cmp	r3, r5
 800ce2a:	dcf2      	bgt.n	800ce12 <_printf_i+0x21e>
 800ce2c:	e7eb      	b.n	800ce06 <_printf_i+0x212>
 800ce2e:	2500      	movs	r5, #0
 800ce30:	f104 0619 	add.w	r6, r4, #25
 800ce34:	e7f5      	b.n	800ce22 <_printf_i+0x22e>
 800ce36:	bf00      	nop
 800ce38:	0800dddd 	.word	0x0800dddd
 800ce3c:	0800ddee 	.word	0x0800ddee

0800ce40 <_sbrk_r>:
 800ce40:	b538      	push	{r3, r4, r5, lr}
 800ce42:	4d06      	ldr	r5, [pc, #24]	; (800ce5c <_sbrk_r+0x1c>)
 800ce44:	2300      	movs	r3, #0
 800ce46:	4604      	mov	r4, r0
 800ce48:	4608      	mov	r0, r1
 800ce4a:	602b      	str	r3, [r5, #0]
 800ce4c:	f7f5 fc1a 	bl	8002684 <_sbrk>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	d102      	bne.n	800ce5a <_sbrk_r+0x1a>
 800ce54:	682b      	ldr	r3, [r5, #0]
 800ce56:	b103      	cbz	r3, 800ce5a <_sbrk_r+0x1a>
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	bd38      	pop	{r3, r4, r5, pc}
 800ce5c:	200018b0 	.word	0x200018b0

0800ce60 <__sread>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	460c      	mov	r4, r1
 800ce64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce68:	f000 f8e0 	bl	800d02c <_read_r>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	bfab      	itete	ge
 800ce70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce72:	89a3      	ldrhlt	r3, [r4, #12]
 800ce74:	181b      	addge	r3, r3, r0
 800ce76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce7a:	bfac      	ite	ge
 800ce7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce7e:	81a3      	strhlt	r3, [r4, #12]
 800ce80:	bd10      	pop	{r4, pc}

0800ce82 <__swrite>:
 800ce82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce86:	461f      	mov	r7, r3
 800ce88:	898b      	ldrh	r3, [r1, #12]
 800ce8a:	05db      	lsls	r3, r3, #23
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	460c      	mov	r4, r1
 800ce90:	4616      	mov	r6, r2
 800ce92:	d505      	bpl.n	800cea0 <__swrite+0x1e>
 800ce94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce98:	2302      	movs	r3, #2
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f000 f868 	bl	800cf70 <_lseek_r>
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ceaa:	81a3      	strh	r3, [r4, #12]
 800ceac:	4632      	mov	r2, r6
 800ceae:	463b      	mov	r3, r7
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb6:	f000 b817 	b.w	800cee8 <_write_r>

0800ceba <__sseek>:
 800ceba:	b510      	push	{r4, lr}
 800cebc:	460c      	mov	r4, r1
 800cebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec2:	f000 f855 	bl	800cf70 <_lseek_r>
 800cec6:	1c43      	adds	r3, r0, #1
 800cec8:	89a3      	ldrh	r3, [r4, #12]
 800ceca:	bf15      	itete	ne
 800cecc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ced2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ced6:	81a3      	strheq	r3, [r4, #12]
 800ced8:	bf18      	it	ne
 800ceda:	81a3      	strhne	r3, [r4, #12]
 800cedc:	bd10      	pop	{r4, pc}

0800cede <__sclose>:
 800cede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee2:	f000 b813 	b.w	800cf0c <_close_r>
	...

0800cee8 <_write_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d07      	ldr	r5, [pc, #28]	; (800cf08 <_write_r+0x20>)
 800ceec:	4604      	mov	r4, r0
 800ceee:	4608      	mov	r0, r1
 800cef0:	4611      	mov	r1, r2
 800cef2:	2200      	movs	r2, #0
 800cef4:	602a      	str	r2, [r5, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	f7fd fea4 	bl	800ac44 <_write>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d102      	bne.n	800cf06 <_write_r+0x1e>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	b103      	cbz	r3, 800cf06 <_write_r+0x1e>
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	200018b0 	.word	0x200018b0

0800cf0c <_close_r>:
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	4d06      	ldr	r5, [pc, #24]	; (800cf28 <_close_r+0x1c>)
 800cf10:	2300      	movs	r3, #0
 800cf12:	4604      	mov	r4, r0
 800cf14:	4608      	mov	r0, r1
 800cf16:	602b      	str	r3, [r5, #0]
 800cf18:	f7f5 fb7f 	bl	800261a <_close>
 800cf1c:	1c43      	adds	r3, r0, #1
 800cf1e:	d102      	bne.n	800cf26 <_close_r+0x1a>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b103      	cbz	r3, 800cf26 <_close_r+0x1a>
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	200018b0 	.word	0x200018b0

0800cf2c <_fstat_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d07      	ldr	r5, [pc, #28]	; (800cf4c <_fstat_r+0x20>)
 800cf30:	2300      	movs	r3, #0
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	4611      	mov	r1, r2
 800cf38:	602b      	str	r3, [r5, #0]
 800cf3a:	f7f5 fb7a 	bl	8002632 <_fstat>
 800cf3e:	1c43      	adds	r3, r0, #1
 800cf40:	d102      	bne.n	800cf48 <_fstat_r+0x1c>
 800cf42:	682b      	ldr	r3, [r5, #0]
 800cf44:	b103      	cbz	r3, 800cf48 <_fstat_r+0x1c>
 800cf46:	6023      	str	r3, [r4, #0]
 800cf48:	bd38      	pop	{r3, r4, r5, pc}
 800cf4a:	bf00      	nop
 800cf4c:	200018b0 	.word	0x200018b0

0800cf50 <_isatty_r>:
 800cf50:	b538      	push	{r3, r4, r5, lr}
 800cf52:	4d06      	ldr	r5, [pc, #24]	; (800cf6c <_isatty_r+0x1c>)
 800cf54:	2300      	movs	r3, #0
 800cf56:	4604      	mov	r4, r0
 800cf58:	4608      	mov	r0, r1
 800cf5a:	602b      	str	r3, [r5, #0]
 800cf5c:	f7f5 fb79 	bl	8002652 <_isatty>
 800cf60:	1c43      	adds	r3, r0, #1
 800cf62:	d102      	bne.n	800cf6a <_isatty_r+0x1a>
 800cf64:	682b      	ldr	r3, [r5, #0]
 800cf66:	b103      	cbz	r3, 800cf6a <_isatty_r+0x1a>
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	bd38      	pop	{r3, r4, r5, pc}
 800cf6c:	200018b0 	.word	0x200018b0

0800cf70 <_lseek_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	4d07      	ldr	r5, [pc, #28]	; (800cf90 <_lseek_r+0x20>)
 800cf74:	4604      	mov	r4, r0
 800cf76:	4608      	mov	r0, r1
 800cf78:	4611      	mov	r1, r2
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	602a      	str	r2, [r5, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	f7f5 fb72 	bl	8002668 <_lseek>
 800cf84:	1c43      	adds	r3, r0, #1
 800cf86:	d102      	bne.n	800cf8e <_lseek_r+0x1e>
 800cf88:	682b      	ldr	r3, [r5, #0]
 800cf8a:	b103      	cbz	r3, 800cf8e <_lseek_r+0x1e>
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	bd38      	pop	{r3, r4, r5, pc}
 800cf90:	200018b0 	.word	0x200018b0

0800cf94 <memmove>:
 800cf94:	4288      	cmp	r0, r1
 800cf96:	b510      	push	{r4, lr}
 800cf98:	eb01 0402 	add.w	r4, r1, r2
 800cf9c:	d902      	bls.n	800cfa4 <memmove+0x10>
 800cf9e:	4284      	cmp	r4, r0
 800cfa0:	4623      	mov	r3, r4
 800cfa2:	d807      	bhi.n	800cfb4 <memmove+0x20>
 800cfa4:	1e43      	subs	r3, r0, #1
 800cfa6:	42a1      	cmp	r1, r4
 800cfa8:	d008      	beq.n	800cfbc <memmove+0x28>
 800cfaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfb2:	e7f8      	b.n	800cfa6 <memmove+0x12>
 800cfb4:	4402      	add	r2, r0
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	428a      	cmp	r2, r1
 800cfba:	d100      	bne.n	800cfbe <memmove+0x2a>
 800cfbc:	bd10      	pop	{r4, pc}
 800cfbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfc6:	e7f7      	b.n	800cfb8 <memmove+0x24>

0800cfc8 <__malloc_lock>:
 800cfc8:	4801      	ldr	r0, [pc, #4]	; (800cfd0 <__malloc_lock+0x8>)
 800cfca:	f7ff b9df 	b.w	800c38c <__retarget_lock_acquire_recursive>
 800cfce:	bf00      	nop
 800cfd0:	200018a8 	.word	0x200018a8

0800cfd4 <__malloc_unlock>:
 800cfd4:	4801      	ldr	r0, [pc, #4]	; (800cfdc <__malloc_unlock+0x8>)
 800cfd6:	f7ff b9da 	b.w	800c38e <__retarget_lock_release_recursive>
 800cfda:	bf00      	nop
 800cfdc:	200018a8 	.word	0x200018a8

0800cfe0 <_realloc_r>:
 800cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe2:	4607      	mov	r7, r0
 800cfe4:	4614      	mov	r4, r2
 800cfe6:	460e      	mov	r6, r1
 800cfe8:	b921      	cbnz	r1, 800cff4 <_realloc_r+0x14>
 800cfea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cfee:	4611      	mov	r1, r2
 800cff0:	f7ff ba82 	b.w	800c4f8 <_malloc_r>
 800cff4:	b922      	cbnz	r2, 800d000 <_realloc_r+0x20>
 800cff6:	f7ff fa2f 	bl	800c458 <_free_r>
 800cffa:	4625      	mov	r5, r4
 800cffc:	4628      	mov	r0, r5
 800cffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d000:	f000 f826 	bl	800d050 <_malloc_usable_size_r>
 800d004:	42a0      	cmp	r0, r4
 800d006:	d20f      	bcs.n	800d028 <_realloc_r+0x48>
 800d008:	4621      	mov	r1, r4
 800d00a:	4638      	mov	r0, r7
 800d00c:	f7ff fa74 	bl	800c4f8 <_malloc_r>
 800d010:	4605      	mov	r5, r0
 800d012:	2800      	cmp	r0, #0
 800d014:	d0f2      	beq.n	800cffc <_realloc_r+0x1c>
 800d016:	4631      	mov	r1, r6
 800d018:	4622      	mov	r2, r4
 800d01a:	f7fe fe2d 	bl	800bc78 <memcpy>
 800d01e:	4631      	mov	r1, r6
 800d020:	4638      	mov	r0, r7
 800d022:	f7ff fa19 	bl	800c458 <_free_r>
 800d026:	e7e9      	b.n	800cffc <_realloc_r+0x1c>
 800d028:	4635      	mov	r5, r6
 800d02a:	e7e7      	b.n	800cffc <_realloc_r+0x1c>

0800d02c <_read_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4d07      	ldr	r5, [pc, #28]	; (800d04c <_read_r+0x20>)
 800d030:	4604      	mov	r4, r0
 800d032:	4608      	mov	r0, r1
 800d034:	4611      	mov	r1, r2
 800d036:	2200      	movs	r2, #0
 800d038:	602a      	str	r2, [r5, #0]
 800d03a:	461a      	mov	r2, r3
 800d03c:	f7f5 fad0 	bl	80025e0 <_read>
 800d040:	1c43      	adds	r3, r0, #1
 800d042:	d102      	bne.n	800d04a <_read_r+0x1e>
 800d044:	682b      	ldr	r3, [r5, #0]
 800d046:	b103      	cbz	r3, 800d04a <_read_r+0x1e>
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	bd38      	pop	{r3, r4, r5, pc}
 800d04c:	200018b0 	.word	0x200018b0

0800d050 <_malloc_usable_size_r>:
 800d050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d054:	1f18      	subs	r0, r3, #4
 800d056:	2b00      	cmp	r3, #0
 800d058:	bfbc      	itt	lt
 800d05a:	580b      	ldrlt	r3, [r1, r0]
 800d05c:	18c0      	addlt	r0, r0, r3
 800d05e:	4770      	bx	lr

0800d060 <_init>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	bf00      	nop
 800d064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d066:	bc08      	pop	{r3}
 800d068:	469e      	mov	lr, r3
 800d06a:	4770      	bx	lr

0800d06c <_fini>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	bf00      	nop
 800d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d072:	bc08      	pop	{r3}
 800d074:	469e      	mov	lr, r3
 800d076:	4770      	bx	lr
