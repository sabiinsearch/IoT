
stm32WB55CG_BLE_Conf_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a14  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  08006da8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  08006dcc  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  08006e65  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  08006ea2  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000098  20000118  08006eb3  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000174  200001b0  08006f4b  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  08006f4b  00020324  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0002ca10  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00005313  00000000  00000000  0004cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00001fe8  00000000  00000000  00051f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001d90  00000000  00000000  00053ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00029988  00000000  00000000  00055c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0001a70a  00000000  00000000  0007f608  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000ebf3f  00000000  00000000  00099d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  00185c51  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008290  00000000  00000000  00185ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001b0 	.word	0x200001b0
 8000158:	00000000 	.word	0x00000000
 800015c:	08006b38 	.word	0x08006b38

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001b4 	.word	0x200001b4
 8000178:	08006b38 	.word	0x08006b38

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4313      	orrs	r3, r2
 80001a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4013      	ands	r3, r2
 80001ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001b0:	68fb      	ldr	r3, [r7, #12]
}
 80001b2:	bf00      	nop
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001bc:	4770      	bx	lr

080001be <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 80001be:	b480      	push	{r7}
 80001c0:	b083      	sub	sp, #12
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	43db      	mvns	r3, r3
 80001d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001d4:	4013      	ands	r3, r2
 80001d6:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000204:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4013      	ands	r3, r2
 800020c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800020e:	68fb      	ldr	r3, [r7, #12]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 8000234:	2303      	movs	r3, #3
 8000236:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 8000238:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800023c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	2001      	movs	r0, #1
 8000240:	f7ff ffa4 	bl	800018c <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4619      	mov	r1, r3
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024c:	f001 fcd2 	bl	8001bf4 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000250:	2001      	movs	r0, #1
 8000252:	f7ff ffb4 	bl	80001be <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 8000256:	2318      	movs	r3, #24
 8000258:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	2002      	movs	r0, #2
 800025c:	f7ff ff96 	bl	800018c <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4619      	mov	r1, r3
 8000264:	4809      	ldr	r0, [pc, #36]	; (800028c <APPD_Init+0x70>)
 8000266:	f001 fcc5 	bl	8001bf4 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800026a:	2002      	movs	r0, #2
 800026c:	f7ff ffa7 	bl	80001be <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000270:	f001 fb16 	bl	80018a0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000274:	f001 fb1a 	bl	80018ac <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000278:	f001 fb1e 	bl	80018b8 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 800027c:	f000 f824 	bl	80002c8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000280:	f000 f8c2 	bl	8000408 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000284:	bf00      	nop
}
 8000286:	3718      	adds	r7, #24
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	48000400 	.word	0x48000400

08000290 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <APPD_EnableCPU2+0x34>)
 8000298:	1d3c      	adds	r4, r7, #4
 800029a:	461d      	mov	r5, r3
 800029c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002a4:	c403      	stmia	r4!, {r0, r1}
 80002a6:	8022      	strh	r2, [r4, #0]
 80002a8:	3402      	adds	r4, #2
 80002aa:	0c13      	lsrs	r3, r2, #16
 80002ac:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80002ae:	f005 fc13 	bl	8005ad8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f004 ff6c 	bl	8005192 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80002ba:	bf00      	nop
}
 80002bc:	3720      	adds	r7, #32
 80002be:	46bd      	mov	sp, r7
 80002c0:	bdb0      	pop	{r4, r5, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	08006b50 	.word	0x08006b50

080002c8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	77fb      	strb	r3, [r7, #31]
 80002ec:	e033      	b.n	8000356 <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80002ee:	7ffb      	ldrb	r3, [r7, #31]
 80002f0:	4a42      	ldr	r2, [pc, #264]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	4413      	add	r3, r2
 80002f6:	799b      	ldrb	r3, [r3, #6]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d028      	beq.n	800034e <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002fc:	7ffb      	ldrb	r3, [r7, #31]
 80002fe:	4a3f      	ldr	r2, [pc, #252]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 8000300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000304:	4a3e      	ldr	r2, [pc, #248]	; (8000400 <APPD_SetCPU2GpioConfig+0x138>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d00f      	beq.n	800032a <APPD_SetCPU2GpioConfig+0x62>
 800030a:	4a3e      	ldr	r2, [pc, #248]	; (8000404 <APPD_SetCPU2GpioConfig+0x13c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d015      	beq.n	800033c <APPD_SetCPU2GpioConfig+0x74>
 8000310:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000314:	d000      	beq.n	8000318 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000316:	e01b      	b.n	8000350 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000318:	7ffb      	ldrb	r3, [r7, #31]
 800031a:	4a38      	ldr	r2, [pc, #224]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	4413      	add	r3, r2
 8000320:	889a      	ldrh	r2, [r3, #4]
 8000322:	8bbb      	ldrh	r3, [r7, #28]
 8000324:	4313      	orrs	r3, r2
 8000326:	83bb      	strh	r3, [r7, #28]
          break;
 8000328:	e012      	b.n	8000350 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800032a:	7ffb      	ldrb	r3, [r7, #31]
 800032c:	4a33      	ldr	r2, [pc, #204]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	4413      	add	r3, r2
 8000332:	889a      	ldrh	r2, [r3, #4]
 8000334:	8b7b      	ldrh	r3, [r7, #26]
 8000336:	4313      	orrs	r3, r2
 8000338:	837b      	strh	r3, [r7, #26]
          break;
 800033a:	e009      	b.n	8000350 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800033c:	7ffb      	ldrb	r3, [r7, #31]
 800033e:	4a2f      	ldr	r2, [pc, #188]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	4413      	add	r3, r2
 8000344:	889a      	ldrh	r2, [r3, #4]
 8000346:	8b3b      	ldrh	r3, [r7, #24]
 8000348:	4313      	orrs	r3, r2
 800034a:	833b      	strh	r3, [r7, #24]
          break;
 800034c:	e000      	b.n	8000350 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 800034e:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000350:	7ffb      	ldrb	r3, [r7, #31]
 8000352:	3301      	adds	r3, #1
 8000354:	77fb      	strb	r3, [r7, #31]
 8000356:	7ffb      	ldrb	r3, [r7, #31]
 8000358:	2b21      	cmp	r3, #33	; 0x21
 800035a:	d9c8      	bls.n	80002ee <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000364:	2303      	movs	r3, #3
 8000366:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000368:	8bbb      	ldrh	r3, [r7, #28]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d014      	beq.n	8000398 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 800036e:	8bbb      	ldrh	r3, [r7, #28]
 8000370:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	2001      	movs	r0, #1
 8000374:	f7ff ff0a 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000378:	2001      	movs	r0, #1
 800037a:	f7ff ff33 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f001 fc35 	bl	8001bf4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800038a:	8bbb      	ldrh	r3, [r7, #28]
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f001 fd9e 	bl	8001ed4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000398:	8b7b      	ldrh	r3, [r7, #26]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d012      	beq.n	80003c4 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 800039e:	8b7b      	ldrh	r3, [r7, #26]
 80003a0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a2:	2002      	movs	r0, #2
 80003a4:	f7ff fef2 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80003a8:	2002      	movs	r0, #2
 80003aa:	f7ff ff1b 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4813      	ldr	r0, [pc, #76]	; (8000400 <APPD_SetCPU2GpioConfig+0x138>)
 80003b4:	f001 fc1e 	bl	8001bf4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80003b8:	8b7b      	ldrh	r3, [r7, #26]
 80003ba:	2200      	movs	r2, #0
 80003bc:	4619      	mov	r1, r3
 80003be:	4810      	ldr	r0, [pc, #64]	; (8000400 <APPD_SetCPU2GpioConfig+0x138>)
 80003c0:	f001 fd88 	bl	8001ed4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80003c4:	8b3b      	ldrh	r3, [r7, #24]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d013      	beq.n	80003f2 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 80003ca:	8b3b      	ldrh	r3, [r7, #24]
 80003cc:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	2004      	movs	r0, #4
 80003d0:	f7ff fedc 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003d4:	2004      	movs	r0, #4
 80003d6:	f7ff ff05 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <APPD_SetCPU2GpioConfig+0x13c>)
 80003e0:	f001 fc08 	bl	8001bf4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80003e4:	8b3b      	ldrh	r3, [r7, #24]
 80003e6:	2200      	movs	r2, #0
 80003e8:	4619      	mov	r1, r3
 80003ea:	4806      	ldr	r0, [pc, #24]	; (8000404 <APPD_SetCPU2GpioConfig+0x13c>)
 80003ec:	f001 fd72 	bl	8001ed4 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
}
 80003f4:	3720      	adds	r7, #32
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	08006bd0 	.word	0x08006bd0
 8000400:	48000400 	.word	0x48000400
 8000404:	48000800 	.word	0x48000800

08000408 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 800040c:	bf00      	nop
}
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <LL_C2_PWR_SetPowerMode+0x28>)
 8000422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000426:	f023 0207 	bic.w	r2, r3, #7
 800042a:	4905      	ldr	r1, [pc, #20]	; (8000440 <LL_C2_PWR_SetPowerMode+0x28>)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4313      	orrs	r3, r2
 8000430:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	58000400 	.word	0x58000400

08000444 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800044c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	608b      	str	r3, [r1, #8]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000470:	f000 f80c 	bl	800048c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000474:	4904      	ldr	r1, [pc, #16]	; (8000488 <APPE_Init+0x1c>)
 8000476:	2000      	movs	r0, #0
 8000478:	f000 fbf4 	bl	8000c64 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
   APPD_Init();
 800047c:	f7ff fece 	bl	800021c <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000480:	f000 f812 	bl	80004a8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000484:	bf00      	nop
}
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200002f8 	.word	0x200002f8

0800048c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000490:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000494:	f7ff ffd6 	bl	8000444 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000498:	f006 f8c8 	bl	800662c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800049c:	2004      	movs	r0, #4
 800049e:	f7ff ffbb 	bl	8000418 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004a2:	bf00      	nop
}
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ae:	f005 f9c9 	bl	8005844 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004b2:	4a11      	ldr	r2, [pc, #68]	; (80004f8 <appe_Tl_Init+0x50>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	2008      	movs	r0, #8
 80004b8:	f006 f9d8 	bl	800686c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <appe_Tl_Init+0x54>)
 80004be:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <appe_Tl_Init+0x58>)
 80004c2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80004c4:	463b      	mov	r3, r7
 80004c6:	4619      	mov	r1, r3
 80004c8:	480e      	ldr	r0, [pc, #56]	; (8000504 <appe_Tl_Init+0x5c>)
 80004ca:	f005 f84b 	bl	8005564 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <appe_Tl_Init+0x60>)
 80004d0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <appe_Tl_Init+0x64>)
 80004d4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <appe_Tl_Init+0x68>)
 80004d8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80004da:	f240 533c 	movw	r3, #1340	; 0x53c
 80004de:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4618      	mov	r0, r3
 80004e6:	f005 fa6d 	bl	80059c4 <TL_MM_Init>

  TL_Enable();
 80004ea:	f005 f9a5 	bl	8005838 <TL_Enable>

  return;
 80004ee:	bf00      	nop
}
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	0800559d 	.word	0x0800559d
 80004fc:	20030724 	.word	0x20030724
 8000500:	08000515 	.word	0x08000515
 8000504:	0800052b 	.word	0x0800052b
 8000508:	2003093c 	.word	0x2003093c
 800050c:	20030830 	.word	0x20030830
 8000510:	200301e8 	.word	0x200301e8

08000514 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800051e:	bf00      	nop
}
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000532:	f7ff fead 	bl	8000290 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000536:	f005 fbe1 	bl	8005cfc <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800053a:	2100      	movs	r1, #0
 800053c:	2001      	movs	r0, #1
 800053e:	f006 f887 	bl	8006650 <UTIL_LPM_SetOffMode>
  return;
 8000542:	bf00      	nop
}
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800054e:	bf00      	nop
}
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000566:	f006 f8a1 	bl	80066ac <UTIL_SEQ_Run>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800057a:	2100      	movs	r1, #0
 800057c:	2008      	movs	r0, #8
 800057e:	f006 f995 	bl	80068ac <UTIL_SEQ_SetTask>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000592:	2002      	movs	r0, #2
 8000594:	f006 f9f0 	bl	8006978 <UTIL_SEQ_SetEvt>
  return;
 8000598:	bf00      	nop
}
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005a8:	2002      	movs	r0, #2
 80005aa:	f006 fa03 	bl	80069b4 <UTIL_SEQ_WaitEvt>
  return;
 80005ae:	bf00      	nop
}
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_EXTI_EnableIT_0_31+0x24>)
 80005c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <LL_EXTI_EnableIT_0_31+0x24>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	58000800 	.word	0x58000800

080005e0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4904      	ldr	r1, [pc, #16]	; (8000600 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	600b      	str	r3, [r1, #0]

}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	58000800 	.word	0x58000800

08000604 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <ReadRtcSsrValue+0x3c>)
 800060c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800060e:	b29b      	uxth	r3, r3
 8000610:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <ReadRtcSsrValue+0x3c>)
 8000614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000616:	b29b      	uxth	r3, r3
 8000618:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800061a:	e005      	b.n	8000628 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <ReadRtcSsrValue+0x3c>)
 8000622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000624:	b29b      	uxth	r3, r3
 8000626:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d1f5      	bne.n	800061c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000630:	683b      	ldr	r3, [r7, #0]
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40002800 	.word	0x40002800

08000644 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	491d      	ldr	r1, [pc, #116]	; (80006cc <LinkTimerAfter+0x88>)
 8000658:	4613      	mov	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4413      	add	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	440b      	add	r3, r1
 8000662:	3315      	adds	r3, #21
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b06      	cmp	r3, #6
 800066c:	d009      	beq.n	8000682 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800066e:	7bfa      	ldrb	r2, [r7, #15]
 8000670:	4916      	ldr	r1, [pc, #88]	; (80006cc <LinkTimerAfter+0x88>)
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	440b      	add	r3, r1
 800067c:	3314      	adds	r3, #20
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	4911      	ldr	r1, [pc, #68]	; (80006cc <LinkTimerAfter+0x88>)
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	440b      	add	r3, r1
 8000690:	3315      	adds	r3, #21
 8000692:	7bfa      	ldrb	r2, [r7, #15]
 8000694:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <LinkTimerAfter+0x88>)
 800069a:	4613      	mov	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	4413      	add	r3, r2
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	440b      	add	r3, r1
 80006a4:	3314      	adds	r3, #20
 80006a6:	79ba      	ldrb	r2, [r7, #6]
 80006a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <LinkTimerAfter+0x88>)
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	440b      	add	r3, r1
 80006b8:	3315      	adds	r3, #21
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	701a      	strb	r2, [r3, #0]

  return;
 80006be:	bf00      	nop
}
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000028 	.word	0x20000028

080006d0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <LinkTimerBefore+0xb8>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d032      	beq.n	8000752 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80006ec:	79ba      	ldrb	r2, [r7, #6]
 80006ee:	4927      	ldr	r1, [pc, #156]	; (800078c <LinkTimerBefore+0xbc>)
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	440b      	add	r3, r1
 80006fa:	3314      	adds	r3, #20
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000700:	7bfa      	ldrb	r2, [r7, #15]
 8000702:	4922      	ldr	r1, [pc, #136]	; (800078c <LinkTimerBefore+0xbc>)
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	440b      	add	r3, r1
 800070e:	3315      	adds	r3, #21
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	491d      	ldr	r1, [pc, #116]	; (800078c <LinkTimerBefore+0xbc>)
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	440b      	add	r3, r1
 8000722:	3315      	adds	r3, #21
 8000724:	79ba      	ldrb	r2, [r7, #6]
 8000726:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	4918      	ldr	r1, [pc, #96]	; (800078c <LinkTimerBefore+0xbc>)
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	440b      	add	r3, r1
 8000736:	3314      	adds	r3, #20
 8000738:	7bfa      	ldrb	r2, [r7, #15]
 800073a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	4913      	ldr	r1, [pc, #76]	; (800078c <LinkTimerBefore+0xbc>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	3314      	adds	r3, #20
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000750:	e014      	b.n	800077c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	490d      	ldr	r1, [pc, #52]	; (800078c <LinkTimerBefore+0xbc>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3315      	adds	r3, #21
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	4908      	ldr	r1, [pc, #32]	; (800078c <LinkTimerBefore+0xbc>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3314      	adds	r3, #20
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	701a      	strb	r2, [r3, #0]
  return;
 800077a:	bf00      	nop
}
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200000b8 	.word	0x200000b8
 800078c:	20000028 	.word	0x20000028

08000790 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800079a:	4b4e      	ldr	r3, [pc, #312]	; (80008d4 <linkTimer+0x144>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d118      	bne.n	80007d6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007a4:	4b4b      	ldr	r3, [pc, #300]	; (80008d4 <linkTimer+0x144>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <linkTimer+0x148>)
 80007ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ae:	4a49      	ldr	r2, [pc, #292]	; (80008d4 <linkTimer+0x144>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	4949      	ldr	r1, [pc, #292]	; (80008dc <linkTimer+0x14c>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	440b      	add	r3, r1
 80007c2:	3315      	adds	r3, #21
 80007c4:	2206      	movs	r2, #6
 80007c6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <linkTimer+0x150>)
 80007ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ce:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	81fb      	strh	r3, [r7, #14]
 80007d4:	e078      	b.n	80008c8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80007d6:	f000 f909 	bl	80009ec <ReturnTimeElapsed>
 80007da:	4603      	mov	r3, r0
 80007dc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	493e      	ldr	r1, [pc, #248]	; (80008dc <linkTimer+0x14c>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	3308      	adds	r3, #8
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	4419      	add	r1, r3
 80007f6:	4839      	ldr	r0, [pc, #228]	; (80008dc <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	4403      	add	r3, r0
 8000802:	3308      	adds	r3, #8
 8000804:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	4934      	ldr	r1, [pc, #208]	; (80008dc <linkTimer+0x14c>)
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3308      	adds	r3, #8
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <linkTimer+0x144>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <linkTimer+0x14c>)
 8000824:	460b      	mov	r3, r1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	440b      	add	r3, r1
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	3308      	adds	r3, #8
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	429a      	cmp	r2, r3
 8000836:	d337      	bcc.n	80008a8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <linkTimer+0x144>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800083e:	7b7a      	ldrb	r2, [r7, #13]
 8000840:	4926      	ldr	r1, [pc, #152]	; (80008dc <linkTimer+0x14c>)
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	440b      	add	r3, r1
 800084c:	3315      	adds	r3, #21
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000852:	e013      	b.n	800087c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000854:	7b7a      	ldrb	r2, [r7, #13]
 8000856:	4921      	ldr	r1, [pc, #132]	; (80008dc <linkTimer+0x14c>)
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	3315      	adds	r3, #21
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000868:	7b7a      	ldrb	r2, [r7, #13]
 800086a:	491c      	ldr	r1, [pc, #112]	; (80008dc <linkTimer+0x14c>)
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	440b      	add	r3, r1
 8000876:	3315      	adds	r3, #21
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800087c:	7b3b      	ldrb	r3, [r7, #12]
 800087e:	2b06      	cmp	r3, #6
 8000880:	d00b      	beq.n	800089a <linkTimer+0x10a>
 8000882:	7b3a      	ldrb	r2, [r7, #12]
 8000884:	4915      	ldr	r1, [pc, #84]	; (80008dc <linkTimer+0x14c>)
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	440b      	add	r3, r1
 8000890:	3308      	adds	r3, #8
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	429a      	cmp	r2, r3
 8000898:	d2dc      	bcs.n	8000854 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800089a:	7b7a      	ldrb	r2, [r7, #13]
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fecf 	bl	8000644 <LinkTimerAfter>
 80008a6:	e00f      	b.n	80008c8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <linkTimer+0x144>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff0c 	bl	80006d0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <linkTimer+0x144>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <linkTimer+0x148>)
 80008c0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <linkTimer+0x144>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80008c8:	89fb      	ldrh	r3, [r7, #14]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000b8 	.word	0x200000b8
 80008d8:	200000b9 	.word	0x200000b9
 80008dc:	20000028 	.word	0x20000028
 80008e0:	200000bc 	.word	0x200000bc

080008e4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80008f4:	4b39      	ldr	r3, [pc, #228]	; (80009dc <UnlinkTimer+0xf8>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d111      	bne.n	8000924 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000900:	4b36      	ldr	r3, [pc, #216]	; (80009dc <UnlinkTimer+0xf8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <UnlinkTimer+0xfc>)
 8000908:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	4935      	ldr	r1, [pc, #212]	; (80009e4 <UnlinkTimer+0x100>)
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	3315      	adds	r3, #21
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <UnlinkTimer+0xf8>)
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e03e      	b.n	80009a2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	492f      	ldr	r1, [pc, #188]	; (80009e4 <UnlinkTimer+0x100>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3314      	adds	r3, #20
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	492a      	ldr	r1, [pc, #168]	; (80009e4 <UnlinkTimer+0x100>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3315      	adds	r3, #21
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800094c:	79f9      	ldrb	r1, [r7, #7]
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	4824      	ldr	r0, [pc, #144]	; (80009e4 <UnlinkTimer+0x100>)
 8000952:	460b      	mov	r3, r1
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	440b      	add	r3, r1
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	4403      	add	r3, r0
 800095c:	3315      	adds	r3, #21
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2d8      	uxtb	r0, r3
 8000962:	4920      	ldr	r1, [pc, #128]	; (80009e4 <UnlinkTimer+0x100>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3315      	adds	r3, #21
 8000970:	4602      	mov	r2, r0
 8000972:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	2b06      	cmp	r3, #6
 8000978:	d013      	beq.n	80009a2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800097a:	79f9      	ldrb	r1, [r7, #7]
 800097c:	7bba      	ldrb	r2, [r7, #14]
 800097e:	4819      	ldr	r0, [pc, #100]	; (80009e4 <UnlinkTimer+0x100>)
 8000980:	460b      	mov	r3, r1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	440b      	add	r3, r1
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	4403      	add	r3, r0
 800098a:	3314      	adds	r3, #20
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2d8      	uxtb	r0, r3
 8000990:	4914      	ldr	r1, [pc, #80]	; (80009e4 <UnlinkTimer+0x100>)
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	440b      	add	r3, r1
 800099c:	3314      	adds	r3, #20
 800099e:	4602      	mov	r2, r0
 80009a0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	490f      	ldr	r1, [pc, #60]	; (80009e4 <UnlinkTimer+0x100>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	440b      	add	r3, r1
 80009b0:	330c      	adds	r3, #12
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <UnlinkTimer+0xf8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b06      	cmp	r3, #6
 80009be:	d107      	bne.n	80009d0 <UnlinkTimer+0xec>
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d104      	bne.n	80009d0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <UnlinkTimer+0x104>)
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009cc:	601a      	str	r2, [r3, #0]
  }

  return;
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
}
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	200000b8 	.word	0x200000b8
 80009e0:	200000b9 	.word	0x200000b9
 80009e4:	20000028 	.word	0x20000028
 80009e8:	200000bc 	.word	0x200000bc

080009ec <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <ReturnTimeElapsed+0x70>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009fa:	d026      	beq.n	8000a4a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80009fc:	f7ff fe02 	bl	8000604 <ReadRtcSsrValue>
 8000a00:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <ReturnTimeElapsed+0x70>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d805      	bhi.n	8000a18 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <ReturnTimeElapsed+0x70>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	e00a      	b.n	8000a2e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <ReturnTimeElapsed+0x74>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <ReturnTimeElapsed+0x70>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <ReturnTimeElapsed+0x78>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	fb02 f303 	mul.w	r3, r2, r3
 8000a3a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <ReturnTimeElapsed+0x7c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	40d3      	lsrs	r3, r2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	e001      	b.n	8000a4e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	b29b      	uxth	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000bc 	.word	0x200000bc
 8000a60:	200001d2 	.word	0x200001d2
 8000a64:	200001d1 	.word	0x200001d1
 8000a68:	200001d0 	.word	0x200001d0

08000a6c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d108      	bne.n	8000a8e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a7c:	f7ff fdc2 	bl	8000604 <ReadRtcSsrValue>
 8000a80:	4602      	mov	r2, r0
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <RestartWakeupCounter+0xa8>)
 8000a84:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f001 f897 	bl	8001bba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000a8c:	e03e      	b.n	8000b0c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d803      	bhi.n	8000a9c <RestartWakeupCounter+0x30>
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <RestartWakeupCounter+0xac>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d002      	beq.n	8000aa2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000aa2:	bf00      	nop
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f7      	beq.n	8000aa4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ac8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <RestartWakeupCounter+0xb4>)
 8000acc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ad0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f001 f87f 	bl	8001bd6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <RestartWakeupCounter+0xb8>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	0c1b      	lsrs	r3, r3, #16
 8000ade:	041b      	lsls	r3, r3, #16
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	4910      	ldr	r1, [pc, #64]	; (8000b24 <RestartWakeupCounter+0xb8>)
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ae8:	f7ff fd8c 	bl	8000604 <ReadRtcSsrValue>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <RestartWakeupCounter+0xa8>)
 8000af0:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b04:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b06:	f3af 8000 	nop.w
  return ;
 8000b0a:	bf00      	nop
}
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000bc 	.word	0x200000bc
 8000b18:	200001d0 	.word	0x200001d0
 8000b1c:	200001cc 	.word	0x200001cc
 8000b20:	58000800 	.word	0x58000800
 8000b24:	40002800 	.word	0x40002800

08000b28 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b2e:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <RescheduleTimerList+0x124>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3a:	d108      	bne.n	8000b4e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b3c:	bf00      	nop
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <RescheduleTimerList+0x128>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f7      	bne.n	8000b3e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b4e:	4b40      	ldr	r3, [pc, #256]	; (8000c50 <RescheduleTimerList+0x128>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <RescheduleTimerList+0x128>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b60:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <RescheduleTimerList+0x12c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	493b      	ldr	r1, [pc, #236]	; (8000c58 <RescheduleTimerList+0x130>)
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	440b      	add	r3, r1
 8000b76:	3308      	adds	r3, #8
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b7c:	f7ff ff36 	bl	80009ec <ReturnTimeElapsed>
 8000b80:	4603      	mov	r3, r0
 8000b82:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d205      	bcs.n	8000b98 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <RescheduleTimerList+0x134>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e04d      	b.n	8000c34 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <RescheduleTimerList+0x138>)
 8000b9c:	8812      	ldrh	r2, [r2, #0]
 8000b9e:	b292      	uxth	r2, r2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d906      	bls.n	8000bb8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <RescheduleTimerList+0x138>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <RescheduleTimerList+0x134>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e03d      	b.n	8000c34 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <RescheduleTimerList+0x134>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc8:	e034      	b.n	8000c34 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	4922      	ldr	r1, [pc, #136]	; (8000c58 <RescheduleTimerList+0x130>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3308      	adds	r3, #8
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d20a      	bcs.n	8000bf8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000be2:	7bfa      	ldrb	r2, [r7, #15]
 8000be4:	491c      	ldr	r1, [pc, #112]	; (8000c58 <RescheduleTimerList+0x130>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e013      	b.n	8000c20 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	4917      	ldr	r1, [pc, #92]	; (8000c58 <RescheduleTimerList+0x130>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	3308      	adds	r3, #8
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <RescheduleTimerList+0x130>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4403      	add	r3, r0
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <RescheduleTimerList+0x130>)
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3315      	adds	r3, #21
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d1c7      	bne.n	8000bca <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c3a:	89bb      	ldrh	r3, [r7, #12]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff15 	bl	8000a6c <RestartWakeupCounter>

  return ;
 8000c42:	bf00      	nop
}
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40002800 	.word	0x40002800
 8000c50:	200001cc 	.word	0x200001cc
 8000c54:	200000b8 	.word	0x200000b8
 8000c58:	20000028 	.word	0x20000028
 8000c5c:	200000c0 	.word	0x200000c0
 8000c60:	200001d4 	.word	0x200001d4

08000c64 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000c70:	4a61      	ldr	r2, [pc, #388]	; (8000df8 <HW_TS_Init+0x194>)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c76:	4b60      	ldr	r3, [pc, #384]	; (8000df8 <HW_TS_Init+0x194>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	22ca      	movs	r2, #202	; 0xca
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c80:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <HW_TS_Init+0x194>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2253      	movs	r2, #83	; 0x53
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000c8a:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <HW_TS_Init+0x198>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	4a5b      	ldr	r2, [pc, #364]	; (8000dfc <HW_TS_Init+0x198>)
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <HW_TS_Init+0x198>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f1c3 0304 	rsb	r3, r3, #4
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <HW_TS_Init+0x19c>)
 8000caa:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000cac:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <HW_TS_Init+0x198>)
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000cb4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000cb8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	fa92 f2a2 	rbit	r2, r2
 8000cc0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <HW_TS_Init+0x1a0>)
 8000cd4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000cd6:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <HW_TS_Init+0x198>)
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <HW_TS_Init+0x1a4>)
 8000ce8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000cea:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <HW_TS_Init+0x1a4>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <HW_TS_Init+0x1a0>)
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000cfc:	4a40      	ldr	r2, [pc, #256]	; (8000e00 <HW_TS_Init+0x19c>)
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	40d3      	lsrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d904      	bls.n	8000d18 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <HW_TS_Init+0x1a8>)
 8000d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d14:	801a      	strh	r2, [r3, #0]
 8000d16:	e003      	b.n	8000d20 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <HW_TS_Init+0x1a8>)
 8000d1e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d24:	f7ff fc5c 	bl	80005e0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d2c:	f7ff fc44 	bl	80005b8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d143      	bne.n	8000dbe <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <HW_TS_Init+0x1ac>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <HW_TS_Init+0x1b0>)
 8000d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d42:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	75fb      	strb	r3, [r7, #23]
 8000d48:	e00c      	b.n	8000d64 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000d4a:	7dfa      	ldrb	r2, [r7, #23]
 8000d4c:	4932      	ldr	r1, [pc, #200]	; (8000e18 <HW_TS_Init+0x1b4>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	330c      	adds	r3, #12
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d9ef      	bls.n	8000d4a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <HW_TS_Init+0x1b8>)
 8000d6c:	2206      	movs	r2, #6
 8000d6e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HW_TS_Init+0x194>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HW_TS_Init+0x194>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d82:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HW_TS_Init+0x194>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HW_TS_Init+0x194>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d98:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HW_TS_Init+0x1bc>)
 8000d9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000da0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 ff17 	bl	8001bd6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HW_TS_Init+0x194>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HW_TS_Init+0x194>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	e00a      	b.n	8000dd4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HW_TS_Init+0x194>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 fef3 	bl	8001bba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HW_TS_Init+0x194>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000dde:	2200      	movs	r2, #0
 8000de0:	2103      	movs	r1, #3
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 fea7 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 febe 	bl	8001b6a <HAL_NVIC_EnableIRQ>

  return;
 8000dee:	bf00      	nop
}
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001cc 	.word	0x200001cc
 8000dfc:	40002800 	.word	0x40002800
 8000e00:	200001d0 	.word	0x200001d0
 8000e04:	200001d1 	.word	0x200001d1
 8000e08:	200001d2 	.word	0x200001d2
 8000e0c:	200001d4 	.word	0x200001d4
 8000e10:	200000c0 	.word	0x200000c0
 8000e14:	200000bc 	.word	0x200000bc
 8000e18:	20000028 	.word	0x20000028
 8000e1c:	200000b8 	.word	0x200000b8
 8000e20:	58000800 	.word	0x58000800

08000e24 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b08b      	sub	sp, #44	; 0x2c
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8000e3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8000e40:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000e46:	e004      	b.n	8000e52 <HW_TS_Create+0x2e>
  {
    loop++;
 8000e48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e56:	2b05      	cmp	r3, #5
 8000e58:	d80c      	bhi.n	8000e74 <HW_TS_Create+0x50>
 8000e5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e5e:	492b      	ldr	r1, [pc, #172]	; (8000f0c <HW_TS_Create+0xe8>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	330c      	adds	r3, #12
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1e9      	bne.n	8000e48 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e78:	2b06      	cmp	r3, #6
 8000e7a:	d037      	beq.n	8000eec <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000e7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e80:	4922      	ldr	r1, [pc, #136]	; (8000f0c <HW_TS_Create+0xe8>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	440b      	add	r3, r1
 8000e8c:	330c      	adds	r3, #12
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000e9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ea0:	491a      	ldr	r1, [pc, #104]	; (8000f0c <HW_TS_Create+0xe8>)
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	3310      	adds	r3, #16
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000eb2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000eb6:	4915      	ldr	r1, [pc, #84]	; (8000f0c <HW_TS_Create+0xe8>)
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	330d      	adds	r3, #13
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000ec8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ecc:	490f      	ldr	r1, [pc, #60]	; (8000f0c <HW_TS_Create+0xe8>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ee2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000eea:	e007      	b.n	8000efc <HW_TS_Create+0xd8>
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	372c      	adds	r7, #44	; 0x2c
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000028 	.word	0x20000028

08000f10 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8000f1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f20:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000f26:	2003      	movs	r0, #3
 8000f28:	f000 fe2d 	bl	8001b86 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <HW_TS_Stop+0xfc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	22ca      	movs	r2, #202	; 0xca
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <HW_TS_Stop+0xfc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2253      	movs	r2, #83	; 0x53
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000f40:	79fa      	ldrb	r2, [r7, #7]
 8000f42:	4933      	ldr	r1, [pc, #204]	; (8001010 <HW_TS_Stop+0x100>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	440b      	add	r3, r1
 8000f4e:	330c      	adds	r3, #12
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d148      	bne.n	8000fea <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fcc1 	bl	80008e4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <HW_TS_Stop+0x104>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f68:	7cfb      	ldrb	r3, [r7, #19]
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d135      	bne.n	8000fda <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <HW_TS_Stop+0x108>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7a:	d108      	bne.n	8000f8e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f7c:	bf00      	nop
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HW_TS_Stop+0xfc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f7      	bne.n	8000f7e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HW_TS_Stop+0xfc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HW_TS_Stop+0xfc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fa0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fa2:	bf00      	nop
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HW_TS_Stop+0xfc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f7      	beq.n	8000fa4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HW_TS_Stop+0xfc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <HW_TS_Stop+0xfc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fc8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <HW_TS_Stop+0x10c>)
 8000fcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fd0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 fdff 	bl	8001bd6 <HAL_NVIC_ClearPendingIRQ>
 8000fd8:	e007      	b.n	8000fea <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HW_TS_Stop+0x110>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	7cfa      	ldrb	r2, [r7, #19]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d001      	beq.n	8000fea <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8000fe6:	f7ff fd9f 	bl	8000b28 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <HW_TS_Stop+0xfc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 fdb8 	bl	8001b6a <HAL_NVIC_EnableIRQ>
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001004:	bf00      	nop
}
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001cc 	.word	0x200001cc
 8001010:	20000028 	.word	0x20000028
 8001014:	200000b8 	.word	0x200000b8
 8001018:	40002800 	.word	0x40002800
 800101c:	58000800 	.word	0x58000800
 8001020:	200000b9 	.word	0x200000b9

08001024 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	493b      	ldr	r1, [pc, #236]	; (8001120 <HW_TS_Start+0xfc>)
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	330c      	adds	r3, #12
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d103      	bne.n	8001050 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff60 	bl	8000f10 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001050:	f3ef 8310 	mrs	r3, PRIMASK
 8001054:	60fb      	str	r3, [r7, #12]
  return(result);
 8001056:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800105a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800105c:	2003      	movs	r0, #3
 800105e:	f000 fd92 	bl	8001b86 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <HW_TS_Start+0x100>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	22ca      	movs	r2, #202	; 0xca
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
 800106c:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <HW_TS_Start+0x100>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2253      	movs	r2, #83	; 0x53
 8001074:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001076:	79fa      	ldrb	r2, [r7, #7]
 8001078:	4929      	ldr	r1, [pc, #164]	; (8001120 <HW_TS_Start+0xfc>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	330c      	adds	r3, #12
 8001086:	2202      	movs	r2, #2
 8001088:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	4924      	ldr	r1, [pc, #144]	; (8001120 <HW_TS_Start+0xfc>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3308      	adds	r3, #8
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	491f      	ldr	r1, [pc, #124]	; (8001120 <HW_TS_Start+0xfc>)
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	3304      	adds	r3, #4
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fb6b 	bl	8000790 <linkTimer>
 80010ba:	4603      	mov	r3, r0
 80010bc:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HW_TS_Start+0x104>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <HW_TS_Start+0x108>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	7c7a      	ldrb	r2, [r7, #17]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d002      	beq.n	80010d6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80010d0:	f7ff fd2a 	bl	8000b28 <RescheduleTimerList>
 80010d4:	e013      	b.n	80010fe <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	4911      	ldr	r1, [pc, #68]	; (8001120 <HW_TS_Start+0xfc>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	8a7b      	ldrh	r3, [r7, #18]
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	1ac9      	subs	r1, r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <HW_TS_Start+0xfc>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4403      	add	r3, r0
 80010fa:	3308      	adds	r3, #8
 80010fc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HW_TS_Start+0x100>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001108:	2003      	movs	r0, #3
 800110a:	f000 fd2e 	bl	8001b6a <HAL_NVIC_EnableIRQ>
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001118:	bf00      	nop
}
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000028 	.word	0x20000028
 8001124:	200001cc 	.word	0x200001cc
 8001128:	200000b8 	.word	0x200000b8
 800112c:	200000b9 	.word	0x200000b9

08001130 <LL_RCC_LSE_SetDriveCapability>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001140:	f023 0218 	bic.w	r2, r3, #24
 8001144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4313      	orrs	r3, r2
 800114c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_AHB2_GRP1_EnableClock>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800116a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 faff 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f80d 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 f8cd 	bl	8001338 <MX_GPIO_Init>
  MX_RF_Init();
 800119e:	f000 f88f 	bl	80012c0 <MX_RF_Init>
  MX_RTC_Init();
 80011a2:	f000 f895 	bl	80012d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80011a6:	f7ff f961 	bl	800046c <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ae:	f005 fa7d 	bl	80066ac <UTIL_SEQ_Run>
 80011b2:	e7fa      	b.n	80011aa <main+0x1c>

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ae      	sub	sp, #184	; 0xb8
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011be:	2248      	movs	r2, #72	; 0x48
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f005 fcaf 	bl	8006b26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2250      	movs	r2, #80	; 0x50
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 fc9f 	bl	8006b26 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011e8:	f000 feb0 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ff9f 	bl	8001130 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <SystemClock_Config+0x108>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011fa:	4a30      	ldr	r2, [pc, #192]	; (80012bc <SystemClock_Config+0x108>)
 80011fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <SystemClock_Config+0x108>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800120e:	2327      	movs	r3, #39	; 0x27
 8001210:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001216:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001220:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001222:	2301      	movs	r3, #1
 8001224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001234:	23a0      	movs	r3, #160	; 0xa0
 8001236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fa1b 	bl	8002680 <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001250:	f000 f879 	bl	8001346 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001254:	236f      	movs	r3, #111	; 0x6f
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001258:	2300      	movs	r3, #0
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001270:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fd96 	bl	8002da8 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001282:	f000 f860 	bl	8001346 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001286:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800128a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800128c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001290:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800129c:	2310      	movs	r3, #16
 800129e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 f98f 	bl	80035c6 <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80012ae:	f000 f84a 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80012b2:	bf00      	nop
 80012b4:	37b8      	adds	r7, #184	; 0xb8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	58000400 	.word	0x58000400

080012c0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_RTC_Init+0x60>)
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <MX_RTC_Init+0x64>)
 80012d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_RTC_Init+0x60>)
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_RTC_Init+0x60>)
 80012e2:	220f      	movs	r2, #15
 80012e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_RTC_Init+0x60>)
 80012e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_RTC_Init+0x60>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_RTC_Init+0x60>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MX_RTC_Init+0x60>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_RTC_Init+0x60>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <MX_RTC_Init+0x60>)
 8001308:	f002 fbe3 	bl	8003ad2 <HAL_RTC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001312:	f000 f818 	bl	8001346 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_RTC_Init+0x60>)
 800131c:	f002 fcc8 	bl	8003cb0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001326:	f000 f80e 	bl	8001346 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002f8 	.word	0x200002f8
 8001334:	40002800 	.word	0x40002800

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133c:	2004      	movs	r0, #4
 800133e:	f7ff ff0d 	bl	800115c <LL_AHB2_GRP1_EnableClock>

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}

08001346 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_AHB3_GRP1_EnableClock>:
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800137e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4313      	orrs	r3, r2
 800138c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4013      	ands	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_APB1_GRP1_EnableClock>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80013de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013e2:	f7ff ffc8 	bl	8001376 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2005      	movs	r0, #5
 80013ec:	f000 fba3 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013f0:	2005      	movs	r0, #5
 80013f2:	f000 fbba 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	202e      	movs	r0, #46	; 0x2e
 80013fc:	f000 fb9b 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001400:	202e      	movs	r0, #46	; 0x2e
 8001402:	f000 fbb2 	bl	8001b6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_RTC_MspInit+0x38>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10d      	bne.n	800143a <HAL_RTC_MspInit+0x2e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800141e:	f7ff ff99 	bl	8001354 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001422:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001426:	f7ff ffbf 	bl	80013a8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2003      	movs	r0, #3
 8001430:	f000 fb81 	bl	8001b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 fb98 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40002800 	.word	0x40002800

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149c:	f000 f9d4 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <RTC_WKUP_IRQHandler+0x10>)
 80014aa:	f002 fcbd 	bl	8003e28 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002f8 	.word	0x200002f8

080014b8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80014ca:	f000 fd1b 	bl	8001f04 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <SystemInit+0xa0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <SystemInit+0xa0>)
 80014e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e4:	4a23      	ldr	r2, [pc, #140]	; (8001574 <SystemInit+0xa0>)
 80014e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001506:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <SystemInit+0xa4>)
 8001514:	4013      	ands	r3, r2
 8001516:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001524:	f023 0305 	bic.w	r3, r3, #5
 8001528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <SystemInit+0xa8>)
 8001546:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <SystemInit+0xa8>)
 800154e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	faf6fefb 	.word	0xfaf6fefb
 800157c:	22041000 	.word	0x22041000

08001580 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <SystemCoreClockUpdate+0x130>)
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	d867      	bhi.n	8001678 <SystemCoreClockUpdate+0xf8>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <SystemCoreClockUpdate+0x30>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015e5 	.word	0x080015e5
 80015b4:	08001679 	.word	0x08001679
 80015b8:	08001679 	.word	0x08001679
 80015bc:	08001679 	.word	0x08001679
 80015c0:	080015ed 	.word	0x080015ed
 80015c4:	08001679 	.word	0x08001679
 80015c8:	08001679 	.word	0x08001679
 80015cc:	08001679 	.word	0x08001679
 80015d0:	080015f5 	.word	0x080015f5
 80015d4:	08001679 	.word	0x08001679
 80015d8:	08001679 	.word	0x08001679
 80015dc:	08001679 	.word	0x08001679
 80015e0:	080015fd 	.word	0x080015fd
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015e4:	4a33      	ldr	r2, [pc, #204]	; (80016b4 <SystemCoreClockUpdate+0x134>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	6013      	str	r3, [r2, #0]
      break;
 80015ea:	e049      	b.n	8001680 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <SystemCoreClockUpdate+0x134>)
 80015ee:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <SystemCoreClockUpdate+0x138>)
 80015f0:	601a      	str	r2, [r3, #0]
      break;
 80015f2:	e045      	b.n	8001680 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80015f4:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <SystemCoreClockUpdate+0x134>)
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <SystemCoreClockUpdate+0x13c>)
 80015f8:	601a      	str	r2, [r3, #0]
      break;
 80015fa:	e041      	b.n	8001680 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	3301      	adds	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d105      	bne.n	800162a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800161e:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <SystemCoreClockUpdate+0x138>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e00d      	b.n	8001646 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d105      	bne.n	800163c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001630:	4a22      	ldr	r2, [pc, #136]	; (80016bc <SystemCoreClockUpdate+0x13c>)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	fbb2 f3f3 	udiv	r3, r2, r3
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e004      	b.n	8001646 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	fbb2 f3f3 	udiv	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800165a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0f5b      	lsrs	r3, r3, #29
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	3301      	adds	r3, #1
 8001668:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <SystemCoreClockUpdate+0x134>)
 8001674:	6013      	str	r3, [r2, #0]
      break;
 8001676:	e003      	b.n	8001680 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <SystemCoreClockUpdate+0x134>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	6013      	str	r3, [r2, #0]
      break;
 800167e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <SystemCoreClockUpdate+0x140>)
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <SystemCoreClockUpdate+0x134>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SystemCoreClockUpdate+0x134>)
 80016a0:	6013      	str	r3, [r2, #0]

}
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	08006d20 	.word	0x08006d20
 80016b4:	20000004 	.word	0x20000004
 80016b8:	00f42400 	.word	0x00f42400
 80016bc:	01e84800 	.word	0x01e84800
 80016c0:	08006ce0 	.word	0x08006ce0

080016c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80016c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c8:	3304      	adds	r3, #4

080016ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80016ce:	d3f9      	bcc.n	80016c4 <CopyDataInit>
  bx lr
 80016d0:	4770      	bx	lr

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80016d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80016d4:	3004      	adds	r0, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80016d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>
  bx lr
 80016da:	4770      	bx	lr

080016dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80016de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016e0:	f7ff fef8 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <LoopForever+0x8>)
 80016e6:	490c      	ldr	r1, [pc, #48]	; (8001718 <LoopForever+0xc>)
 80016e8:	4a0c      	ldr	r2, [pc, #48]	; (800171c <LoopForever+0x10>)
 80016ea:	2300      	movs	r3, #0
 80016ec:	f7ff ffed 	bl	80016ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <LoopForever+0x14>)
 80016f2:	490c      	ldr	r1, [pc, #48]	; (8001724 <LoopForever+0x18>)
 80016f4:	2300      	movs	r3, #0
 80016f6:	f7ff ffee 	bl	80016d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <LoopForever+0x1c>)
 80016fc:	490b      	ldr	r1, [pc, #44]	; (800172c <LoopForever+0x20>)
 80016fe:	2300      	movs	r3, #0
 8001700:	f7ff ffe9 	bl	80016d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001704:	f005 f9e0 	bl	8006ac8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001708:	f7ff fd41 	bl	800118e <main>

0800170c <LoopForever>:

LoopForever:
  b LoopForever
 800170c:	e7fe      	b.n	800170c <LoopForever>
 800170e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001710:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001714:	20000004 	.word	0x20000004
 8001718:	20000028 	.word	0x20000028
 800171c:	08006da8 	.word	0x08006da8
  INIT_BSS _sbss, _ebss
 8001720:	200001b0 	.word	0x200001b0
 8001724:	20000324 	.word	0x20000324
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001728:	200301e0 	.word	0x200301e0
 800172c:	20030a57 	.word	0x20030a57

08001730 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC1_IRQHandler>
	...

08001734 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6053      	str	r3, [r2, #4]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e0042000 	.word	0xe0042000

08001754 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	6053      	str	r3, [r2, #4]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e0042000 	.word	0xe0042000

08001774 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	6053      	str	r3, [r2, #4]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e0042000 	.word	0xe0042000

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_Init+0x3c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_Init+0x3c>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f000 f9b8 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 f80f 	bl	80017d4 <HAL_InitTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	e001      	b.n	80017c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c2:	f7ff fe0a 	bl	80013da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	58004000 	.word	0x58004000

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_InitTick+0x6c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d024      	beq.n	8001832 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017e8:	f001 fc84 	bl	80030f4 <HAL_RCC_GetHCLKFreq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_InitTick+0x6c>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f9ce 	bl	8001ba2 <HAL_SYSTICK_Config>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10f      	bne.n	800182c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	d809      	bhi.n	8001826 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001812:	2200      	movs	r2, #0
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181a:	f000 f98c 	bl	8001b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_InitTick+0x70>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e007      	b.n	8001836 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	e004      	b.n	8001836 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e001      	b.n	8001836 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000000c 	.word	0x2000000c
 8001844:	20000008 	.word	0x20000008

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	2000000c 	.word	0x2000000c
 800186c:	2000031c 	.word	0x2000031c

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2000031c 	.word	0x2000031c

08001888 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_GetTickPrio+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008

080018a0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80018a4:	f7ff ff46 	bl	8001734 <LL_DBGMCU_DisableDBGSleepMode>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80018b0:	f7ff ff50 	bl	8001754 <LL_DBGMCU_DisableDBGStopMode>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80018bc:	f7ff ff5a 	bl	8001774 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db10      	blt.n	8001998 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4909      	ldr	r1, [pc, #36]	; (80019a4 <__NVIC_DisableIRQ+0x40>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	3320      	adds	r3, #32
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001990:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001994:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0c      	blt.n	80019d4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_SetPendingIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	3340      	adds	r3, #64	; 0x40
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0c      	blt.n	8001a10 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <__NVIC_ClearPendingIRQ+0x38>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	3360      	adds	r3, #96	; 0x60
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff fecb 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff fee2 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff90 	bl	8001a74 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5f 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fed5 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fee5 	bl	8001964 <__NVIC_DisableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff96 	bl	8001adc <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff feed 	bl	80019a8 <__NVIC_SetPendingIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fefd 	bl	80019e4 <__NVIC_ClearPendingIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	e14c      	b.n	8001e9e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 813e 	beq.w	8001e98 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d00b      	beq.n	8001c3c <HAL_GPIO_Init+0x48>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c30:	2b11      	cmp	r3, #17
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b12      	cmp	r3, #18
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0xea>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d123      	bne.n	8001d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	6939      	ldr	r1, [r7, #16]
 8001d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0203 	and.w	r2, r3, #3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8098 	beq.w	8001e98 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d68:	4a54      	ldr	r2, [pc, #336]	; (8001ebc <HAL_GPIO_Init+0x2c8>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d92:	d019      	beq.n	8001dc8 <HAL_GPIO_Init+0x1d4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <HAL_GPIO_Init+0x2cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d013      	beq.n	8001dc4 <HAL_GPIO_Init+0x1d0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a49      	ldr	r2, [pc, #292]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00d      	beq.n	8001dc0 <HAL_GPIO_Init+0x1cc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a48      	ldr	r2, [pc, #288]	; (8001ec8 <HAL_GPIO_Init+0x2d4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d007      	beq.n	8001dbc <HAL_GPIO_Init+0x1c8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a47      	ldr	r2, [pc, #284]	; (8001ecc <HAL_GPIO_Init+0x2d8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_GPIO_Init+0x1c4>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e008      	b.n	8001dca <HAL_GPIO_Init+0x1d6>
 8001db8:	2307      	movs	r3, #7
 8001dba:	e006      	b.n	8001dca <HAL_GPIO_Init+0x1d6>
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e004      	b.n	8001dca <HAL_GPIO_Init+0x1d6>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e002      	b.n	8001dca <HAL_GPIO_Init+0x1d6>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_GPIO_Init+0x1d6>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	f002 0203 	and.w	r2, r2, #3
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dda:	4938      	ldr	r1, [pc, #224]	; (8001ebc <HAL_GPIO_Init+0x2c8>)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e0e:	4a30      	ldr	r2, [pc, #192]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e3c:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f47f aeab 	bne.w	8001c04 <HAL_GPIO_Init+0x10>
  }
}
 8001eae:	bf00      	nop
 8001eb0:	371c      	adds	r7, #28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	48000400 	.word	0x48000400
 8001ec4:	48000800 	.word	0x48000800
 8001ec8:	48000c00 	.word	0x48000c00
 8001ecc:	48001000 	.word	0x48001000
 8001ed0:	58000800 	.word	0x58000800

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_HSEM_IRQHandler+0x30>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_HSEM_IRQHandler+0x30>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	4906      	ldr	r1, [pc, #24]	; (8001f34 <HAL_HSEM_IRQHandler+0x30>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <HAL_HSEM_IRQHandler+0x30>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f807 	bl	8001f38 <HAL_HSEM_FreeCallback>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	58001500 	.word	0x58001500

08001f38 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	58000400 	.word	0x58000400

08001f6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	58000400 	.word	0x58000400

08001f88 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9a:	d101      	bne.n	8001fa0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_HSE_EnableBypass>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_RCC_HSE_DisableBypass>:
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_RCC_HSE_Enable>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_RCC_HSE_Disable>:
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_RCC_HSE_IsReady>:
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002036:	d101      	bne.n	800203c <LL_RCC_HSE_IsReady+0x18>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <LL_RCC_HSE_IsReady+0x1a>
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_RCC_HSI_Enable>:
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_RCC_HSI_Disable>:
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_RCC_HSI_IsReady>:
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002096:	d101      	bne.n	800209c <LL_RCC_HSI_IsReady+0x18>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <LL_RCC_HSI_IsReady+0x1a>
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_RCC_HSI48_Enable>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_HSI48_Disable>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_RCC_HSI48_IsReady>:
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b02      	cmp	r3, #2
 8002128:	d101      	bne.n	800212e <LL_RCC_HSI48_IsReady+0x18>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_RCC_HSI48_IsReady+0x1a>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_RCC_LSE_Enable>:
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_RCC_LSE_Disable>:
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_RCC_LSE_EnableBypass>:
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_RCC_LSE_DisableBypass>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_RCC_LSE_IsReady>:
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d101      	bne.n	80021da <LL_RCC_LSE_IsReady+0x18>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <LL_RCC_LSE_IsReady+0x1a>
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_RCC_LSI1_Enable>:
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_RCC_LSI1_Disable>:
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_RCC_LSI1_IsReady>:
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d101      	bne.n	8002242 <LL_RCC_LSI1_IsReady+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_RCC_LSI1_IsReady+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_RCC_LSI2_Enable>:
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_RCC_LSI2_Disable>:
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <LL_RCC_LSI2_IsReady>:
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d101      	bne.n	80022aa <LL_RCC_LSI2_IsReady+0x18>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_RCC_LSI2_IsReady+0x1a>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_LSI2_SetTrimming>:
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_RCC_MSI_Enable>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_RCC_MSI_Disable>:
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_RCC_MSI_IsReady>:
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d101      	bne.n	8002336 <LL_RCC_MSI_IsReady+0x16>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_RCC_MSI_IsReady+0x18>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_RCC_MSI_SetRange>:
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_RCC_MSI_GetRange>:
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2bb0      	cmp	r3, #176	; 0xb0
 8002380:	d901      	bls.n	8002386 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002382:	23b0      	movs	r3, #176	; 0xb0
 8002384:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_RCC_SetSysClkSource>:
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 0203 	bic.w	r2, r3, #3
 80023d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_RCC_GetSysClkSource>:
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_RCC_SetAHBPrescaler>:
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002432:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_RCC_SetAHB4Prescaler>:
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800245a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002462:	f023 020f 	bic.w	r2, r3, #15
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_RCC_SetAPB1Prescaler>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_RCC_SetAPB2Prescaler>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_RCC_GetAHBPrescaler>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_RCC_GetAHB4Prescaler>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002534:	6013      	str	r3, [r2, #0]
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002552:	d101      	bne.n	8002558 <LL_RCC_PLL_IsReady+0x18>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <LL_RCC_PLL_IsReady+0x1a>
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0303 	and.w	r3, r3, #3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d101      	bne.n	80025de <LL_RCC_IsActiveFlag_HPRE+0x18>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025fe:	d101      	bne.n	8002604 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002618:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002624:	d101      	bne.n	800262a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002648:	d101      	bne.n	800264e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800265e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002668:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800266c:	d101      	bne.n	8002672 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b08d      	sub	sp, #52	; 0x34
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e386      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 808f 	beq.w	80027be <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a0:	f7ff fea1 	bl	80023e6 <LL_RCC_GetSysClkSource>
 80026a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a6:	f7ff ff82 	bl	80025ae <LL_RCC_PLL_GetMainSource>
 80026aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_RCC_OscConfig+0x3e>
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	d149      	bne.n	800274c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d146      	bne.n	800274c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026be:	f7ff fe2f 	bl	8002320 <LL_RCC_MSI_IsReady>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_OscConfig+0x54>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e365      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80026d8:	f7ff fe47 	bl	800236a <LL_RCC_MSI_GetRange>
 80026dc:	4603      	mov	r3, r0
 80026de:	429c      	cmp	r4, r3
 80026e0:	d914      	bls.n	800270c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fd18 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e354      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fe21 	bl	8002342 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fe45 	bl	8002394 <LL_RCC_MSI_SetCalibTrimming>
 800270a:	e013      	b.n	8002734 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe16 	bl	8002342 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fe3a 	bl	8002394 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fcf9 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e335      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002734:	f7fe ff24 	bl	8001580 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002738:	4bb4      	ldr	r3, [pc, #720]	; (8002a0c <HAL_RCC_OscConfig+0x38c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f849 	bl	80017d4 <HAL_InitTick>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d039      	beq.n	80027bc <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e329      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01e      	beq.n	8002792 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002754:	f7ff fdc6 	bl	80022e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002758:	f7ff f88a 	bl	8001870 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002760:	f7ff f886 	bl	8001870 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e316      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002772:	f7ff fdd5 	bl	8002320 <LL_RCC_MSI_IsReady>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f1      	beq.n	8002760 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fdde 	bl	8002342 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fe02 	bl	8002394 <LL_RCC_MSI_SetCalibTrimming>
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002792:	f7ff fdb6 	bl	8002302 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002796:	f7ff f86b 	bl	8001870 <HAL_GetTick>
 800279a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800279e:	f7ff f867 	bl	8001870 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e2f7      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027b0:	f7ff fdb6 	bl	8002320 <LL_RCC_MSI_IsReady>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f1      	bne.n	800279e <HAL_RCC_OscConfig+0x11e>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d05a      	beq.n	8002880 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ca:	f7ff fe0c 	bl	80023e6 <LL_RCC_GetSysClkSource>
 80027ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d0:	f7ff feed 	bl	80025ae <LL_RCC_PLL_GetMainSource>
 80027d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_OscConfig+0x168>
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d10d      	bne.n	80027fe <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d10a      	bne.n	80027fe <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	f7ff fc1c 	bl	8002024 <LL_RCC_HSE_IsReady>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d045      	beq.n	800287e <HAL_RCC_OscConfig+0x1fe>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d141      	bne.n	800287e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e2d0      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002806:	d102      	bne.n	800280e <HAL_RCC_OscConfig+0x18e>
 8002808:	f7ff fbee 	bl	8001fe8 <LL_RCC_HSE_Enable>
 800280c:	e00d      	b.n	800282a <HAL_RCC_OscConfig+0x1aa>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002816:	d104      	bne.n	8002822 <HAL_RCC_OscConfig+0x1a2>
 8002818:	f7ff fbc8 	bl	8001fac <LL_RCC_HSE_EnableBypass>
 800281c:	f7ff fbe4 	bl	8001fe8 <LL_RCC_HSE_Enable>
 8002820:	e003      	b.n	800282a <HAL_RCC_OscConfig+0x1aa>
 8002822:	f7ff fbf0 	bl	8002006 <LL_RCC_HSE_Disable>
 8002826:	f7ff fbd0 	bl	8001fca <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d012      	beq.n	8002858 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7ff f81d 	bl	8001870 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283a:	f7ff f819 	bl	8001870 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e2a9      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 800284c:	f7ff fbea 	bl	8002024 <LL_RCC_HSE_IsReady>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f1      	beq.n	800283a <HAL_RCC_OscConfig+0x1ba>
 8002856:	e013      	b.n	8002880 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7ff f80a 	bl	8001870 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002860:	f7ff f806 	bl	8001870 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e296      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002872:	f7ff fbd7 	bl	8002024 <LL_RCC_HSE_IsReady>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f1      	bne.n	8002860 <HAL_RCC_OscConfig+0x1e0>
 800287c:	e000      	b.n	8002880 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d051      	beq.n	8002930 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288c:	f7ff fdab 	bl	80023e6 <LL_RCC_GetSysClkSource>
 8002890:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002892:	f7ff fe8c 	bl	80025ae <LL_RCC_PLL_GetMainSource>
 8002896:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b04      	cmp	r3, #4
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x22a>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d113      	bne.n	80028cc <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d110      	bne.n	80028cc <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028aa:	f7ff fbeb 	bl	8002084 <LL_RCC_HSI_IsReady>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_OscConfig+0x240>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e26f      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fbef 	bl	80020a8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ca:	e031      	b.n	8002930 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d019      	beq.n	8002908 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	f7ff fbb8 	bl	8002048 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe ffca 	bl	8001870 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe ffc6 	bl	8001870 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e256      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028f2:	f7ff fbc7 	bl	8002084 <LL_RCC_HSI_IsReady>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f1      	beq.n	80028e0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fbd1 	bl	80020a8 <LL_RCC_HSI_SetCalibTrimming>
 8002906:	e013      	b.n	8002930 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002908:	f7ff fbad 	bl	8002066 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe ffb0 	bl	8001870 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002914:	f7fe ffac 	bl	8001870 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e23c      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002926:	f7ff fbad 	bl	8002084 <LL_RCC_HSI_IsReady>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f1      	bne.n	8002914 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a2 	beq.w	8002a8e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d075      	beq.n	8002a3e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d046      	beq.n	80029ec <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800295e:	f7ff fc64 	bl	800222a <LL_RCC_LSI1_IsReady>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d113      	bne.n	8002990 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002968:	f7ff fc3d 	bl	80021e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800296c:	f7fe ff80 	bl	8001870 <HAL_GetTick>
 8002970:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002974:	f7fe ff7c 	bl	8001870 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e20c      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002986:	f7ff fc50 	bl	800222a <LL_RCC_LSI1_IsReady>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f1      	beq.n	8002974 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002990:	f7ff fc5d 	bl	800224e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe ff6c 	bl	8001870 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800299c:	f7fe ff68 	bl	8001870 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e1f8      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80029ae:	f7ff fc70 	bl	8002292 <LL_RCC_LSI2_IsReady>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f1      	beq.n	800299c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fc7a 	bl	80022b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80029c2:	f7ff fc21 	bl	8002208 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe ff53 	bl	8001870 <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029ce:	f7fe ff4f 	bl	8001870 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1df      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80029e0:	f7ff fc23 	bl	800222a <LL_RCC_LSI1_IsReady>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f1      	bne.n	80029ce <HAL_RCC_OscConfig+0x34e>
 80029ea:	e050      	b.n	8002a8e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80029ec:	f7ff fbfb 	bl	80021e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe ff3e 	bl	8001870 <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029f8:	f7fe ff3a 	bl	8001870 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d904      	bls.n	8002a10 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1ca      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
 8002a0a:	bf00      	nop
 8002a0c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a10:	f7ff fc0b 	bl	800222a <LL_RCC_LSI1_IsReady>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ee      	beq.n	80029f8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002a1a:	f7ff fc29 	bl	8002270 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a20:	f7fe ff26 	bl	8001870 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1b6      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a32:	f7ff fc2e 	bl	8002292 <LL_RCC_LSI2_IsReady>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f1      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3a0>
 8002a3c:	e027      	b.n	8002a8e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002a3e:	f7ff fc17 	bl	8002270 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a42:	f7fe ff15 	bl	8001870 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a4a:	f7fe ff11 	bl	8001870 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1a1      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002a5c:	f7ff fc19 	bl	8002292 <LL_RCC_LSI2_IsReady>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f1      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002a66:	f7ff fbcf 	bl	8002208 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe ff01 	bl	8001870 <HAL_GetTick>
 8002a6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a72:	f7fe fefd 	bl	8001870 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e18d      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a84:	f7ff fbd1 	bl	800222a <LL_RCC_LSI1_IsReady>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f1      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d05b      	beq.n	8002b52 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9a:	4bb5      	ldr	r3, [pc, #724]	; (8002d70 <HAL_RCC_OscConfig+0x6f0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d114      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002aa6:	f7ff fa51 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fee1 	bl	8001870 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe fedd 	bl	8001870 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e16d      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac4:	4baa      	ldr	r3, [pc, #680]	; (8002d70 <HAL_RCC_OscConfig+0x6f0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d102      	bne.n	8002ade <HAL_RCC_OscConfig+0x45e>
 8002ad8:	f7ff fb2f 	bl	800213a <LL_RCC_LSE_Enable>
 8002adc:	e00c      	b.n	8002af8 <HAL_RCC_OscConfig+0x478>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d104      	bne.n	8002af0 <HAL_RCC_OscConfig+0x470>
 8002ae6:	f7ff fb4a 	bl	800217e <LL_RCC_LSE_EnableBypass>
 8002aea:	f7ff fb26 	bl	800213a <LL_RCC_LSE_Enable>
 8002aee:	e003      	b.n	8002af8 <HAL_RCC_OscConfig+0x478>
 8002af0:	f7ff fb34 	bl	800215c <LL_RCC_LSE_Disable>
 8002af4:	f7ff fb54 	bl	80021a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d014      	beq.n	8002b2a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe feb6 	bl	8001870 <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe feb2 	bl	8001870 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e140      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b1e:	f7ff fb50 	bl	80021c2 <LL_RCC_LSE_IsReady>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ef      	beq.n	8002b08 <HAL_RCC_OscConfig+0x488>
 8002b28:	e013      	b.n	8002b52 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fea1 	bl	8001870 <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fe9d 	bl	8001870 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e12b      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b48:	f7ff fb3b 	bl	80021c2 <LL_RCC_LSE_IsReady>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ef      	bne.n	8002b32 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02c      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d014      	beq.n	8002b90 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b66:	f7ff fab4 	bl	80020d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fe81 	bl	8001870 <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b72:	f7fe fe7d 	bl	8001870 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e10d      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b84:	f7ff fac7 	bl	8002116 <LL_RCC_HSI48_IsReady>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f1      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4f2>
 8002b8e:	e013      	b.n	8002bb8 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b90:	f7ff fab0 	bl	80020f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe fe6c 	bl	8001870 <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b9c:	f7fe fe68 	bl	8001870 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e0f8      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002bae:	f7ff fab2 	bl	8002116 <LL_RCC_HSI48_IsReady>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f1      	bne.n	8002b9c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80ee 	beq.w	8002d9e <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc2:	f7ff fc10 	bl	80023e6 <LL_RCC_GetSysClkSource>
 8002bc6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	f040 80af 	bne.w	8002d38 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f003 0203 	and.w	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d123      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d11c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d114      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10d      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d05d      	beq.n	8002cec <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d058      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0ab      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c48:	f7ff fc6b 	bl	8002522 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c4c:	f7fe fe10 	bl	8001870 <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe fe0c 	bl	8001870 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e09c      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ef      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4b3e      	ldr	r3, [pc, #248]	; (8002d74 <HAL_RCC_OscConfig+0x6f4>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c8c:	0212      	lsls	r2, r2, #8
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c9a:	4311      	orrs	r1, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002caa:	f7ff fc2b 	bl	8002504 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cbe:	f7fe fdd7 	bl	8001870 <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe fdd3 	bl	8001870 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e063      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ef      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce6:	e05a      	b.n	8002d9e <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e059      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d151      	bne.n	8002d9e <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cfa:	f7ff fc03 	bl	8002504 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d0e:	f7fe fdaf 	bl	8001870 <HAL_GetTick>
 8002d12:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fe fdab 	bl	8001870 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e03b      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ef      	beq.n	8002d16 <HAL_RCC_OscConfig+0x696>
 8002d36:	e032      	b.n	8002d9e <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d02d      	beq.n	8002d9a <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	f7ff fbf0 	bl	8002522 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d4c:	f023 0303 	bic.w	r3, r3, #3
 8002d50:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fd83 	bl	8001870 <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6c:	e00d      	b.n	8002d8a <HAL_RCC_OscConfig+0x70a>
 8002d6e:	bf00      	nop
 8002d70:	58000400 	.word	0x58000400
 8002d74:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fd7a 	bl	8001870 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ef      	bne.n	8002d78 <HAL_RCC_OscConfig+0x6f8>
 8002d98:	e001      	b.n	8002d9e <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3734      	adds	r7, #52	; 0x34
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd90      	pop	{r4, r7, pc}

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e12a      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b97      	ldr	r3, [pc, #604]	; (800301c <HAL_RCC_ClockConfig+0x274>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d91b      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b94      	ldr	r3, [pc, #592]	; (800301c <HAL_RCC_ClockConfig+0x274>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4992      	ldr	r1, [pc, #584]	; (800301c <HAL_RCC_ClockConfig+0x274>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dda:	f7fe fd49 	bl	8001870 <HAL_GetTick>
 8002dde:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002de2:	f7fe fd45 	bl	8001870 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e10e      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df4:	4b89      	ldr	r3, [pc, #548]	; (800301c <HAL_RCC_ClockConfig+0x274>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d1ef      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff faf3 	bl	80023fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e18:	f7fe fd2a 	bl	8001870 <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e20:	f7fe fd26 	bl	8001870 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e0ef      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e32:	f7ff fbc8 	bl	80025c6 <LL_RCC_IsActiveFlag_HPRE>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f1      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d016      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff faea 	bl	8002426 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e52:	f7fe fd0d 	bl	8001870 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e5a:	f7fe fd09 	bl	8001870 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e0d2      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002e6c:	f7ff fbbd 	bl	80025ea <LL_RCC_IsActiveFlag_C2HPRE>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f1      	beq.n	8002e5a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fae3 	bl	8002452 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fcf0 	bl	8001870 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e94:	f7fe fcec 	bl	8001870 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0b5      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ea6:	f7ff fbb3 	bl	8002610 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f1      	beq.n	8002e94 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d016      	beq.n	8002eea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fadd 	bl	8002480 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fcd3 	bl	8001870 <HAL_GetTick>
 8002eca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ece:	f7fe fccf 	bl	8001870 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e098      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ee0:	f7ff fba9 	bl	8002636 <LL_RCC_IsActiveFlag_PPRE1>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f1      	beq.n	8002ece <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d017      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fad3 	bl	80024a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f02:	f7fe fcb5 	bl	8001870 <HAL_GetTick>
 8002f06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f0a:	f7fe fcb1 	bl	8001870 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e07a      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f1c:	f7ff fb9d 	bl	800265a <LL_RCC_IsActiveFlag_PPRE2>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f1      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d043      	beq.n	8002fba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d106      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f3a:	f7ff f873 	bl	8002024 <LL_RCC_HSE_IsReady>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11e      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e064      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f50:	f7ff faf6 	bl	8002540 <LL_RCC_PLL_IsReady>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d113      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e059      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f66:	f7ff f9db 	bl	8002320 <LL_RCC_MSI_IsReady>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d108      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e04e      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f74:	f7ff f886 	bl	8002084 <LL_RCC_HSI_IsReady>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e047      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fa19 	bl	80023be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fc70 	bl	8001870 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fe fc6c 	bl	8001870 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e033      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	f7ff fa1c 	bl	80023e6 <LL_RCC_GetSysClkSource>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d1ec      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_RCC_ClockConfig+0x274>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d21b      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_RCC_ClockConfig+0x274>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 0207 	bic.w	r2, r3, #7
 8002fd0:	4912      	ldr	r1, [pc, #72]	; (800301c <HAL_RCC_ClockConfig+0x274>)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd8:	f7fe fc4a 	bl	8001870 <HAL_GetTick>
 8002fdc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fe0:	f7fe fc46 	bl	8001870 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e00f      	b.n	8003012 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1ef      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8003000:	f7fe fabe 	bl	8001580 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003004:	f7fe fc40 	bl	8001888 <HAL_GetTickPrio>
 8003008:	4603      	mov	r3, r0
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fbe2 	bl	80017d4 <HAL_InitTick>
 8003010:	4603      	mov	r3, r0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	58004000 	.word	0x58004000

08003020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003026:	f7ff f9de 	bl	80023e6 <LL_RCC_GetSysClkSource>
 800302a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003032:	f7ff f99a 	bl	800236a <LL_RCC_MSI_GetRange>
 8003036:	4603      	mov	r3, r0
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e04a      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d102      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800304e:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e044      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b08      	cmp	r3, #8
 8003058:	d10a      	bne.n	8003070 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800305a:	f7fe ff95 	bl	8001f88 <LL_RCC_HSE_IsEnabledDiv2>
 800305e:	4603      	mov	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003064:	4b21      	ldr	r3, [pc, #132]	; (80030ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	e039      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e036      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003070:	f7ff fa9d 	bl	80025ae <LL_RCC_PLL_GetMainSource>
 8003074:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d002      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x62>
 800307c:	2b03      	cmp	r3, #3
 800307e:	d003      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x68>
 8003080:	e00d      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8003084:	60bb      	str	r3, [r7, #8]
        break;
 8003086:	e015      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003088:	f7fe ff7e 	bl	8001f88 <LL_RCC_HSE_IsEnabledDiv2>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d102      	bne.n	8003098 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8003094:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003096:	e00d      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800309a:	60bb      	str	r3, [r7, #8]
        break;
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800309e:	f7ff f964 	bl	800236a <LL_RCC_MSI_GetRange>
 80030a2:	4603      	mov	r3, r0
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b0:	60bb      	str	r3, [r7, #8]
        break;
 80030b2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80030b4:	f7ff fa56 	bl	8002564 <LL_RCC_PLL_GetN>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	fb03 f402 	mul.w	r4, r3, r2
 80030c0:	f7ff fa69 	bl	8002596 <LL_RCC_PLL_GetDivider>
 80030c4:	4603      	mov	r3, r0
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	3301      	adds	r3, #1
 80030ca:	fbb4 f4f3 	udiv	r4, r4, r3
 80030ce:	f7ff fa56 	bl	800257e <LL_RCC_PLL_GetR>
 80030d2:	4603      	mov	r3, r0
 80030d4:	0f5b      	lsrs	r3, r3, #29
 80030d6:	3301      	adds	r3, #1
 80030d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80030de:	68fb      	ldr	r3, [r7, #12]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd90      	pop	{r4, r7, pc}
 80030e8:	08006d20 	.word	0x08006d20
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	01e84800 	.word	0x01e84800

080030f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f4:	b598      	push	{r3, r4, r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030f8:	f7ff ff92 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 80030fc:	4604      	mov	r4, r0
 80030fe:	f7ff f9e7 	bl	80024d0 <LL_RCC_GetAHBPrescaler>
 8003102:	4603      	mov	r3, r0
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	4a03      	ldr	r2, [pc, #12]	; (8003118 <HAL_RCC_GetHCLKFreq+0x24>)
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003110:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd98      	pop	{r3, r4, r7, pc}
 8003118:	08006ce0 	.word	0x08006ce0

0800311c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2bb0      	cmp	r3, #176	; 0xb0
 8003128:	d903      	bls.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e007      	b.n	8003142 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	4a11      	ldr	r2, [pc, #68]	; (8003180 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003142:	f7ff f9d1 	bl	80024e8 <LL_RCC_GetAHB4Prescaler>
 8003146:	4603      	mov	r3, r0
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	0c9c      	lsrs	r4, r3, #18
 8003166:	f7fe ff01 	bl	8001f6c <HAL_PWREx_GetVoltageRange>
 800316a:	4603      	mov	r3, r0
 800316c:	4619      	mov	r1, r3
 800316e:	4620      	mov	r0, r4
 8003170:	f000 f80c 	bl	800318c <RCC_SetFlashLatency>
 8003174:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	08006d20 	.word	0x08006d20
 8003184:	08006ce0 	.word	0x08006ce0
 8003188:	431bde83 	.word	0x431bde83

0800318c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b093      	sub	sp, #76	; 0x4c
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003196:	4b39      	ldr	r3, [pc, #228]	; (800327c <RCC_SetFlashLatency+0xf0>)
 8003198:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800319c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800319e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80031a2:	4a37      	ldr	r2, [pc, #220]	; (8003280 <RCC_SetFlashLatency+0xf4>)
 80031a4:	f107 031c 	add.w	r3, r7, #28
 80031a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80031aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80031ae:	4b35      	ldr	r3, [pc, #212]	; (8003284 <RCC_SetFlashLatency+0xf8>)
 80031b0:	f107 040c 	add.w	r4, r7, #12
 80031b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80031ba:	2300      	movs	r3, #0
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c4:	d11c      	bne.n	8003200 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ca:	e015      	b.n	80031f8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80031cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031d4:	4413      	add	r3, r2
 80031d6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d808      	bhi.n	80031f2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031e8:	4413      	add	r3, r2
 80031ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80031ee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80031f0:	e022      	b.n	8003238 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80031f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f4:	3301      	adds	r3, #1
 80031f6:	643b      	str	r3, [r7, #64]	; 0x40
 80031f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d9e6      	bls.n	80031cc <RCC_SetFlashLatency+0x40>
 80031fe:	e01b      	b.n	8003238 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003200:	2300      	movs	r3, #0
 8003202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003204:	e015      	b.n	8003232 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800320e:	4413      	add	r3, r2
 8003210:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	429a      	cmp	r2, r3
 8003218:	d808      	bhi.n	800322c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003222:	4413      	add	r3, r2
 8003224:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800322a:	e005      	b.n	8003238 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800322c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322e:	3301      	adds	r3, #1
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003234:	2b02      	cmp	r3, #2
 8003236:	d9e6      	bls.n	8003206 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <RCC_SetFlashLatency+0xfc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 0207 	bic.w	r2, r3, #7
 8003240:	4911      	ldr	r1, [pc, #68]	; (8003288 <RCC_SetFlashLatency+0xfc>)
 8003242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003248:	f7fe fb12 	bl	8001870 <HAL_GetTick>
 800324c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800324e:	e008      	b.n	8003262 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003250:	f7fe fb0e 	bl	8001870 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e007      	b.n	8003272 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <RCC_SetFlashLatency+0xfc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800326c:	429a      	cmp	r2, r3
 800326e:	d1ef      	bne.n	8003250 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	374c      	adds	r7, #76	; 0x4c
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	bf00      	nop
 800327c:	08006b6c 	.word	0x08006b6c
 8003280:	08006b7c 	.word	0x08006b7c
 8003284:	08006b88 	.word	0x08006b88
 8003288:	58004000 	.word	0x58004000

0800328c <LL_RCC_LSE_IsEnabled>:
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <LL_RCC_LSE_IsEnabled+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_RCC_LSE_IsReady>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d101      	bne.n	80032c8 <LL_RCC_LSE_IsReady+0x18>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <LL_RCC_LSE_IsReady+0x1a>
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <LL_RCC_SetRFWKPClockSource>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_RCC_SetSMPSClockSource>:
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4313      	orrs	r3, r2
 800331a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_RCC_SetSMPSPrescaler>:
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800333a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4313      	orrs	r3, r2
 8003342:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_RCC_SetUSARTClockSource>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f023 0203 	bic.w	r2, r3, #3
 8003364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_RCC_SetLPUARTClockSource>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_RCC_SetI2CClockSource>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033c0:	43db      	mvns	r3, r3
 80033c2:	401a      	ands	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_RCC_SetLPTIMClockSource>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	43db      	mvns	r3, r3
 80033fa:	401a      	ands	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_RCC_SetSAIClockSource>:
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800341e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800342a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_RCC_SetRNGClockSource>:
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800344a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_RCC_SetCLK48ClockSource>:
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <LL_RCC_SetUSBClockSource>:
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ffe3 	bl	800346e <LL_RCC_SetCLK48ClockSource>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <LL_RCC_SetADCClockSource>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_RCC_SetRTCClockSource>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_RCC_GetRTCClockSource>:
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_RCC_ForceBackupDomainReset>:
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_RCC_PLLSAI1_Enable>:
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800356a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003578:	6013      	str	r3, [r2, #0]
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_RCC_PLLSAI1_Disable>:
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_RCC_PLLSAI1_IsReady>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b4:	d101      	bne.n	80035ba <LL_RCC_PLLSAI1_IsReady+0x18>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b088      	sub	sp, #32
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80035ce:	2300      	movs	r3, #0
 80035d0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80035d2:	2300      	movs	r3, #0
 80035d4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d033      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ea:	d00c      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80035ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f0:	d802      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035f6:	e017      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80035f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035fc:	d017      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x68>
 80035fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003602:	d016      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003604:	e010      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003616:	e00d      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f947 	bl	80038b0 <RCCEx_PLLSAI1_ConfigNP>
 8003622:	4603      	mov	r3, r0
 8003624:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003626:	e005      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	77fb      	strb	r3, [r7, #31]
        break;
 800362c:	e002      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800362e:	bf00      	nop
 8003630:	e000      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fee9 	bl	8003416 <LL_RCC_SetSAIClockSource>
 8003644:	e001      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003646:	7ffb      	ldrb	r3, [r7, #31]
 8003648:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003652:	2b00      	cmp	r3, #0
 8003654:	d046      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003656:	f7ff ff57 	bl	8003508 <LL_RCC_GetRTCClockSource>
 800365a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	429a      	cmp	r2, r3
 8003664:	d03c      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003666:	f7fe fc71 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff31 	bl	80034dc <LL_RCC_SetRTCClockSource>
 800367a:	e02e      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800367c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003686:	f7ff ff4c 	bl	8003522 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800368a:	f7ff ff5b 	bl	8003544 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800369c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80036a6:	f7ff fdf1 	bl	800328c <LL_RCC_LSE_IsEnabled>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d114      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b0:	f7fe f8de 	bl	8001870 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80036b6:	e00b      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fe f8da 	bl	8001870 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d902      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	77fb      	strb	r3, [r7, #31]
              break;
 80036ce:	e004      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80036d0:	f7ff fdee 	bl	80032b0 <LL_RCC_LSE_IsReady>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d1ee      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80036da:	7ffb      	ldrb	r3, [r7, #31]
 80036dc:	77bb      	strb	r3, [r7, #30]
 80036de:	e001      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	7ffb      	ldrb	r3, [r7, #31]
 80036e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fe2b 	bl	8003350 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fe36 	bl	800337c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fe5e 	bl	80033e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fe53 	bl	80033e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fe2b 	bl	80033a8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fe20 	bl	80033a8 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d022      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fe8e 	bl	800349a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003786:	d107      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a0:	d10b      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f8dd 	bl	8003966 <RCCEx_PLLSAI1_ConfigNQ>
 80037ac:	4603      	mov	r3, r0
 80037ae:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80037b0:	7ffb      	ldrb	r3, [r7, #31]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80037b6:	7ffb      	ldrb	r3, [r7, #31]
 80037b8:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02b      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d8:	d003      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x228>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fe2b 	bl	8003442 <LL_RCC_SetRNGClockSource>
 80037ec:	e00a      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7ff fe22 	bl	8003442 <LL_RCC_SetRNGClockSource>
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f7ff fe35 	bl	800346e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800380c:	d107      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800380e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003826:	2b00      	cmp	r3, #0
 8003828:	d022      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fe3e 	bl	80034b0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383c:	d107      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800383e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003856:	d10b      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f8dd 	bl	8003a1c <RCCEx_PLLSAI1_ConfigNR>
 8003862:	4603      	mov	r3, r0
 8003864:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003866:	7ffb      	ldrb	r3, [r7, #31]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800386c:	7ffb      	ldrb	r3, [r7, #31]
 800386e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fd27 	bl	80032d4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fd46 	bl	8003328 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fd2d 	bl	8003300 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 80038a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80038bc:	f7ff fe62 	bl	8003584 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038c0:	f7fd ffd6 	bl	8001870 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038c6:	e009      	b.n	80038dc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c8:	f7fd ffd2 	bl	8001870 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d902      	bls.n	80038dc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	73fb      	strb	r3, [r7, #15]
      break;
 80038da:	e004      	b.n	80038e6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038dc:	f7ff fe61 	bl	80035a2 <LL_RCC_PLLSAI1_IsReady>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d137      	bne.n	800395c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003900:	4313      	orrs	r3, r2
 8003902:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003916:	4313      	orrs	r3, r2
 8003918:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800391a:	f7ff fe24 	bl	8003566 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391e:	f7fd ffa7 	bl	8001870 <HAL_GetTick>
 8003922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003924:	e009      	b.n	800393a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003926:	f7fd ffa3 	bl	8001870 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d902      	bls.n	800393a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	73fb      	strb	r3, [r7, #15]
        break;
 8003938:	e004      	b.n	8003944 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800393a:	f7ff fe32 	bl	80035a2 <LL_RCC_PLLSAI1_IsReady>
 800393e:	4603      	mov	r3, r0
 8003940:	2b01      	cmp	r3, #1
 8003942:	d1f0      	bne.n	8003926 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003958:	4313      	orrs	r3, r2
 800395a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003972:	f7ff fe07 	bl	8003584 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003976:	f7fd ff7b 	bl	8001870 <HAL_GetTick>
 800397a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800397c:	e009      	b.n	8003992 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800397e:	f7fd ff77 	bl	8001870 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d902      	bls.n	8003992 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	e004      	b.n	800399c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003992:	f7ff fe06 	bl	80035a2 <LL_RCC_PLLSAI1_IsReady>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f0      	bne.n	800397e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d137      	bne.n	8003a12 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b6:	4313      	orrs	r3, r2
 80039b8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80039d0:	f7ff fdc9 	bl	8003566 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fd ff4c 	bl	8001870 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039da:	e009      	b.n	80039f0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039dc:	f7fd ff48 	bl	8001870 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d902      	bls.n	80039f0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	73fb      	strb	r3, [r7, #15]
        break;
 80039ee:	e004      	b.n	80039fa <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80039f0:	f7ff fdd7 	bl	80035a2 <LL_RCC_PLLSAI1_IsReady>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d1f0      	bne.n	80039dc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a28:	f7ff fdac 	bl	8003584 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a2c:	f7fd ff20 	bl	8001870 <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a32:	e009      	b.n	8003a48 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a34:	f7fd ff1c 	bl	8001870 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d902      	bls.n	8003a48 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	73fb      	strb	r3, [r7, #15]
      break;
 8003a46:	e004      	b.n	8003a52 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a48:	f7ff fdab 	bl	80035a2 <LL_RCC_PLLSAI1_IsReady>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d137      	bne.n	8003ac8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a82:	4313      	orrs	r3, r2
 8003a84:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a86:	f7ff fd6e 	bl	8003566 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8a:	f7fd fef1 	bl	8001870 <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a90:	e009      	b.n	8003aa6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a92:	f7fd feed 	bl	8001870 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d902      	bls.n	8003aa6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa4:	e004      	b.n	8003ab0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003aa6:	f7ff fd7c 	bl	80035a2 <LL_RCC_PLLSAI1_IsReady>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d1f0      	bne.n	8003a92 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d108      	bne.n	8003ac8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e090      	b.n	8003c06 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7fd fc87 	bl	800140c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	22ca      	movs	r2, #202	; 0xca
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2253      	movs	r2, #83	; 0x53
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f89f 	bl	8003c5a <RTC_EnterInitMode>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	22ff      	movs	r2, #255	; 0xff
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e067      	b.n	8003c06 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b48:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68d2      	ldr	r2, [r2, #12]
 8003b70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6919      	ldr	r1, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	041a      	lsls	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b94:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0203 	bic.w	r2, r2, #3
 8003ba4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f81e 	bl	8003c0e <HAL_RTC_WaitForSynchro>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2204      	movs	r2, #4
 8003be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e008      	b.n	8003c06 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c24:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003c26:	f7fd fe23 	bl	8001870 <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c2c:	e009      	b.n	8003c42 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c2e:	f7fd fe1f 	bl	8001870 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c3c:	d901      	bls.n	8003c42 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e007      	b.n	8003c52 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d119      	bne.n	8003ca4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c78:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003c7a:	f7fd fdf9 	bl	8001870 <HAL_GetTick>
 8003c7e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003c80:	e009      	b.n	8003c96 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c82:	f7fd fdf5 	bl	8001870 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c90:	d901      	bls.n	8003c96 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e007      	b.n	8003ca6 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ee      	beq.n	8003c82 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0a8      	b.n	8003e1c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	22ca      	movs	r2, #202	; 0xca
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2253      	movs	r2, #83	; 0x53
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 8003cf8:	f7fd fdba 	bl	8001870 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003cfe:	e015      	b.n	8003d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d00:	f7fd fdb6 	bl	8001870 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d0e:	d90d      	bls.n	8003d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	22ff      	movs	r2, #255	; 0xff
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e077      	b.n	8003e1c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e2      	bne.n	8003d00 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003d5a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003d5c:	f7fd fd88 	bl	8001870 <HAL_GetTick>
 8003d60:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003d62:	e015      	b.n	8003d90 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d64:	f7fd fd84 	bl	8001870 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d72:	d90d      	bls.n	8003d90 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e045      	b.n	8003e1c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0e2      	beq.n	8003d64 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0207 	bic.w	r2, r2, #7
 8003db4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6899      	ldr	r1, [r3, #8]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003de0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df0:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e00:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	22ff      	movs	r2, #255	; 0xff
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	58000800 	.word	0x58000800

08003e28 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f818 	bl	8003e74 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003e54:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003e58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e5c:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	58000800 	.word	0x58000800

08003e74 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	2218      	movs	r2, #24
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 ff45 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 8003ea0:	233f      	movs	r3, #63	; 0x3f
 8003ea2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8003ea4:	2381      	movs	r3, #129	; 0x81
 8003ea6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003ea8:	1dfb      	adds	r3, r7, #7
 8003eaa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003eb0:	f107 0308 	add.w	r3, r7, #8
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 f9f0 	bl	800529c <hci_send_req>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	da01      	bge.n	8003ec6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003ec2:	23ff      	movs	r3, #255	; 0xff
 8003ec4:	e000      	b.n	8003ec8 <aci_gap_set_non_discoverable+0x40>
  return status;
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8003ed0:	b5b0      	push	{r4, r5, r7, lr}
 8003ed2:	b0ce      	sub	sp, #312	; 0x138
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	460c      	mov	r4, r1
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	1dfb      	adds	r3, r7, #7
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	1cbb      	adds	r3, r7, #2
 8003eec:	4602      	mov	r2, r0
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	1dbb      	adds	r3, r7, #6
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8003ef6:	f107 0310 	add.w	r3, r7, #16
 8003efa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003efe:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003f02:	3308      	adds	r3, #8
 8003f04:	f107 0210 	add.w	r2, r7, #16
 8003f08:	4413      	add	r3, r2
 8003f0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003f0e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003f12:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003f16:	4413      	add	r3, r2
 8003f18:	3309      	adds	r3, #9
 8003f1a:	f107 0210 	add.w	r2, r7, #16
 8003f1e:	4413      	add	r3, r2
 8003f20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003f24:	f107 030f 	add.w	r3, r7, #15
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003f32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f36:	1dfa      	adds	r2, r7, #7
 8003f38:	7812      	ldrb	r2, [r2, #0]
 8003f3a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003f3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8003f46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f4a:	1d3a      	adds	r2, r7, #4
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f56:	3302      	adds	r3, #2
 8003f58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003f5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f60:	1cba      	adds	r2, r7, #2
 8003f62:	8812      	ldrh	r2, [r2, #0]
 8003f64:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8003f72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f76:	1dba      	adds	r2, r7, #6
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003f7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f80:	3301      	adds	r3, #1
 8003f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8003f86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f8a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003f8e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f94:	3301      	adds	r3, #1
 8003f96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8003f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f9e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003fa2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8003fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003fb8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fea4 	bl	8004d0a <Osal_MemCpy>
    index_input += Local_Name_Length;
 8003fc2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003fc6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003fca:	4413      	add	r3, r2
 8003fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8003fd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fd4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003fd8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003fda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8003fe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003fee:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fe89 	bl	8004d0a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8003ff8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003ffc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004000:	4413      	add	r3, r2
 8004002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800400a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800400e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004014:	3302      	adds	r3, #2
 8004016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800401a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800401e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004022:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004024:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004028:	3302      	adds	r3, #2
 800402a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800402e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004032:	2218      	movs	r2, #24
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fe77 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 800403c:	233f      	movs	r3, #63	; 0x3f
 800403e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004042:	2383      	movs	r3, #131	; 0x83
 8004044:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004048:	f107 0310 	add.w	r3, r7, #16
 800404c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004050:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004054:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004058:	f107 030f 	add.w	r3, r7, #15
 800405c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004060:	2301      	movs	r3, #1
 8004062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f001 f915 	bl	800529c <hci_send_req>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	da01      	bge.n	800407c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8004078:	23ff      	movs	r3, #255	; 0xff
 800407a:	e002      	b.n	8004082 <aci_gap_set_discoverable+0x1b2>
  return status;
 800407c:	f107 030f 	add.w	r3, r7, #15
 8004080:	781b      	ldrb	r3, [r3, #0]
}
 8004082:	4618      	mov	r0, r3
 8004084:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004088:	46bd      	mov	sp, r7
 800408a:	bdb0      	pop	{r4, r5, r7, pc}

0800408c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b0cc      	sub	sp, #304	; 0x130
 8004090:	af00      	add	r7, sp, #0
 8004092:	4602      	mov	r2, r0
 8004094:	1dfb      	adds	r3, r7, #7
 8004096:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8004098:	f107 0310 	add.w	r3, r7, #16
 800409c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80040a0:	f107 030f 	add.w	r3, r7, #15
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80040ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040b2:	1dfa      	adds	r2, r7, #7
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80040b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040bc:	3301      	adds	r3, #1
 80040be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80040c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80040c6:	2218      	movs	r2, #24
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fe2d 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 80040d0:	233f      	movs	r3, #63	; 0x3f
 80040d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80040d6:	2385      	movs	r3, #133	; 0x85
 80040d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80040dc:	f107 0310 	add.w	r3, r7, #16
 80040e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80040e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80040ec:	f107 030f 	add.w	r3, r7, #15
 80040f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80040fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f001 f8cb 	bl	800529c <hci_send_req>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	da01      	bge.n	8004110 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800410c:	23ff      	movs	r3, #255	; 0xff
 800410e:	e002      	b.n	8004116 <aci_gap_set_io_capability+0x8a>
  return status;
 8004110:	f107 030f 	add.w	r3, r7, #15
 8004114:	781b      	ldrb	r3, [r3, #0]
}
 8004116:	4618      	mov	r0, r3
 8004118:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8004120:	b5b0      	push	{r4, r5, r7, lr}
 8004122:	b0cc      	sub	sp, #304	; 0x130
 8004124:	af00      	add	r7, sp, #0
 8004126:	4605      	mov	r5, r0
 8004128:	460c      	mov	r4, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	1dfb      	adds	r3, r7, #7
 8004130:	462a      	mov	r2, r5
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	1dbb      	adds	r3, r7, #6
 8004136:	4622      	mov	r2, r4
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	1d7b      	adds	r3, r7, #5
 800413c:	4602      	mov	r2, r0
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	460a      	mov	r2, r1
 8004144:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8004146:	f107 0310 	add.w	r3, r7, #16
 800414a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800414e:	f107 030f 	add.w	r3, r7, #15
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800415c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004160:	1dfa      	adds	r2, r7, #7
 8004162:	7812      	ldrb	r2, [r2, #0]
 8004164:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004166:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800416a:	3301      	adds	r3, #1
 800416c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8004170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004174:	1dba      	adds	r2, r7, #6
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800417a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800417e:	3301      	adds	r3, #1
 8004180:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8004184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004188:	1d7a      	adds	r2, r7, #5
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800418e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004192:	3301      	adds	r3, #1
 8004194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800419c:	1d3a      	adds	r2, r7, #4
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80041a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041a6:	3301      	adds	r3, #1
 80041a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80041ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041b0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80041b4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80041b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ba:	3301      	adds	r3, #1
 80041bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80041c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041c4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80041c8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80041ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ce:	3301      	adds	r3, #1
 80041d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80041d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041d8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80041dc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80041de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041e2:	3301      	adds	r3, #1
 80041e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80041e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80041f0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80041f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041f8:	3304      	adds	r3, #4
 80041fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80041fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004202:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004206:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8004208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800420c:	3301      	adds	r3, #1
 800420e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004212:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004216:	2218      	movs	r2, #24
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fd85 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004220:	233f      	movs	r3, #63	; 0x3f
 8004222:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8004226:	2386      	movs	r3, #134	; 0x86
 8004228:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004234:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004238:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800423c:	f107 030f 	add.w	r3, r7, #15
 8004240:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004244:	2301      	movs	r3, #1
 8004246:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800424a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f001 f823 	bl	800529c <hci_send_req>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	da01      	bge.n	8004260 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800425c:	23ff      	movs	r3, #255	; 0xff
 800425e:	e002      	b.n	8004266 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8004260:	f107 030f 	add.w	r3, r7, #15
 8004264:	781b      	ldrb	r3, [r3, #0]
}
 8004266:	4618      	mov	r0, r3
 8004268:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800426c:	46bd      	mov	sp, r7
 800426e:	bdb0      	pop	{r4, r5, r7, pc}

08004270 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b0cd      	sub	sp, #308	; 0x134
 8004274:	af00      	add	r7, sp, #0
 8004276:	4604      	mov	r4, r0
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	463a      	mov	r2, r7
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	1dfb      	adds	r3, r7, #7
 8004282:	4622      	mov	r2, r4
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	1dbb      	adds	r3, r7, #6
 8004288:	4602      	mov	r2, r0
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	1d7b      	adds	r3, r7, #5
 800428e:	460a      	mov	r2, r1
 8004290:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004292:	f107 0310 	add.w	r3, r7, #16
 8004296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800429a:	f107 0308 	add.w	r3, r7, #8
 800429e:	2207      	movs	r2, #7
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fd41 	bl	8004d2a <Osal_MemSet>
  int index_input = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80042ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b2:	1dfa      	adds	r2, r7, #7
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80042b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042bc:	3301      	adds	r3, #1
 80042be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80042c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c6:	1dba      	adds	r2, r7, #6
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80042cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042d0:	3301      	adds	r3, #1
 80042d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80042d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042da:	1d7a      	adds	r2, r7, #5
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80042e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042e4:	3301      	adds	r3, #1
 80042e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80042ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042ee:	2218      	movs	r2, #24
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fd19 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 80042f8:	233f      	movs	r3, #63	; 0x3f
 80042fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80042fe:	238a      	movs	r3, #138	; 0x8a
 8004300:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004304:	f107 0310 	add.w	r3, r7, #16
 8004308:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800430c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004314:	f107 0308 	add.w	r3, r7, #8
 8004318:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800431c:	2307      	movs	r3, #7
 800431e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f000 ffb7 	bl	800529c <hci_send_req>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	da01      	bge.n	8004338 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8004334:	23ff      	movs	r3, #255	; 0xff
 8004336:	e021      	b.n	800437c <aci_gap_init+0x10c>
  if ( resp.Status )
 8004338:	f107 0308 	add.w	r3, r7, #8
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <aci_gap_init+0xda>
    return resp.Status;
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	e018      	b.n	800437c <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004352:	b29a      	uxth	r2, r3
 8004354:	463b      	mov	r3, r7
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004362:	b29a      	uxth	r2, r3
 8004364:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004368:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004372:	b29a      	uxth	r2, r3
 8004374:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004378:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004382:	46bd      	mov	sp, r7
 8004384:	bd90      	pop	{r4, r7, pc}

08004386 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b0cc      	sub	sp, #304	; 0x130
 800438a:	af00      	add	r7, sp, #0
 800438c:	4602      	mov	r2, r0
 800438e:	463b      	mov	r3, r7
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	1dfb      	adds	r3, r7, #7
 8004394:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004396:	f107 0310 	add.w	r3, r7, #16
 800439a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800439e:	f107 030f 	add.w	r3, r7, #15
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80043ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b0:	1dfa      	adds	r2, r7, #7
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80043b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043ba:	3301      	adds	r3, #1
 80043bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80043c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c4:	1c58      	adds	r0, r3, #1
 80043c6:	1dfb      	adds	r3, r7, #7
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	463b      	mov	r3, r7
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	f000 fc9c 	bl	8004d0a <Osal_MemCpy>
  index_input += AdvDataLen;
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80043da:	4413      	add	r3, r2
 80043dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80043e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043e4:	2218      	movs	r2, #24
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fc9e 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 80043ee:	233f      	movs	r3, #63	; 0x3f
 80043f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80043f4:	238e      	movs	r3, #142	; 0x8e
 80043f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80043fa:	f107 0310 	add.w	r3, r7, #16
 80043fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004406:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800440a:	f107 030f 	add.w	r3, r7, #15
 800440e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004418:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f000 ff3c 	bl	800529c <hci_send_req>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	da01      	bge.n	800442e <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800442a:	23ff      	movs	r3, #255	; 0xff
 800442c:	e002      	b.n	8004434 <aci_gap_update_adv_data+0xae>
  return status;
 800442e:	f107 030f 	add.w	r3, r7, #15
 8004432:	781b      	ldrb	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b088      	sub	sp, #32
 8004442:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	2218      	movs	r2, #24
 800444e:	2100      	movs	r1, #0
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fc6a 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004456:	233f      	movs	r3, #63	; 0x3f
 8004458:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800445a:	2392      	movs	r3, #146	; 0x92
 800445c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004462:	2301      	movs	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f000 ff15 	bl	800529c <hci_send_req>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	da01      	bge.n	800447c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004478:	23ff      	movs	r3, #255	; 0xff
 800447a:	e000      	b.n	800447e <aci_gap_configure_whitelist+0x40>
  return status;
 800447c:	79fb      	ldrb	r3, [r7, #7]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b088      	sub	sp, #32
 800448a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	2218      	movs	r2, #24
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fc46 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 800449e:	233f      	movs	r3, #63	; 0x3f
 80044a0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80044a2:	f240 1301 	movw	r3, #257	; 0x101
 80044a6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80044a8:	1dfb      	adds	r3, r7, #7
 80044aa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80044ac:	2301      	movs	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80044b0:	f107 0308 	add.w	r3, r7, #8
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fef0 	bl	800529c <hci_send_req>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da01      	bge.n	80044c6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80044c2:	23ff      	movs	r3, #255	; 0xff
 80044c4:	e000      	b.n	80044c8 <aci_gatt_init+0x42>
  return status;
 80044c6:	79fb      	ldrb	r3, [r7, #7]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b0cf      	sub	sp, #316	; 0x13c
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4604      	mov	r4, r0
 80044d8:	4638      	mov	r0, r7
 80044da:	6001      	str	r1, [r0, #0]
 80044dc:	4610      	mov	r0, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	4622      	mov	r2, r4
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	1dbb      	adds	r3, r7, #6
 80044e8:	4602      	mov	r2, r0
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	1d7b      	adds	r3, r7, #5
 80044ee:	460a      	mov	r2, r1
 80044f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80044f2:	f107 0310 	add.w	r3, r7, #16
 80044f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80044fa:	1dfb      	adds	r3, r7, #7
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d007      	beq.n	8004512 <aci_gatt_add_service+0x42>
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d101      	bne.n	800450e <aci_gatt_add_service+0x3e>
 800450a:	2311      	movs	r3, #17
 800450c:	e002      	b.n	8004514 <aci_gatt_add_service+0x44>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <aci_gatt_add_service+0x44>
 8004512:	2303      	movs	r3, #3
 8004514:	f107 0210 	add.w	r2, r7, #16
 8004518:	4413      	add	r3, r2
 800451a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800451e:	f107 030c 	add.w	r3, r7, #12
 8004522:	2203      	movs	r2, #3
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fbff 	bl	8004d2a <Osal_MemSet>
  int index_input = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8004532:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004536:	1dfa      	adds	r2, r7, #7
 8004538:	7812      	ldrb	r2, [r2, #0]
 800453a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800453c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004540:	3301      	adds	r3, #1
 8004542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d002      	beq.n	8004554 <aci_gatt_add_service+0x84>
 800454e:	2b02      	cmp	r3, #2
 8004550:	d004      	beq.n	800455c <aci_gatt_add_service+0x8c>
 8004552:	e007      	b.n	8004564 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8004554:	2302      	movs	r3, #2
 8004556:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800455a:	e005      	b.n	8004568 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800455c:	2310      	movs	r3, #16
 800455e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004562:	e001      	b.n	8004568 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8004564:	2347      	movs	r3, #71	; 0x47
 8004566:	e05d      	b.n	8004624 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800456c:	1c58      	adds	r0, r3, #1
 800456e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8004572:	463b      	mov	r3, r7
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	f000 fbc8 	bl	8004d0a <Osal_MemCpy>
    index_input += size;
 800457a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800457e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004582:	4413      	add	r3, r2
 8004584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8004588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800458c:	1dba      	adds	r2, r7, #6
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004596:	3301      	adds	r3, #1
 8004598:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800459c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a0:	1d7a      	adds	r2, r7, #5
 80045a2:	7812      	ldrb	r2, [r2, #0]
 80045a4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80045a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045aa:	3301      	adds	r3, #1
 80045ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045b4:	2218      	movs	r2, #24
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fbb6 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 80045be:	233f      	movs	r3, #63	; 0x3f
 80045c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80045c4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80045c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80045cc:	f107 0310 	add.w	r3, r7, #16
 80045d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80045d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80045dc:	f107 030c 	add.w	r3, r7, #12
 80045e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80045e4:	2303      	movs	r3, #3
 80045e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fe53 	bl	800529c <hci_send_req>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da01      	bge.n	8004600 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80045fc:	23ff      	movs	r3, #255	; 0xff
 80045fe:	e011      	b.n	8004624 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8004600:	f107 030c 	add.w	r3, r7, #12
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <aci_gatt_add_service+0x142>
    return resp.Status;
 800460a:	f107 030c 	add.w	r3, r7, #12
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	e008      	b.n	8004624 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8004612:	f107 030c 	add.w	r3, r7, #12
 8004616:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800461a:	b29a      	uxth	r2, r3
 800461c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004620:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800462a:	46bd      	mov	sp, r7
 800462c:	bd90      	pop	{r4, r7, pc}

0800462e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800462e:	b590      	push	{r4, r7, lr}
 8004630:	b0d1      	sub	sp, #324	; 0x144
 8004632:	af00      	add	r7, sp, #0
 8004634:	4604      	mov	r4, r0
 8004636:	4608      	mov	r0, r1
 8004638:	f107 0108 	add.w	r1, r7, #8
 800463c:	600a      	str	r2, [r1, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	f107 030e 	add.w	r3, r7, #14
 8004644:	4622      	mov	r2, r4
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	f107 030d 	add.w	r3, r7, #13
 800464c:	4602      	mov	r2, r0
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	1dbb      	adds	r3, r7, #6
 8004652:	460a      	mov	r2, r1
 8004654:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004656:	f107 0318 	add.w	r3, r7, #24
 800465a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800465e:	f107 030d 	add.w	r3, r7, #13
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d008      	beq.n	800467a <aci_gatt_add_char+0x4c>
 8004668:	f107 030d 	add.w	r3, r7, #13
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d101      	bne.n	8004676 <aci_gatt_add_char+0x48>
 8004672:	2313      	movs	r3, #19
 8004674:	e002      	b.n	800467c <aci_gatt_add_char+0x4e>
 8004676:	2303      	movs	r3, #3
 8004678:	e000      	b.n	800467c <aci_gatt_add_char+0x4e>
 800467a:	2305      	movs	r3, #5
 800467c:	f107 0218 	add.w	r2, r7, #24
 8004680:	4413      	add	r3, r2
 8004682:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004686:	f107 0314 	add.w	r3, r7, #20
 800468a:	2203      	movs	r2, #3
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fb4b 	bl	8004d2a <Osal_MemSet>
  int index_input = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800469a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800469e:	f107 020e 	add.w	r2, r7, #14
 80046a2:	8812      	ldrh	r2, [r2, #0]
 80046a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80046a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046aa:	3302      	adds	r3, #2
 80046ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80046b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046b4:	f107 020d 	add.w	r2, r7, #13
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80046bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046c0:	3301      	adds	r3, #1
 80046c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80046c6:	f107 030d 	add.w	r3, r7, #13
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d002      	beq.n	80046d6 <aci_gatt_add_char+0xa8>
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d004      	beq.n	80046de <aci_gatt_add_char+0xb0>
 80046d4:	e007      	b.n	80046e6 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80046d6:	2302      	movs	r3, #2
 80046d8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80046dc:	e005      	b.n	80046ea <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80046de:	2310      	movs	r3, #16
 80046e0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80046e4:	e001      	b.n	80046ea <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80046e6:	2347      	movs	r3, #71	; 0x47
 80046e8:	e086      	b.n	80047f8 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80046ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80046ee:	1cd8      	adds	r0, r3, #3
 80046f0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80046f4:	f107 0308 	add.w	r3, r7, #8
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	f000 fb06 	bl	8004d0a <Osal_MemCpy>
    index_input += size;
 80046fe:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004702:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004706:	4413      	add	r3, r2
 8004708:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800470c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004710:	1dba      	adds	r2, r7, #6
 8004712:	8812      	ldrh	r2, [r2, #0]
 8004714:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004716:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800471a:	3302      	adds	r3, #2
 800471c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8004720:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004724:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004728:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800472a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800472e:	3301      	adds	r3, #1
 8004730:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004734:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004738:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800473c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800473e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004742:	3301      	adds	r3, #1
 8004744:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004748:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800474c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004750:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004752:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004756:	3301      	adds	r3, #1
 8004758:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800475c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004760:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004764:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004766:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800476a:	3301      	adds	r3, #1
 800476c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004770:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004774:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004778:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800477a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800477e:	3301      	adds	r3, #1
 8004780:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004784:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004788:	2218      	movs	r2, #24
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f000 facc 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004792:	233f      	movs	r3, #63	; 0x3f
 8004794:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004798:	f44f 7382 	mov.w	r3, #260	; 0x104
 800479c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80047a0:	f107 0318 	add.w	r3, r7, #24
 80047a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80047a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80047b8:	2303      	movs	r3, #3
 80047ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fd69 	bl	800529c <hci_send_req>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	da01      	bge.n	80047d4 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80047d0:	23ff      	movs	r3, #255	; 0xff
 80047d2:	e011      	b.n	80047f8 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80047d4:	f107 0314 	add.w	r3, r7, #20
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	e008      	b.n	80047f8 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047f4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}

08004802 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004802:	b5b0      	push	{r4, r5, r7, lr}
 8004804:	b0cc      	sub	sp, #304	; 0x130
 8004806:	af00      	add	r7, sp, #0
 8004808:	4605      	mov	r5, r0
 800480a:	460c      	mov	r4, r1
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	1dbb      	adds	r3, r7, #6
 8004812:	462a      	mov	r2, r5
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	4622      	mov	r2, r4
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	1cfb      	adds	r3, r7, #3
 800481e:	4602      	mov	r2, r0
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	1cbb      	adds	r3, r7, #2
 8004824:	460a      	mov	r2, r1
 8004826:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004828:	f107 0310 	add.w	r3, r7, #16
 800482c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004830:	f107 030f 	add.w	r3, r7, #15
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800483e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004842:	1dba      	adds	r2, r7, #6
 8004844:	8812      	ldrh	r2, [r2, #0]
 8004846:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004848:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800484c:	3302      	adds	r3, #2
 800484e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004856:	1d3a      	adds	r2, r7, #4
 8004858:	8812      	ldrh	r2, [r2, #0]
 800485a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800485c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004860:	3302      	adds	r3, #2
 8004862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486a:	1cfa      	adds	r2, r7, #3
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004870:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004874:	3301      	adds	r3, #1
 8004876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800487a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487e:	1cba      	adds	r2, r7, #2
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004888:	3301      	adds	r3, #1
 800488a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800488e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004892:	1d98      	adds	r0, r3, #6
 8004894:	1cbb      	adds	r3, r7, #2
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800489e:	f000 fa34 	bl	8004d0a <Osal_MemCpy>
  index_input += Char_Value_Length;
 80048a2:	1cbb      	adds	r3, r7, #2
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80048aa:	4413      	add	r3, r2
 80048ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80048b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048b4:	2218      	movs	r2, #24
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fa36 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 80048be:	233f      	movs	r3, #63	; 0x3f
 80048c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80048c4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80048c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80048cc:	f107 0310 	add.w	r3, r7, #16
 80048d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80048d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80048dc:	f107 030f 	add.w	r3, r7, #15
 80048e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80048ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fcd3 	bl	800529c <hci_send_req>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	da01      	bge.n	8004900 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80048fc:	23ff      	movs	r3, #255	; 0xff
 80048fe:	e002      	b.n	8004906 <aci_gatt_update_char_value+0x104>
  return status;
 8004900:	f107 030f 	add.w	r3, r7, #15
 8004904:	781b      	ldrb	r3, [r3, #0]
}
 8004906:	4618      	mov	r0, r3
 8004908:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800490c:	46bd      	mov	sp, r7
 800490e:	bdb0      	pop	{r4, r5, r7, pc}

08004910 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b0cc      	sub	sp, #304	; 0x130
 8004914:	af00      	add	r7, sp, #0
 8004916:	463b      	mov	r3, r7
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	4602      	mov	r2, r0
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	1dbb      	adds	r3, r7, #6
 8004922:	460a      	mov	r2, r1
 8004924:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004926:	f107 0310 	add.w	r3, r7, #16
 800492a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800492e:	f107 030f 	add.w	r3, r7, #15
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800493c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004940:	1dfa      	adds	r2, r7, #7
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004946:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800494a:	3301      	adds	r3, #1
 800494c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004954:	1dba      	adds	r2, r7, #6
 8004956:	7812      	ldrb	r2, [r2, #0]
 8004958:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800495a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800495e:	3301      	adds	r3, #1
 8004960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004968:	1c98      	adds	r0, r3, #2
 800496a:	1dbb      	adds	r3, r7, #6
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	463b      	mov	r3, r7
 8004970:	6819      	ldr	r1, [r3, #0]
 8004972:	f000 f9ca 	bl	8004d0a <Osal_MemCpy>
  index_input += Length;
 8004976:	1dbb      	adds	r3, r7, #6
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800497e:	4413      	add	r3, r2
 8004980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004988:	2218      	movs	r2, #24
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f9cc 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004992:	233f      	movs	r3, #63	; 0x3f
 8004994:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004998:	230c      	movs	r3, #12
 800499a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800499e:	f107 0310 	add.w	r3, r7, #16
 80049a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80049a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80049ae:	f107 030f 	add.w	r3, r7, #15
 80049b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80049bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fc6a 	bl	800529c <hci_send_req>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da01      	bge.n	80049d2 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80049ce:	23ff      	movs	r3, #255	; 0xff
 80049d0:	e002      	b.n	80049d8 <aci_hal_write_config_data+0xc8>
  return status;
 80049d2:	f107 030f 	add.w	r3, r7, #15
 80049d6:	781b      	ldrb	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b0cc      	sub	sp, #304	; 0x130
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4602      	mov	r2, r0
 80049ea:	1dfb      	adds	r3, r7, #7
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	1dbb      	adds	r3, r7, #6
 80049f0:	460a      	mov	r2, r1
 80049f2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80049f4:	f107 0310 	add.w	r3, r7, #16
 80049f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80049fc:	f107 030f 	add.w	r3, r7, #15
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a0e:	1dfa      	adds	r2, r7, #7
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004a14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8004a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a22:	1dba      	adds	r2, r7, #6
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004a28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a36:	2218      	movs	r2, #24
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f975 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a40:	233f      	movs	r3, #63	; 0x3f
 8004a42:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8004a46:	230f      	movs	r3, #15
 8004a48:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004a4c:	f107 0310 	add.w	r3, r7, #16
 8004a50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004a5c:	f107 030f 	add.w	r3, r7, #15
 8004a60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fc13 	bl	800529c <hci_send_req>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da01      	bge.n	8004a80 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004a7c:	23ff      	movs	r3, #255	; 0xff
 8004a7e:	e002      	b.n	8004a86 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8004a80:	f107 030f 	add.w	r3, r7, #15
 8004a84:	781b      	ldrb	r3, [r3, #0]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0cc      	sub	sp, #304	; 0x130
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4602      	mov	r2, r0
 8004a98:	1dbb      	adds	r3, r7, #6
 8004a9a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004aa4:	f107 030f 	add.w	r3, r7, #15
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8004ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab6:	1dba      	adds	r2, r7, #6
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004aca:	2218      	movs	r2, #24
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f92b 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ad4:	233f      	movs	r3, #63	; 0x3f
 8004ad6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8004ada:	2318      	movs	r3, #24
 8004adc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004ae0:	f107 0310 	add.w	r3, r7, #16
 8004ae4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004af0:	f107 030f 	add.w	r3, r7, #15
 8004af4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fbc9 	bl	800529c <hci_send_req>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	da01      	bge.n	8004b14 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8004b10:	23ff      	movs	r3, #255	; 0xff
 8004b12:	e002      	b.n	8004b1a <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8004b14:	f107 030f 	add.w	r3, r7, #15
 8004b18:	781b      	ldrb	r3, [r3, #0]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b2e:	f107 0308 	add.w	r3, r7, #8
 8004b32:	2218      	movs	r2, #24
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f8f7 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x03;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004b40:	2303      	movs	r3, #3
 8004b42:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004b44:	1dfb      	adds	r3, r7, #7
 8004b46:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b4c:	f107 0308 	add.w	r3, r7, #8
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fba2 	bl	800529c <hci_send_req>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da01      	bge.n	8004b62 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004b5e:	23ff      	movs	r3, #255	; 0xff
 8004b60:	e000      	b.n	8004b64 <hci_reset+0x40>
  return status;
 8004b62:	79fb      	ldrb	r3, [r7, #7]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b0ce      	sub	sp, #312	; 0x138
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	f107 0308 	add.w	r3, r7, #8
 8004b76:	6019      	str	r1, [r3, #0]
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	f107 030e 	add.w	r3, r7, #14
 8004b80:	4602      	mov	r2, r0
 8004b82:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8004b84:	f107 0318 	add.w	r3, r7, #24
 8004b88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004b8c:	f107 0310 	add.w	r3, r7, #16
 8004b90:	2205      	movs	r2, #5
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f8c8 	bl	8004d2a <Osal_MemSet>
  int index_input = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8004ba0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ba4:	f107 020e 	add.w	r2, r7, #14
 8004ba8:	8812      	ldrh	r2, [r2, #0]
 8004baa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004bac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004bb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004bba:	2218      	movs	r2, #24
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f8b3 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x08;
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8004bca:	2330      	movs	r3, #48	; 0x30
 8004bcc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004bd0:	f107 0318 	add.w	r3, r7, #24
 8004bd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004bd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004be0:	f107 0310 	add.w	r3, r7, #16
 8004be4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004be8:	2305      	movs	r3, #5
 8004bea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004bee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fb51 	bl	800529c <hci_send_req>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	da01      	bge.n	8004c04 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8004c00:	23ff      	movs	r3, #255	; 0xff
 8004c02:	e016      	b.n	8004c32 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8004c04:	f107 0310 	add.w	r3, r7, #16
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <hci_le_read_phy+0xaa>
    return resp.Status;
 8004c0e:	f107 0310 	add.w	r3, r7, #16
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	e00d      	b.n	8004c32 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8004c16:	f107 0310 	add.w	r3, r7, #16
 8004c1a:	78da      	ldrb	r2, [r3, #3]
 8004c1c:	f107 0308 	add.w	r3, r7, #8
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8004c24:	f107 0310 	add.w	r3, r7, #16
 8004c28:	791a      	ldrb	r2, [r3, #4]
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b0cd      	sub	sp, #308	; 0x134
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4604      	mov	r4, r0
 8004c44:	4608      	mov	r0, r1
 8004c46:	4611      	mov	r1, r2
 8004c48:	1dfb      	adds	r3, r7, #7
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	1dbb      	adds	r3, r7, #6
 8004c50:	4602      	mov	r2, r0
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	1d7b      	adds	r3, r7, #5
 8004c56:	460a      	mov	r2, r1
 8004c58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004c5a:	f107 0310 	add.w	r3, r7, #16
 8004c5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004c62:	f107 030f 	add.w	r3, r7, #15
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8004c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c74:	1dfa      	adds	r2, r7, #7
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8004c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c88:	1dba      	adds	r2, r7, #6
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c92:	3301      	adds	r3, #1
 8004c94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8004c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9c:	1d7a      	adds	r2, r7, #5
 8004c9e:	7812      	ldrb	r2, [r2, #0]
 8004ca0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004cac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cb0:	2218      	movs	r2, #24
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 f838 	bl	8004d2a <Osal_MemSet>
  rq.ogf = 0x08;
 8004cba:	2308      	movs	r3, #8
 8004cbc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8004cc0:	2331      	movs	r3, #49	; 0x31
 8004cc2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004cc6:	f107 0310 	add.w	r3, r7, #16
 8004cca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004cce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004cd6:	f107 030f 	add.w	r3, r7, #15
 8004cda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ce4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fad6 	bl	800529c <hci_send_req>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da01      	bge.n	8004cfa <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8004cf6:	23ff      	movs	r3, #255	; 0xff
 8004cf8:	e002      	b.n	8004d00 <hci_le_set_default_phy+0xc4>
  return status;
 8004cfa:	f107 030f 	add.w	r3, r7, #15
 8004cfe:	781b      	ldrb	r3, [r3, #0]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd90      	pop	{r4, r7, pc}

08004d0a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f001 fef8 	bl	8006b10 <memcpy>
 8004d20:	4603      	mov	r3, r0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f001 fef3 	bl	8006b26 <memset>
 8004d40:	4603      	mov	r3, r0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08a      	sub	sp, #40	; 0x28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2bff      	cmp	r3, #255	; 0xff
 8004d66:	d000      	beq.n	8004d6a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8004d68:	e04a      	b.n	8004e00 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	f640 4301 	movw	r3, #3073	; 0xc01
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d000      	beq.n	8004d82 <PeerToPeer_Event_Handler+0x36>
          break;
 8004d80:	e03d      	b.n	8004dfe <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3302      	adds	r3, #2
 8004d86:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	885b      	ldrh	r3, [r3, #2]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <PeerToPeer_Event_Handler+0xc0>)
 8004d92:	889b      	ldrh	r3, [r3, #4]
 8004d94:	3302      	adds	r3, #2
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d118      	bne.n	8004dcc <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	7a1b      	ldrb	r3, [r3, #8]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8004dac:	2300      	movs	r3, #0
 8004dae:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8004db0:	f107 0308 	add.w	r3, r7, #8
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 facf 	bl	8006358 <P2PS_STM_App_Notification>
        break;
 8004dba:	e01f      	b.n	8004dfc <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fac7 	bl	8006358 <P2PS_STM_App_Notification>
        break;
 8004dca:	e017      	b.n	8004dfc <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	885b      	ldrh	r3, [r3, #2]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <PeerToPeer_Event_Handler+0xc0>)
 8004dd6:	885b      	ldrh	r3, [r3, #2]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d10e      	bne.n	8004dfc <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	88db      	ldrh	r3, [r3, #6]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	3308      	adds	r3, #8
 8004df0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8004df2:	f107 0308 	add.w	r3, r7, #8
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 faae 	bl	8006358 <P2PS_STM_App_Notification>
        break;
 8004dfc:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8004dfe:	bf00      	nop
  }

  return(return_value);
 8004e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8004e04:	4618      	mov	r0, r3
 8004e06:	3728      	adds	r7, #40	; 0x28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	200000c4 	.word	0x200000c4

08004e10 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8004e16:	484a      	ldr	r0, [pc, #296]	; (8004f40 <P2PS_STM_Init+0x130>)
 8004e18:	f000 f938 	bl	800508c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8004e1c:	238f      	movs	r3, #143	; 0x8f
 8004e1e:	703b      	strb	r3, [r7, #0]
 8004e20:	23e5      	movs	r3, #229	; 0xe5
 8004e22:	707b      	strb	r3, [r7, #1]
 8004e24:	23b3      	movs	r3, #179	; 0xb3
 8004e26:	70bb      	strb	r3, [r7, #2]
 8004e28:	23d5      	movs	r3, #213	; 0xd5
 8004e2a:	70fb      	strb	r3, [r7, #3]
 8004e2c:	232e      	movs	r3, #46	; 0x2e
 8004e2e:	713b      	strb	r3, [r7, #4]
 8004e30:	237f      	movs	r3, #127	; 0x7f
 8004e32:	717b      	strb	r3, [r7, #5]
 8004e34:	234a      	movs	r3, #74	; 0x4a
 8004e36:	71bb      	strb	r3, [r7, #6]
 8004e38:	2398      	movs	r3, #152	; 0x98
 8004e3a:	71fb      	strb	r3, [r7, #7]
 8004e3c:	232a      	movs	r3, #42	; 0x2a
 8004e3e:	723b      	strb	r3, [r7, #8]
 8004e40:	2348      	movs	r3, #72	; 0x48
 8004e42:	727b      	strb	r3, [r7, #9]
 8004e44:	237a      	movs	r3, #122	; 0x7a
 8004e46:	72bb      	strb	r3, [r7, #10]
 8004e48:	23cc      	movs	r3, #204	; 0xcc
 8004e4a:	72fb      	strb	r3, [r7, #11]
 8004e4c:	2340      	movs	r3, #64	; 0x40
 8004e4e:	733b      	strb	r3, [r7, #12]
 8004e50:	23fe      	movs	r3, #254	; 0xfe
 8004e52:	737b      	strb	r3, [r7, #13]
 8004e54:	2300      	movs	r3, #0
 8004e56:	73bb      	strb	r3, [r7, #14]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8004e5c:	4639      	mov	r1, r7
 8004e5e:	4b39      	ldr	r3, [pc, #228]	; (8004f44 <P2PS_STM_Init+0x134>)
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2308      	movs	r3, #8
 8004e64:	2201      	movs	r2, #1
 8004e66:	2002      	movs	r0, #2
 8004e68:	f7ff fb32 	bl	80044d0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8004e6c:	2319      	movs	r3, #25
 8004e6e:	703b      	strb	r3, [r7, #0]
 8004e70:	23ed      	movs	r3, #237	; 0xed
 8004e72:	707b      	strb	r3, [r7, #1]
 8004e74:	2382      	movs	r3, #130	; 0x82
 8004e76:	70bb      	strb	r3, [r7, #2]
 8004e78:	23ae      	movs	r3, #174	; 0xae
 8004e7a:	70fb      	strb	r3, [r7, #3]
 8004e7c:	23ed      	movs	r3, #237	; 0xed
 8004e7e:	713b      	strb	r3, [r7, #4]
 8004e80:	2321      	movs	r3, #33	; 0x21
 8004e82:	717b      	strb	r3, [r7, #5]
 8004e84:	234c      	movs	r3, #76	; 0x4c
 8004e86:	71bb      	strb	r3, [r7, #6]
 8004e88:	239d      	movs	r3, #157	; 0x9d
 8004e8a:	71fb      	strb	r3, [r7, #7]
 8004e8c:	2341      	movs	r3, #65	; 0x41
 8004e8e:	723b      	strb	r3, [r7, #8]
 8004e90:	2345      	movs	r3, #69	; 0x45
 8004e92:	727b      	strb	r3, [r7, #9]
 8004e94:	2322      	movs	r3, #34	; 0x22
 8004e96:	72bb      	strb	r3, [r7, #10]
 8004e98:	238e      	movs	r3, #142	; 0x8e
 8004e9a:	72fb      	strb	r3, [r7, #11]
 8004e9c:	2341      	movs	r3, #65	; 0x41
 8004e9e:	733b      	strb	r3, [r7, #12]
 8004ea0:	23fe      	movs	r3, #254	; 0xfe
 8004ea2:	737b      	strb	r3, [r7, #13]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73bb      	strb	r3, [r7, #14]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <P2PS_STM_Init+0x134>)
 8004eae:	8818      	ldrh	r0, [r3, #0]
 8004eb0:	463a      	mov	r2, r7
 8004eb2:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <P2PS_STM_Init+0x138>)
 8004eb4:	9305      	str	r3, [sp, #20]
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	9304      	str	r3, [sp, #16]
 8004eba:	230a      	movs	r3, #10
 8004ebc:	9303      	str	r3, [sp, #12]
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	9302      	str	r3, [sp, #8]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	2306      	movs	r3, #6
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2302      	movs	r3, #2
 8004ecc:	2102      	movs	r1, #2
 8004ece:	f7ff fbae 	bl	800462e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8004ed2:	2319      	movs	r3, #25
 8004ed4:	703b      	strb	r3, [r7, #0]
 8004ed6:	23ed      	movs	r3, #237	; 0xed
 8004ed8:	707b      	strb	r3, [r7, #1]
 8004eda:	2382      	movs	r3, #130	; 0x82
 8004edc:	70bb      	strb	r3, [r7, #2]
 8004ede:	23ae      	movs	r3, #174	; 0xae
 8004ee0:	70fb      	strb	r3, [r7, #3]
 8004ee2:	23ed      	movs	r3, #237	; 0xed
 8004ee4:	713b      	strb	r3, [r7, #4]
 8004ee6:	2321      	movs	r3, #33	; 0x21
 8004ee8:	717b      	strb	r3, [r7, #5]
 8004eea:	234c      	movs	r3, #76	; 0x4c
 8004eec:	71bb      	strb	r3, [r7, #6]
 8004eee:	239d      	movs	r3, #157	; 0x9d
 8004ef0:	71fb      	strb	r3, [r7, #7]
 8004ef2:	2341      	movs	r3, #65	; 0x41
 8004ef4:	723b      	strb	r3, [r7, #8]
 8004ef6:	2345      	movs	r3, #69	; 0x45
 8004ef8:	727b      	strb	r3, [r7, #9]
 8004efa:	2322      	movs	r3, #34	; 0x22
 8004efc:	72bb      	strb	r3, [r7, #10]
 8004efe:	238e      	movs	r3, #142	; 0x8e
 8004f00:	72fb      	strb	r3, [r7, #11]
 8004f02:	2342      	movs	r3, #66	; 0x42
 8004f04:	733b      	strb	r3, [r7, #12]
 8004f06:	23fe      	movs	r3, #254	; 0xfe
 8004f08:	737b      	strb	r3, [r7, #13]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73bb      	strb	r3, [r7, #14]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004f12:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <P2PS_STM_Init+0x134>)
 8004f14:	8818      	ldrh	r0, [r3, #0]
 8004f16:	463a      	mov	r2, r7
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <P2PS_STM_Init+0x13c>)
 8004f1a:	9305      	str	r3, [sp, #20]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	9304      	str	r3, [sp, #16]
 8004f20:	230a      	movs	r3, #10
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	2301      	movs	r3, #1
 8004f26:	9302      	str	r3, [sp, #8]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	2302      	movs	r3, #2
 8004f32:	2102      	movs	r1, #2
 8004f34:	f7ff fb7b 	bl	800462e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8004f38:	bf00      	nop
}
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	08004d4d 	.word	0x08004d4d
 8004f44:	200000c4 	.word	0x200000c4
 8004f48:	200000c6 	.word	0x200000c6
 8004f4c:	200000c8 	.word	0x200000c8

08004f50 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return;
 8004f54:	bf00      	nop
}
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  return;
 8004f62:	bf00      	nop
}
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <DIS_Init>:
__weak void DIS_Init( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return;
 8004f70:	bf00      	nop
}
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  return;
 8004f7e:	bf00      	nop
}
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return;
 8004f8c:	bf00      	nop
}
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HRS_Init>:
__weak void HRS_Init( void )
{
 8004f96:	b480      	push	{r7}
 8004f98:	af00      	add	r7, sp, #0
  return;
 8004f9a:	bf00      	nop
}
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HTS_Init>:
__weak void HTS_Init( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return;
 8004fa8:	bf00      	nop
}
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <IAS_Init>:
__weak void IAS_Init( void )
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	af00      	add	r7, sp, #0
  return;
 8004fb6:	bf00      	nop
}
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <LLS_Init>:
__weak void LLS_Init( void )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return;
 8004fc4:	bf00      	nop
}
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <TPS_Init>:
__weak void TPS_Init( void )
{
 8004fce:	b480      	push	{r7}
 8004fd0:	af00      	add	r7, sp, #0
  return;
 8004fd2:	bf00      	nop
}
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return;
 8004fe0:	bf00      	nop
}
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0
  return;
 8004fee:	bf00      	nop
}
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <MESH_Init>:
__weak void MESH_Init( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return;
 8004ffc:	bf00      	nop
}
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8005006:	b480      	push	{r7}
 8005008:	af00      	add	r7, sp, #0
  return;
 800500a:	bf00      	nop
}
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return;
 8005018:	bf00      	nop
}
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <SVCCTL_Init+0x18>)
 800502a:	2200      	movs	r2, #0
 800502c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800502e:	4b04      	ldr	r3, [pc, #16]	; (8005040 <SVCCTL_Init+0x1c>)
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005034:	f000 f806 	bl	8005044 <SVCCTL_SvcInit>

  return;
 8005038:	bf00      	nop
}
 800503a:	bd80      	pop	{r7, pc}
 800503c:	200000cc 	.word	0x200000cc
 8005040:	200000ec 	.word	0x200000ec

08005044 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  BLS_Init();
 8005048:	f7ff ff82 	bl	8004f50 <BLS_Init>

  CRS_STM_Init();
 800504c:	f7ff ff87 	bl	8004f5e <CRS_STM_Init>

  DIS_Init();
 8005050:	f7ff ff8c 	bl	8004f6c <DIS_Init>

  EDS_STM_Init();
 8005054:	f7ff ff91 	bl	8004f7a <EDS_STM_Init>

  HIDS_Init();
 8005058:	f7ff ff96 	bl	8004f88 <HIDS_Init>

  HRS_Init();
 800505c:	f7ff ff9b 	bl	8004f96 <HRS_Init>

  HTS_Init();
 8005060:	f7ff ffa0 	bl	8004fa4 <HTS_Init>

  IAS_Init();
 8005064:	f7ff ffa5 	bl	8004fb2 <IAS_Init>

  LLS_Init();
 8005068:	f7ff ffaa 	bl	8004fc0 <LLS_Init>

  TPS_Init();
 800506c:	f7ff ffaf 	bl	8004fce <TPS_Init>

  MOTENV_STM_Init();
 8005070:	f7ff ffb4 	bl	8004fdc <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005074:	f7ff fecc 	bl	8004e10 <P2PS_STM_Init>

  OTAS_STM_Init();
 8005078:	f7ff ffb7 	bl	8004fea <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800507c:	f7ff ffc3 	bl	8005006 <BVOPUS_STM_Init>

  MESH_Init();
 8005080:	f7ff ffba 	bl	8004ff8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005084:	f7ff ffc6 	bl	8005014 <SVCCTL_InitCustomSvc>
  
  return;
 8005088:	bf00      	nop
}
 800508a:	bd80      	pop	{r7, pc}

0800508c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8005094:	4b09      	ldr	r3, [pc, #36]	; (80050bc <SVCCTL_RegisterSvcHandler+0x30>)
 8005096:	7f1b      	ldrb	r3, [r3, #28]
 8005098:	4619      	mov	r1, r3
 800509a:	4a08      	ldr	r2, [pc, #32]	; (80050bc <SVCCTL_RegisterSvcHandler+0x30>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <SVCCTL_RegisterSvcHandler+0x30>)
 80050a4:	7f1b      	ldrb	r3, [r3, #28]
 80050a6:	3301      	adds	r3, #1
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <SVCCTL_RegisterSvcHandler+0x30>)
 80050ac:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80050ae:	bf00      	nop
}
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	200000cc 	.word	0x200000cc

080050c0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3301      	adds	r3, #1
 80050cc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2bff      	cmp	r3, #255	; 0xff
 80050d8:	d000      	beq.n	80050dc <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 80050da:	e025      	b.n	8005128 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	3302      	adds	r3, #2
 80050e0:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80050ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050f0:	d000      	beq.n	80050f4 <SVCCTL_UserEvtRx+0x34>
          break;
 80050f2:	e018      	b.n	8005126 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	757b      	strb	r3, [r7, #21]
 80050f8:	e00d      	b.n	8005116 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80050fa:	7d7b      	ldrb	r3, [r7, #21]
 80050fc:	4a18      	ldr	r2, [pc, #96]	; (8005160 <SVCCTL_UserEvtRx+0xa0>)
 80050fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
 8005106:	4603      	mov	r3, r0
 8005108:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d108      	bne.n	8005122 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005110:	7d7b      	ldrb	r3, [r7, #21]
 8005112:	3301      	adds	r3, #1
 8005114:	757b      	strb	r3, [r7, #21]
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <SVCCTL_UserEvtRx+0xa0>)
 8005118:	7f1b      	ldrb	r3, [r3, #28]
 800511a:	7d7a      	ldrb	r2, [r7, #21]
 800511c:	429a      	cmp	r2, r3
 800511e:	d3ec      	bcc.n	80050fa <SVCCTL_UserEvtRx+0x3a>
          break;
 8005120:	e000      	b.n	8005124 <SVCCTL_UserEvtRx+0x64>
              break;
 8005122:	bf00      	nop
          break;
 8005124:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8005126:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d009      	beq.n	8005142 <SVCCTL_UserEvtRx+0x82>
 800512e:	2b02      	cmp	r3, #2
 8005130:	d00a      	beq.n	8005148 <SVCCTL_UserEvtRx+0x88>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fe48 	bl	8005dcc <SVCCTL_App_Notification>
 800513c:	4603      	mov	r3, r0
 800513e:	75bb      	strb	r3, [r7, #22]
      break;
 8005140:	e008      	b.n	8005154 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005142:	2301      	movs	r3, #1
 8005144:	75bb      	strb	r3, [r7, #22]
      break;
 8005146:	e005      	b.n	8005154 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005148:	2300      	movs	r3, #0
 800514a:	75bb      	strb	r3, [r7, #22]
      break;
 800514c:	e002      	b.n	8005154 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800514e:	2301      	movs	r3, #1
 8005150:	75bb      	strb	r3, [r7, #22]
      break;
 8005152:	bf00      	nop
  }

  return (return_status);
 8005154:	7dbb      	ldrb	r3, [r7, #22]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	200000cc 	.word	0x200000cc

08005164 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2121      	movs	r1, #33	; 0x21
 800517c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005180:	f000 fa5e 	bl	8005640 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	330b      	adds	r3, #11
 8005188:	78db      	ldrb	r3, [r3, #3]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b088      	sub	sp, #32
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800519a:	f107 030c 	add.w	r3, r7, #12
 800519e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	210f      	movs	r1, #15
 80051aa:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80051ae:	f000 fa47 	bl	8005640 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	330b      	adds	r3, #11
 80051b6:	78db      	ldrb	r3, [r3, #3]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <hci_init+0x30>)
 80051d0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80051d2:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <hci_init+0x34>)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80051d8:	4806      	ldr	r0, [pc, #24]	; (80051f4 <hci_init+0x34>)
 80051da:	f000 f9af 	bl	800553c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f8dc 	bl	80053a0 <TlInit>

  return;
 80051e8:	bf00      	nop
}
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000200 	.word	0x20000200
 80051f4:	200001d8 	.word	0x200001d8

080051f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80051fe:	4824      	ldr	r0, [pc, #144]	; (8005290 <hci_user_evt_proc+0x98>)
 8005200:	f000 fcb4 	bl	8005b6c <LST_is_empty>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d12f      	bne.n	800526a <hci_user_evt_proc+0x72>
 800520a:	4b22      	ldr	r3, [pc, #136]	; (8005294 <hci_user_evt_proc+0x9c>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02b      	beq.n	800526a <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005212:	f107 030c 	add.w	r3, r7, #12
 8005216:	4619      	mov	r1, r3
 8005218:	481d      	ldr	r0, [pc, #116]	; (8005290 <hci_user_evt_proc+0x98>)
 800521a:	f000 fd2e 	bl	8005c7a <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f97b 	bl	800551c <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 8005226:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <hci_user_evt_proc+0xa0>)
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005232:	2301      	movs	r3, #1
 8005234:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005236:	4b18      	ldr	r3, [pc, #96]	; (8005298 <hci_user_evt_proc+0xa0>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	1d3a      	adds	r2, r7, #4
 800523c:	4610      	mov	r0, r2
 800523e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005240:	793a      	ldrb	r2, [r7, #4]
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <hci_user_evt_proc+0x9c>)
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e002      	b.n	800524e <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005248:	4b12      	ldr	r3, [pc, #72]	; (8005294 <hci_user_evt_proc+0x9c>)
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <hci_user_evt_proc+0x9c>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fbef 	bl	8005a3c <TL_MM_EvtDone>
 800525e:	e004      	b.n	800526a <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4619      	mov	r1, r3
 8005264:	480a      	ldr	r0, [pc, #40]	; (8005290 <hci_user_evt_proc+0x98>)
 8005266:	f000 fca1 	bl	8005bac <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800526a:	4809      	ldr	r0, [pc, #36]	; (8005290 <hci_user_evt_proc+0x98>)
 800526c:	f000 fc7e 	bl	8005b6c <LST_is_empty>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d107      	bne.n	8005286 <hci_user_evt_proc+0x8e>
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <hci_user_evt_proc+0x9c>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800527e:	4804      	ldr	r0, [pc, #16]	; (8005290 <hci_user_evt_proc+0x98>)
 8005280:	f001 f811 	bl	80062a6 <hci_notify_asynch_evt>
  }


  return;
 8005284:	bf00      	nop
 8005286:	bf00      	nop
}
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	200000f4 	.word	0x200000f4
 8005294:	20000100 	.word	0x20000100
 8005298:	200001d8 	.word	0x200001d8

0800529c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80052a8:	2000      	movs	r0, #0
 80052aa:	f000 f8d5 	bl	8005458 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80052ae:	2300      	movs	r3, #0
 80052b0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	885b      	ldrh	r3, [r3, #2]
 80052b6:	b21b      	sxth	r3, r3
 80052b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052bc:	b21a      	sxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	029b      	lsls	r3, r3, #10
 80052c4:	b21b      	sxth	r3, r3
 80052c6:	4313      	orrs	r3, r2
 80052c8:	b21b      	sxth	r3, r3
 80052ca:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	b2d9      	uxtb	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	8bbb      	ldrh	r3, [r7, #28]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 f891 	bl	8005400 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80052de:	e052      	b.n	8005386 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80052e0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80052e4:	f000 fff6 	bl	80062d4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80052e8:	e047      	b.n	800537a <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80052ea:	f107 030c 	add.w	r3, r7, #12
 80052ee:	4619      	mov	r1, r3
 80052f0:	482a      	ldr	r0, [pc, #168]	; (800539c <hci_send_req+0x100>)
 80052f2:	f000 fcc2 	bl	8005c7a <LST_remove_head>

      OutputRspTrace(pevtpacket);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f8fb 	bl	80054f4 <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	7a5b      	ldrb	r3, [r3, #9]
 8005302:	2b0f      	cmp	r3, #15
 8005304:	d114      	bne.n	8005330 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	330b      	adds	r3, #11
 800530a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	885b      	ldrh	r3, [r3, #2]
 8005310:	b29b      	uxth	r3, r3
 8005312:	8bba      	ldrh	r2, [r7, #28]
 8005314:	429a      	cmp	r2, r3
 8005316:	d104      	bne.n	8005322 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	7812      	ldrb	r2, [r2, #0]
 8005320:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d027      	beq.n	800537a <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800532a:	2301      	movs	r3, #1
 800532c:	77fb      	strb	r3, [r7, #31]
 800532e:	e024      	b.n	800537a <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	330b      	adds	r3, #11
 8005334:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800533c:	b29b      	uxth	r3, r3
 800533e:	8bba      	ldrh	r2, [r7, #28]
 8005340:	429a      	cmp	r2, r3
 8005342:	d114      	bne.n	800536e <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	7a9b      	ldrb	r3, [r3, #10]
 8005348:	3b03      	subs	r3, #3
 800534a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	429a      	cmp	r2, r3
 8005354:	bfa8      	it	ge
 8005356:	461a      	movge	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6918      	ldr	r0, [r3, #16]
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	1cd9      	adds	r1, r3, #3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	461a      	mov	r2, r3
 800536a:	f001 fbd1 	bl	8006b10 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005376:	2301      	movs	r3, #1
 8005378:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800537a:	4808      	ldr	r0, [pc, #32]	; (800539c <hci_send_req+0x100>)
 800537c:	f000 fbf6 	bl	8005b6c <LST_is_empty>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0b1      	beq.n	80052ea <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0a9      	beq.n	80052e0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800538c:	2001      	movs	r0, #1
 800538e:	f000 f863 	bl	8005458 <NotifyCmdStatus>

  return 0;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3720      	adds	r7, #32
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	200001f8 	.word	0x200001f8

080053a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80053a8:	480f      	ldr	r0, [pc, #60]	; (80053e8 <TlInit+0x48>)
 80053aa:	f000 fbcf 	bl	8005b4c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80053ae:	4a0f      	ldr	r2, [pc, #60]	; (80053ec <TlInit+0x4c>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80053b4:	480e      	ldr	r0, [pc, #56]	; (80053f0 <TlInit+0x50>)
 80053b6:	f000 fbc9 	bl	8005b4c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80053ba:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <TlInit+0x54>)
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <TlInit+0x58>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <TlInit+0x5c>)
 80053ce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <TlInit+0x58>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f107 0208 	add.w	r2, r7, #8
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
  }

  return;
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
}
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200001f8 	.word	0x200001f8
 80053ec:	200000fc 	.word	0x200000fc
 80053f0:	200000f4 	.word	0x200000f4
 80053f4:	20000100 	.word	0x20000100
 80053f8:	200001d8 	.word	0x200001d8
 80053fc:	08005499 	.word	0x08005499

08005400 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	603a      	str	r2, [r7, #0]
 800540a:	80fb      	strh	r3, [r7, #6]
 800540c:	460b      	mov	r3, r1
 800540e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <SendCmd+0x50>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <SendCmd+0x50>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	797a      	ldrb	r2, [r7, #5]
 8005420:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <SendCmd+0x50>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	797a      	ldrb	r2, [r7, #5]
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fb6f 	bl	8006b10 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8005432:	4b07      	ldr	r3, [pc, #28]	; (8005450 <SendCmd+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f852 	bl	80054e0 <OutputCmdTrace>

  hciContext.io.Send(0,0);
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <SendCmd+0x54>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2100      	movs	r1, #0
 8005442:	2000      	movs	r0, #0
 8005444:	4798      	blx	r3

  return;
 8005446:	bf00      	nop
}
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	200000fc 	.word	0x200000fc
 8005454:	200001d8 	.word	0x200001d8

08005458 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d108      	bne.n	800547a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <NotifyCmdStatus+0x3c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <NotifyCmdStatus+0x3c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2000      	movs	r0, #0
 8005476:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005478:	e008      	b.n	800548c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <NotifyCmdStatus+0x3c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <NotifyCmdStatus+0x3c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2001      	movs	r0, #1
 8005488:	4798      	blx	r3
  return;
 800548a:	bf00      	nop
 800548c:	bf00      	nop
}
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000200 	.word	0x20000200

08005498 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7a5b      	ldrb	r3, [r3, #9]
 80054a4:	2b0f      	cmp	r3, #15
 80054a6:	d003      	beq.n	80054b0 <TlEvtReceived+0x18>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	7a5b      	ldrb	r3, [r3, #9]
 80054ac:	2b0e      	cmp	r3, #14
 80054ae:	d107      	bne.n	80054c0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4809      	ldr	r0, [pc, #36]	; (80054d8 <TlEvtReceived+0x40>)
 80054b4:	f000 fb9e 	bl	8005bf4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80054b8:	2000      	movs	r0, #0
 80054ba:	f000 ff00 	bl	80062be <hci_cmd_resp_release>
 80054be:	e006      	b.n	80054ce <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4806      	ldr	r0, [pc, #24]	; (80054dc <TlEvtReceived+0x44>)
 80054c4:	f000 fb96 	bl	8005bf4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80054c8:	4804      	ldr	r0, [pc, #16]	; (80054dc <TlEvtReceived+0x44>)
 80054ca:	f000 feec 	bl	80062a6 <hci_notify_asynch_evt>
  }

  return;
 80054ce:	bf00      	nop
}
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	200001f8 	.word	0x200001f8
 80054dc:	200000f4 	.word	0x200000f4

080054e0 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 80054e8:	bf00      	nop
}
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	7a5b      	ldrb	r3, [r3, #9]
 8005500:	2b0e      	cmp	r3, #14
 8005502:	d002      	beq.n	800550a <OutputRspTrace+0x16>
 8005504:	2b0f      	cmp	r3, #15
 8005506:	d002      	beq.n	800550e <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 8005508:	e002      	b.n	8005510 <OutputRspTrace+0x1c>
      break;
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <OutputRspTrace+0x1c>
      break;
 800550e:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8005510:	bf00      	nop
}
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	7a5b      	ldrb	r3, [r3, #9]
 8005528:	2bff      	cmp	r3, #255	; 0xff
 800552a:	d100      	bne.n	800552e <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 800552c:	bf00      	nop
 800552e:	bf00      	nop
}
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a05      	ldr	r2, [pc, #20]	; (800555c <hci_register_io_bus+0x20>)
 8005548:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <hci_register_io_bus+0x24>)
 800554e:	611a      	str	r2, [r3, #16]

  return;
 8005550:	bf00      	nop
}
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	080058b9 	.word	0x080058b9
 8005560:	08005921 	.word	0x08005921

08005564 <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4a08      	ldr	r2, [pc, #32]	; (8005594 <shci_init+0x30>)
 8005574:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <shci_init+0x34>)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800557c:	4806      	ldr	r0, [pc, #24]	; (8005598 <shci_init+0x34>)
 800557e:	f000 f947 	bl	8005810 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f8a0 	bl	80056cc <TlInit>

  return;
 800558c:	bf00      	nop
}
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20000224 	.word	0x20000224
 8005598:	20000204 	.word	0x20000204

0800559c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80055a2:	4824      	ldr	r0, [pc, #144]	; (8005634 <shci_user_evt_proc+0x98>)
 80055a4:	f000 fae2 	bl	8005b6c <LST_is_empty>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d12f      	bne.n	800560e <shci_user_evt_proc+0x72>
 80055ae:	4b22      	ldr	r3, [pc, #136]	; (8005638 <shci_user_evt_proc+0x9c>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02b      	beq.n	800560e <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	4619      	mov	r1, r3
 80055bc:	481d      	ldr	r0, [pc, #116]	; (8005634 <shci_user_evt_proc+0x98>)
 80055be:	f000 fb5c 	bl	8005c7a <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f913 	bl	80057f0 <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 80055ca:	4b1c      	ldr	r3, [pc, #112]	; (800563c <shci_user_evt_proc+0xa0>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80055d6:	2301      	movs	r3, #1
 80055d8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80055da:	4b18      	ldr	r3, [pc, #96]	; (800563c <shci_user_evt_proc+0xa0>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	1d3a      	adds	r2, r7, #4
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80055e4:	793a      	ldrb	r2, [r7, #4]
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <shci_user_evt_proc+0x9c>)
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80055ec:	4b12      	ldr	r3, [pc, #72]	; (8005638 <shci_user_evt_proc+0x9c>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <shci_user_evt_proc+0x9c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fa1d 	bl	8005a3c <TL_MM_EvtDone>
 8005602:	e004      	b.n	800560e <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4619      	mov	r1, r3
 8005608:	480a      	ldr	r0, [pc, #40]	; (8005634 <shci_user_evt_proc+0x98>)
 800560a:	f000 facf 	bl	8005bac <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800560e:	4809      	ldr	r0, [pc, #36]	; (8005634 <shci_user_evt_proc+0x98>)
 8005610:	f000 faac 	bl	8005b6c <LST_is_empty>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d107      	bne.n	800562a <shci_user_evt_proc+0x8e>
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <shci_user_evt_proc+0x9c>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005622:	4804      	ldr	r0, [pc, #16]	; (8005634 <shci_user_evt_proc+0x98>)
 8005624:	f7fa ffa5 	bl	8000572 <shci_notify_asynch_evt>
  }


  return;
 8005628:	bf00      	nop
 800562a:	bf00      	nop
}
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000104 	.word	0x20000104
 8005638:	20000114 	.word	0x20000114
 800563c:	20000204 	.word	0x20000204

08005640 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60ba      	str	r2, [r7, #8]
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	4603      	mov	r3, r0
 800564c:	81fb      	strh	r3, [r7, #14]
 800564e:	460b      	mov	r3, r1
 8005650:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005652:	2000      	movs	r0, #0
 8005654:	f000 f86c 	bl	8005730 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005658:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <shci_send+0x84>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	89fa      	ldrh	r2, [r7, #14]
 800565e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005662:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <shci_send+0x84>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	7b7a      	ldrb	r2, [r7, #13]
 8005668:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <shci_send+0x84>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	7b7a      	ldrb	r2, [r7, #13]
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fa4b 	bl	8006b10 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <shci_send+0x84>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f89c 	bl	80057bc <OutputCmdTrace>

  shciContext.io.Send(0,0);
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <shci_send+0x88>)
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2100      	movs	r1, #0
 800568a:	2000      	movs	r0, #0
 800568c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800568e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005692:	f7fa ff85 	bl	80005a0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f103 0008 	add.w	r0, r3, #8
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <shci_send+0x84>)
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <shci_send+0x84>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	789b      	ldrb	r3, [r3, #2]
 80056a6:	3303      	adds	r3, #3
 80056a8:	461a      	mov	r2, r3
 80056aa:	f001 fa31 	bl	8006b10 <memcpy>

  OutputRspTrace(p_rsp);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f88e 	bl	80057d0 <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80056b4:	2001      	movs	r0, #1
 80056b6:	f000 f83b 	bl	8005730 <Cmd_SetStatus>

  return;
 80056ba:	bf00      	nop
}
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000110 	.word	0x20000110
 80056c8:	20000204 	.word	0x20000204

080056cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80056d4:	4a10      	ldr	r2, [pc, #64]	; (8005718 <TlInit+0x4c>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80056da:	4810      	ldr	r0, [pc, #64]	; (800571c <TlInit+0x50>)
 80056dc:	f000 fa36 	bl	8005b4c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80056e0:	2001      	movs	r0, #1
 80056e2:	f000 f825 	bl	8005730 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <TlInit+0x54>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <TlInit+0x58>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00c      	beq.n	800570e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <TlInit+0x5c>)
 80056fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <TlInit+0x60>)
 80056fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <TlInit+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f107 020c 	add.w	r2, r7, #12
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
  }

  return;
 800570c:	bf00      	nop
 800570e:	bf00      	nop
}
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000110 	.word	0x20000110
 800571c:	20000104 	.word	0x20000104
 8005720:	20000114 	.word	0x20000114
 8005724:	20000204 	.word	0x20000204
 8005728:	08005781 	.word	0x08005781
 800572c:	08005799 	.word	0x08005799

08005730 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <Cmd_SetStatus+0x48>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <Cmd_SetStatus+0x48>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2000      	movs	r0, #0
 800574e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <Cmd_SetStatus+0x4c>)
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005756:	e00b      	b.n	8005770 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <Cmd_SetStatus+0x4c>)
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <Cmd_SetStatus+0x48>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005766:	4b04      	ldr	r3, [pc, #16]	; (8005778 <Cmd_SetStatus+0x48>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2001      	movs	r0, #1
 800576c:	4798      	blx	r3
  return;
 800576e:	bf00      	nop
 8005770:	bf00      	nop
}
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20000224 	.word	0x20000224
 800577c:	2000010c 	.word	0x2000010c

08005780 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005788:	2000      	movs	r0, #0
 800578a:	f7fa fefe 	bl	800058a <shci_cmd_resp_release>

  return;
 800578e:	bf00      	nop
}
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4805      	ldr	r0, [pc, #20]	; (80057b8 <TlUserEvtReceived+0x20>)
 80057a4:	f000 fa26 	bl	8005bf4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80057a8:	4803      	ldr	r0, [pc, #12]	; (80057b8 <TlUserEvtReceived+0x20>)
 80057aa:	f7fa fee2 	bl	8000572 <shci_notify_asynch_evt>

  return;
 80057ae:	bf00      	nop
}
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000104 	.word	0x20000104

080057bc <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 80057c4:	bf00      	nop
}
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7a5b      	ldrb	r3, [r3, #9]
 80057dc:	2b0e      	cmp	r3, #14
 80057de:	d000      	beq.n	80057e2 <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 80057e0:	e000      	b.n	80057e4 <OutputRspTrace+0x14>
      break;
 80057e2:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 80057e4:	bf00      	nop
}
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	7a5b      	ldrb	r3, [r3, #9]
 80057fc:	2bff      	cmp	r3, #255	; 0xff
 80057fe:	d100      	bne.n	8005802 <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 8005800:	bf00      	nop
 8005802:	bf00      	nop
}
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a05      	ldr	r2, [pc, #20]	; (8005830 <shci_register_io_bus+0x20>)
 800581c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a04      	ldr	r2, [pc, #16]	; (8005834 <shci_register_io_bus+0x24>)
 8005822:	611a      	str	r2, [r3, #16]

  return;
 8005824:	bf00      	nop
}
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	08005949 	.word	0x08005949
 8005834:	0800599d 	.word	0x0800599d

08005838 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800583c:	f000 fe78 	bl	8006530 <HW_IPCC_Enable>

  return;
 8005840:	bf00      	nop
}
 8005842:	bd80      	pop	{r7, pc}

08005844 <TL_Init>:


void TL_Init( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005848:	4b10      	ldr	r3, [pc, #64]	; (800588c <TL_Init+0x48>)
 800584a:	4a11      	ldr	r2, [pc, #68]	; (8005890 <TL_Init+0x4c>)
 800584c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800584e:	4b0f      	ldr	r3, [pc, #60]	; (800588c <TL_Init+0x48>)
 8005850:	4a10      	ldr	r2, [pc, #64]	; (8005894 <TL_Init+0x50>)
 8005852:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005854:	4b0d      	ldr	r3, [pc, #52]	; (800588c <TL_Init+0x48>)
 8005856:	4a10      	ldr	r2, [pc, #64]	; (8005898 <TL_Init+0x54>)
 8005858:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <TL_Init+0x48>)
 800585c:	4a0f      	ldr	r2, [pc, #60]	; (800589c <TL_Init+0x58>)
 800585e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <TL_Init+0x48>)
 8005862:	4a0f      	ldr	r2, [pc, #60]	; (80058a0 <TL_Init+0x5c>)
 8005864:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005866:	4b09      	ldr	r3, [pc, #36]	; (800588c <TL_Init+0x48>)
 8005868:	4a0e      	ldr	r2, [pc, #56]	; (80058a4 <TL_Init+0x60>)
 800586a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800586c:	4b07      	ldr	r3, [pc, #28]	; (800588c <TL_Init+0x48>)
 800586e:	4a0e      	ldr	r2, [pc, #56]	; (80058a8 <TL_Init+0x64>)
 8005870:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <TL_Init+0x48>)
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <TL_Init+0x68>)
 8005876:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <TL_Init+0x48>)
 800587a:	4a0d      	ldr	r2, [pc, #52]	; (80058b0 <TL_Init+0x6c>)
 800587c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800587e:	4b03      	ldr	r3, [pc, #12]	; (800588c <TL_Init+0x48>)
 8005880:	4a0c      	ldr	r2, [pc, #48]	; (80058b4 <TL_Init+0x70>)
 8005882:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005884:	f000 fe64 	bl	8006550 <HW_IPCC_Init>

  return;
 8005888:	bf00      	nop
}
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20030000 	.word	0x20030000
 8005890:	20030028 	.word	0x20030028
 8005894:	20030048 	.word	0x20030048
 8005898:	20030058 	.word	0x20030058
 800589c:	20030064 	.word	0x20030064
 80058a0:	2003006c 	.word	0x2003006c
 80058a4:	20030074 	.word	0x20030074
 80058a8:	2003007c 	.word	0x2003007c
 80058ac:	20030098 	.word	0x20030098
 80058b0:	2003009c 	.word	0x2003009c
 80058b4:	200300a8 	.word	0x200300a8

080058b8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80058c4:	4811      	ldr	r0, [pc, #68]	; (800590c <TL_BLE_Init+0x54>)
 80058c6:	f000 f941 	bl	8005b4c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <TL_BLE_Init+0x58>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4a0c      	ldr	r2, [pc, #48]	; (8005914 <TL_BLE_Init+0x5c>)
 80058e4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4a08      	ldr	r2, [pc, #32]	; (800590c <TL_BLE_Init+0x54>)
 80058ea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80058ec:	f000 fe46 	bl	800657c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a08      	ldr	r2, [pc, #32]	; (8005918 <TL_BLE_Init+0x60>)
 80058f6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a07      	ldr	r2, [pc, #28]	; (800591c <TL_BLE_Init+0x64>)
 80058fe:	6013      	str	r3, [r2, #0]

  return 0;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	200300c4 	.word	0x200300c4
 8005910:	20030000 	.word	0x20030000
 8005914:	20030a48 	.word	0x20030a48
 8005918:	20000230 	.word	0x20000230
 800591c:	20000234 	.word	0x20000234

08005920 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <TL_BLE_SendCmd+0x24>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2201      	movs	r2, #1
 8005934:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 8005936:	f000 fe2b 	bl	8006590 <HW_IPCC_BLE_SendCmd>

  return 0;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20030000 	.word	0x20030000

08005948 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005954:	480d      	ldr	r0, [pc, #52]	; (800598c <TL_SYS_Init+0x44>)
 8005956:	f000 f8f9 	bl	8005b4c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <TL_SYS_Init+0x48>)
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4a08      	ldr	r2, [pc, #32]	; (800598c <TL_SYS_Init+0x44>)
 800596c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800596e:	f000 fe19 	bl	80065a4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a07      	ldr	r2, [pc, #28]	; (8005994 <TL_SYS_Init+0x4c>)
 8005978:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4a06      	ldr	r2, [pc, #24]	; (8005998 <TL_SYS_Init+0x50>)
 8005980:	6013      	str	r3, [r2, #0]

  return 0;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	200300cc 	.word	0x200300cc
 8005990:	20030000 	.word	0x20030000
 8005994:	20000238 	.word	0x20000238
 8005998:	2000023c 	.word	0x2000023c

0800599c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <TL_SYS_SendCmd+0x24>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2210      	movs	r2, #16
 80059b0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 80059b2:	f000 fe01 	bl	80065b8 <HW_IPCC_SYS_SendCmd>

  return 0;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20030000 	.word	0x20030000

080059c4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80059cc:	4817      	ldr	r0, [pc, #92]	; (8005a2c <TL_MM_Init+0x68>)
 80059ce:	f000 f8bd 	bl	8005b4c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80059d2:	4817      	ldr	r0, [pc, #92]	; (8005a30 <TL_MM_Init+0x6c>)
 80059d4:	f000 f8ba 	bl	8005b4c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80059d8:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <TL_MM_Init+0x70>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	4a16      	ldr	r2, [pc, #88]	; (8005a38 <TL_MM_Init+0x74>)
 80059de:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80059e0:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <TL_MM_Init+0x74>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6892      	ldr	r2, [r2, #8]
 80059e8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80059ea:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <TL_MM_Init+0x74>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68d2      	ldr	r2, [r2, #12]
 80059f2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80059f4:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <TL_MM_Init+0x74>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a0c      	ldr	r2, [pc, #48]	; (8005a2c <TL_MM_Init+0x68>)
 80059fa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80059fc:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <TL_MM_Init+0x74>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <TL_MM_Init+0x74>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6852      	ldr	r2, [r2, #4]
 8005a0e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005a10:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <TL_MM_Init+0x74>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6912      	ldr	r2, [r2, #16]
 8005a18:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005a1a:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <TL_MM_Init+0x74>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6952      	ldr	r2, [r2, #20]
 8005a22:	619a      	str	r2, [r3, #24]

  return;
 8005a24:	bf00      	nop
}
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	200300b4 	.word	0x200300b4
 8005a30:	20000228 	.word	0x20000228
 8005a34:	20030000 	.word	0x20030000
 8005a38:	20000240 	.word	0x20000240

08005a3c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4806      	ldr	r0, [pc, #24]	; (8005a60 <TL_MM_EvtDone+0x24>)
 8005a48:	f000 f8d4 	bl	8005bf4 <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f82b 	bl	8005aa8 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005a52:	4804      	ldr	r0, [pc, #16]	; (8005a64 <TL_MM_EvtDone+0x28>)
 8005a54:	f000 fdbe 	bl	80065d4 <HW_IPCC_MM_SendFreeBuf>

  return;
 8005a58:	bf00      	nop
}
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000228 	.word	0x20000228
 8005a64:	08005a69 	.word	0x08005a69

08005a68 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005a6e:	e00c      	b.n	8005a8a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005a70:	1d3b      	adds	r3, r7, #4
 8005a72:	4619      	mov	r1, r3
 8005a74:	480a      	ldr	r0, [pc, #40]	; (8005aa0 <SendFreeBuf+0x38>)
 8005a76:	f000 f900 	bl	8005c7a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <SendFreeBuf+0x3c>)
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 f8b5 	bl	8005bf4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005a8a:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <SendFreeBuf+0x38>)
 8005a8c:	f000 f86e 	bl	8005b6c <LST_is_empty>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0ec      	beq.n	8005a70 <SendFreeBuf+0x8>
  }

  return;
 8005a96:	bf00      	nop
}
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000228 	.word	0x20000228
 8005aa4:	20030000 	.word	0x20030000

08005aa8 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	7a5b      	ldrb	r3, [r3, #9]
 8005ab4:	2b0f      	cmp	r3, #15
 8005ab6:	d004      	beq.n	8005ac2 <OutputMemReleaseTrace+0x1a>
 8005ab8:	2bff      	cmp	r3, #255	; 0xff
 8005aba:	d004      	beq.n	8005ac6 <OutputMemReleaseTrace+0x1e>
 8005abc:	2b0e      	cmp	r3, #14
 8005abe:	d004      	beq.n	8005aca <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 8005ac0:	e004      	b.n	8005acc <OutputMemReleaseTrace+0x24>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e002      	b.n	8005acc <OutputMemReleaseTrace+0x24>
      break;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <OutputMemReleaseTrace+0x24>
      break;
 8005aca:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 8005acc:	bf00      	nop
}
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005adc:	4805      	ldr	r0, [pc, #20]	; (8005af4 <TL_TRACES_Init+0x1c>)
 8005ade:	f000 f835 	bl	8005b4c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <TL_TRACES_Init+0x20>)
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	4a03      	ldr	r2, [pc, #12]	; (8005af4 <TL_TRACES_Init+0x1c>)
 8005ae8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005aea:	f000 fd95 	bl	8006618 <HW_IPCC_TRACES_Init>

  return;
 8005aee:	bf00      	nop
}
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200300bc 	.word	0x200300bc
 8005af8:	20030000 	.word	0x20030000

08005afc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <OTP_Read+0x48>)
 8005b08:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005b0a:	e002      	b.n	8005b12 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3b08      	subs	r3, #8
 8005b10:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3307      	adds	r3, #7
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	79fa      	ldrb	r2, [r7, #7]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d003      	beq.n	8005b26 <OTP_Read+0x2a>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <OTP_Read+0x4c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d1f2      	bne.n	8005b0c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3307      	adds	r3, #7
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	79fa      	ldrb	r2, [r7, #7]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d001      	beq.n	8005b36 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	1fff73f8 	.word	0x1fff73f8
 8005b48:	1fff7000 	.word	0x1fff7000

08005b4c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	605a      	str	r2, [r3, #4]
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b74:	f3ef 8310 	mrs	r3, PRIMASK
 8005b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005b7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b7e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d102      	bne.n	8005b90 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
 8005b8e:	e001      	b.n	8005b94 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bc0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005c02:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c04:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005c06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c08:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c44:	f3ef 8310 	mrs	r3, PRIMASK
 8005c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005c4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c4e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6852      	ldr	r2, [r2, #4]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c84:	f3ef 8310 	mrs	r3, PRIMASK
 8005c88:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005c8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c8e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff ffcd 	bl	8005c3c <LST_remove_node>
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005cac:	bf00      	nop
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8005cb8:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <LL_FLASH_GetUDN+0x14>)
 8005cba:	681b      	ldr	r3, [r3, #0]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	1fff7580 	.word	0x1fff7580

08005ccc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8005cd0:	4b03      	ldr	r3, [pc, #12]	; (8005ce0 <LL_FLASH_GetDeviceID+0x14>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	b2db      	uxtb	r3, r3
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	1fff7584 	.word	0x1fff7584

08005ce4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8005ce8:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <LL_FLASH_GetSTCompanyID+0x14>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	0a1b      	lsrs	r3, r3, #8
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	1fff7584 	.word	0x1fff7584

08005cfc <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8005cfc:	b5b0      	push	{r4, r5, r7, lr}
 8005cfe:	b08c      	sub	sp, #48	; 0x30
 8005d00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8005d02:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <APP_BLE_Init+0xa8>)
 8005d04:	463c      	mov	r4, r7
 8005d06:	461d      	mov	r5, r3
 8005d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005d14:	c407      	stmia	r4!, {r0, r1, r2}
 8005d16:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8005d18:	f000 f8f6 	bl	8005f08 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	2002      	movs	r0, #2
 8005d20:	f000 fc96 	bl	8006650 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8005d24:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <APP_BLE_Init+0xac>)
 8005d26:	2100      	movs	r1, #0
 8005d28:	2004      	movs	r0, #4
 8005d2a:	f000 fd9f 	bl	800686c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8005d2e:	463b      	mov	r3, r7
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fa17 	bl	8005164 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8005d36:	f000 f8fd 	bl	8005f34 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8005d3a:	f7ff f973 	bl	8005024 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005d3e:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <APP_BLE_Init+0xb0>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8005d46:	4b19      	ldr	r3, [pc, #100]	; (8005dac <APP_BLE_Init+0xb0>)
 8005d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d4c:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8005d4e:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <APP_BLE_Init+0xb4>)
 8005d50:	2100      	movs	r1, #0
 8005d52:	2001      	movs	r0, #1
 8005d54:	f000 fd8a 	bl	800686c <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8005d58:	2006      	movs	r0, #6
 8005d5a:	f7fe fe99 	bl	8004a90 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8005d5e:	f000 fb27 	bl	80063b0 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8005d62:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <APP_BLE_Init+0xb8>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	4914      	ldr	r1, [pc, #80]	; (8005db8 <APP_BLE_Init+0xbc>)
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f7fb f85b 	bl	8000e24 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <APP_BLE_Init+0xc0>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	4913      	ldr	r1, [pc, #76]	; (8005dc0 <APP_BLE_Init+0xc4>)
 8005d74:	2000      	movs	r0, #0
 8005d76:	f7fb f855 	bl	8000e24 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <APP_BLE_Init+0xb0>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <APP_BLE_Init+0xb0>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <APP_BLE_Init+0xc8>)
 8005d8c:	2280      	movs	r2, #128	; 0x80
 8005d8e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8005d90:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <APP_BLE_Init+0xcc>)
 8005d92:	22a0      	movs	r2, #160	; 0xa0
 8005d94:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8005d96:	2001      	movs	r0, #1
 8005d98:	f000 f9a6 	bl	80060e8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8005d9c:	bf00      	nop
}
 8005d9e:	3730      	adds	r7, #48	; 0x30
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bdb0      	pop	{r4, r5, r7, pc}
 8005da4:	08006b98 	.word	0x08006b98
 8005da8:	080051f9 	.word	0x080051f9
 8005dac:	20000118 	.word	0x20000118
 8005db0:	08006255 	.word	0x08006255
 8005db4:	08006289 	.word	0x08006289
 8005db8:	200001a9 	.word	0x200001a9
 8005dbc:	08006299 	.word	0x08006299
 8005dc0:	200001aa 	.word	0x200001aa
 8005dc4:	200001ac 	.word	0x200001ac
 8005dc8:	200001ae 	.word	0x200001ae

08005dcc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005dd4:	2342      	movs	r3, #66	; 0x42
 8005dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b3e      	cmp	r3, #62	; 0x3e
 8005de6:	d024      	beq.n	8005e32 <SVCCTL_App_Notification+0x66>
 8005de8:	2bff      	cmp	r3, #255	; 0xff
 8005dea:	d070      	beq.n	8005ece <SVCCTL_App_Notification+0x102>
 8005dec:	2b05      	cmp	r3, #5
 8005dee:	d000      	beq.n	8005df2 <SVCCTL_App_Notification+0x26>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8005df0:	e080      	b.n	8005ef4 <SVCCTL_App_Notification+0x128>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	3302      	adds	r3, #2
 8005df6:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d106      	bne.n	8005e16 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8005e08:	4b3d      	ldr	r3, [pc, #244]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005e0e:	4b3c      	ldr	r3, [pc, #240]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 8005e16:	2001      	movs	r0, #1
 8005e18:	f000 f966 	bl	80060e8 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8005e1c:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <SVCCTL_App_Notification+0x138>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005e22:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e24:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005e26:	4b37      	ldr	r3, [pc, #220]	; (8005f04 <SVCCTL_App_Notification+0x138>)
 8005e28:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8005e2a:	4836      	ldr	r0, [pc, #216]	; (8005f04 <SVCCTL_App_Notification+0x138>)
 8005e2c:	f000 faac 	bl	8006388 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8005e30:	e060      	b.n	8005ef4 <SVCCTL_App_Notification+0x128>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	3302      	adds	r3, #2
 8005e36:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d042      	beq.n	8005ec6 <SVCCTL_App_Notification+0xfa>
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d002      	beq.n	8005e4a <SVCCTL_App_Notification+0x7e>
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d016      	beq.n	8005e76 <SVCCTL_App_Notification+0xaa>
          break;
 8005e48:	e040      	b.n	8005ecc <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8005e50:	4b2b      	ldr	r3, [pc, #172]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e54:	f107 020a 	add.w	r2, r7, #10
 8005e58:	f107 010b 	add.w	r1, r7, #11
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe fe85 	bl	8004b6c <hci_le_read_phy>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8005e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d12c      	bne.n	8005eca <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8005e70:	7afb      	ldrb	r3, [r7, #11]
 8005e72:	2b02      	cmp	r3, #2
          break;
 8005e74:	e029      	b.n	8005eca <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8005e7c:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e7e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fb f844 	bl	8000f10 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8005e88:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e8a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d104      	bne.n	8005e9c <SVCCTL_App_Notification+0xd0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8005e92:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e94:	2206      	movs	r2, #6
 8005e96:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8005e9a:	e003      	b.n	8005ea4 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8005e9c:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005e9e:	2205      	movs	r2, #5
 8005ea0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005eae:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8005eb0:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <SVCCTL_App_Notification+0x138>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <SVCCTL_App_Notification+0x134>)
 8005eb8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <SVCCTL_App_Notification+0x138>)
 8005ebc:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8005ebe:	4811      	ldr	r0, [pc, #68]	; (8005f04 <SVCCTL_App_Notification+0x138>)
 8005ec0:	f000 fa62 	bl	8006388 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8005ec4:	e002      	b.n	8005ecc <SVCCTL_App_Notification+0x100>
          break;
 8005ec6:	bf00      	nop
 8005ec8:	e014      	b.n	8005ef4 <SVCCTL_App_Notification+0x128>
          break;
 8005eca:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8005ecc:	e012      	b.n	8005ef4 <SVCCTL_App_Notification+0x128>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f240 4207 	movw	r2, #1031	; 0x407
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d004      	beq.n	8005eec <SVCCTL_App_Notification+0x120>
 8005ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee6:	d003      	beq.n	8005ef0 <SVCCTL_App_Notification+0x124>
 8005ee8:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 8005eea:	e002      	b.n	8005ef2 <SVCCTL_App_Notification+0x126>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8005eec:	bf00      	nop
 8005eee:	e000      	b.n	8005ef2 <SVCCTL_App_Notification+0x126>
      break;
 8005ef0:	bf00      	nop
      break; /* EVT_VENDOR */
 8005ef2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8005ef4:	2301      	movs	r3, #1
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3728      	adds	r7, #40	; 0x28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000118 	.word	0x20000118
 8005f04:	20000320 	.word	0x20000320

08005f08 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <Ble_Tl_Init+0x20>)
 8005f10:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <Ble_Tl_Init+0x24>)
 8005f14:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8005f16:	463b      	mov	r3, r7
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4805      	ldr	r0, [pc, #20]	; (8005f30 <Ble_Tl_Init+0x28>)
 8005f1c:	f7ff f950 	bl	80051c0 <hci_init>

  return;
 8005f20:	bf00      	nop
}
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200300d4 	.word	0x200300d4
 8005f2c:	08006323 	.word	0x08006323
 8005f30:	080062eb 	.word	0x080062eb

08005f34 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8005f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f36:	b091      	sub	sp, #68	; 0x44
 8005f38:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8005f3e:	f7fe fdf1 	bl	8004b24 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8005f42:	f000 f943 	bl	80061cc <BleGetBdAddress>
 8005f46:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005f48:	6a3a      	ldr	r2, [r7, #32]
 8005f4a:	2106      	movs	r1, #6
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f7fe fcdf 	bl	8004910 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	795a      	ldrb	r2, [r3, #5]
 8005f56:	4b5e      	ldr	r3, [pc, #376]	; (80060d0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005f58:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	791a      	ldrb	r2, [r3, #4]
 8005f5e:	4b5c      	ldr	r3, [pc, #368]	; (80060d0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005f60:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	78da      	ldrb	r2, [r3, #3]
 8005f66:	4b5a      	ldr	r3, [pc, #360]	; (80060d0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005f68:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	789a      	ldrb	r2, [r3, #2]
 8005f6e:	4b58      	ldr	r3, [pc, #352]	; (80060d0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005f70:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	785a      	ldrb	r2, [r3, #1]
 8005f76:	4b56      	ldr	r3, [pc, #344]	; (80060d0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005f78:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	781a      	ldrb	r2, [r3, #0]
 8005f7e:	4b54      	ldr	r3, [pc, #336]	; (80060d0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005f80:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8005f82:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8005f86:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8005f88:	f7ff fe94 	bl	8005cb4 <LL_FLASH_GetUDN>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8005f90:	f107 0308 	add.w	r3, r7, #8
 8005f94:	461a      	mov	r2, r3
 8005f96:	2106      	movs	r1, #6
 8005f98:	202e      	movs	r0, #46	; 0x2e
 8005f9a:	f7fe fcb9 	bl	8004910 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8005f9e:	4a4d      	ldr	r2, [pc, #308]	; (80060d4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8005fa0:	2110      	movs	r1, #16
 8005fa2:	2018      	movs	r0, #24
 8005fa4:	f7fe fcb4 	bl	8004910 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8005fa8:	4a4b      	ldr	r2, [pc, #300]	; (80060d8 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 8005faa:	2110      	movs	r1, #16
 8005fac:	2008      	movs	r0, #8
 8005fae:	f7fe fcaf 	bl	8004910 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005fb2:	2118      	movs	r1, #24
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	f7fe fd14 	bl	80049e2 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8005fba:	f7fe fa64 	bl	8004486 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8005fc2:	7ffb      	ldrb	r3, [r7, #31]
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01e      	beq.n	800600e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "hukam_b";
 8005fd0:	4b42      	ldr	r3, [pc, #264]	; (80060dc <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8005fd2:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8005fd4:	f107 0216 	add.w	r2, r7, #22
 8005fd8:	7ff8      	ldrb	r0, [r7, #31]
 8005fda:	f107 0312 	add.w	r3, r7, #18
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	f107 0314 	add.w	r3, r7, #20
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	2207      	movs	r2, #7
 8005fea:	2100      	movs	r1, #0
 8005fec:	f7fe f940 	bl	8004270 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8005ff0:	8afc      	ldrh	r4, [r7, #22]
 8005ff2:	8abd      	ldrh	r5, [r7, #20]
 8005ff4:	69b8      	ldr	r0, [r7, #24]
 8005ff6:	f7fa f8c1 	bl	800017c <strlen>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	2200      	movs	r2, #0
 8006006:	4629      	mov	r1, r5
 8006008:	4620      	mov	r0, r4
 800600a:	f7fe fbfa 	bl	8004802 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800600e:	8af8      	ldrh	r0, [r7, #22]
 8006010:	8a79      	ldrh	r1, [r7, #18]
 8006012:	1d3b      	adds	r3, r7, #4
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	2302      	movs	r3, #2
 8006018:	2200      	movs	r2, #0
 800601a:	f7fe fbf2 	bl	8004802 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800601e:	2202      	movs	r2, #2
 8006020:	2102      	movs	r1, #2
 8006022:	2000      	movs	r0, #0
 8006024:	f7fe fe0a 	bl	8004c3c <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8006028:	4b2d      	ldr	r3, [pc, #180]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800602e:	4b2c      	ldr	r3, [pc, #176]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe f82a 	bl	800408c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8006038:	4b29      	ldr	r3, [pc, #164]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800603a:	2201      	movs	r2, #1
 800603c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800603e:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006040:	2200      	movs	r2, #0
 8006042:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8006044:	4b26      	ldr	r3, [pc, #152]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006046:	2208      	movs	r2, #8
 8006048:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800604a:	4b25      	ldr	r3, [pc, #148]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800604c:	2210      	movs	r2, #16
 800604e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006050:	4b23      	ldr	r3, [pc, #140]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006052:	2200      	movs	r2, #0
 8006054:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8006056:	4b22      	ldr	r3, [pc, #136]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006058:	4a22      	ldr	r2, [pc, #136]	; (80060e4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800605a:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800605c:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800605e:	2200      	movs	r2, #0
 8006060:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8006062:	2300      	movs	r3, #0
 8006064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006068:	e00b      	b.n	8006082 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800606a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800606e:	4a1c      	ldr	r2, [pc, #112]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006070:	4413      	add	r3, r2
 8006072:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006076:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8006078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800607c:	3301      	adds	r3, #1
 800607e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d9ef      	bls.n	800606a <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800608a:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800608c:	789d      	ldrb	r5, [r3, #2]
 800608e:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006090:	785e      	ldrb	r6, [r3, #1]
 8006092:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006094:	7d5b      	ldrb	r3, [r3, #21]
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8006098:	7d92      	ldrb	r2, [r2, #22]
 800609a:	4911      	ldr	r1, [pc, #68]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800609c:	7d09      	ldrb	r1, [r1, #20]
 800609e:	4810      	ldr	r0, [pc, #64]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80060a0:	6980      	ldr	r0, [r0, #24]
 80060a2:	2400      	movs	r4, #0
 80060a4:	9404      	str	r4, [sp, #16]
 80060a6:	9003      	str	r0, [sp, #12]
 80060a8:	9102      	str	r1, [sp, #8]
 80060aa:	9201      	str	r2, [sp, #4]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	2300      	movs	r3, #0
 80060b0:	2201      	movs	r2, #1
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	f7fe f833 	bl	8004120 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80060ba:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80060bc:	789b      	ldrb	r3, [r3, #2]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 80060c2:	f7fe f9bc 	bl	800443e <aci_gap_configure_whitelist>
   }
}
 80060c6:	bf00      	nop
 80060c8:	372c      	adds	r7, #44	; 0x2c
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000010 	.word	0x20000010
 80060d4:	08006d68 	.word	0x08006d68
 80060d8:	08006d78 	.word	0x08006d78
 80060dc:	08006bc8 	.word	0x08006bc8
 80060e0:	20000118 	.word	0x20000118
 80060e4:	0001b207 	.word	0x0001b207

080060e8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08c      	sub	sp, #48	; 0x30
 80060ec:	af08      	add	r7, sp, #32
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80060f2:	2342      	movs	r3, #66	; 0x42
 80060f4:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d106      	bne.n	800610a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80060fc:	4b2c      	ldr	r3, [pc, #176]	; (80061b0 <Adv_Request+0xc8>)
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8006102:	4b2c      	ldr	r3, [pc, #176]	; (80061b4 <Adv_Request+0xcc>)
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	81bb      	strh	r3, [r7, #12]
 8006108:	e005      	b.n	8006116 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800610a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800610e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8006110:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006114:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8006116:	4b28      	ldr	r3, [pc, #160]	; (80061b8 <Adv_Request+0xd0>)
 8006118:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa fef7 	bl	8000f10 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d10d      	bne.n	8006144 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8006128:	4b23      	ldr	r3, [pc, #140]	; (80061b8 <Adv_Request+0xd0>)
 800612a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800612e:	2b01      	cmp	r3, #1
 8006130:	d004      	beq.n	800613c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8006132:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <Adv_Request+0xd0>)
 8006134:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006138:	2b02      	cmp	r3, #2
 800613a:	d103      	bne.n	8006144 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800613c:	f7fd fea4 	bl	8003e88 <aci_gap_set_non_discoverable>
 8006140:	4603      	mov	r3, r0
 8006142:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8006144:	4a1c      	ldr	r2, [pc, #112]	; (80061b8 <Adv_Request+0xd0>)
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800614c:	4b1a      	ldr	r3, [pc, #104]	; (80061b8 <Adv_Request+0xd0>)
 800614e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006152:	89b8      	ldrh	r0, [r7, #12]
 8006154:	89f9      	ldrh	r1, [r7, #14]
 8006156:	2200      	movs	r2, #0
 8006158:	9206      	str	r2, [sp, #24]
 800615a:	2200      	movs	r2, #0
 800615c:	9205      	str	r2, [sp, #20]
 800615e:	4a17      	ldr	r2, [pc, #92]	; (80061bc <Adv_Request+0xd4>)
 8006160:	9204      	str	r2, [sp, #16]
 8006162:	9303      	str	r3, [sp, #12]
 8006164:	4b16      	ldr	r3, [pc, #88]	; (80061c0 <Adv_Request+0xd8>)
 8006166:	9302      	str	r3, [sp, #8]
 8006168:	2308      	movs	r3, #8
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2300      	movs	r3, #0
 8006172:	4602      	mov	r2, r0
 8006174:	2000      	movs	r0, #0
 8006176:	f7fd feab 	bl	8003ed0 <aci_gap_set_discoverable>
 800617a:	4603      	mov	r3, r0
 800617c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800617e:	4911      	ldr	r1, [pc, #68]	; (80061c4 <Adv_Request+0xdc>)
 8006180:	200e      	movs	r0, #14
 8006182:	f7fe f900 	bl	8004386 <aci_gap_update_adv_data>
 8006186:	4603      	mov	r3, r0
 8006188:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800618a:	7afb      	ldrb	r3, [r7, #11]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d107      	bne.n	80061a6 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8006196:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <Adv_Request+0xd0>)
 8006198:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800619c:	490a      	ldr	r1, [pc, #40]	; (80061c8 <Adv_Request+0xe0>)
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fa ff40 	bl	8001024 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
}
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200001ac 	.word	0x200001ac
 80061b4:	200001ae 	.word	0x200001ae
 80061b8:	20000118 	.word	0x20000118
 80061bc:	20000141 	.word	0x20000141
 80061c0:	08006d88 	.word	0x08006d88
 80061c4:	20000010 	.word	0x20000010
 80061c8:	0001e046 	.word	0x0001e046

080061cc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80061d2:	f7ff fd6f 	bl	8005cb4 <LL_FLASH_GetUDN>
 80061d6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061de:	d023      	beq.n	8006228 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80061e0:	f7ff fd80 	bl	8005ce4 <LL_FLASH_GetSTCompanyID>
 80061e4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80061e6:	f7ff fd71 	bl	8005ccc <LL_FLASH_GetDeviceID>
 80061ea:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	4b16      	ldr	r3, [pc, #88]	; (800624c <BleGetBdAddress+0x80>)
 80061f2:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	4b14      	ldr	r3, [pc, #80]	; (800624c <BleGetBdAddress+0x80>)
 80061fc:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	b2da      	uxtb	r2, r3
 8006204:	4b11      	ldr	r3, [pc, #68]	; (800624c <BleGetBdAddress+0x80>)
 8006206:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	b2da      	uxtb	r2, r3
 800620c:	4b0f      	ldr	r3, [pc, #60]	; (800624c <BleGetBdAddress+0x80>)
 800620e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	4b0d      	ldr	r3, [pc, #52]	; (800624c <BleGetBdAddress+0x80>)
 8006216:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4b0b      	ldr	r3, [pc, #44]	; (800624c <BleGetBdAddress+0x80>)
 8006220:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8006222:	4b0a      	ldr	r3, [pc, #40]	; (800624c <BleGetBdAddress+0x80>)
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e00b      	b.n	8006240 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8006228:	2000      	movs	r0, #0
 800622a:	f7ff fc67 	bl	8005afc <OTP_Read>
 800622e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e001      	b.n	8006240 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <BleGetBdAddress+0x84>)
 800623e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8006240:	697b      	ldr	r3, [r7, #20]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000244 	.word	0x20000244
 8006250:	08006d60 	.word	0x08006d60

08006254 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <Adv_Cancel+0x30>)
 800625c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006260:	2b05      	cmp	r3, #5
 8006262:	d00a      	beq.n	800627a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8006264:	2300      	movs	r3, #0
 8006266:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8006268:	f7fd fe0e 	bl	8003e88 <aci_gap_set_non_discoverable>
 800626c:	4603      	mov	r3, r0
 800626e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <Adv_Cancel+0x30>)
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8006278:	bf00      	nop
 800627a:	bf00      	nop
}
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000118 	.word	0x20000118

08006288 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800628c:	2100      	movs	r1, #0
 800628e:	2001      	movs	r0, #1
 8006290:	f000 fb0c 	bl	80068ac <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8006294:	bf00      	nop
}
 8006296:	bd80      	pop	{r7, pc}

08006298 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800629c:	bf00      	nop
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80062ae:	2100      	movs	r1, #0
 80062b0:	2004      	movs	r0, #4
 80062b2:	f000 fafb 	bl	80068ac <UTIL_SEQ_SetTask>
  return;
 80062b6:	bf00      	nop
}
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80062c6:	2001      	movs	r0, #1
 80062c8:	f000 fb56 	bl	8006978 <UTIL_SEQ_SetEvt>
  return;
 80062cc:	bf00      	nop
}
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80062dc:	2001      	movs	r0, #1
 80062de:	f000 fb69 	bl	80069b4 <UTIL_SEQ_WaitEvt>
  return;
 80062e2:	bf00      	nop
}
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	3308      	adds	r3, #8
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fedf 	bl	80050c0 <SVCCTL_UserEvtRx>
 8006302:	4603      	mov	r3, r0
 8006304:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8006312:	e002      	b.n	800631a <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	4603      	mov	r3, r0
 800632a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <BLE_StatusNot+0x16>
 8006332:	2b01      	cmp	r3, #1
 8006334:	d006      	beq.n	8006344 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8006336:	e00b      	b.n	8006350 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006338:	2307      	movs	r3, #7
 800633a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fadf 	bl	8006900 <UTIL_SEQ_PauseTask>
      break;
 8006342:	e005      	b.n	8006350 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006344:	2307      	movs	r3, #7
 8006346:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 faf7 	bl	800693c <UTIL_SEQ_ResumeTask>
      break;
 800634e:	bf00      	nop
  }
  return;
 8006350:	bf00      	nop
}
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d004      	beq.n	8006372 <P2PS_STM_App_Notification+0x1a>
 8006368:	2b03      	cmp	r3, #3
 800636a:	d004      	beq.n	8006376 <P2PS_STM_App_Notification+0x1e>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8006370:	e004      	b.n	800637c <P2PS_STM_App_Notification+0x24>
      break;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <P2PS_STM_App_Notification+0x24>
      break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <P2PS_STM_App_Notification+0x24>
      break;
 800637a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800637c:	bf00      	nop
}
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <P2PS_APP_Notification+0x16>
 8006398:	2b01      	cmp	r3, #1
 800639a:	d002      	beq.n	80063a2 <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800639c:	e002      	b.n	80063a4 <P2PS_APP_Notification+0x1c>
    break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <P2PS_APP_Notification+0x1c>
    break;
 80063a2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80063a4:	bf00      	nop
}
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 80063b4:	bf00      	nop
}
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <LL_PWR_EnableBootC2>:
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <LL_PWR_EnableBootC2+0x1c>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4a04      	ldr	r2, [pc, #16]	; (80063dc <LL_PWR_EnableBootC2+0x1c>)
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	60d3      	str	r3, [r2, #12]
}
 80063d0:	bf00      	nop
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	58000400 	.word	0x58000400

080063e0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80063ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80063ee:	4905      	ldr	r1, [pc, #20]	; (8006404 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	58000800 	.word	0x58000800

08006408 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006412:	6a1a      	ldr	r2, [r3, #32]
 8006414:	4904      	ldr	r1, [pc, #16]	; (8006428 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4313      	orrs	r3, r2
 800641a:	620b      	str	r3, [r1, #32]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	58000800 	.word	0x58000800

0800642c <LL_AHB3_GRP1_EnableClock>:
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800643a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4313      	orrs	r3, r2
 8006442:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4013      	ands	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006450:	68fb      	ldr	r3, [r7, #12]
}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f043 0201 	orr.w	r2, r3, #1
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	601a      	str	r2, [r3, #0]
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	041b      	lsls	r3, r3, #16
 80064b0:	43db      	mvns	r3, r3
 80064b2:	401a      	ands	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	605a      	str	r2, [r3, #4]
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	43db      	mvns	r3, r3
 80064d6:	401a      	ands	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	605a      	str	r2, [r3, #4]
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	041a      	lsls	r2, r3, #16
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	609a      	str	r2, [r3, #8]
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	4013      	ands	r3, r2
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d101      	bne.n	8006522 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006534:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006538:	f7ff ff52 	bl	80063e0 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800653c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006540:	f7ff ff62 	bl	8006408 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006544:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006546:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006548:	f7ff ff3a 	bl	80063c0 <LL_PWR_EnableBootC2>

  return;
 800654c:	bf00      	nop
}
 800654e:	bd80      	pop	{r7, pc}

08006550 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006554:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006558:	f7ff ff68 	bl	800642c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800655c:	4806      	ldr	r0, [pc, #24]	; (8006578 <HW_IPCC_Init+0x28>)
 800655e:	f7ff ff8e 	bl	800647e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006562:	4805      	ldr	r0, [pc, #20]	; (8006578 <HW_IPCC_Init+0x28>)
 8006564:	f7ff ff7b 	bl	800645e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006568:	202c      	movs	r0, #44	; 0x2c
 800656a:	f7fb fafe 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800656e:	202d      	movs	r0, #45	; 0x2d
 8006570:	f7fb fafb 	bl	8001b6a <HAL_NVIC_EnableIRQ>

  return;
 8006574:	bf00      	nop
}
 8006576:	bd80      	pop	{r7, pc}
 8006578:	58000c00 	.word	0x58000c00

0800657c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006580:	2101      	movs	r1, #1
 8006582:	4802      	ldr	r0, [pc, #8]	; (800658c <HW_IPCC_BLE_Init+0x10>)
 8006584:	f7ff ff9e 	bl	80064c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006588:	bf00      	nop
}
 800658a:	bd80      	pop	{r7, pc}
 800658c:	58000c00 	.word	0x58000c00

08006590 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006594:	2101      	movs	r1, #1
 8006596:	4802      	ldr	r0, [pc, #8]	; (80065a0 <HW_IPCC_BLE_SendCmd+0x10>)
 8006598:	f7ff ffa6 	bl	80064e8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800659c:	bf00      	nop
}
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	58000c00 	.word	0x58000c00

080065a4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80065a8:	2102      	movs	r1, #2
 80065aa:	4802      	ldr	r0, [pc, #8]	; (80065b4 <HW_IPCC_SYS_Init+0x10>)
 80065ac:	f7ff ff8a 	bl	80064c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80065b0:	bf00      	nop
}
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	58000c00 	.word	0x58000c00

080065b8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80065bc:	2102      	movs	r1, #2
 80065be:	4804      	ldr	r0, [pc, #16]	; (80065d0 <HW_IPCC_SYS_SendCmd+0x18>)
 80065c0:	f7ff ff92 	bl	80064e8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80065c4:	2102      	movs	r1, #2
 80065c6:	4802      	ldr	r0, [pc, #8]	; (80065d0 <HW_IPCC_SYS_SendCmd+0x18>)
 80065c8:	f7ff ff69 	bl	800649e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80065cc:	bf00      	nop
}
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	58000c00 	.word	0x58000c00

080065d4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80065dc:	2108      	movs	r1, #8
 80065de:	480c      	ldr	r0, [pc, #48]	; (8006610 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80065e0:	f7ff ff91 	bl	8006506 <LL_C1_IPCC_IsActiveFlag_CHx>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80065ea:	4a0a      	ldr	r2, [pc, #40]	; (8006614 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80065f0:	2108      	movs	r1, #8
 80065f2:	4807      	ldr	r0, [pc, #28]	; (8006610 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80065f4:	f7ff ff53 	bl	800649e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80065f8:	e006      	b.n	8006608 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80065fe:	2108      	movs	r1, #8
 8006600:	4803      	ldr	r0, [pc, #12]	; (8006610 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006602:	f7ff ff71 	bl	80064e8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006606:	bf00      	nop
}
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	58000c00 	.word	0x58000c00
 8006614:	2000024c 	.word	0x2000024c

08006618 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800661c:	2108      	movs	r1, #8
 800661e:	4802      	ldr	r0, [pc, #8]	; (8006628 <HW_IPCC_TRACES_Init+0x10>)
 8006620:	f7ff ff50 	bl	80064c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006624:	bf00      	nop
}
 8006626:	bd80      	pop	{r7, pc}
 8006628:	58000c00 	.word	0x58000c00

0800662c <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <UTIL_LPM_Init+0x1c>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <UTIL_LPM_Init+0x20>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800663c:	bf00      	nop
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000250 	.word	0x20000250
 800664c:	20000254 	.word	0x20000254

08006650 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665c:	f3ef 8310 	mrs	r3, PRIMASK
 8006660:	613b      	str	r3, [r7, #16]
  return(result);
 8006662:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006664:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006666:	b672      	cpsid	i
  
  switch(state)
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <UTIL_LPM_SetOffMode+0x32>
 800666e:	2b01      	cmp	r3, #1
 8006670:	d000      	beq.n	8006674 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8006672:	e00e      	b.n	8006692 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <UTIL_LPM_SetOffMode+0x58>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4313      	orrs	r3, r2
 800667c:	4a0a      	ldr	r2, [pc, #40]	; (80066a8 <UTIL_LPM_SetOffMode+0x58>)
 800667e:	6013      	str	r3, [r2, #0]
      break;
 8006680:	e007      	b.n	8006692 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	43da      	mvns	r2, r3
 8006686:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <UTIL_LPM_SetOffMode+0x58>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4013      	ands	r3, r2
 800668c:	4a06      	ldr	r2, [pc, #24]	; (80066a8 <UTIL_LPM_SetOffMode+0x58>)
 800668e:	6013      	str	r3, [r2, #0]
      break;
 8006690:	bf00      	nop
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	20000254 	.word	0x20000254

080066ac <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80066b4:	4b65      	ldr	r3, [pc, #404]	; (800684c <UTIL_SEQ_Run+0x1a0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80066ba:	4b64      	ldr	r3, [pc, #400]	; (800684c <UTIL_SEQ_Run+0x1a0>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4013      	ands	r3, r2
 80066c2:	4a62      	ldr	r2, [pc, #392]	; (800684c <UTIL_SEQ_Run+0x1a0>)
 80066c4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80066c6:	e081      	b.n	80067cc <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80066cc:	e002      	b.n	80066d4 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	3301      	adds	r3, #1
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80066d4:	4a5e      	ldr	r2, [pc, #376]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80066dc:	4b5d      	ldr	r3, [pc, #372]	; (8006854 <UTIL_SEQ_Run+0x1a8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	401a      	ands	r2, r3
 80066e2:	4b5a      	ldr	r3, [pc, #360]	; (800684c <UTIL_SEQ_Run+0x1a0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f0      	beq.n	80066ce <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80066ec:	4a58      	ldr	r2, [pc, #352]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80066f4:	4b57      	ldr	r3, [pc, #348]	; (8006854 <UTIL_SEQ_Run+0x1a8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	401a      	ands	r2, r3
 80066fa:	4b54      	ldr	r3, [pc, #336]	; (800684c <UTIL_SEQ_Run+0x1a0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4013      	ands	r3, r2
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006702:	4a53      	ldr	r2, [pc, #332]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	4413      	add	r3, r2
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d106      	bne.n	8006722 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006714:	4a4e      	ldr	r2, [pc, #312]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006720:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8006722:	4a4b      	ldr	r2, [pc, #300]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	4413      	add	r3, r2
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	4013      	ands	r3, r2
 8006730:	4618      	mov	r0, r3
 8006732:	f000 f98f 	bl	8006a54 <SEQ_BitPosition>
 8006736:	4603      	mov	r3, r0
 8006738:	461a      	mov	r2, r3
 800673a:	4b47      	ldr	r3, [pc, #284]	; (8006858 <UTIL_SEQ_Run+0x1ac>)
 800673c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800673e:	4a44      	ldr	r2, [pc, #272]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4413      	add	r3, r2
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	4b43      	ldr	r3, [pc, #268]	; (8006858 <UTIL_SEQ_Run+0x1ac>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2101      	movs	r1, #1
 800674e:	fa01 f303 	lsl.w	r3, r1, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	401a      	ands	r2, r3
 8006756:	493e      	ldr	r1, [pc, #248]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	440b      	add	r3, r1
 800675e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006760:	f3ef 8310 	mrs	r3, PRIMASK
 8006764:	61bb      	str	r3, [r7, #24]
  return(result);
 8006766:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006768:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800676a:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800676c:	4b3a      	ldr	r3, [pc, #232]	; (8006858 <UTIL_SEQ_Run+0x1ac>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	43da      	mvns	r2, r3
 8006778:	4b38      	ldr	r3, [pc, #224]	; (800685c <UTIL_SEQ_Run+0x1b0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4013      	ands	r3, r2
 800677e:	4a37      	ldr	r2, [pc, #220]	; (800685c <UTIL_SEQ_Run+0x1b0>)
 8006780:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006782:	2302      	movs	r3, #2
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006786:	e013      	b.n	80067b0 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	3b01      	subs	r3, #1
 800678c:	4a30      	ldr	r2, [pc, #192]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 800678e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8006792:	4b31      	ldr	r3, [pc, #196]	; (8006858 <UTIL_SEQ_Run+0x1ac>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2201      	movs	r2, #1
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	43da      	mvns	r2, r3
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	3b01      	subs	r3, #1
 80067a2:	400a      	ands	r2, r1
 80067a4:	492a      	ldr	r1, [pc, #168]	; (8006850 <UTIL_SEQ_Run+0x1a4>)
 80067a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	3b01      	subs	r3, #1
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e8      	bne.n	8006788 <UTIL_SEQ_Run+0xdc>
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80067c0:	4b25      	ldr	r3, [pc, #148]	; (8006858 <UTIL_SEQ_Run+0x1ac>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a26      	ldr	r2, [pc, #152]	; (8006860 <UTIL_SEQ_Run+0x1b4>)
 80067c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ca:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80067cc:	4b23      	ldr	r3, [pc, #140]	; (800685c <UTIL_SEQ_Run+0x1b0>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	4b20      	ldr	r3, [pc, #128]	; (8006854 <UTIL_SEQ_Run+0x1a8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	401a      	ands	r2, r3
 80067d6:	4b1d      	ldr	r3, [pc, #116]	; (800684c <UTIL_SEQ_Run+0x1a0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <UTIL_SEQ_Run+0x144>
 80067e0:	4b20      	ldr	r3, [pc, #128]	; (8006864 <UTIL_SEQ_Run+0x1b8>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <UTIL_SEQ_Run+0x1bc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f43f af6c 	beq.w	80066c8 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80067f0:	4b19      	ldr	r3, [pc, #100]	; (8006858 <UTIL_SEQ_Run+0x1ac>)
 80067f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067f6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80067f8:	f000 f91e 	bl	8006a38 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006800:	613b      	str	r3, [r7, #16]
  return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006806:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8006808:	4b14      	ldr	r3, [pc, #80]	; (800685c <UTIL_SEQ_Run+0x1b0>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <UTIL_SEQ_Run+0x1a8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	401a      	ands	r2, r3
 8006812:	4b0e      	ldr	r3, [pc, #56]	; (800684c <UTIL_SEQ_Run+0x1a0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d108      	bne.n	800682e <UTIL_SEQ_Run+0x182>
 800681c:	4b11      	ldr	r3, [pc, #68]	; (8006864 <UTIL_SEQ_Run+0x1b8>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	4b11      	ldr	r3, [pc, #68]	; (8006868 <UTIL_SEQ_Run+0x1bc>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4013      	ands	r3, r2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 800682a:	f7f9 fe8e 	bl	800054a <UTIL_SEQ_Idle>
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8006838:	f000 f905 	bl	8006a46 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800683c:	4a03      	ldr	r2, [pc, #12]	; (800684c <UTIL_SEQ_Run+0x1a0>)
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	6013      	str	r3, [r2, #0]

  return;
 8006842:	bf00      	nop
}
 8006844:	3730      	adds	r7, #48	; 0x30
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000024 	.word	0x20000024
 8006850:	200002e8 	.word	0x200002e8
 8006854:	20000020 	.word	0x20000020
 8006858:	20000264 	.word	0x20000264
 800685c:	20000258 	.word	0x20000258
 8006860:	20000268 	.word	0x20000268
 8006864:	2000025c 	.word	0x2000025c
 8006868:	20000260 	.word	0x20000260

0800686c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006878:	f3ef 8310 	mrs	r3, PRIMASK
 800687c:	617b      	str	r3, [r7, #20]
  return(result);
 800687e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8006880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006882:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f8e5 	bl	8006a54 <SEQ_BitPosition>
 800688a:	4603      	mov	r3, r0
 800688c:	4619      	mov	r1, r3
 800688e:	4a06      	ldr	r2, [pc, #24]	; (80068a8 <UTIL_SEQ_RegTask+0x3c>)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80068a0:	bf00      	nop
}
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000268 	.word	0x20000268

080068ac <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80068bc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80068be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80068c0:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <UTIL_SEQ_SetTask+0x4c>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	4a0b      	ldr	r2, [pc, #44]	; (80068f8 <UTIL_SEQ_SetTask+0x4c>)
 80068cc:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80068ce:	4a0b      	ldr	r2, [pc, #44]	; (80068fc <UTIL_SEQ_SetTask+0x50>)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	431a      	orrs	r2, r3
 80068da:	4908      	ldr	r1, [pc, #32]	; (80068fc <UTIL_SEQ_SetTask+0x50>)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80068ec:	bf00      	nop
}
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	20000258 	.word	0x20000258
 80068fc:	200002e8 	.word	0x200002e8

08006900 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006908:	f3ef 8310 	mrs	r3, PRIMASK
 800690c:	60fb      	str	r3, [r7, #12]
  return(result);
 800690e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006912:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	43da      	mvns	r2, r3
 8006918:	4b07      	ldr	r3, [pc, #28]	; (8006938 <UTIL_SEQ_PauseTask+0x38>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4013      	ands	r3, r2
 800691e:	4a06      	ldr	r2, [pc, #24]	; (8006938 <UTIL_SEQ_PauseTask+0x38>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800692c:	bf00      	nop
}
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	20000020 	.word	0x20000020

0800693c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006944:	f3ef 8310 	mrs	r3, PRIMASK
 8006948:	60fb      	str	r3, [r7, #12]
  return(result);
 800694a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800694c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800694e:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 8006950:	4b08      	ldr	r3, [pc, #32]	; (8006974 <UTIL_SEQ_ResumeTask+0x38>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4313      	orrs	r3, r2
 8006958:	4a06      	ldr	r2, [pc, #24]	; (8006974 <UTIL_SEQ_ResumeTask+0x38>)
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006966:	bf00      	nop
}
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000020 	.word	0x20000020

08006978 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006980:	f3ef 8310 	mrs	r3, PRIMASK
 8006984:	60fb      	str	r3, [r7, #12]
  return(result);
 8006986:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800698a:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 800698c:	4b08      	ldr	r3, [pc, #32]	; (80069b0 <UTIL_SEQ_SetEvt+0x38>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4313      	orrs	r3, r2
 8006994:	4a06      	ldr	r2, [pc, #24]	; (80069b0 <UTIL_SEQ_SetEvt+0x38>)
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80069a2:	bf00      	nop
}
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	2000025c 	.word	0x2000025c

080069b4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80069bc:	4b1b      	ldr	r3, [pc, #108]	; (8006a2c <UTIL_SEQ_WaitEvt+0x78>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80069c2:	4b1a      	ldr	r3, [pc, #104]	; (8006a2c <UTIL_SEQ_WaitEvt+0x78>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ca:	d102      	bne.n	80069d2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e005      	b.n	80069de <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80069d2:	4b16      	ldr	r3, [pc, #88]	; (8006a2c <UTIL_SEQ_WaitEvt+0x78>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2201      	movs	r2, #1
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80069de:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <UTIL_SEQ_WaitEvt+0x7c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 80069e4:	4a12      	ldr	r2, [pc, #72]	; (8006a30 <UTIL_SEQ_WaitEvt+0x7c>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80069ea:	e005      	b.n	80069f8 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80069ec:	4b10      	ldr	r3, [pc, #64]	; (8006a30 <UTIL_SEQ_WaitEvt+0x7c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4619      	mov	r1, r3
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f7f9 fdb0 	bl	8000558 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80069f8:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <UTIL_SEQ_WaitEvt+0x80>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	4b0c      	ldr	r3, [pc, #48]	; (8006a30 <UTIL_SEQ_WaitEvt+0x7c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4013      	ands	r3, r2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f2      	beq.n	80069ec <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8006a06:	4a09      	ldr	r2, [pc, #36]	; (8006a2c <UTIL_SEQ_WaitEvt+0x78>)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8006a0c:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <UTIL_SEQ_WaitEvt+0x7c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	43da      	mvns	r2, r3
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <UTIL_SEQ_WaitEvt+0x80>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4013      	ands	r3, r2
 8006a18:	4a06      	ldr	r2, [pc, #24]	; (8006a34 <UTIL_SEQ_WaitEvt+0x80>)
 8006a1a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8006a1c:	4a04      	ldr	r2, [pc, #16]	; (8006a30 <UTIL_SEQ_WaitEvt+0x7c>)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6013      	str	r3, [r2, #0]

  return;
 8006a22:	bf00      	nop
}
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000264 	.word	0x20000264
 8006a30:	20000260 	.word	0x20000260
 8006a34:	2000025c 	.word	0x2000025c

08006a38 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006a3c:	bf00      	nop
}
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8006a46:	b480      	push	{r7}
 8006a48:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006a4a:	bf00      	nop
}
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	041b      	lsls	r3, r3, #16
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <SEQ_BitPosition+0x20>
 8006a6a:	2310      	movs	r3, #16
 8006a6c:	73fb      	strb	r3, [r7, #15]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d105      	bne.n	8006a8a <SEQ_BitPosition+0x36>
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	3308      	adds	r3, #8
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <SEQ_BitPosition+0x4c>
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	3304      	adds	r3, #4
 8006a98:	73fb      	strb	r3, [r7, #15]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	0f1b      	lsrs	r3, r3, #28
 8006aa4:	4a07      	ldr	r2, [pc, #28]	; (8006ac4 <SEQ_BitPosition+0x70>)
 8006aa6:	5cd2      	ldrb	r2, [r2, r3]
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	4413      	add	r3, r2
 8006aac:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	f1c3 031f 	rsb	r3, r3, #31
 8006ab4:	b2db      	uxtb	r3, r3
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	08006d90 	.word	0x08006d90

08006ac8 <__libc_init_array>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	4e0d      	ldr	r6, [pc, #52]	; (8006b00 <__libc_init_array+0x38>)
 8006acc:	4c0d      	ldr	r4, [pc, #52]	; (8006b04 <__libc_init_array+0x3c>)
 8006ace:	1ba4      	subs	r4, r4, r6
 8006ad0:	10a4      	asrs	r4, r4, #2
 8006ad2:	2500      	movs	r5, #0
 8006ad4:	42a5      	cmp	r5, r4
 8006ad6:	d109      	bne.n	8006aec <__libc_init_array+0x24>
 8006ad8:	4e0b      	ldr	r6, [pc, #44]	; (8006b08 <__libc_init_array+0x40>)
 8006ada:	4c0c      	ldr	r4, [pc, #48]	; (8006b0c <__libc_init_array+0x44>)
 8006adc:	f000 f82c 	bl	8006b38 <_init>
 8006ae0:	1ba4      	subs	r4, r4, r6
 8006ae2:	10a4      	asrs	r4, r4, #2
 8006ae4:	2500      	movs	r5, #0
 8006ae6:	42a5      	cmp	r5, r4
 8006ae8:	d105      	bne.n	8006af6 <__libc_init_array+0x2e>
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006af0:	4798      	blx	r3
 8006af2:	3501      	adds	r5, #1
 8006af4:	e7ee      	b.n	8006ad4 <__libc_init_array+0xc>
 8006af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006afa:	4798      	blx	r3
 8006afc:	3501      	adds	r5, #1
 8006afe:	e7f2      	b.n	8006ae6 <__libc_init_array+0x1e>
 8006b00:	08006da0 	.word	0x08006da0
 8006b04:	08006da0 	.word	0x08006da0
 8006b08:	08006da0 	.word	0x08006da0
 8006b0c:	08006da4 	.word	0x08006da4

08006b10 <memcpy>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	1e43      	subs	r3, r0, #1
 8006b14:	440a      	add	r2, r1
 8006b16:	4291      	cmp	r1, r2
 8006b18:	d100      	bne.n	8006b1c <memcpy+0xc>
 8006b1a:	bd10      	pop	{r4, pc}
 8006b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b24:	e7f7      	b.n	8006b16 <memcpy+0x6>

08006b26 <memset>:
 8006b26:	4402      	add	r2, r0
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d100      	bne.n	8006b30 <memset+0xa>
 8006b2e:	4770      	bx	lr
 8006b30:	f803 1b01 	strb.w	r1, [r3], #1
 8006b34:	e7f9      	b.n	8006b2a <memset+0x4>
	...

08006b38 <_init>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr

08006b44 <_fini>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr
