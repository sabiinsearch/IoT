
Nucleo_ble_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  080063d8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  080063fc  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  08006495  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  080064d2  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000098  20000118  080064e3  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000174  200001b0  0800657b  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  0800657b  00020324  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   000294bc  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00004e13  00000000  00000000  0004969c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00001a48  00000000  00000000  0004e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001810  00000000  00000000  0004fef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  000244f6  00000000  00000000  00051708  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   000183d5  00000000  00000000  00075bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000c7116  00000000  00000000  0008dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  001550e9  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000069ec  00000000  00000000  00155164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001b0 	.word	0x200001b0
 8000158:	00000000 	.word	0x00000000
 800015c:	08006174 	.word	0x08006174

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001b4 	.word	0x200001b4
 8000178:	08006174 	.word	0x08006174

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f004 ffb3 	bl	8005114 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f004 fb0c 	bl	80047ce <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	0800618c 	.word	0x0800618c

080001c4 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4313      	orrs	r3, r2
 800020a:	608b      	str	r3, [r1, #8]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800021c:	f000 f80a 	bl	8000234 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000220:	4903      	ldr	r1, [pc, #12]	; (8000230 <APPE_Init+0x18>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fbf2 	bl	8000a0c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000228:	f000 f812 	bl	8000250 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800022c:	bf00      	nop
}
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200002f8 	.word	0x200002f8

08000234 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800023c:	f7ff ffd8 	bl	80001f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000240:	f005 fd12 	bl	8005c68 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000244:	2004      	movs	r0, #4
 8000246:	f7ff ffbd 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800024a:	bf00      	nop
}
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000256:	f004 fe13 	bl	8004e80 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <appe_Tl_Init+0x50>)
 800025c:	2100      	movs	r1, #0
 800025e:	2008      	movs	r0, #8
 8000260:	f005 fe22 	bl	8005ea8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <appe_Tl_Init+0x54>)
 8000266:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <appe_Tl_Init+0x58>)
 800026a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	480e      	ldr	r0, [pc, #56]	; (80002ac <appe_Tl_Init+0x5c>)
 8000272:	f004 fc95 	bl	8004ba0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <appe_Tl_Init+0x60>)
 8000278:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <appe_Tl_Init+0x64>)
 800027c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <appe_Tl_Init+0x68>)
 8000280:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000282:	f240 533c 	movw	r3, #1340	; 0x53c
 8000286:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	4618      	mov	r0, r3
 800028e:	f004 feb7 	bl	8005000 <TL_MM_Init>

  TL_Enable();
 8000292:	f004 fdef 	bl	8004e74 <TL_Enable>

  return;
 8000296:	bf00      	nop
}
 8000298:	3720      	adds	r7, #32
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	08004bd9 	.word	0x08004bd9
 80002a4:	20030724 	.word	0x20030724
 80002a8:	080002bd 	.word	0x080002bd
 80002ac:	080002d3 	.word	0x080002d3
 80002b0:	2003093c 	.word	0x2003093c
 80002b4:	20030830 	.word	0x20030830
 80002b8:	200301e8 	.word	0x200301e8

080002bc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80002c6:	bf00      	nop
}
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80002da:	f7ff ff57 	bl	800018c <APPD_EnableCPU2>

  APP_BLE_Init( );
 80002de:	f005 f82b 	bl	8005338 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2001      	movs	r0, #1
 80002e6:	f005 fcd1 	bl	8005c8c <UTIL_LPM_SetOffMode>
  return;
 80002ea:	bf00      	nop
}
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80002f6:	bf00      	nop
}
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800030a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030e:	f005 fceb 	bl	8005ce8 <UTIL_SEQ_Run>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000322:	2100      	movs	r1, #0
 8000324:	2008      	movs	r0, #8
 8000326:	f005 fddf 	bl	8005ee8 <UTIL_SEQ_SetTask>
  return;
 800032a:	bf00      	nop
}
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	b082      	sub	sp, #8
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800033a:	2002      	movs	r0, #2
 800033c:	f005 fe3a 	bl	8005fb4 <UTIL_SEQ_SetEvt>
  return;
 8000340:	bf00      	nop
}
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000350:	2002      	movs	r0, #2
 8000352:	f005 fe4d 	bl	8005ff0 <UTIL_SEQ_WaitEvt>
  return;
 8000356:	bf00      	nop
}
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <LL_EXTI_EnableIT_0_31+0x24>)
 800036a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800036e:	4905      	ldr	r1, [pc, #20]	; (8000384 <LL_EXTI_EnableIT_0_31+0x24>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4313      	orrs	r3, r2
 8000374:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	58000800 	.word	0x58000800

08000388 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4904      	ldr	r1, [pc, #16]	; (80003a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	600b      	str	r3, [r1, #0]

}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	58000800 	.word	0x58000800

080003ac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003be:	b29b      	uxth	r3, r3
 80003c0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80003c2:	e005      	b.n	80003d0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <ReadRtcSsrValue+0x3c>)
 80003ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d1f5      	bne.n	80003c4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80003d8:	683b      	ldr	r3, [r7, #0]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40002800 	.word	0x40002800

080003ec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80003fc:	79ba      	ldrb	r2, [r7, #6]
 80003fe:	491d      	ldr	r1, [pc, #116]	; (8000474 <LinkTimerAfter+0x88>)
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	440b      	add	r3, r1
 800040a:	3315      	adds	r3, #21
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	2b06      	cmp	r3, #6
 8000414:	d009      	beq.n	800042a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000416:	7bfa      	ldrb	r2, [r7, #15]
 8000418:	4916      	ldr	r1, [pc, #88]	; (8000474 <LinkTimerAfter+0x88>)
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	440b      	add	r3, r1
 8000424:	3314      	adds	r3, #20
 8000426:	79fa      	ldrb	r2, [r7, #7]
 8000428:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800042a:	79fa      	ldrb	r2, [r7, #7]
 800042c:	4911      	ldr	r1, [pc, #68]	; (8000474 <LinkTimerAfter+0x88>)
 800042e:	4613      	mov	r3, r2
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	4413      	add	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	440b      	add	r3, r1
 8000438:	3315      	adds	r3, #21
 800043a:	7bfa      	ldrb	r2, [r7, #15]
 800043c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800043e:	79fa      	ldrb	r2, [r7, #7]
 8000440:	490c      	ldr	r1, [pc, #48]	; (8000474 <LinkTimerAfter+0x88>)
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	440b      	add	r3, r1
 800044c:	3314      	adds	r3, #20
 800044e:	79ba      	ldrb	r2, [r7, #6]
 8000450:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000452:	79ba      	ldrb	r2, [r7, #6]
 8000454:	4907      	ldr	r1, [pc, #28]	; (8000474 <LinkTimerAfter+0x88>)
 8000456:	4613      	mov	r3, r2
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4413      	add	r3, r2
 800045c:	00db      	lsls	r3, r3, #3
 800045e:	440b      	add	r3, r1
 8000460:	3315      	adds	r3, #21
 8000462:	79fa      	ldrb	r2, [r7, #7]
 8000464:	701a      	strb	r2, [r3, #0]

  return;
 8000466:	bf00      	nop
}
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	20000028 	.word	0x20000028

08000478 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	460a      	mov	r2, r1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	4613      	mov	r3, r2
 8000486:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <LinkTimerBefore+0xb8>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	79ba      	ldrb	r2, [r7, #6]
 8000490:	429a      	cmp	r2, r3
 8000492:	d032      	beq.n	80004fa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000494:	79ba      	ldrb	r2, [r7, #6]
 8000496:	4927      	ldr	r1, [pc, #156]	; (8000534 <LinkTimerBefore+0xbc>)
 8000498:	4613      	mov	r3, r2
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4413      	add	r3, r2
 800049e:	00db      	lsls	r3, r3, #3
 80004a0:	440b      	add	r3, r1
 80004a2:	3314      	adds	r3, #20
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80004a8:	7bfa      	ldrb	r2, [r7, #15]
 80004aa:	4922      	ldr	r1, [pc, #136]	; (8000534 <LinkTimerBefore+0xbc>)
 80004ac:	4613      	mov	r3, r2
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4413      	add	r3, r2
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	440b      	add	r3, r1
 80004b6:	3315      	adds	r3, #21
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	491d      	ldr	r1, [pc, #116]	; (8000534 <LinkTimerBefore+0xbc>)
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	440b      	add	r3, r1
 80004ca:	3315      	adds	r3, #21
 80004cc:	79ba      	ldrb	r2, [r7, #6]
 80004ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	4918      	ldr	r1, [pc, #96]	; (8000534 <LinkTimerBefore+0xbc>)
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	440b      	add	r3, r1
 80004de:	3314      	adds	r3, #20
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	4913      	ldr	r1, [pc, #76]	; (8000534 <LinkTimerBefore+0xbc>)
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	440b      	add	r3, r1
 80004f2:	3314      	adds	r3, #20
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80004f8:	e014      	b.n	8000524 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	490d      	ldr	r1, [pc, #52]	; (8000534 <LinkTimerBefore+0xbc>)
 80004fe:	4613      	mov	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	4413      	add	r3, r2
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	440b      	add	r3, r1
 8000508:	3315      	adds	r3, #21
 800050a:	79ba      	ldrb	r2, [r7, #6]
 800050c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800050e:	79ba      	ldrb	r2, [r7, #6]
 8000510:	4908      	ldr	r1, [pc, #32]	; (8000534 <LinkTimerBefore+0xbc>)
 8000512:	4613      	mov	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	4413      	add	r3, r2
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	440b      	add	r3, r1
 800051c:	3314      	adds	r3, #20
 800051e:	79fa      	ldrb	r2, [r7, #7]
 8000520:	701a      	strb	r2, [r3, #0]
  return;
 8000522:	bf00      	nop
}
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200000b8 	.word	0x200000b8
 8000534:	20000028 	.word	0x20000028

08000538 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000542:	4b4e      	ldr	r3, [pc, #312]	; (800067c <linkTimer+0x144>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b06      	cmp	r3, #6
 800054a:	d118      	bne.n	800057e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800054c:	4b4b      	ldr	r3, [pc, #300]	; (800067c <linkTimer+0x144>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b4b      	ldr	r3, [pc, #300]	; (8000680 <linkTimer+0x148>)
 8000554:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000556:	4a49      	ldr	r2, [pc, #292]	; (800067c <linkTimer+0x144>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800055c:	79fa      	ldrb	r2, [r7, #7]
 800055e:	4949      	ldr	r1, [pc, #292]	; (8000684 <linkTimer+0x14c>)
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	440b      	add	r3, r1
 800056a:	3315      	adds	r3, #21
 800056c:	2206      	movs	r2, #6
 800056e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000570:	4b45      	ldr	r3, [pc, #276]	; (8000688 <linkTimer+0x150>)
 8000572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000576:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	81fb      	strh	r3, [r7, #14]
 800057c:	e078      	b.n	8000670 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800057e:	f000 f909 	bl	8000794 <ReturnTimeElapsed>
 8000582:	4603      	mov	r3, r0
 8000584:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000586:	79fa      	ldrb	r2, [r7, #7]
 8000588:	493e      	ldr	r1, [pc, #248]	; (8000684 <linkTimer+0x14c>)
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	440b      	add	r3, r1
 8000594:	3308      	adds	r3, #8
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	79fa      	ldrb	r2, [r7, #7]
 800059c:	4419      	add	r1, r3
 800059e:	4839      	ldr	r0, [pc, #228]	; (8000684 <linkTimer+0x14c>)
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	4403      	add	r3, r0
 80005aa:	3308      	adds	r3, #8
 80005ac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	4934      	ldr	r1, [pc, #208]	; (8000684 <linkTimer+0x14c>)
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	440b      	add	r3, r1
 80005bc:	3308      	adds	r3, #8
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <linkTimer+0x144>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <linkTimer+0x14c>)
 80005cc:	460b      	mov	r3, r1
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	440b      	add	r3, r1
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4413      	add	r3, r2
 80005d6:	3308      	adds	r3, #8
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d337      	bcc.n	8000650 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <linkTimer+0x144>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80005e6:	7b7a      	ldrb	r2, [r7, #13]
 80005e8:	4926      	ldr	r1, [pc, #152]	; (8000684 <linkTimer+0x14c>)
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	440b      	add	r3, r1
 80005f4:	3315      	adds	r3, #21
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80005fa:	e013      	b.n	8000624 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80005fc:	7b7a      	ldrb	r2, [r7, #13]
 80005fe:	4921      	ldr	r1, [pc, #132]	; (8000684 <linkTimer+0x14c>)
 8000600:	4613      	mov	r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	4413      	add	r3, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	440b      	add	r3, r1
 800060a:	3315      	adds	r3, #21
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000610:	7b7a      	ldrb	r2, [r7, #13]
 8000612:	491c      	ldr	r1, [pc, #112]	; (8000684 <linkTimer+0x14c>)
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	440b      	add	r3, r1
 800061e:	3315      	adds	r3, #21
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	2b06      	cmp	r3, #6
 8000628:	d00b      	beq.n	8000642 <linkTimer+0x10a>
 800062a:	7b3a      	ldrb	r2, [r7, #12]
 800062c:	4915      	ldr	r1, [pc, #84]	; (8000684 <linkTimer+0x14c>)
 800062e:	4613      	mov	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	4413      	add	r3, r2
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	440b      	add	r3, r1
 8000638:	3308      	adds	r3, #8
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	429a      	cmp	r2, r3
 8000640:	d2dc      	bcs.n	80005fc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000642:	7b7a      	ldrb	r2, [r7, #13]
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fecf 	bl	80003ec <LinkTimerAfter>
 800064e:	e00f      	b.n	8000670 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <linkTimer+0x144>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff0c 	bl	8000478 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <linkTimer+0x144>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <linkTimer+0x148>)
 8000668:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <linkTimer+0x144>)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000670:	89fb      	ldrh	r3, [r7, #14]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000b8 	.word	0x200000b8
 8000680:	200000b9 	.word	0x200000b9
 8000684:	20000028 	.word	0x20000028
 8000688:	200000bc 	.word	0x200000bc

0800068c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <UnlinkTimer+0xf8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d111      	bne.n	80006cc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <UnlinkTimer+0xf8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <UnlinkTimer+0xfc>)
 80006b0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	4935      	ldr	r1, [pc, #212]	; (800078c <UnlinkTimer+0x100>)
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	440b      	add	r3, r1
 80006c0:	3315      	adds	r3, #21
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <UnlinkTimer+0xf8>)
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e03e      	b.n	800074a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	492f      	ldr	r1, [pc, #188]	; (800078c <UnlinkTimer+0x100>)
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	440b      	add	r3, r1
 80006da:	3314      	adds	r3, #20
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	492a      	ldr	r1, [pc, #168]	; (800078c <UnlinkTimer+0x100>)
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	440b      	add	r3, r1
 80006ee:	3315      	adds	r3, #21
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80006f4:	79f9      	ldrb	r1, [r7, #7]
 80006f6:	7bfa      	ldrb	r2, [r7, #15]
 80006f8:	4824      	ldr	r0, [pc, #144]	; (800078c <UnlinkTimer+0x100>)
 80006fa:	460b      	mov	r3, r1
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	440b      	add	r3, r1
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4403      	add	r3, r0
 8000704:	3315      	adds	r3, #21
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2d8      	uxtb	r0, r3
 800070a:	4920      	ldr	r1, [pc, #128]	; (800078c <UnlinkTimer+0x100>)
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	440b      	add	r3, r1
 8000716:	3315      	adds	r3, #21
 8000718:	4602      	mov	r2, r0
 800071a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	2b06      	cmp	r3, #6
 8000720:	d013      	beq.n	800074a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000722:	79f9      	ldrb	r1, [r7, #7]
 8000724:	7bba      	ldrb	r2, [r7, #14]
 8000726:	4819      	ldr	r0, [pc, #100]	; (800078c <UnlinkTimer+0x100>)
 8000728:	460b      	mov	r3, r1
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	440b      	add	r3, r1
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	4403      	add	r3, r0
 8000732:	3314      	adds	r3, #20
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2d8      	uxtb	r0, r3
 8000738:	4914      	ldr	r1, [pc, #80]	; (800078c <UnlinkTimer+0x100>)
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3314      	adds	r3, #20
 8000746:	4602      	mov	r2, r0
 8000748:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	490f      	ldr	r1, [pc, #60]	; (800078c <UnlinkTimer+0x100>)
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	440b      	add	r3, r1
 8000758:	330c      	adds	r3, #12
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <UnlinkTimer+0xf8>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b06      	cmp	r3, #6
 8000766:	d107      	bne.n	8000778 <UnlinkTimer+0xec>
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <UnlinkTimer+0x104>)
 8000770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000774:	601a      	str	r2, [r3, #0]
  }

  return;
 8000776:	bf00      	nop
 8000778:	bf00      	nop
}
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	200000b8 	.word	0x200000b8
 8000788:	200000b9 	.word	0x200000b9
 800078c:	20000028 	.word	0x20000028
 8000790:	200000bc 	.word	0x200000bc

08000794 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <ReturnTimeElapsed+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007a2:	d026      	beq.n	80007f2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80007a4:	f7ff fe02 	bl	80003ac <ReadRtcSsrValue>
 80007a8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d805      	bhi.n	80007c0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e00a      	b.n	80007d6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <ReturnTimeElapsed+0x74>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <ReturnTimeElapsed+0x70>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <ReturnTimeElapsed+0x78>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <ReturnTimeElapsed+0x7c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	40d3      	lsrs	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	e001      	b.n	80007f6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	b29b      	uxth	r3, r3
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000bc 	.word	0x200000bc
 8000808:	200001d2 	.word	0x200001d2
 800080c:	200001d1 	.word	0x200001d1
 8000810:	200001d0 	.word	0x200001d0

08000814 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d108      	bne.n	8000836 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000824:	f7ff fdc2 	bl	80003ac <ReadRtcSsrValue>
 8000828:	4602      	mov	r2, r0
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <RestartWakeupCounter+0xa8>)
 800082c:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800082e:	2003      	movs	r0, #3
 8000830:	f001 f855 	bl	80018de <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000834:	e03e      	b.n	80008b4 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d803      	bhi.n	8000844 <RestartWakeupCounter+0x30>
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <RestartWakeupCounter+0xac>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d002      	beq.n	800084a <RestartWakeupCounter+0x36>
      Value -= 1;
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	3b01      	subs	r3, #1
 8000848:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800084a:	bf00      	nop
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f7      	beq.n	800084c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <RestartWakeupCounter+0xb0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000870:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <RestartWakeupCounter+0xb4>)
 8000874:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000878:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800087a:	2003      	movs	r0, #3
 800087c:	f001 f83d 	bl	80018fa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <RestartWakeupCounter+0xb8>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	0c1b      	lsrs	r3, r3, #16
 8000886:	041b      	lsls	r3, r3, #16
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	4910      	ldr	r1, [pc, #64]	; (80008cc <RestartWakeupCounter+0xb8>)
 800088c:	4313      	orrs	r3, r2
 800088e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000890:	f7ff fd8c 	bl	80003ac <ReadRtcSsrValue>
 8000894:	4602      	mov	r2, r0
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <RestartWakeupCounter+0xa8>)
 8000898:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <RestartWakeupCounter+0xb0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <RestartWakeupCounter+0xb0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008ac:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80008ae:	f3af 8000 	nop.w
  return ;
 80008b2:	bf00      	nop
}
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000bc 	.word	0x200000bc
 80008c0:	200001d0 	.word	0x200001d0
 80008c4:	200001cc 	.word	0x200001cc
 80008c8:	58000800 	.word	0x58000800
 80008cc:	40002800 	.word	0x40002800

080008d0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <RescheduleTimerList+0x124>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008e2:	d108      	bne.n	80008f6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80008e4:	bf00      	nop
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <RescheduleTimerList+0x128>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f7      	bne.n	80008e6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <RescheduleTimerList+0x128>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <RescheduleTimerList+0x128>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000908:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <RescheduleTimerList+0x12c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	493b      	ldr	r1, [pc, #236]	; (8000a00 <RescheduleTimerList+0x130>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3308      	adds	r3, #8
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000924:	f7ff ff36 	bl	8000794 <ReturnTimeElapsed>
 8000928:	4603      	mov	r3, r0
 800092a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	429a      	cmp	r2, r3
 8000932:	d205      	bcs.n	8000940 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <RescheduleTimerList+0x134>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e04d      	b.n	80009dc <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <RescheduleTimerList+0x138>)
 8000944:	8812      	ldrh	r2, [r2, #0]
 8000946:	b292      	uxth	r2, r2
 8000948:	4413      	add	r3, r2
 800094a:	461a      	mov	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4293      	cmp	r3, r2
 8000950:	d906      	bls.n	8000960 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <RescheduleTimerList+0x138>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000958:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <RescheduleTimerList+0x134>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e03d      	b.n	80009dc <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	b29a      	uxth	r2, r3
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <RescheduleTimerList+0x134>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000970:	e034      	b.n	80009dc <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000972:	7bfa      	ldrb	r2, [r7, #15]
 8000974:	4922      	ldr	r1, [pc, #136]	; (8000a00 <RescheduleTimerList+0x130>)
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	3308      	adds	r3, #8
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	d20a      	bcs.n	80009a0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	491c      	ldr	r1, [pc, #112]	; (8000a00 <RescheduleTimerList+0x130>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3308      	adds	r3, #8
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e013      	b.n	80009c8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	4917      	ldr	r1, [pc, #92]	; (8000a00 <RescheduleTimerList+0x130>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3308      	adds	r3, #8
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <RescheduleTimerList+0x130>)
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4403      	add	r3, r0
 80009c4:	3308      	adds	r3, #8
 80009c6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80009c8:	7bfa      	ldrb	r2, [r7, #15]
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <RescheduleTimerList+0x130>)
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	440b      	add	r3, r1
 80009d6:	3315      	adds	r3, #21
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d1c7      	bne.n	8000972 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80009e2:	89bb      	ldrh	r3, [r7, #12]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff15 	bl	8000814 <RestartWakeupCounter>

  return ;
 80009ea:	bf00      	nop
}
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40002800 	.word	0x40002800
 80009f8:	200001cc 	.word	0x200001cc
 80009fc:	200000b8 	.word	0x200000b8
 8000a00:	20000028 	.word	0x20000028
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	200001d4 	.word	0x200001d4

08000a0c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000a18:	4a61      	ldr	r2, [pc, #388]	; (8000ba0 <HW_TS_Init+0x194>)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a1e:	4b60      	ldr	r3, [pc, #384]	; (8000ba0 <HW_TS_Init+0x194>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	22ca      	movs	r2, #202	; 0xca
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
 8000a28:	4b5d      	ldr	r3, [pc, #372]	; (8000ba0 <HW_TS_Init+0x194>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000a32:	4b5c      	ldr	r3, [pc, #368]	; (8000ba4 <HW_TS_Init+0x198>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	4a5b      	ldr	r2, [pc, #364]	; (8000ba4 <HW_TS_Init+0x198>)
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000a3e:	4b59      	ldr	r3, [pc, #356]	; (8000ba4 <HW_TS_Init+0x198>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f1c3 0304 	rsb	r3, r3, #4
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b55      	ldr	r3, [pc, #340]	; (8000ba8 <HW_TS_Init+0x19c>)
 8000a52:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000a54:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <HW_TS_Init+0x198>)
 8000a56:	691b      	ldr	r3, [r3, #16]
 8000a58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000a5c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000a60:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	fa92 f2a2 	rbit	r2, r2
 8000a68:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	fab2 f282 	clz	r2, r2
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	3301      	adds	r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <HW_TS_Init+0x1a0>)
 8000a7c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <HW_TS_Init+0x198>)
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4b48      	ldr	r3, [pc, #288]	; (8000bb0 <HW_TS_Init+0x1a4>)
 8000a90:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000a92:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <HW_TS_Init+0x1a4>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a44      	ldr	r2, [pc, #272]	; (8000bac <HW_TS_Init+0x1a0>)
 8000a9a:	7812      	ldrb	r2, [r2, #0]
 8000a9c:	fb02 f303 	mul.w	r3, r2, r3
 8000aa0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000aa4:	4a40      	ldr	r2, [pc, #256]	; (8000ba8 <HW_TS_Init+0x19c>)
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	40d3      	lsrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d904      	bls.n	8000ac0 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <HW_TS_Init+0x1a8>)
 8000ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000abc:	801a      	strh	r2, [r3, #0]
 8000abe:	e003      	b.n	8000ac8 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <HW_TS_Init+0x1a8>)
 8000ac6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ac8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000acc:	f7ff fc5c 	bl	8000388 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ad0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ad4:	f7ff fc44 	bl	8000360 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d143      	bne.n	8000b66 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ade:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <HW_TS_Init+0x1ac>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HW_TS_Init+0x1b0>)
 8000ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aea:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	75fb      	strb	r3, [r7, #23]
 8000af0:	e00c      	b.n	8000b0c <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000af2:	7dfa      	ldrb	r2, [r7, #23]
 8000af4:	4932      	ldr	r1, [pc, #200]	; (8000bc0 <HW_TS_Init+0x1b4>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	440b      	add	r3, r1
 8000b00:	330c      	adds	r3, #12
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000b06:	7dfb      	ldrb	r3, [r7, #23]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	75fb      	strb	r3, [r7, #23]
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	2b05      	cmp	r3, #5
 8000b10:	d9ef      	bls.n	8000af2 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000b12:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <HW_TS_Init+0x1b8>)
 8000b14:	2206      	movs	r2, #6
 8000b16:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <HW_TS_Init+0x194>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HW_TS_Init+0x194>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b2a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HW_TS_Init+0x194>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HW_TS_Init+0x194>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b40:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <HW_TS_Init+0x1bc>)
 8000b44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b48:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f000 fed5 	bl	80018fa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HW_TS_Init+0x194>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HW_TS_Init+0x194>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	e00a      	b.n	8000b7c <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HW_TS_Init+0x194>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 feb1 	bl	80018de <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HW_TS_Init+0x194>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2103      	movs	r1, #3
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f000 fe65 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 fe7c 	bl	800188e <HAL_NVIC_EnableIRQ>

  return;
 8000b96:	bf00      	nop
}
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001cc 	.word	0x200001cc
 8000ba4:	40002800 	.word	0x40002800
 8000ba8:	200001d0 	.word	0x200001d0
 8000bac:	200001d1 	.word	0x200001d1
 8000bb0:	200001d2 	.word	0x200001d2
 8000bb4:	200001d4 	.word	0x200001d4
 8000bb8:	200000c0 	.word	0x200000c0
 8000bbc:	200000bc 	.word	0x200000bc
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	200000b8 	.word	0x200000b8
 8000bc8:	58000800 	.word	0x58000800

08000bcc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b08b      	sub	sp, #44	; 0x2c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000be2:	f3ef 8310 	mrs	r3, PRIMASK
 8000be6:	61fb      	str	r3, [r7, #28]
  return(result);
 8000be8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000bea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000bee:	e004      	b.n	8000bfa <HW_TS_Create+0x2e>
  {
    loop++;
 8000bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	d80c      	bhi.n	8000c1c <HW_TS_Create+0x50>
 8000c02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c06:	492b      	ldr	r1, [pc, #172]	; (8000cb4 <HW_TS_Create+0xe8>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	330c      	adds	r3, #12
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1e9      	bne.n	8000bf0 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c20:	2b06      	cmp	r3, #6
 8000c22:	d037      	beq.n	8000c94 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000c24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c28:	4922      	ldr	r1, [pc, #136]	; (8000cb4 <HW_TS_Create+0xe8>)
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	440b      	add	r3, r1
 8000c34:	330c      	adds	r3, #12
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000c44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c48:	491a      	ldr	r1, [pc, #104]	; (8000cb4 <HW_TS_Create+0xe8>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	440b      	add	r3, r1
 8000c54:	3310      	adds	r3, #16
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000c5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c5e:	4915      	ldr	r1, [pc, #84]	; (8000cb4 <HW_TS_Create+0xe8>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	440b      	add	r3, r1
 8000c6a:	330d      	adds	r3, #13
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000c70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c74:	490f      	ldr	r1, [pc, #60]	; (8000cb4 <HW_TS_Create+0xe8>)
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	440b      	add	r3, r1
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c8a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c92:	e007      	b.n	8000ca4 <HW_TS_Create+0xd8>
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	372c      	adds	r7, #44	; 0x2c
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	20000028 	.word	0x20000028

08000cb8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8000cc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f000 fdeb 	bl	80018aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cd4:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	22ca      	movs	r2, #202	; 0xca
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8000cde:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2253      	movs	r2, #83	; 0x53
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000ce8:	79fa      	ldrb	r2, [r7, #7]
 8000cea:	4933      	ldr	r1, [pc, #204]	; (8000db8 <HW_TS_Stop+0x100>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	330c      	adds	r3, #12
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d148      	bne.n	8000d92 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fcc1 	bl	800068c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <HW_TS_Stop+0x104>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d135      	bne.n	8000d82 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HW_TS_Stop+0x108>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d22:	d108      	bne.n	8000d36 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d24:	bf00      	nop
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f7      	bne.n	8000d26 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d48:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d4a:	bf00      	nop
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f7      	beq.n	8000d4c <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d70:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HW_TS_Stop+0x10c>)
 8000d74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d78:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 fdbd 	bl	80018fa <HAL_NVIC_ClearPendingIRQ>
 8000d80:	e007      	b.n	8000d92 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HW_TS_Stop+0x110>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	7cfa      	ldrb	r2, [r7, #19]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d001      	beq.n	8000d92 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8000d8e:	f7ff fd9f 	bl	80008d0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HW_TS_Stop+0xfc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	22ff      	movs	r2, #255	; 0xff
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 fd76 	bl	800188e <HAL_NVIC_EnableIRQ>
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000dac:	bf00      	nop
}
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200001cc 	.word	0x200001cc
 8000db8:	20000028 	.word	0x20000028
 8000dbc:	200000b8 	.word	0x200000b8
 8000dc0:	40002800 	.word	0x40002800
 8000dc4:	58000800 	.word	0x58000800
 8000dc8:	200000b9 	.word	0x200000b9

08000dcc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	493b      	ldr	r1, [pc, #236]	; (8000ec8 <HW_TS_Start+0xfc>)
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	440b      	add	r3, r1
 8000de6:	330c      	adds	r3, #12
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d103      	bne.n	8000df8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff60 	bl	8000cb8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000df8:	f3ef 8310 	mrs	r3, PRIMASK
 8000dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e02:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fd50 	bl	80018aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <HW_TS_Start+0x100>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	22ca      	movs	r2, #202	; 0xca
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HW_TS_Start+0x100>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2253      	movs	r2, #83	; 0x53
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	4929      	ldr	r1, [pc, #164]	; (8000ec8 <HW_TS_Start+0xfc>)
 8000e22:	4613      	mov	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	440b      	add	r3, r1
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	2202      	movs	r2, #2
 8000e30:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000e32:	79fa      	ldrb	r2, [r7, #7]
 8000e34:	4924      	ldr	r1, [pc, #144]	; (8000ec8 <HW_TS_Start+0xfc>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3308      	adds	r3, #8
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	491f      	ldr	r1, [pc, #124]	; (8000ec8 <HW_TS_Start+0xfc>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3304      	adds	r3, #4
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb6b 	bl	8000538 <linkTimer>
 8000e62:	4603      	mov	r3, r0
 8000e64:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HW_TS_Start+0x104>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HW_TS_Start+0x108>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	7c7a      	ldrb	r2, [r7, #17]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d002      	beq.n	8000e7e <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8000e78:	f7ff fd2a 	bl	80008d0 <RescheduleTimerList>
 8000e7c:	e013      	b.n	8000ea6 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	4911      	ldr	r1, [pc, #68]	; (8000ec8 <HW_TS_Start+0xfc>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	440b      	add	r3, r1
 8000e8c:	3308      	adds	r3, #8
 8000e8e:	6819      	ldr	r1, [r3, #0]
 8000e90:	8a7b      	ldrh	r3, [r7, #18]
 8000e92:	79fa      	ldrb	r2, [r7, #7]
 8000e94:	1ac9      	subs	r1, r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <HW_TS_Start+0xfc>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4403      	add	r3, r0
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HW_TS_Start+0x100>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	22ff      	movs	r2, #255	; 0xff
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 fcec 	bl	800188e <HAL_NVIC_EnableIRQ>
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000ec0:	bf00      	nop
}
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000028 	.word	0x20000028
 8000ecc:	200001cc 	.word	0x200001cc
 8000ed0:	200000b8 	.word	0x200000b8
 8000ed4:	200000b9 	.word	0x200000b9

08000ed8 <LL_RCC_LSE_SetDriveCapability>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee8:	f023 0218 	bic.w	r2, r3, #24
 8000eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 facf 	bl	80014dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f809 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f89f 	bl	8001084 <MX_GPIO_Init>
  MX_RF_Init();
 8000f46:	f000 f86b 	bl	8001020 <MX_RF_Init>
  MX_RTC_Init();
 8000f4a:	f000 f871 	bl	8001030 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8000f4e:	f7ff f963 	bl	8000218 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <main+0x1c>

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0a2      	sub	sp, #136	; 0x88
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f5e:	2248      	movs	r2, #72	; 0x48
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 f8fd 	bl	8006162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2224      	movs	r2, #36	; 0x24
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 f8ed 	bl	8006162 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f88:	f000 fe6a 	bl	8001c60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff ffa3 	bl	8000ed8 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000f92:	2307      	movs	r3, #7
 8000f94:	643b      	str	r3, [r7, #64]	; 0x40
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa6:	2340      	movs	r3, #64	; 0x40
 8000fa8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f9e0 	bl	8002378 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fbe:	f000 f8bd 	bl	800113c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000fc2:	236f      	movs	r3, #111	; 0x6f
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fd51 	bl	8002a8c <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ff0:	f000 f8a4 	bl	800113c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP|RCC_PERIPHCLK_RTC;
 8000ff4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ff8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001000:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001004:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4618      	mov	r0, r3
 800100a:	f002 f893 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001014:	f000 f892 	bl	800113c <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	3788      	adds	r7, #136	; 0x88
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_RTC_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_RTC_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_RTC_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_RTC_Init+0x4c>)
 8001042:	220f      	movs	r2, #15
 8001044:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_RTC_Init+0x4c>)
 8001048:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800104c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_RTC_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_RTC_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_RTC_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_RTC_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_RTC_Init+0x4c>)
 8001068:	f002 f93f 	bl	80032ea <HAL_RTC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f863 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200002f8 	.word	0x200002f8
 8001080:	40002800 	.word	0x40002800

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff ff33 	bl	8000f04 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff30 	bl	8000f04 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	2002      	movs	r0, #2
 80010a6:	f7ff ff2d 	bl	8000f04 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2121      	movs	r1, #33	; 0x21
 80010ae:	4822      	ldr	r0, [pc, #136]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010b0:	f000 fd9a 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f000 fd93 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010c2:	2302      	movs	r3, #2
 80010c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f000 fc1f 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80010da:	2321      	movs	r3, #33	; 0x21
 80010dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4812      	ldr	r0, [pc, #72]	; (8001138 <MX_GPIO_Init+0xb4>)
 80010f0:	f000 fc12 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f000 fc03 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001112:	2340      	movs	r3, #64	; 0x40
 8001114:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001122:	2307      	movs	r3, #7
 8001124:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_GPIO_Init+0xb4>)
 800112c:	f000 fbf4 	bl	8001918 <HAL_GPIO_Init>

}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	48000400 	.word	0x48000400

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800115a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800115e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800117a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4313      	orrs	r3, r2
 8001182:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001190:	68fb      	ldr	r3, [r7, #12]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4013      	ands	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80011d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011d8:	f7ff ffc8 	bl	800116c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	202e      	movs	r0, #46	; 0x2e
 80011e2:	f000 fb3a 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80011e6:	202e      	movs	r0, #46	; 0x2e
 80011e8:	f000 fb51 	bl	800188e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_RTC_MspInit+0x28>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d105      	bne.n	800120e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001202:	f7ff ffa2 	bl	800114a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001206:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800120a:	f7ff ffc8 	bl	800119e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40002800 	.word	0x40002800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 f98e 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800127c:	f000 fccc 	bl	8001c18 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <SystemInit+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <SystemInit+0x98>)
 8001290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001294:	4a21      	ldr	r2, [pc, #132]	; (800131c <SystemInit+0x98>)
 8001296:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800129e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80012ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80012b6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <SystemInit+0x9c>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d4:	f023 0305 	bic.w	r3, r3, #5
 80012d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <SystemInit+0xa0>)
 80012f6:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001306:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	faf6fefb 	.word	0xfaf6fefb
 8001324:	22041000 	.word	0x22041000

08001328 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800132e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	4a47      	ldr	r2, [pc, #284]	; (8001458 <SystemCoreClockUpdate+0x130>)
 800133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001340:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b0c      	cmp	r3, #12
 800134e:	d867      	bhi.n	8001420 <SystemCoreClockUpdate+0xf8>
 8001350:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <SystemCoreClockUpdate+0x30>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	0800138d 	.word	0x0800138d
 800135c:	08001421 	.word	0x08001421
 8001360:	08001421 	.word	0x08001421
 8001364:	08001421 	.word	0x08001421
 8001368:	08001395 	.word	0x08001395
 800136c:	08001421 	.word	0x08001421
 8001370:	08001421 	.word	0x08001421
 8001374:	08001421 	.word	0x08001421
 8001378:	0800139d 	.word	0x0800139d
 800137c:	08001421 	.word	0x08001421
 8001380:	08001421 	.word	0x08001421
 8001384:	08001421 	.word	0x08001421
 8001388:	080013a5 	.word	0x080013a5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800138c:	4a33      	ldr	r2, [pc, #204]	; (800145c <SystemCoreClockUpdate+0x134>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6013      	str	r3, [r2, #0]
      break;
 8001392:	e049      	b.n	8001428 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <SystemCoreClockUpdate+0x134>)
 8001396:	4a32      	ldr	r2, [pc, #200]	; (8001460 <SystemCoreClockUpdate+0x138>)
 8001398:	601a      	str	r2, [r3, #0]
      break;
 800139a:	e045      	b.n	8001428 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <SystemCoreClockUpdate+0x134>)
 800139e:	4a31      	ldr	r2, [pc, #196]	; (8001464 <SystemCoreClockUpdate+0x13c>)
 80013a0:	601a      	str	r2, [r3, #0]
      break;
 80013a2:	e041      	b.n	8001428 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	3301      	adds	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d105      	bne.n	80013d2 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80013c6:	4a26      	ldr	r2, [pc, #152]	; (8001460 <SystemCoreClockUpdate+0x138>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e00d      	b.n	80013ee <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d105      	bne.n	80013e4 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80013d8:	4a22      	ldr	r2, [pc, #136]	; (8001464 <SystemCoreClockUpdate+0x13c>)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e004      	b.n	80013ee <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0f5b      	lsrs	r3, r3, #29
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <SystemCoreClockUpdate+0x134>)
 800141c:	6013      	str	r3, [r2, #0]
      break;
 800141e:	e003      	b.n	8001428 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <SystemCoreClockUpdate+0x134>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	6013      	str	r3, [r2, #0]
      break;
 8001426:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <SystemCoreClockUpdate+0x140>)
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <SystemCoreClockUpdate+0x134>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <SystemCoreClockUpdate+0x134>)
 8001448:	6013      	str	r3, [r2, #0]

}
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	08006350 	.word	0x08006350
 800145c:	20000004 	.word	0x20000004
 8001460:	00f42400 	.word	0x00f42400
 8001464:	01e84800 	.word	0x01e84800
 8001468:	08006310 	.word	0x08006310

0800146c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800146c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001470:	3304      	adds	r3, #4

08001472 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001472:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001474:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001476:	d3f9      	bcc.n	800146c <CopyDataInit>
  bx lr
 8001478:	4770      	bx	lr

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800147a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800147c:	3004      	adds	r0, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800147e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>
  bx lr
 8001482:	4770      	bx	lr

08001484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001486:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001488:	f7ff fefc 	bl	8001284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <LoopForever+0x8>)
 800148e:	490c      	ldr	r1, [pc, #48]	; (80014c0 <LoopForever+0xc>)
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <LoopForever+0x10>)
 8001492:	2300      	movs	r3, #0
 8001494:	f7ff ffed 	bl	8001472 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <LoopForever+0x14>)
 800149a:	490c      	ldr	r1, [pc, #48]	; (80014cc <LoopForever+0x18>)
 800149c:	2300      	movs	r3, #0
 800149e:	f7ff ffee 	bl	800147e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <LoopForever+0x1c>)
 80014a4:	490b      	ldr	r1, [pc, #44]	; (80014d4 <LoopForever+0x20>)
 80014a6:	2300      	movs	r3, #0
 80014a8:	f7ff ffe9 	bl	800147e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014ac:	f004 fe2a 	bl	8006104 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80014b0:	f7ff fd41 	bl	8000f36 <main>

080014b4 <LoopForever>:

LoopForever:
  b LoopForever
 80014b4:	e7fe      	b.n	80014b4 <LoopForever>
 80014b6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80014b8:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 80014bc:	20000004 	.word	0x20000004
 80014c0:	20000028 	.word	0x20000028
 80014c4:	080063d8 	.word	0x080063d8
  INIT_BSS _sbss, _ebss
 80014c8:	200001b0 	.word	0x200001b0
 80014cc:	20000324 	.word	0x20000324
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80014d0:	200301e0 	.word	0x200301e0
 80014d4:	20030a57 	.word	0x20030a57

080014d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_IRQHandler>
	...

080014dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_Init+0x3c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_Init+0x3c>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f000 f9a6 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 f80f 	bl	800151c <HAL_InitTick>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	e001      	b.n	800150e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800150a:	f7ff fe61 	bl	80011d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800150e:	79fb      	ldrb	r3, [r7, #7]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58004000 	.word	0x58004000

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_InitTick+0x6c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d024      	beq.n	800157a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001530:	f001 fc52 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_InitTick+0x6c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	fbb3 f3f1 	udiv	r3, r3, r1
 8001544:	fbb2 f3f3 	udiv	r3, r2, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f9bc 	bl	80018c6 <HAL_SYSTICK_Config>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	d809      	bhi.n	800156e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155a:	2200      	movs	r2, #0
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001562:	f000 f97a 	bl	800185a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_InitTick+0x70>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e007      	b.n	800157e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e004      	b.n	800157e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x20>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x24>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_IncTick+0x24>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2000000c 	.word	0x2000000c
 80015b4:	2000031c 	.word	0x2000031c

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000031c 	.word	0x2000031c

080015d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTickPrio+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db10      	blt.n	80016bc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4909      	ldr	r1, [pc, #36]	; (80016c8 <__NVIC_DisableIRQ+0x40>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	3320      	adds	r3, #32
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80016b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016b8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0c      	blt.n	80016f8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_SetPendingIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	3340      	adds	r3, #64	; 0x40
 80016f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0c      	blt.n	8001734 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_ClearPendingIRQ+0x38>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	3360      	adds	r3, #96	; 0x60
 8001730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fecb 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff fee2 	bl	8001630 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fed5 	bl	800164c <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fee5 	bl	8001688 <__NVIC_DisableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff96 	bl	8001800 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff feed 	bl	80016cc <__NVIC_SetPendingIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fefd 	bl	8001708 <__NVIC_ClearPendingIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001926:	e146      	b.n	8001bb6 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2101      	movs	r1, #1
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8138 	beq.w	8001bb0 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d00b      	beq.n	8001960 <HAL_GPIO_Init+0x48>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001954:	2b11      	cmp	r3, #17
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d130      	bne.n	80019c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001996:	2201      	movs	r2, #1
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 0201 	and.w	r2, r3, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0xea>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d123      	bne.n	8001a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	08da      	lsrs	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3208      	adds	r2, #8
 8001a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	6939      	ldr	r1, [r7, #16]
 8001a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0203 	and.w	r2, r3, #3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8092 	beq.w	8001bb0 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x2bc>)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ab6:	d013      	beq.n	8001ae0 <HAL_GPIO_Init+0x1c8>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <HAL_GPIO_Init+0x2c0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00d      	beq.n	8001adc <HAL_GPIO_Init+0x1c4>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a46      	ldr	r2, [pc, #280]	; (8001bdc <HAL_GPIO_Init+0x2c4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_GPIO_Init+0x1c0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <HAL_GPIO_Init+0x2c8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_GPIO_Init+0x1bc>
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x1ca>
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	e004      	b.n	8001ae2 <HAL_GPIO_Init+0x1ca>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x1ca>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_GPIO_Init+0x1ca>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	f002 0203 	and.w	r2, r2, #3
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	4093      	lsls	r3, r2
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001af2:	4938      	ldr	r1, [pc, #224]	; (8001bd4 <HAL_GPIO_Init+0x2bc>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b26:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b54:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b80:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_GPIO_Init+0x2cc>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f aeb1 	bne.w	8001928 <HAL_GPIO_Init+0x10>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	48000800 	.word	0x48000800
 8001be0:	48001000 	.word	0x48001000
 8001be4:	58000800 	.word	0x58000800

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_HSEM_IRQHandler+0x30>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_HSEM_IRQHandler+0x30>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <HAL_HSEM_IRQHandler+0x30>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <HAL_HSEM_IRQHandler+0x30>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f807 	bl	8001c4c <HAL_HSEM_FreeCallback>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	58001500 	.word	0x58001500

08001c4c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	58000400 	.word	0x58000400

08001c80 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c92:	d101      	bne.n	8001c98 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_RCC_HSE_EnableBypass>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_RCC_HSE_DisableBypass>:
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_RCC_HSE_Enable>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_RCC_HSE_Disable>:
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_RCC_HSE_IsReady>:
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d2e:	d101      	bne.n	8001d34 <LL_RCC_HSE_IsReady+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_RCC_HSE_IsReady+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_RCC_HSI_Enable>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_RCC_HSI_Disable>:
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_RCC_HSI_IsReady>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8e:	d101      	bne.n	8001d94 <LL_RCC_HSI_IsReady+0x18>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <LL_RCC_HSI_IsReady+0x1a>
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_RCC_HSI48_Enable>:
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_RCC_HSI48_Disable>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_HSI48_IsReady>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d101      	bne.n	8001e26 <LL_RCC_HSI48_IsReady+0x18>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <LL_RCC_HSI48_IsReady+0x1a>
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_LSE_Enable>:
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_RCC_LSE_Disable>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_LSE_EnableBypass>:
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_LSE_DisableBypass>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_RCC_LSE_IsReady>:
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d101      	bne.n	8001ed2 <LL_RCC_LSE_IsReady+0x18>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_RCC_LSE_IsReady+0x1a>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_LSI1_Enable>:
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_LSI1_Disable>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_RCC_LSI1_IsReady>:
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d101      	bne.n	8001f3a <LL_RCC_LSI1_IsReady+0x18>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_RCC_LSI1_IsReady+0x1a>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_RCC_LSI2_Enable>:
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_RCC_LSI2_Disable>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_RCC_LSI2_IsReady>:
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d101      	bne.n	8001fa2 <LL_RCC_LSI2_IsReady+0x18>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_RCC_LSI2_IsReady+0x1a>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_RCC_LSI2_SetTrimming>:
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_RCC_MSI_Enable>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_MSI_Disable>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6013      	str	r3, [r2, #0]
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_RCC_MSI_IsReady>:
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d101      	bne.n	800202e <LL_RCC_MSI_IsReady+0x16>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <LL_RCC_MSI_IsReady+0x18>
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_RCC_MSI_SetRange>:
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_RCC_MSI_GetRange>:
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002072:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2bb0      	cmp	r3, #176	; 0xb0
 8002078:	d901      	bls.n	800207e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800207a:	23b0      	movs	r3, #176	; 0xb0
 800207c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800207e:	687b      	ldr	r3, [r7, #4]
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_RCC_MSI_SetCalibTrimming>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_RCC_SetSysClkSource>:
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 0203 	bic.w	r2, r3, #3
 80020c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_RCC_GetSysClkSource>:
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_RCC_SetAHBPrescaler>:
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_C2_RCC_SetAHBPrescaler>:
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800212e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_RCC_SetAHB4Prescaler>:
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002156:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800215a:	f023 020f 	bic.w	r2, r3, #15
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_RCC_SetAPB1Prescaler>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800218a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_RCC_SetAPB2Prescaler>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_RCC_GetAHBPrescaler>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_RCC_GetAHB4Prescaler>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222c:	6013      	str	r3, [r2, #0]
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800224a:	d101      	bne.n	8002250 <LL_RCC_PLL_IsReady+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_RCC_PLL_IsReady+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0303 	and.w	r3, r3, #3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d101      	bne.n	80022d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022f6:	d101      	bne.n	80022fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231c:	d101      	bne.n	8002322 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002340:	d101      	bne.n	8002346 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002364:	d101      	bne.n	800236a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b08d      	sub	sp, #52	; 0x34
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e37b      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 808f 	beq.w	80024b6 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002398:	f7ff fea1 	bl	80020de <LL_RCC_GetSysClkSource>
 800239c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239e:	f7ff ff82 	bl	80022a6 <LL_RCC_PLL_GetMainSource>
 80023a2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x3e>
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2b0c      	cmp	r3, #12
 80023ae:	d149      	bne.n	8002444 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d146      	bne.n	8002444 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b6:	f7ff fe2f 	bl	8002018 <LL_RCC_MSI_IsReady>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_OscConfig+0x54>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e35a      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80023d0:	f7ff fe47 	bl	8002062 <LL_RCC_MSI_GetRange>
 80023d4:	4603      	mov	r3, r0
 80023d6:	429c      	cmp	r4, r3
 80023d8:	d914      	bls.n	8002404 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fd0e 	bl	8002e00 <RCC_SetFlashLatencyFromMSIRange>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e349      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fe21 	bl	800203a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fe45 	bl	800208c <LL_RCC_MSI_SetCalibTrimming>
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fe16 	bl	800203a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fe3a 	bl	800208c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fcef 	bl	8002e00 <RCC_SetFlashLatencyFromMSIRange>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e32a      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800242c:	f7fe ff7c 	bl	8001328 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002430:	4bb4      	ldr	r3, [pc, #720]	; (8002704 <HAL_RCC_OscConfig+0x38c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f871 	bl	800151c <HAL_InitTick>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d039      	beq.n	80024b4 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e31e      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01e      	beq.n	800248a <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800244c:	f7ff fdc6 	bl	8001fdc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002450:	f7ff f8b2 	bl	80015b8 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002458:	f7ff f8ae 	bl	80015b8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e30b      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800246a:	f7ff fdd5 	bl	8002018 <LL_RCC_MSI_IsReady>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f1      	beq.n	8002458 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fdde 	bl	800203a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fe02 	bl	800208c <LL_RCC_MSI_SetCalibTrimming>
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800248a:	f7ff fdb6 	bl	8001ffa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800248e:	f7ff f893 	bl	80015b8 <HAL_GetTick>
 8002492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002496:	f7ff f88f 	bl	80015b8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e2ec      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80024a8:	f7ff fdb6 	bl	8002018 <LL_RCC_MSI_IsReady>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f1      	bne.n	8002496 <HAL_RCC_OscConfig+0x11e>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d05a      	beq.n	8002578 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c2:	f7ff fe0c 	bl	80020de <LL_RCC_GetSysClkSource>
 80024c6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c8:	f7ff feed 	bl	80022a6 <LL_RCC_PLL_GetMainSource>
 80024cc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_OscConfig+0x168>
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d10d      	bne.n	80024f6 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d10a      	bne.n	80024f6 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	f7ff fc1c 	bl	8001d1c <LL_RCC_HSE_IsReady>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d045      	beq.n	8002576 <HAL_RCC_OscConfig+0x1fe>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d141      	bne.n	8002576 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e2c5      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_OscConfig+0x18e>
 8002500:	f7ff fbee 	bl	8001ce0 <LL_RCC_HSE_Enable>
 8002504:	e00d      	b.n	8002522 <HAL_RCC_OscConfig+0x1aa>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250e:	d104      	bne.n	800251a <HAL_RCC_OscConfig+0x1a2>
 8002510:	f7ff fbc8 	bl	8001ca4 <LL_RCC_HSE_EnableBypass>
 8002514:	f7ff fbe4 	bl	8001ce0 <LL_RCC_HSE_Enable>
 8002518:	e003      	b.n	8002522 <HAL_RCC_OscConfig+0x1aa>
 800251a:	f7ff fbf0 	bl	8001cfe <LL_RCC_HSE_Disable>
 800251e:	f7ff fbd0 	bl	8001cc2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7ff f845 	bl	80015b8 <HAL_GetTick>
 800252e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002532:	f7ff f841 	bl	80015b8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b64      	cmp	r3, #100	; 0x64
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e29e      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002544:	f7ff fbea 	bl	8001d1c <LL_RCC_HSE_IsReady>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f1      	beq.n	8002532 <HAL_RCC_OscConfig+0x1ba>
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7ff f832 	bl	80015b8 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff f82e 	bl	80015b8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e28b      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800256a:	f7ff fbd7 	bl	8001d1c <LL_RCC_HSE_IsReady>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f1      	bne.n	8002558 <HAL_RCC_OscConfig+0x1e0>
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002576:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d051      	beq.n	8002628 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002584:	f7ff fdab 	bl	80020de <LL_RCC_GetSysClkSource>
 8002588:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800258a:	f7ff fe8c 	bl	80022a6 <LL_RCC_PLL_GetMainSource>
 800258e:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x22a>
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d113      	bne.n	80025c4 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d110      	bne.n	80025c4 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a2:	f7ff fbeb 	bl	8001d7c <LL_RCC_HSI_IsReady>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x240>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e264      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fbef 	bl	8001da0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c2:	e031      	b.n	8002628 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d019      	beq.n	8002600 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025cc:	f7ff fbb8 	bl	8001d40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fff2 	bl	80015b8 <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe ffee 	bl	80015b8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e24b      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80025ea:	f7ff fbc7 	bl	8001d7c <LL_RCC_HSI_IsReady>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f1      	beq.n	80025d8 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fbd1 	bl	8001da0 <LL_RCC_HSI_SetCalibTrimming>
 80025fe:	e013      	b.n	8002628 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002600:	f7ff fbad 	bl	8001d5e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe ffd8 	bl	80015b8 <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260c:	f7fe ffd4 	bl	80015b8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e231      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800261e:	f7ff fbad 	bl	8001d7c <LL_RCC_HSI_IsReady>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f1      	bne.n	800260c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80a2 	beq.w	8002786 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d075      	beq.n	8002736 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d046      	beq.n	80026e4 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002656:	f7ff fc64 	bl	8001f22 <LL_RCC_LSI1_IsReady>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d113      	bne.n	8002688 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002660:	f7ff fc3d 	bl	8001ede <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002664:	f7fe ffa8 	bl	80015b8 <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800266c:	f7fe ffa4 	bl	80015b8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e201      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800267e:	f7ff fc50 	bl	8001f22 <LL_RCC_LSI1_IsReady>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f1      	beq.n	800266c <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002688:	f7ff fc5d 	bl	8001f46 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe ff94 	bl	80015b8 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002694:	f7fe ff90 	bl	80015b8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1ed      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80026a6:	f7ff fc70 	bl	8001f8a <LL_RCC_LSI2_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f1      	beq.n	8002694 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fc7a 	bl	8001fae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80026ba:	f7ff fc21 	bl	8001f00 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe ff7b 	bl	80015b8 <HAL_GetTick>
 80026c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026c6:	f7fe ff77 	bl	80015b8 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1d4      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80026d8:	f7ff fc23 	bl	8001f22 <LL_RCC_LSI1_IsReady>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f1      	bne.n	80026c6 <HAL_RCC_OscConfig+0x34e>
 80026e2:	e050      	b.n	8002786 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80026e4:	f7ff fbfb 	bl	8001ede <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe ff66 	bl	80015b8 <HAL_GetTick>
 80026ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026f0:	f7fe ff62 	bl	80015b8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d904      	bls.n	8002708 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1bf      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002708:	f7ff fc0b 	bl	8001f22 <LL_RCC_LSI1_IsReady>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ee      	beq.n	80026f0 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002712:	f7ff fc29 	bl	8001f68 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002718:	f7fe ff4e 	bl	80015b8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b03      	cmp	r3, #3
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1ab      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800272a:	f7ff fc2e 	bl	8001f8a <LL_RCC_LSI2_IsReady>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f1      	bne.n	8002718 <HAL_RCC_OscConfig+0x3a0>
 8002734:	e027      	b.n	8002786 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002736:	f7ff fc17 	bl	8001f68 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7fe ff3d 	bl	80015b8 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002742:	f7fe ff39 	bl	80015b8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b03      	cmp	r3, #3
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e196      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002754:	f7ff fc19 	bl	8001f8a <LL_RCC_LSI2_IsReady>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f1      	bne.n	8002742 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800275e:	f7ff fbcf 	bl	8001f00 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe ff29 	bl	80015b8 <HAL_GetTick>
 8002766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800276a:	f7fe ff25 	bl	80015b8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e182      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800277c:	f7ff fbd1 	bl	8001f22 <LL_RCC_LSI1_IsReady>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f1      	bne.n	800276a <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d05b      	beq.n	800284a <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002792:	4bb4      	ldr	r3, [pc, #720]	; (8002a64 <HAL_RCC_OscConfig+0x6ec>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d114      	bne.n	80027c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800279e:	f7ff fa5f 	bl	8001c60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a2:	f7fe ff09 	bl	80015b8 <HAL_GetTick>
 80027a6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027aa:	f7fe ff05 	bl	80015b8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e162      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027bc:	4ba9      	ldr	r3, [pc, #676]	; (8002a64 <HAL_RCC_OscConfig+0x6ec>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d102      	bne.n	80027d6 <HAL_RCC_OscConfig+0x45e>
 80027d0:	f7ff fb2f 	bl	8001e32 <LL_RCC_LSE_Enable>
 80027d4:	e00c      	b.n	80027f0 <HAL_RCC_OscConfig+0x478>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d104      	bne.n	80027e8 <HAL_RCC_OscConfig+0x470>
 80027de:	f7ff fb4a 	bl	8001e76 <LL_RCC_LSE_EnableBypass>
 80027e2:	f7ff fb26 	bl	8001e32 <LL_RCC_LSE_Enable>
 80027e6:	e003      	b.n	80027f0 <HAL_RCC_OscConfig+0x478>
 80027e8:	f7ff fb34 	bl	8001e54 <LL_RCC_LSE_Disable>
 80027ec:	f7ff fb54 	bl	8001e98 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d014      	beq.n	8002822 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fede 	bl	80015b8 <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fe feda 	bl	80015b8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e135      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002816:	f7ff fb50 	bl	8001eba <LL_RCC_LSE_IsReady>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <HAL_RCC_OscConfig+0x488>
 8002820:	e013      	b.n	800284a <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe fec9 	bl	80015b8 <HAL_GetTick>
 8002826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe fec5 	bl	80015b8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e120      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002840:	f7ff fb3b 	bl	8001eba <LL_RCC_LSE_IsReady>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ef      	bne.n	800282a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d02c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d014      	beq.n	8002888 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800285e:	f7ff fab4 	bl	8001dca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe fea9 	bl	80015b8 <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286a:	f7fe fea5 	bl	80015b8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e102      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800287c:	f7ff fac7 	bl	8001e0e <LL_RCC_HSI48_IsReady>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f1      	beq.n	800286a <HAL_RCC_OscConfig+0x4f2>
 8002886:	e013      	b.n	80028b0 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002888:	f7ff fab0 	bl	8001dec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe fe94 	bl	80015b8 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002894:	f7fe fe90 	bl	80015b8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0ed      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80028a6:	f7ff fab2 	bl	8001e0e <LL_RCC_HSI48_IsReady>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f1      	bne.n	8002894 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80e3 	beq.w	8002a80 <HAL_RCC_OscConfig+0x708>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	f7ff fc10 	bl	80020de <LL_RCC_GetSysClkSource>
 80028be:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f040 80a6 	bne.w	8002a1e <HAL_RCC_OscConfig+0x6a6>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0203 	and.w	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	429a      	cmp	r2, r3
 80028de:	d123      	bne.n	8002928 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d114      	bne.n	8002928 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d10d      	bne.n	8002928 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d106      	bne.n	8002928 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d054      	beq.n	80029d2 <HAL_RCC_OscConfig+0x65a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d04f      	beq.n	80029ce <HAL_RCC_OscConfig+0x656>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800292e:	f7ff fc74 	bl	800221a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002932:	f7fe fe41 	bl	80015b8 <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x5d4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fe3d 	bl	80015b8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x5d4>
              {
                return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e09a      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ef      	bne.n	800293a <HAL_RCC_OscConfig+0x5c2>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x6f0>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800296c:	4311      	orrs	r1, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002972:	0212      	lsls	r2, r2, #8
 8002974:	4311      	orrs	r1, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002980:	4311      	orrs	r1, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002986:	430a      	orrs	r2, r1
 8002988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002990:	f7ff fc34 	bl	80021fc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a4:	f7fe fe08 	bl	80015b8 <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x646>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe fe04 	bl	80015b8 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x646>
              {
                return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e061      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ef      	beq.n	80029ac <HAL_RCC_OscConfig+0x634>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029cc:	e058      	b.n	8002a80 <HAL_RCC_OscConfig+0x708>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e057      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d14f      	bne.n	8002a80 <HAL_RCC_OscConfig+0x708>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029e0:	f7ff fc0c 	bl	80021fc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f4:	f7fe fde0 	bl	80015b8 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x696>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fddc 	bl	80015b8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x696>
            {
              return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e039      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ef      	beq.n	80029fc <HAL_RCC_OscConfig+0x684>
 8002a1c:	e030      	b.n	8002a80 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d02b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x704>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	f7ff fbf9 	bl	800221a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a46:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fdb6 	bl	80015b8 <HAL_GetTick>
 8002a4c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4e:	e00d      	b.n	8002a6c <HAL_RCC_OscConfig+0x6f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fdb2 	bl	80015b8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d906      	bls.n	8002a6c <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e00f      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
 8002a62:	bf00      	nop
 8002a64:	58000400 	.word	0x58000400
 8002a68:	11c1808c 	.word	0x11c1808c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ea      	bne.n	8002a50 <HAL_RCC_OscConfig+0x6d8>
 8002a7a:	e001      	b.n	8002a80 <HAL_RCC_OscConfig+0x708>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x70a>
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3734      	adds	r7, #52	; 0x34
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	bf00      	nop

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e12a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b97      	ldr	r3, [pc, #604]	; (8002d00 <HAL_RCC_ClockConfig+0x274>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d91b      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b94      	ldr	r3, [pc, #592]	; (8002d00 <HAL_RCC_ClockConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0207 	bic.w	r2, r3, #7
 8002ab6:	4992      	ldr	r1, [pc, #584]	; (8002d00 <HAL_RCC_ClockConfig+0x274>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abe:	f7fe fd7b 	bl	80015b8 <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ac6:	f7fe fd77 	bl	80015b8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e10e      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad8:	4b89      	ldr	r3, [pc, #548]	; (8002d00 <HAL_RCC_ClockConfig+0x274>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d1ef      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fafd 	bl	80020f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fd5c 	bl	80015b8 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b04:	f7fe fd58 	bl	80015b8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0ef      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b16:	f7ff fbd2 	bl	80022be <LL_RCC_IsActiveFlag_HPRE>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f1      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d016      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff faf4 	bl	800211e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b36:	f7fe fd3f 	bl	80015b8 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b3e:	f7fe fd3b 	bl	80015b8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0d2      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002b50:	f7ff fbc7 	bl	80022e2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f1      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff faed 	bl	800214a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b70:	f7fe fd22 	bl	80015b8 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b78:	f7fe fd1e 	bl	80015b8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0b5      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002b8a:	f7ff fbbd 	bl	8002308 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f1      	beq.n	8002b78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d016      	beq.n	8002bce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fae7 	bl	8002178 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002baa:	f7fe fd05 	bl	80015b8 <HAL_GetTick>
 8002bae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bb2:	f7fe fd01 	bl	80015b8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e098      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002bc4:	f7ff fbb3 	bl	800232e <LL_RCC_IsActiveFlag_PPRE1>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f1      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d017      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fadd 	bl	80021a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002be6:	f7fe fce7 	bl	80015b8 <HAL_GetTick>
 8002bea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bee:	f7fe fce3 	bl	80015b8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e07a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c00:	f7ff fba7 	bl	8002352 <LL_RCC_IsActiveFlag_PPRE2>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f1      	beq.n	8002bee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d043      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002c1e:	f7ff f87d 	bl	8001d1c <LL_RCC_HSE_IsReady>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11e      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e064      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002c34:	f7ff fb00 	bl	8002238 <LL_RCC_PLL_IsReady>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d113      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e059      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002c4a:	f7ff f9e5 	bl	8002018 <LL_RCC_MSI_IsReady>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d108      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e04e      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002c58:	f7ff f890 	bl	8001d7c <LL_RCC_HSI_IsReady>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e047      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fa23 	bl	80020b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c70:	f7fe fca2 	bl	80015b8 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe fc9e 	bl	80015b8 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e033      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	f7ff fa26 	bl	80020de <LL_RCC_GetSysClkSource>
 8002c92:	4602      	mov	r2, r0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d1ec      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_RCC_ClockConfig+0x274>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d21b      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_RCC_ClockConfig+0x274>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 0207 	bic.w	r2, r3, #7
 8002cb4:	4912      	ldr	r1, [pc, #72]	; (8002d00 <HAL_RCC_ClockConfig+0x274>)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fc7c 	bl	80015b8 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cc4:	f7fe fc78 	bl	80015b8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e00f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_ClockConfig+0x274>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1ef      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002ce4:	f7fe fb20 	bl	8001328 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002ce8:	f7fe fc72 	bl	80015d0 <HAL_GetTickPrio>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fc14 	bl	800151c <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	58004000 	.word	0x58004000

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d0a:	f7ff f9e8 	bl	80020de <LL_RCC_GetSysClkSource>
 8002d0e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d16:	f7ff f9a4 	bl	8002062 <LL_RCC_MSI_GetRange>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e04a      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d102      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d32:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e044      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d10a      	bne.n	8002d54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d3e:	f7fe ff9f 	bl	8001c80 <LL_RCC_HSE_IsEnabledDiv2>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e039      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	e036      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002d54:	f7ff faa7 	bl	80022a6 <LL_RCC_PLL_GetMainSource>
 8002d58:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d002      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x62>
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d003      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x68>
 8002d64:	e00d      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d68:	60bb      	str	r3, [r7, #8]
        break;
 8002d6a:	e015      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d6c:	f7fe ff88 	bl	8001c80 <LL_RCC_HSE_IsEnabledDiv2>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d78:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002d7a:	e00d      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002d7c:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d7e:	60bb      	str	r3, [r7, #8]
        break;
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d82:	f7ff f96e 	bl	8002062 <LL_RCC_MSI_GetRange>
 8002d86:	4603      	mov	r3, r0
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d94:	60bb      	str	r3, [r7, #8]
        break;
 8002d96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002d98:	f7ff fa60 	bl	800225c <LL_RCC_PLL_GetN>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	fb03 f402 	mul.w	r4, r3, r2
 8002da4:	f7ff fa73 	bl	800228e <LL_RCC_PLL_GetDivider>
 8002da8:	4603      	mov	r3, r0
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	3301      	adds	r3, #1
 8002dae:	fbb4 f4f3 	udiv	r4, r4, r3
 8002db2:	f7ff fa60 	bl	8002276 <LL_RCC_PLL_GetR>
 8002db6:	4603      	mov	r3, r0
 8002db8:	0f5b      	lsrs	r3, r3, #29
 8002dba:	3301      	adds	r3, #1
 8002dbc:	fbb4 f3f3 	udiv	r3, r4, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}
 8002dcc:	08006350 	.word	0x08006350
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	01e84800 	.word	0x01e84800

08002dd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b598      	push	{r3, r4, r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ddc:	f7ff ff92 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002de0:	4604      	mov	r4, r0
 8002de2:	f7ff f9f1 	bl	80021c8 <LL_RCC_GetAHBPrescaler>
 8002de6:	4603      	mov	r3, r0
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <HAL_RCC_GetHCLKFreq+0x24>)
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd98      	pop	{r3, r4, r7, pc}
 8002dfc:	08006310 	.word	0x08006310

08002e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2bb0      	cmp	r3, #176	; 0xb0
 8002e0c:	d903      	bls.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e007      	b.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002e26:	f7ff f9db 	bl	80021e0 <LL_RCC_GetAHB4Prescaler>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	0c9b      	lsrs	r3, r3, #18
 8002e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f80c 	bl	8002e6c <RCC_SetFlashLatency>
 8002e54:	4603      	mov	r3, r0
#endif
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	08006350 	.word	0x08006350
 8002e64:	08006310 	.word	0x08006310
 8002e68:	431bde83 	.word	0x431bde83

08002e6c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b08f      	sub	sp, #60	; 0x3c
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e76:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <RCC_SetFlashLatency+0xa0>)
 8002e78:	f107 041c 	add.w	r4, r7, #28
 8002e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <RCC_SetFlashLatency+0xa4>)
 8002e84:	f107 040c 	add.w	r4, r7, #12
 8002e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e8e:	2300      	movs	r3, #0
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
 8002e96:	e015      	b.n	8002ec4 <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d808      	bhi.n	8002ebe <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8002ebc:	e005      	b.n	8002eca <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d9e6      	bls.n	8002e98 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <RCC_SetFlashLatency+0xa8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 0207 	bic.w	r2, r3, #7
 8002ed2:	4910      	ldr	r1, [pc, #64]	; (8002f14 <RCC_SetFlashLatency+0xa8>)
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002eda:	f7fe fb6d 	bl	80015b8 <HAL_GetTick>
 8002ede:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ee0:	e008      	b.n	8002ef4 <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ee2:	f7fe fb69 	bl	80015b8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e007      	b.n	8002f04 <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <RCC_SetFlashLatency+0xa8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d1ef      	bne.n	8002ee2 <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	373c      	adds	r7, #60	; 0x3c
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	080061a8 	.word	0x080061a8
 8002f10:	080061b8 	.word	0x080061b8
 8002f14:	58004000 	.word	0x58004000

08002f18 <LL_RCC_LSE_IsEnabled>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <LL_RCC_LSE_IsEnabled+0x18>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <LL_RCC_LSE_IsEnabled+0x1a>
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_RCC_LSE_IsReady>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d101      	bne.n	8002f54 <LL_RCC_LSE_IsReady+0x18>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <LL_RCC_LSE_IsReady+0x1a>
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_SetRFWKPClockSource>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_RCC_SetUSARTClockSource>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f023 0203 	bic.w	r2, r3, #3
 8002fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_RCC_SetI2CClockSource>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_RCC_SetLPTIMClockSource>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	041b      	lsls	r3, r3, #16
 8003010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_RCC_SetRNGClockSource>:
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800303a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_RCC_SetCLK48ClockSource>:
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800305a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_RCC_SetADCClockSource>:
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_RCC_SetRTCClockSource>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_RCC_GetRTCClockSource>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80030da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_RCC_ForceBackupDomainReset>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800313c:	2300      	movs	r3, #0
 800313e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003140:	2300      	movs	r3, #0
 8003142:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	2b00      	cmp	r3, #0
 800314e:	d046      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003150:	f7ff ffc1 	bl	80030d6 <LL_RCC_GetRTCClockSource>
 8003154:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	d03c      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003160:	f7fe fd7e 	bl	8001c60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d105      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff9b 	bl	80030aa <LL_RCC_SetRTCClockSource>
 8003174:	e02e      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003180:	f7ff ffb6 	bl	80030f0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003184:	f7ff ffc5 	bl	8003112 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80031a0:	f7ff feba 	bl	8002f18 <LL_RCC_LSE_IsEnabled>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d114      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031aa:	f7fe fa05 	bl	80015b8 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80031b0:	e00b      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fa01 	bl	80015b8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d902      	bls.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	77fb      	strb	r3, [r7, #31]
              break;
 80031c8:	e004      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80031ca:	f7ff feb7 	bl	8002f3c <LL_RCC_LSE_IsReady>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80031d4:	7ffb      	ldrb	r3, [r7, #31]
 80031d6:	77bb      	strb	r3, [r7, #30]
 80031d8:	e001      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031da:	7ffb      	ldrb	r3, [r7, #31]
 80031dc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d004      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fecc 	bl	8002f8c <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fef4 	bl	8002ff2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fee9 	bl	8002ff2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fec1 	bl	8002fb8 <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02b      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d008      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003254:	d003      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fedf 	bl	8003026 <LL_RCC_SetRNGClockSource>
 8003268:	e00a      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	2000      	movs	r0, #0
 8003276:	f7ff fed6 	bl	8003026 <LL_RCC_SetRNGClockSource>
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7ff fee9 	bl	8003052 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003288:	d107      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003298:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d011      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fee7 	bl	800307e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b8:	d107      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fe40 	bl	8002f60 <LL_RCC_SetRFWKPClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 80032e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e090      	b.n	800341e <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fd ff6d 	bl	80011f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	22ca      	movs	r2, #202	; 0xca
 8003324:	625a      	str	r2, [r3, #36]	; 0x24
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2253      	movs	r2, #83	; 0x53
 800332c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f89f 	bl	8003472 <RTC_EnterInitMode>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	22ff      	movs	r2, #255	; 0xff
 8003340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2204      	movs	r2, #4
 8003346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e067      	b.n	800341e <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800335c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003360:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68d2      	ldr	r2, [r2, #12]
 8003388:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6919      	ldr	r1, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	041a      	lsls	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ac:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0203 	bic.w	r2, r2, #3
 80033bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d113      	bne.n	800340c <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f81e 	bl	8003426 <HAL_RTC_WaitForSynchro>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	22ff      	movs	r2, #255	; 0xff
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2204      	movs	r2, #4
 80033fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e008      	b.n	800341e <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	22ff      	movs	r2, #255	; 0xff
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800343c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800343e:	f7fe f8bb 	bl	80015b8 <HAL_GetTick>
 8003442:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003444:	e009      	b.n	800345a <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003446:	f7fe f8b7 	bl	80015b8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003454:	d901      	bls.n	800345a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e007      	b.n	800346a <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ee      	beq.n	8003446 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d119      	bne.n	80034bc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003490:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003492:	f7fe f891 	bl	80015b8 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003498:	e009      	b.n	80034ae <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800349a:	f7fe f88d 	bl	80015b8 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a8:	d901      	bls.n	80034ae <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e007      	b.n	80034be <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ee      	beq.n	800349a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b088      	sub	sp, #32
 80034ca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	2218      	movs	r2, #24
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 ff45 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 80034de:	233f      	movs	r3, #63	; 0x3f
 80034e0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80034e2:	2381      	movs	r3, #129	; 0x81
 80034e4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80034e6:	1dfb      	adds	r3, r7, #7
 80034e8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80034ee:	f107 0308 	add.w	r3, r7, #8
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 f9ef 	bl	80048d8 <hci_send_req>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da01      	bge.n	8003504 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003500:	23ff      	movs	r3, #255	; 0xff
 8003502:	e000      	b.n	8003506 <aci_gap_set_non_discoverable+0x40>
  return status;
 8003504:	79fb      	ldrb	r3, [r7, #7]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800350e:	b5b0      	push	{r4, r5, r7, lr}
 8003510:	b0ce      	sub	sp, #312	; 0x138
 8003512:	af00      	add	r7, sp, #0
 8003514:	4605      	mov	r5, r0
 8003516:	460c      	mov	r4, r1
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	1dfb      	adds	r3, r7, #7
 800351e:	462a      	mov	r2, r5
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	4622      	mov	r2, r4
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	1cbb      	adds	r3, r7, #2
 800352a:	4602      	mov	r2, r0
 800352c:	801a      	strh	r2, [r3, #0]
 800352e:	1dbb      	adds	r3, r7, #6
 8003530:	460a      	mov	r2, r1
 8003532:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8003534:	f107 0310 	add.w	r3, r7, #16
 8003538:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800353c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003540:	3308      	adds	r3, #8
 8003542:	f107 0210 	add.w	r2, r7, #16
 8003546:	4413      	add	r3, r2
 8003548:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800354c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003550:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003554:	4413      	add	r3, r2
 8003556:	3309      	adds	r3, #9
 8003558:	f107 0210 	add.w	r2, r7, #16
 800355c:	4413      	add	r3, r2
 800355e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003562:	f107 030f 	add.w	r3, r7, #15
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003570:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003574:	1dfa      	adds	r2, r7, #7
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800357a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800357e:	3301      	adds	r3, #1
 8003580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8003584:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003588:	1d3a      	adds	r2, r7, #4
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003590:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003594:	3302      	adds	r3, #2
 8003596:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800359a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800359e:	1cba      	adds	r2, r7, #2
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80035a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035aa:	3302      	adds	r3, #2
 80035ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80035b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035b4:	1dba      	adds	r2, r7, #6
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80035ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035be:	3301      	adds	r3, #1
 80035c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80035c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035c8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80035cc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80035ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035d2:	3301      	adds	r3, #1
 80035d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80035d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035dc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80035e0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80035e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035e6:	3301      	adds	r3, #1
 80035e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80035ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035f0:	3308      	adds	r3, #8
 80035f2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80035f6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fea4 	bl	8004348 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8003600:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003604:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003608:	4413      	add	r3, r2
 800360a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800360e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003612:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003616:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003618:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800361c:	3301      	adds	r3, #1
 800361e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8003622:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003626:	3301      	adds	r3, #1
 8003628:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800362c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fe89 	bl	8004348 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8003636:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800363a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800363e:	4413      	add	r3, r2
 8003640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8003644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003648:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800364c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800364e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003652:	3302      	adds	r3, #2
 8003654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8003658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800365c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003660:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003666:	3302      	adds	r3, #2
 8003668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800366c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003670:	2218      	movs	r2, #24
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fe77 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 800367a:	233f      	movs	r3, #63	; 0x3f
 800367c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003680:	2383      	movs	r3, #131	; 0x83
 8003682:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003686:	f107 0310 	add.w	r3, r7, #16
 800368a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800368e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003692:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003696:	f107 030f 	add.w	r3, r7, #15
 800369a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800369e:	2301      	movs	r3, #1
 80036a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80036a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 f914 	bl	80048d8 <hci_send_req>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da01      	bge.n	80036ba <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 80036b6:	23ff      	movs	r3, #255	; 0xff
 80036b8:	e002      	b.n	80036c0 <aci_gap_set_discoverable+0x1b2>
  return status;
 80036ba:	f107 030f 	add.w	r3, r7, #15
 80036be:	781b      	ldrb	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bdb0      	pop	{r4, r5, r7, pc}

080036ca <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b0cc      	sub	sp, #304	; 0x130
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4602      	mov	r2, r0
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80036d6:	f107 0310 	add.w	r3, r7, #16
 80036da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80036de:	f107 030f 	add.w	r3, r7, #15
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80036ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036f0:	1dfa      	adds	r2, r7, #7
 80036f2:	7812      	ldrb	r2, [r2, #0]
 80036f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80036f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036fa:	3301      	adds	r3, #1
 80036fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003700:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003704:	2218      	movs	r2, #24
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fe2d 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 800370e:	233f      	movs	r3, #63	; 0x3f
 8003710:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8003714:	2385      	movs	r3, #133	; 0x85
 8003716:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800371a:	f107 0310 	add.w	r3, r7, #16
 800371e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003722:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003726:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800372a:	f107 030f 	add.w	r3, r7, #15
 800372e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003738:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f001 f8ca 	bl	80048d8 <hci_send_req>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	da01      	bge.n	800374e <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800374a:	23ff      	movs	r3, #255	; 0xff
 800374c:	e002      	b.n	8003754 <aci_gap_set_io_capability+0x8a>
  return status;
 800374e:	f107 030f 	add.w	r3, r7, #15
 8003752:	781b      	ldrb	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800375e:	b5b0      	push	{r4, r5, r7, lr}
 8003760:	b0cc      	sub	sp, #304	; 0x130
 8003762:	af00      	add	r7, sp, #0
 8003764:	4605      	mov	r5, r0
 8003766:	460c      	mov	r4, r1
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	462a      	mov	r2, r5
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	1dbb      	adds	r3, r7, #6
 8003774:	4622      	mov	r2, r4
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	1d7b      	adds	r3, r7, #5
 800377a:	4602      	mov	r2, r0
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	460a      	mov	r2, r1
 8003782:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800378c:	f107 030f 	add.w	r3, r7, #15
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800379a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800379e:	1dfa      	adds	r2, r7, #7
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80037a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037a8:	3301      	adds	r3, #1
 80037aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80037ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037b2:	1dba      	adds	r2, r7, #6
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80037b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037bc:	3301      	adds	r3, #1
 80037be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80037c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037c6:	1d7a      	adds	r2, r7, #5
 80037c8:	7812      	ldrb	r2, [r2, #0]
 80037ca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80037cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037d0:	3301      	adds	r3, #1
 80037d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80037d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037da:	1d3a      	adds	r2, r7, #4
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80037e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037e4:	3301      	adds	r3, #1
 80037e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80037ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037ee:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80037f2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80037f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80037fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003802:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8003806:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800380c:	3301      	adds	r3, #1
 800380e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8003812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003816:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800381a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800381c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003820:	3301      	adds	r3, #1
 8003822:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8003826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800382a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800382e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8003832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003836:	3304      	adds	r3, #4
 8003838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800383c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003840:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8003844:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8003846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800384a:	3301      	adds	r3, #1
 800384c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003850:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003854:	2218      	movs	r2, #24
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fd85 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 800385e:	233f      	movs	r3, #63	; 0x3f
 8003860:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8003864:	2386      	movs	r3, #134	; 0x86
 8003866:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003876:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800387a:	f107 030f 	add.w	r3, r7, #15
 800387e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003888:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f822 	bl	80048d8 <hci_send_req>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	da01      	bge.n	800389e <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800389a:	23ff      	movs	r3, #255	; 0xff
 800389c:	e002      	b.n	80038a4 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800389e:	f107 030f 	add.w	r3, r7, #15
 80038a2:	781b      	ldrb	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bdb0      	pop	{r4, r5, r7, pc}

080038ae <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80038ae:	b590      	push	{r4, r7, lr}
 80038b0:	b0cd      	sub	sp, #308	; 0x134
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4604      	mov	r4, r0
 80038b6:	4608      	mov	r0, r1
 80038b8:	4611      	mov	r1, r2
 80038ba:	463a      	mov	r2, r7
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	4622      	mov	r2, r4
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	4602      	mov	r2, r0
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	1d7b      	adds	r3, r7, #5
 80038cc:	460a      	mov	r2, r1
 80038ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80038d8:	f107 0308 	add.w	r3, r7, #8
 80038dc:	2207      	movs	r2, #7
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fd41 	bl	8004368 <Osal_MemSet>
  int index_input = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80038ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038f0:	1dfa      	adds	r2, r7, #7
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80038f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038fa:	3301      	adds	r3, #1
 80038fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8003900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003904:	1dba      	adds	r2, r7, #6
 8003906:	7812      	ldrb	r2, [r2, #0]
 8003908:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800390a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800390e:	3301      	adds	r3, #1
 8003910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8003914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003918:	1d7a      	adds	r2, r7, #5
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800391e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003922:	3301      	adds	r3, #1
 8003924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003928:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800392c:	2218      	movs	r2, #24
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fd19 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003936:	233f      	movs	r3, #63	; 0x3f
 8003938:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800393c:	238a      	movs	r3, #138	; 0x8a
 800393e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003942:	f107 0310 	add.w	r3, r7, #16
 8003946:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800394a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800394e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800395a:	2307      	movs	r3, #7
 800395c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f000 ffb6 	bl	80048d8 <hci_send_req>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	da01      	bge.n	8003976 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8003972:	23ff      	movs	r3, #255	; 0xff
 8003974:	e021      	b.n	80039ba <aci_gap_init+0x10c>
  if ( resp.Status )
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <aci_gap_init+0xda>
    return resp.Status;
 8003980:	f107 0308 	add.w	r3, r7, #8
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	e018      	b.n	80039ba <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8003988:	f107 0308 	add.w	r3, r7, #8
 800398c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003990:	b29a      	uxth	r2, r3
 8003992:	463b      	mov	r3, r7
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80039a6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80039b6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd90      	pop	{r4, r7, pc}

080039c4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b0cc      	sub	sp, #304	; 0x130
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4602      	mov	r2, r0
 80039cc:	463b      	mov	r3, r7
 80039ce:	6019      	str	r1, [r3, #0]
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80039d4:	f107 0310 	add.w	r3, r7, #16
 80039d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80039dc:	f107 030f 	add.w	r3, r7, #15
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80039ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ee:	1dfa      	adds	r2, r7, #7
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80039f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039f8:	3301      	adds	r3, #1
 80039fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80039fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a02:	1c58      	adds	r0, r3, #1
 8003a04:	1dfb      	adds	r3, r7, #7
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	463b      	mov	r3, r7
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	f000 fc9c 	bl	8004348 <Osal_MemCpy>
  index_input += AdvDataLen;
 8003a10:	1dfb      	adds	r3, r7, #7
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003a18:	4413      	add	r3, r2
 8003a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003a1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a22:	2218      	movs	r2, #24
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fc9e 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003a2c:	233f      	movs	r3, #63	; 0x3f
 8003a2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8003a32:	238e      	movs	r3, #142	; 0x8e
 8003a34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003a38:	f107 0310 	add.w	r3, r7, #16
 8003a3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003a48:	f107 030f 	add.w	r3, r7, #15
 8003a4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003a56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 ff3b 	bl	80048d8 <hci_send_req>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	da01      	bge.n	8003a6c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8003a68:	23ff      	movs	r3, #255	; 0xff
 8003a6a:	e002      	b.n	8003a72 <aci_gap_update_adv_data+0xae>
  return status;
 8003a6c:	f107 030f 	add.w	r3, r7, #15
 8003a70:	781b      	ldrb	r3, [r3, #0]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	2218      	movs	r2, #24
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fc6a 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003a94:	233f      	movs	r3, #63	; 0x3f
 8003a96:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8003a98:	2392      	movs	r3, #146	; 0x92
 8003a9a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003a9c:	1dfb      	adds	r3, r7, #7
 8003a9e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff14 	bl	80048d8 <hci_send_req>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	da01      	bge.n	8003aba <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003ab6:	23ff      	movs	r3, #255	; 0xff
 8003ab8:	e000      	b.n	8003abc <aci_gap_configure_whitelist+0x40>
  return status;
 8003aba:	79fb      	ldrb	r3, [r7, #7]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	2218      	movs	r2, #24
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fc46 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003adc:	233f      	movs	r3, #63	; 0x3f
 8003ade:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8003ae0:	f240 1301 	movw	r3, #257	; 0x101
 8003ae4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003ae6:	1dfb      	adds	r3, r7, #7
 8003ae8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003aea:	2301      	movs	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 feef 	bl	80048d8 <hci_send_req>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	da01      	bge.n	8003b04 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8003b00:	23ff      	movs	r3, #255	; 0xff
 8003b02:	e000      	b.n	8003b06 <aci_gatt_init+0x42>
  return status;
 8003b04:	79fb      	ldrb	r3, [r7, #7]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8003b0e:	b590      	push	{r4, r7, lr}
 8003b10:	b0cf      	sub	sp, #316	; 0x13c
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4604      	mov	r4, r0
 8003b16:	4638      	mov	r0, r7
 8003b18:	6001      	str	r1, [r0, #0]
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	1dfb      	adds	r3, r7, #7
 8003b20:	4622      	mov	r2, r4
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	1dbb      	adds	r3, r7, #6
 8003b26:	4602      	mov	r2, r0
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	1d7b      	adds	r3, r7, #5
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8003b30:	f107 0310 	add.w	r3, r7, #16
 8003b34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8003b38:	1dfb      	adds	r3, r7, #7
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d007      	beq.n	8003b50 <aci_gatt_add_service+0x42>
 8003b40:	1dfb      	adds	r3, r7, #7
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d101      	bne.n	8003b4c <aci_gatt_add_service+0x3e>
 8003b48:	2311      	movs	r3, #17
 8003b4a:	e002      	b.n	8003b52 <aci_gatt_add_service+0x44>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <aci_gatt_add_service+0x44>
 8003b50:	2303      	movs	r3, #3
 8003b52:	f107 0210 	add.w	r2, r7, #16
 8003b56:	4413      	add	r3, r2
 8003b58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	2203      	movs	r2, #3
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fbff 	bl	8004368 <Osal_MemSet>
  int index_input = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8003b70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b74:	1dfa      	adds	r2, r7, #7
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8003b84:	1dfb      	adds	r3, r7, #7
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d002      	beq.n	8003b92 <aci_gatt_add_service+0x84>
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d004      	beq.n	8003b9a <aci_gatt_add_service+0x8c>
 8003b90:	e007      	b.n	8003ba2 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8003b92:	2302      	movs	r3, #2
 8003b94:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003b98:	e005      	b.n	8003ba6 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8003b9a:	2310      	movs	r3, #16
 8003b9c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003ba0:	e001      	b.n	8003ba6 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8003ba2:	2347      	movs	r3, #71	; 0x47
 8003ba4:	e05d      	b.n	8003c62 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8003ba6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003baa:	1c58      	adds	r0, r3, #1
 8003bac:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	f000 fbc8 	bl	8004348 <Osal_MemCpy>
    index_input += size;
 8003bb8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003bbc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8003bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bca:	1dba      	adds	r2, r7, #6
 8003bcc:	7812      	ldrb	r2, [r2, #0]
 8003bce:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8003bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bde:	1d7a      	adds	r2, r7, #5
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8003be4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003be8:	3301      	adds	r3, #1
 8003bea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bf2:	2218      	movs	r2, #24
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fbb6 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003bfc:	233f      	movs	r3, #63	; 0x3f
 8003bfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8003c02:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003c06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003c0a:	f107 0310 	add.w	r3, r7, #16
 8003c0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003c1a:	f107 030c 	add.w	r3, r7, #12
 8003c1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003c22:	2303      	movs	r3, #3
 8003c24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003c28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fe52 	bl	80048d8 <hci_send_req>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da01      	bge.n	8003c3e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8003c3a:	23ff      	movs	r3, #255	; 0xff
 8003c3c:	e011      	b.n	8003c62 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8003c3e:	f107 030c 	add.w	r3, r7, #12
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <aci_gatt_add_service+0x142>
    return resp.Status;
 8003c48:	f107 030c 	add.w	r3, r7, #12
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	e008      	b.n	8003c62 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8003c50:	f107 030c 	add.w	r3, r7, #12
 8003c54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003c5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd90      	pop	{r4, r7, pc}

08003c6c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b0d1      	sub	sp, #324	; 0x144
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4604      	mov	r4, r0
 8003c74:	4608      	mov	r0, r1
 8003c76:	f107 0108 	add.w	r1, r7, #8
 8003c7a:	600a      	str	r2, [r1, #0]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f107 030e 	add.w	r3, r7, #14
 8003c82:	4622      	mov	r2, r4
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	f107 030d 	add.w	r3, r7, #13
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	1dbb      	adds	r3, r7, #6
 8003c90:	460a      	mov	r2, r1
 8003c92:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8003c94:	f107 0318 	add.w	r3, r7, #24
 8003c98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8003c9c:	f107 030d 	add.w	r3, r7, #13
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d008      	beq.n	8003cb8 <aci_gatt_add_char+0x4c>
 8003ca6:	f107 030d 	add.w	r3, r7, #13
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d101      	bne.n	8003cb4 <aci_gatt_add_char+0x48>
 8003cb0:	2313      	movs	r3, #19
 8003cb2:	e002      	b.n	8003cba <aci_gatt_add_char+0x4e>
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e000      	b.n	8003cba <aci_gatt_add_char+0x4e>
 8003cb8:	2305      	movs	r3, #5
 8003cba:	f107 0218 	add.w	r2, r7, #24
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	2203      	movs	r2, #3
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fb4b 	bl	8004368 <Osal_MemSet>
  int index_input = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8003cd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003cdc:	f107 020e 	add.w	r2, r7, #14
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003ce4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8003cee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003cf2:	f107 020d 	add.w	r2, r7, #13
 8003cf6:	7812      	ldrb	r2, [r2, #0]
 8003cf8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003cfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8003d04:	f107 030d 	add.w	r3, r7, #13
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d002      	beq.n	8003d14 <aci_gatt_add_char+0xa8>
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d004      	beq.n	8003d1c <aci_gatt_add_char+0xb0>
 8003d12:	e007      	b.n	8003d24 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8003d14:	2302      	movs	r3, #2
 8003d16:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8003d1a:	e005      	b.n	8003d28 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8003d22:	e001      	b.n	8003d28 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8003d24:	2347      	movs	r3, #71	; 0x47
 8003d26:	e086      	b.n	8003e36 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8003d28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d2c:	1cd8      	adds	r0, r3, #3
 8003d2e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	f000 fb06 	bl	8004348 <Osal_MemCpy>
    index_input += size;
 8003d3c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003d40:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003d44:	4413      	add	r3, r2
 8003d46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8003d4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d4e:	1dba      	adds	r2, r7, #6
 8003d50:	8812      	ldrh	r2, [r2, #0]
 8003d52:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003d54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d58:	3302      	adds	r3, #2
 8003d5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8003d5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d62:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8003d66:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8003d68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8003d72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d76:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003d7a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8003d7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d80:	3301      	adds	r3, #1
 8003d82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8003d86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d8a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8003d8e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8003d90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d94:	3301      	adds	r3, #1
 8003d96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8003d9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d9e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8003da2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8003da4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003da8:	3301      	adds	r3, #1
 8003daa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8003dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003db2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8003db6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8003db8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003dc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dc6:	2218      	movs	r2, #24
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 facc 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003dd0:	233f      	movs	r3, #63	; 0x3f
 8003dd2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8003dd6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003dda:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8003dde:	f107 0318 	add.w	r3, r7, #24
 8003de2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8003de6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003dea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8003dee:	f107 0314 	add.w	r3, r7, #20
 8003df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8003df6:	2303      	movs	r3, #3
 8003df8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003dfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fd68 	bl	80048d8 <hci_send_req>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da01      	bge.n	8003e12 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8003e0e:	23ff      	movs	r3, #255	; 0xff
 8003e10:	e011      	b.n	8003e36 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	e008      	b.n	8003e36 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8003e24:	f107 0314 	add.w	r3, r7, #20
 8003e28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e32:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd90      	pop	{r4, r7, pc}

08003e40 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b0cc      	sub	sp, #304	; 0x130
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4605      	mov	r5, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	1dbb      	adds	r3, r7, #6
 8003e50:	462a      	mov	r2, r5
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	4622      	mov	r2, r4
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	1cfb      	adds	r3, r7, #3
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	1cbb      	adds	r3, r7, #2
 8003e62:	460a      	mov	r2, r1
 8003e64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8003e66:	f107 0310 	add.w	r3, r7, #16
 8003e6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003e6e:	f107 030f 	add.w	r3, r7, #15
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8003e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e80:	1dba      	adds	r2, r7, #6
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e8a:	3302      	adds	r3, #2
 8003e8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8003e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e94:	1d3a      	adds	r2, r7, #4
 8003e96:	8812      	ldrh	r2, [r2, #0]
 8003e98:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8003e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8003ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ea8:	1cfa      	adds	r2, r7, #3
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8003eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ebc:	1cba      	adds	r2, r7, #2
 8003ebe:	7812      	ldrb	r2, [r2, #0]
 8003ec0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8003ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed0:	1d98      	adds	r0, r3, #6
 8003ed2:	1cbb      	adds	r3, r7, #2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003edc:	f000 fa34 	bl	8004348 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8003ee0:	1cbb      	adds	r3, r7, #2
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003ee8:	4413      	add	r3, r2
 8003eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ef2:	2218      	movs	r2, #24
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fa36 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003efc:	233f      	movs	r3, #63	; 0x3f
 8003efe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8003f02:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003f06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003f0a:	f107 0310 	add.w	r3, r7, #16
 8003f0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003f1a:	f107 030f 	add.w	r3, r7, #15
 8003f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003f28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fcd2 	bl	80048d8 <hci_send_req>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da01      	bge.n	8003f3e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8003f3a:	23ff      	movs	r3, #255	; 0xff
 8003f3c:	e002      	b.n	8003f44 <aci_gatt_update_char_value+0x104>
  return status;
 8003f3e:	f107 030f 	add.w	r3, r7, #15
 8003f42:	781b      	ldrb	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bdb0      	pop	{r4, r5, r7, pc}

08003f4e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b0cc      	sub	sp, #304	; 0x130
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	463b      	mov	r3, r7
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	460a      	mov	r2, r1
 8003f62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8003f64:	f107 0310 	add.w	r3, r7, #16
 8003f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003f6c:	f107 030f 	add.w	r3, r7, #15
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8003f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f7e:	1dfa      	adds	r2, r7, #7
 8003f80:	7812      	ldrb	r2, [r2, #0]
 8003f82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f88:	3301      	adds	r3, #1
 8003f8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8003f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f92:	1dba      	adds	r2, r7, #6
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8003fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa6:	1c98      	adds	r0, r3, #2
 8003fa8:	1dbb      	adds	r3, r7, #6
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	463b      	mov	r3, r7
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	f000 f9ca 	bl	8004348 <Osal_MemCpy>
  index_input += Length;
 8003fb4:	1dbb      	adds	r3, r7, #6
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003fc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003fc6:	2218      	movs	r2, #24
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f9cc 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003fd0:	233f      	movs	r3, #63	; 0x3f
 8003fd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003fdc:	f107 0310 	add.w	r3, r7, #16
 8003fe0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fe8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003fec:	f107 030f 	add.w	r3, r7, #15
 8003ff0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003ffa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fc69 	bl	80048d8 <hci_send_req>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	da01      	bge.n	8004010 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800400c:	23ff      	movs	r3, #255	; 0xff
 800400e:	e002      	b.n	8004016 <aci_hal_write_config_data+0xc8>
  return status;
 8004010:	f107 030f 	add.w	r3, r7, #15
 8004014:	781b      	ldrb	r3, [r3, #0]
}
 8004016:	4618      	mov	r0, r3
 8004018:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b0cc      	sub	sp, #304	; 0x130
 8004024:	af00      	add	r7, sp, #0
 8004026:	4602      	mov	r2, r0
 8004028:	1dfb      	adds	r3, r7, #7
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	1dbb      	adds	r3, r7, #6
 800402e:	460a      	mov	r2, r1
 8004030:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8004032:	f107 0310 	add.w	r3, r7, #16
 8004036:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800403a:	f107 030f 	add.w	r3, r7, #15
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404c:	1dfa      	adds	r2, r7, #7
 800404e:	7812      	ldrb	r2, [r2, #0]
 8004050:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004052:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004056:	3301      	adds	r3, #1
 8004058:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800405c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004060:	1dba      	adds	r2, r7, #6
 8004062:	7812      	ldrb	r2, [r2, #0]
 8004064:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004066:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800406a:	3301      	adds	r3, #1
 800406c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004070:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004074:	2218      	movs	r2, #24
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f975 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 800407e:	233f      	movs	r3, #63	; 0x3f
 8004080:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8004084:	230f      	movs	r3, #15
 8004086:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800408a:	f107 0310 	add.w	r3, r7, #16
 800408e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004096:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800409a:	f107 030f 	add.w	r3, r7, #15
 800409e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80040a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fc12 	bl	80048d8 <hci_send_req>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da01      	bge.n	80040be <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80040ba:	23ff      	movs	r3, #255	; 0xff
 80040bc:	e002      	b.n	80040c4 <aci_hal_set_tx_power_level+0xa4>
  return status;
 80040be:	f107 030f 	add.w	r3, r7, #15
 80040c2:	781b      	ldrb	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b0cc      	sub	sp, #304	; 0x130
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4602      	mov	r2, r0
 80040d6:	1dbb      	adds	r3, r7, #6
 80040d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80040da:	f107 0310 	add.w	r3, r7, #16
 80040de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80040e2:	f107 030f 	add.w	r3, r7, #15
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80040f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040f4:	1dba      	adds	r2, r7, #6
 80040f6:	8812      	ldrh	r2, [r2, #0]
 80040f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80040fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040fe:	3302      	adds	r3, #2
 8004100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004104:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004108:	2218      	movs	r2, #24
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f92b 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004112:	233f      	movs	r3, #63	; 0x3f
 8004114:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8004118:	2318      	movs	r3, #24
 800411a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800412a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800412e:	f107 030f 	add.w	r3, r7, #15
 8004132:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800413c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fbc8 	bl	80048d8 <hci_send_req>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	da01      	bge.n	8004152 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800414e:	23ff      	movs	r3, #255	; 0xff
 8004150:	e002      	b.n	8004158 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8004152:	f107 030f 	add.w	r3, r7, #15
 8004156:	781b      	ldrb	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b088      	sub	sp, #32
 8004166:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	2218      	movs	r2, #24
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f8f7 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x03;
 800417a:	2303      	movs	r3, #3
 800417c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800417e:	2303      	movs	r3, #3
 8004180:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004182:	1dfb      	adds	r3, r7, #7
 8004184:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	2100      	movs	r1, #0
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fba1 	bl	80048d8 <hci_send_req>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	da01      	bge.n	80041a0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800419c:	23ff      	movs	r3, #255	; 0xff
 800419e:	e000      	b.n	80041a2 <hci_reset+0x40>
  return status;
 80041a0:	79fb      	ldrb	r3, [r7, #7]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b0ce      	sub	sp, #312	; 0x138
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	f107 0308 	add.w	r3, r7, #8
 80041b4:	6019      	str	r1, [r3, #0]
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f107 030e 	add.w	r3, r7, #14
 80041be:	4602      	mov	r2, r0
 80041c0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80041c2:	f107 0318 	add.w	r3, r7, #24
 80041c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80041ca:	f107 0310 	add.w	r3, r7, #16
 80041ce:	2205      	movs	r2, #5
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f8c8 	bl	8004368 <Osal_MemSet>
  int index_input = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80041de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041e2:	f107 020e 	add.w	r2, r7, #14
 80041e6:	8812      	ldrh	r2, [r2, #0]
 80041e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80041ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041ee:	3302      	adds	r3, #2
 80041f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80041f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80041f8:	2218      	movs	r2, #24
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f8b3 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x08;
 8004202:	2308      	movs	r3, #8
 8004204:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8004208:	2330      	movs	r3, #48	; 0x30
 800420a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800420e:	f107 0318 	add.w	r3, r7, #24
 8004212:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004216:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800421a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800421e:	f107 0310 	add.w	r3, r7, #16
 8004222:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004226:	2305      	movs	r3, #5
 8004228:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800422c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fb50 	bl	80048d8 <hci_send_req>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	da01      	bge.n	8004242 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800423e:	23ff      	movs	r3, #255	; 0xff
 8004240:	e016      	b.n	8004270 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8004242:	f107 0310 	add.w	r3, r7, #16
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <hci_le_read_phy+0xaa>
    return resp.Status;
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	e00d      	b.n	8004270 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	78da      	ldrb	r2, [r3, #3]
 800425a:	f107 0308 	add.w	r3, r7, #8
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8004262:	f107 0310 	add.w	r3, r7, #16
 8004266:	791a      	ldrb	r2, [r3, #4]
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800427a:	b590      	push	{r4, r7, lr}
 800427c:	b0cd      	sub	sp, #308	; 0x134
 800427e:	af00      	add	r7, sp, #0
 8004280:	4604      	mov	r4, r0
 8004282:	4608      	mov	r0, r1
 8004284:	4611      	mov	r1, r2
 8004286:	1dfb      	adds	r3, r7, #7
 8004288:	4622      	mov	r2, r4
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	1dbb      	adds	r3, r7, #6
 800428e:	4602      	mov	r2, r0
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	1d7b      	adds	r3, r7, #5
 8004294:	460a      	mov	r2, r1
 8004296:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80042a0:	f107 030f 	add.w	r3, r7, #15
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80042ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b2:	1dfa      	adds	r2, r7, #7
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80042b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042bc:	3301      	adds	r3, #1
 80042be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80042c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c6:	1dba      	adds	r2, r7, #6
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80042cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042d0:	3301      	adds	r3, #1
 80042d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80042d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042da:	1d7a      	adds	r2, r7, #5
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80042e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042e4:	3301      	adds	r3, #1
 80042e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80042ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042ee:	2218      	movs	r2, #24
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f838 	bl	8004368 <Osal_MemSet>
  rq.ogf = 0x08;
 80042f8:	2308      	movs	r3, #8
 80042fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80042fe:	2331      	movs	r3, #49	; 0x31
 8004300:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004304:	f107 0310 	add.w	r3, r7, #16
 8004308:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800430c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004314:	f107 030f 	add.w	r3, r7, #15
 8004318:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800431c:	2301      	movs	r3, #1
 800431e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fad5 	bl	80048d8 <hci_send_req>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	da01      	bge.n	8004338 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8004334:	23ff      	movs	r3, #255	; 0xff
 8004336:	e002      	b.n	800433e <hci_le_set_default_phy+0xc4>
  return status;
 8004338:	f107 030f 	add.w	r3, r7, #15
 800433c:	781b      	ldrb	r3, [r3, #0]
}
 800433e:	4618      	mov	r0, r3
 8004340:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004344:	46bd      	mov	sp, r7
 8004346:	bd90      	pop	{r4, r7, pc}

08004348 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f001 fef7 	bl	800614c <memcpy>
 800435e:	4603      	mov	r3, r0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f001 fef2 	bl	8006162 <memset>
 800437e:	4603      	mov	r3, r0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3301      	adds	r3, #1
 800439a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2bff      	cmp	r3, #255	; 0xff
 80043a2:	d000      	beq.n	80043a6 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 80043a4:	e04a      	b.n	800443c <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	3302      	adds	r3, #2
 80043aa:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	f640 4301 	movw	r3, #3073	; 0xc01
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d000      	beq.n	80043be <PeerToPeer_Event_Handler+0x36>
          break;
 80043bc:	e03d      	b.n	800443a <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3302      	adds	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	885b      	ldrh	r3, [r3, #2]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <PeerToPeer_Event_Handler+0xc0>)
 80043ce:	889b      	ldrh	r3, [r3, #4]
 80043d0:	3302      	adds	r3, #2
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d118      	bne.n	8004408 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	7a1b      	ldrb	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80043e8:	2300      	movs	r3, #0
 80043ea:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80043ec:	f107 0308 	add.w	r3, r7, #8
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 facf 	bl	8005994 <P2PS_STM_App_Notification>
        break;
 80043f6:	e01f      	b.n	8004438 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80043f8:	2301      	movs	r3, #1
 80043fa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80043fc:	f107 0308 	add.w	r3, r7, #8
 8004400:	4618      	mov	r0, r3
 8004402:	f001 fac7 	bl	8005994 <P2PS_STM_App_Notification>
        break;
 8004406:	e017      	b.n	8004438 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	885b      	ldrh	r3, [r3, #2]
 800440c:	b29b      	uxth	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <PeerToPeer_Event_Handler+0xc0>)
 8004412:	885b      	ldrh	r3, [r3, #2]
 8004414:	3301      	adds	r3, #1
 8004416:	429a      	cmp	r2, r3
 8004418:	d10e      	bne.n	8004438 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800441a:	2303      	movs	r3, #3
 800441c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	88db      	ldrh	r3, [r3, #6]
 8004422:	b29b      	uxth	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	3308      	adds	r3, #8
 800442c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800442e:	f107 0308 	add.w	r3, r7, #8
 8004432:	4618      	mov	r0, r3
 8004434:	f001 faae 	bl	8005994 <P2PS_STM_App_Notification>
        break;
 8004438:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800443a:	bf00      	nop
  }

  return(return_value);
 800443c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8004440:	4618      	mov	r0, r3
 8004442:	3728      	adds	r7, #40	; 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	200000c4 	.word	0x200000c4

0800444c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8004452:	484a      	ldr	r0, [pc, #296]	; (800457c <P2PS_STM_Init+0x130>)
 8004454:	f000 f938 	bl	80046c8 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8004458:	238f      	movs	r3, #143	; 0x8f
 800445a:	703b      	strb	r3, [r7, #0]
 800445c:	23e5      	movs	r3, #229	; 0xe5
 800445e:	707b      	strb	r3, [r7, #1]
 8004460:	23b3      	movs	r3, #179	; 0xb3
 8004462:	70bb      	strb	r3, [r7, #2]
 8004464:	23d5      	movs	r3, #213	; 0xd5
 8004466:	70fb      	strb	r3, [r7, #3]
 8004468:	232e      	movs	r3, #46	; 0x2e
 800446a:	713b      	strb	r3, [r7, #4]
 800446c:	237f      	movs	r3, #127	; 0x7f
 800446e:	717b      	strb	r3, [r7, #5]
 8004470:	234a      	movs	r3, #74	; 0x4a
 8004472:	71bb      	strb	r3, [r7, #6]
 8004474:	2398      	movs	r3, #152	; 0x98
 8004476:	71fb      	strb	r3, [r7, #7]
 8004478:	232a      	movs	r3, #42	; 0x2a
 800447a:	723b      	strb	r3, [r7, #8]
 800447c:	2348      	movs	r3, #72	; 0x48
 800447e:	727b      	strb	r3, [r7, #9]
 8004480:	237a      	movs	r3, #122	; 0x7a
 8004482:	72bb      	strb	r3, [r7, #10]
 8004484:	23cc      	movs	r3, #204	; 0xcc
 8004486:	72fb      	strb	r3, [r7, #11]
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	733b      	strb	r3, [r7, #12]
 800448c:	23fe      	movs	r3, #254	; 0xfe
 800448e:	737b      	strb	r3, [r7, #13]
 8004490:	2300      	movs	r3, #0
 8004492:	73bb      	strb	r3, [r7, #14]
 8004494:	2300      	movs	r3, #0
 8004496:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8004498:	4639      	mov	r1, r7
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <P2PS_STM_Init+0x134>)
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2308      	movs	r3, #8
 80044a0:	2201      	movs	r2, #1
 80044a2:	2002      	movs	r0, #2
 80044a4:	f7ff fb33 	bl	8003b0e <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80044a8:	2319      	movs	r3, #25
 80044aa:	703b      	strb	r3, [r7, #0]
 80044ac:	23ed      	movs	r3, #237	; 0xed
 80044ae:	707b      	strb	r3, [r7, #1]
 80044b0:	2382      	movs	r3, #130	; 0x82
 80044b2:	70bb      	strb	r3, [r7, #2]
 80044b4:	23ae      	movs	r3, #174	; 0xae
 80044b6:	70fb      	strb	r3, [r7, #3]
 80044b8:	23ed      	movs	r3, #237	; 0xed
 80044ba:	713b      	strb	r3, [r7, #4]
 80044bc:	2321      	movs	r3, #33	; 0x21
 80044be:	717b      	strb	r3, [r7, #5]
 80044c0:	234c      	movs	r3, #76	; 0x4c
 80044c2:	71bb      	strb	r3, [r7, #6]
 80044c4:	239d      	movs	r3, #157	; 0x9d
 80044c6:	71fb      	strb	r3, [r7, #7]
 80044c8:	2341      	movs	r3, #65	; 0x41
 80044ca:	723b      	strb	r3, [r7, #8]
 80044cc:	2345      	movs	r3, #69	; 0x45
 80044ce:	727b      	strb	r3, [r7, #9]
 80044d0:	2322      	movs	r3, #34	; 0x22
 80044d2:	72bb      	strb	r3, [r7, #10]
 80044d4:	238e      	movs	r3, #142	; 0x8e
 80044d6:	72fb      	strb	r3, [r7, #11]
 80044d8:	2341      	movs	r3, #65	; 0x41
 80044da:	733b      	strb	r3, [r7, #12]
 80044dc:	23fe      	movs	r3, #254	; 0xfe
 80044de:	737b      	strb	r3, [r7, #13]
 80044e0:	2300      	movs	r3, #0
 80044e2:	73bb      	strb	r3, [r7, #14]
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80044e8:	4b25      	ldr	r3, [pc, #148]	; (8004580 <P2PS_STM_Init+0x134>)
 80044ea:	8818      	ldrh	r0, [r3, #0]
 80044ec:	463a      	mov	r2, r7
 80044ee:	4b25      	ldr	r3, [pc, #148]	; (8004584 <P2PS_STM_Init+0x138>)
 80044f0:	9305      	str	r3, [sp, #20]
 80044f2:	2301      	movs	r3, #1
 80044f4:	9304      	str	r3, [sp, #16]
 80044f6:	230a      	movs	r3, #10
 80044f8:	9303      	str	r3, [sp, #12]
 80044fa:	2301      	movs	r3, #1
 80044fc:	9302      	str	r3, [sp, #8]
 80044fe:	2300      	movs	r3, #0
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2306      	movs	r3, #6
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2302      	movs	r3, #2
 8004508:	2102      	movs	r1, #2
 800450a:	f7ff fbaf 	bl	8003c6c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800450e:	2319      	movs	r3, #25
 8004510:	703b      	strb	r3, [r7, #0]
 8004512:	23ed      	movs	r3, #237	; 0xed
 8004514:	707b      	strb	r3, [r7, #1]
 8004516:	2382      	movs	r3, #130	; 0x82
 8004518:	70bb      	strb	r3, [r7, #2]
 800451a:	23ae      	movs	r3, #174	; 0xae
 800451c:	70fb      	strb	r3, [r7, #3]
 800451e:	23ed      	movs	r3, #237	; 0xed
 8004520:	713b      	strb	r3, [r7, #4]
 8004522:	2321      	movs	r3, #33	; 0x21
 8004524:	717b      	strb	r3, [r7, #5]
 8004526:	234c      	movs	r3, #76	; 0x4c
 8004528:	71bb      	strb	r3, [r7, #6]
 800452a:	239d      	movs	r3, #157	; 0x9d
 800452c:	71fb      	strb	r3, [r7, #7]
 800452e:	2341      	movs	r3, #65	; 0x41
 8004530:	723b      	strb	r3, [r7, #8]
 8004532:	2345      	movs	r3, #69	; 0x45
 8004534:	727b      	strb	r3, [r7, #9]
 8004536:	2322      	movs	r3, #34	; 0x22
 8004538:	72bb      	strb	r3, [r7, #10]
 800453a:	238e      	movs	r3, #142	; 0x8e
 800453c:	72fb      	strb	r3, [r7, #11]
 800453e:	2342      	movs	r3, #66	; 0x42
 8004540:	733b      	strb	r3, [r7, #12]
 8004542:	23fe      	movs	r3, #254	; 0xfe
 8004544:	737b      	strb	r3, [r7, #13]
 8004546:	2300      	movs	r3, #0
 8004548:	73bb      	strb	r3, [r7, #14]
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <P2PS_STM_Init+0x134>)
 8004550:	8818      	ldrh	r0, [r3, #0]
 8004552:	463a      	mov	r2, r7
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <P2PS_STM_Init+0x13c>)
 8004556:	9305      	str	r3, [sp, #20]
 8004558:	2301      	movs	r3, #1
 800455a:	9304      	str	r3, [sp, #16]
 800455c:	230a      	movs	r3, #10
 800455e:	9303      	str	r3, [sp, #12]
 8004560:	2301      	movs	r3, #1
 8004562:	9302      	str	r3, [sp, #8]
 8004564:	2300      	movs	r3, #0
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	2310      	movs	r3, #16
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2302      	movs	r3, #2
 800456e:	2102      	movs	r1, #2
 8004570:	f7ff fb7c 	bl	8003c6c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8004574:	bf00      	nop
}
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	08004389 	.word	0x08004389
 8004580:	200000c4 	.word	0x200000c4
 8004584:	200000c6 	.word	0x200000c6
 8004588:	200000c8 	.word	0x200000c8

0800458c <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return;
 8004590:	bf00      	nop
}
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800459a:	b480      	push	{r7}
 800459c:	af00      	add	r7, sp, #0
  return;
 800459e:	bf00      	nop
}
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <DIS_Init>:
__weak void DIS_Init( void )
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return;
 80045ac:	bf00      	nop
}
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 80045b6:	b480      	push	{r7}
 80045b8:	af00      	add	r7, sp, #0
  return;
 80045ba:	bf00      	nop
}
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return;
 80045c8:	bf00      	nop
}
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HRS_Init>:
__weak void HRS_Init( void )
{
 80045d2:	b480      	push	{r7}
 80045d4:	af00      	add	r7, sp, #0
  return;
 80045d6:	bf00      	nop
}
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HTS_Init>:
__weak void HTS_Init( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return;
 80045e4:	bf00      	nop
}
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <IAS_Init>:
__weak void IAS_Init( void )
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  return;
 80045f2:	bf00      	nop
}
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LLS_Init>:
__weak void LLS_Init( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return;
 8004600:	bf00      	nop
}
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <TPS_Init>:
__weak void TPS_Init( void )
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  return;
 800460e:	bf00      	nop
}
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return;
 800461c:	bf00      	nop
}
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  return;
 800462a:	bf00      	nop
}
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <MESH_Init>:
__weak void MESH_Init( void )
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return;
 8004638:	bf00      	nop
}
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  return;
 8004646:	bf00      	nop
}
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return;
 8004654:	bf00      	nop
}
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <SVCCTL_Init+0x18>)
 8004666:	2200      	movs	r2, #0
 8004668:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <SVCCTL_Init+0x1c>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8004670:	f000 f806 	bl	8004680 <SVCCTL_SvcInit>

  return;
 8004674:	bf00      	nop
}
 8004676:	bd80      	pop	{r7, pc}
 8004678:	200000cc 	.word	0x200000cc
 800467c:	200000ec 	.word	0x200000ec

08004680 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  BLS_Init();
 8004684:	f7ff ff82 	bl	800458c <BLS_Init>

  CRS_STM_Init();
 8004688:	f7ff ff87 	bl	800459a <CRS_STM_Init>

  DIS_Init();
 800468c:	f7ff ff8c 	bl	80045a8 <DIS_Init>

  EDS_STM_Init();
 8004690:	f7ff ff91 	bl	80045b6 <EDS_STM_Init>

  HIDS_Init();
 8004694:	f7ff ff96 	bl	80045c4 <HIDS_Init>

  HRS_Init();
 8004698:	f7ff ff9b 	bl	80045d2 <HRS_Init>

  HTS_Init();
 800469c:	f7ff ffa0 	bl	80045e0 <HTS_Init>

  IAS_Init();
 80046a0:	f7ff ffa5 	bl	80045ee <IAS_Init>

  LLS_Init();
 80046a4:	f7ff ffaa 	bl	80045fc <LLS_Init>

  TPS_Init();
 80046a8:	f7ff ffaf 	bl	800460a <TPS_Init>

  MOTENV_STM_Init();
 80046ac:	f7ff ffb4 	bl	8004618 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80046b0:	f7ff fecc 	bl	800444c <P2PS_STM_Init>

  OTAS_STM_Init();
 80046b4:	f7ff ffb7 	bl	8004626 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80046b8:	f7ff ffc3 	bl	8004642 <BVOPUS_STM_Init>

  MESH_Init();
 80046bc:	f7ff ffba 	bl	8004634 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80046c0:	f7ff ffc6 	bl	8004650 <SVCCTL_InitCustomSvc>
  
  return;
 80046c4:	bf00      	nop
}
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <SVCCTL_RegisterSvcHandler+0x30>)
 80046d2:	7f1b      	ldrb	r3, [r3, #28]
 80046d4:	4619      	mov	r1, r3
 80046d6:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <SVCCTL_RegisterSvcHandler+0x30>)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <SVCCTL_RegisterSvcHandler+0x30>)
 80046e0:	7f1b      	ldrb	r3, [r3, #28]
 80046e2:	3301      	adds	r3, #1
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <SVCCTL_RegisterSvcHandler+0x30>)
 80046e8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80046ea:	bf00      	nop
}
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	200000cc 	.word	0x200000cc

080046fc <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3301      	adds	r3, #1
 8004708:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2bff      	cmp	r3, #255	; 0xff
 8004714:	d000      	beq.n	8004718 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8004716:	e025      	b.n	8004764 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	3302      	adds	r3, #2
 800471c:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800472c:	d000      	beq.n	8004730 <SVCCTL_UserEvtRx+0x34>
          break;
 800472e:	e018      	b.n	8004762 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004730:	2300      	movs	r3, #0
 8004732:	757b      	strb	r3, [r7, #21]
 8004734:	e00d      	b.n	8004752 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8004736:	7d7b      	ldrb	r3, [r7, #21]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <SVCCTL_UserEvtRx+0xa0>)
 800473a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	4798      	blx	r3
 8004742:	4603      	mov	r3, r0
 8004744:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800474c:	7d7b      	ldrb	r3, [r7, #21]
 800474e:	3301      	adds	r3, #1
 8004750:	757b      	strb	r3, [r7, #21]
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <SVCCTL_UserEvtRx+0xa0>)
 8004754:	7f1b      	ldrb	r3, [r3, #28]
 8004756:	7d7a      	ldrb	r2, [r7, #21]
 8004758:	429a      	cmp	r2, r3
 800475a:	d3ec      	bcc.n	8004736 <SVCCTL_UserEvtRx+0x3a>
          break;
 800475c:	e000      	b.n	8004760 <SVCCTL_UserEvtRx+0x64>
              break;
 800475e:	bf00      	nop
          break;
 8004760:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8004762:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d009      	beq.n	800477e <SVCCTL_UserEvtRx+0x82>
 800476a:	2b02      	cmp	r3, #2
 800476c:	d00a      	beq.n	8004784 <SVCCTL_UserEvtRx+0x88>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fe48 	bl	8005408 <SVCCTL_App_Notification>
 8004778:	4603      	mov	r3, r0
 800477a:	75bb      	strb	r3, [r7, #22]
      break;
 800477c:	e008      	b.n	8004790 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800477e:	2301      	movs	r3, #1
 8004780:	75bb      	strb	r3, [r7, #22]
      break;
 8004782:	e005      	b.n	8004790 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8004784:	2300      	movs	r3, #0
 8004786:	75bb      	strb	r3, [r7, #22]
      break;
 8004788:	e002      	b.n	8004790 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800478a:	2301      	movs	r3, #1
 800478c:	75bb      	strb	r3, [r7, #22]
      break;
 800478e:	bf00      	nop
  }

  return (return_status);
 8004790:	7dbb      	ldrb	r3, [r7, #22]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	200000cc 	.word	0x200000cc

080047a0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80047a8:	f107 030c 	add.w	r3, r7, #12
 80047ac:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2121      	movs	r1, #33	; 0x21
 80047b8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80047bc:	f000 fa5e 	bl	8004c7c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	330b      	adds	r3, #11
 80047c4:	78db      	ldrb	r3, [r3, #3]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b088      	sub	sp, #32
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	210f      	movs	r1, #15
 80047e6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80047ea:	f000 fa47 	bl	8004c7c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	330b      	adds	r3, #11
 80047f2:	78db      	ldrb	r3, [r3, #3]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4a08      	ldr	r2, [pc, #32]	; (800482c <hci_init+0x30>)
 800480c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <hci_init+0x34>)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8004814:	4806      	ldr	r0, [pc, #24]	; (8004830 <hci_init+0x34>)
 8004816:	f000 f9af 	bl	8004b78 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f8dc 	bl	80049dc <TlInit>

  return;
 8004824:	bf00      	nop
}
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000200 	.word	0x20000200
 8004830:	200001d8 	.word	0x200001d8

08004834 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800483a:	4824      	ldr	r0, [pc, #144]	; (80048cc <hci_user_evt_proc+0x98>)
 800483c:	f000 fcb4 	bl	80051a8 <LST_is_empty>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d12f      	bne.n	80048a6 <hci_user_evt_proc+0x72>
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <hci_user_evt_proc+0x9c>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02b      	beq.n	80048a6 <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800484e:	f107 030c 	add.w	r3, r7, #12
 8004852:	4619      	mov	r1, r3
 8004854:	481d      	ldr	r0, [pc, #116]	; (80048cc <hci_user_evt_proc+0x98>)
 8004856:	f000 fd2e 	bl	80052b6 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f97b 	bl	8004b58 <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <hci_user_evt_proc+0xa0>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800486e:	2301      	movs	r3, #1
 8004870:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <hci_user_evt_proc+0xa0>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	1d3a      	adds	r2, r7, #4
 8004878:	4610      	mov	r0, r2
 800487a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800487c:	793a      	ldrb	r2, [r7, #4]
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <hci_user_evt_proc+0x9c>)
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e002      	b.n	800488a <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004884:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <hci_user_evt_proc+0x9c>)
 8004886:	2201      	movs	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800488a:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <hci_user_evt_proc+0x9c>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d004      	beq.n	800489c <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fbef 	bl	8005078 <TL_MM_EvtDone>
 800489a:	e004      	b.n	80048a6 <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4619      	mov	r1, r3
 80048a0:	480a      	ldr	r0, [pc, #40]	; (80048cc <hci_user_evt_proc+0x98>)
 80048a2:	f000 fca1 	bl	80051e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80048a6:	4809      	ldr	r0, [pc, #36]	; (80048cc <hci_user_evt_proc+0x98>)
 80048a8:	f000 fc7e 	bl	80051a8 <LST_is_empty>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <hci_user_evt_proc+0x8e>
 80048b2:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <hci_user_evt_proc+0x9c>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80048ba:	4804      	ldr	r0, [pc, #16]	; (80048cc <hci_user_evt_proc+0x98>)
 80048bc:	f001 f811 	bl	80058e2 <hci_notify_asynch_evt>
  }


  return;
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
}
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200000f4 	.word	0x200000f4
 80048d0:	20000100 	.word	0x20000100
 80048d4:	200001d8 	.word	0x200001d8

080048d8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80048e4:	2000      	movs	r0, #0
 80048e6:	f000 f8d5 	bl	8004a94 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80048ea:	2300      	movs	r3, #0
 80048ec:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	885b      	ldrh	r3, [r3, #2]
 80048f2:	b21b      	sxth	r3, r3
 80048f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f8:	b21a      	sxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	b21b      	sxth	r3, r3
 8004902:	4313      	orrs	r3, r2
 8004904:	b21b      	sxth	r3, r3
 8004906:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	b2d9      	uxtb	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	8bbb      	ldrh	r3, [r7, #28]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 f891 	bl	8004a3c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800491a:	e052      	b.n	80049c2 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800491c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004920:	f000 fff6 	bl	8005910 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8004924:	e047      	b.n	80049b6 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8004926:	f107 030c 	add.w	r3, r7, #12
 800492a:	4619      	mov	r1, r3
 800492c:	482a      	ldr	r0, [pc, #168]	; (80049d8 <hci_send_req+0x100>)
 800492e:	f000 fcc2 	bl	80052b6 <LST_remove_head>

      OutputRspTrace(pevtpacket);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 f8fb 	bl	8004b30 <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	7a5b      	ldrb	r3, [r3, #9]
 800493e:	2b0f      	cmp	r3, #15
 8004940:	d114      	bne.n	800496c <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	330b      	adds	r3, #11
 8004946:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	885b      	ldrh	r3, [r3, #2]
 800494c:	b29b      	uxth	r3, r3
 800494e:	8bba      	ldrh	r2, [r7, #28]
 8004950:	429a      	cmp	r2, r3
 8004952:	d104      	bne.n	800495e <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d027      	beq.n	80049b6 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8004966:	2301      	movs	r3, #1
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e024      	b.n	80049b6 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	330b      	adds	r3, #11
 8004970:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004978:	b29b      	uxth	r3, r3
 800497a:	8bba      	ldrh	r2, [r7, #28]
 800497c:	429a      	cmp	r2, r3
 800497e:	d114      	bne.n	80049aa <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	7a9b      	ldrb	r3, [r3, #10]
 8004984:	3b03      	subs	r3, #3
 8004986:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	429a      	cmp	r2, r3
 8004990:	bfa8      	it	ge
 8004992:	461a      	movge	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6918      	ldr	r0, [r3, #16]
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	1cd9      	adds	r1, r3, #3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	461a      	mov	r2, r3
 80049a6:	f001 fbd1 	bl	800614c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80049b2:	2301      	movs	r3, #1
 80049b4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80049b6:	4808      	ldr	r0, [pc, #32]	; (80049d8 <hci_send_req+0x100>)
 80049b8:	f000 fbf6 	bl	80051a8 <LST_is_empty>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0b1      	beq.n	8004926 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80049c2:	7ffb      	ldrb	r3, [r7, #31]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0a9      	beq.n	800491c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80049c8:	2001      	movs	r0, #1
 80049ca:	f000 f863 	bl	8004a94 <NotifyCmdStatus>

  return 0;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3720      	adds	r7, #32
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	200001f8 	.word	0x200001f8

080049dc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80049e4:	480f      	ldr	r0, [pc, #60]	; (8004a24 <TlInit+0x48>)
 80049e6:	f000 fbcf 	bl	8005188 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80049ea:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <TlInit+0x4c>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80049f0:	480e      	ldr	r0, [pc, #56]	; (8004a2c <TlInit+0x50>)
 80049f2:	f000 fbc9 	bl	8005188 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80049f6:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <TlInit+0x54>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <TlInit+0x58>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <TlInit+0x5c>)
 8004a0a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <TlInit+0x58>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f107 0208 	add.w	r2, r7, #8
 8004a14:	4610      	mov	r0, r2
 8004a16:	4798      	blx	r3
  }

  return;
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
}
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	200001f8 	.word	0x200001f8
 8004a28:	200000fc 	.word	0x200000fc
 8004a2c:	200000f4 	.word	0x200000f4
 8004a30:	20000100 	.word	0x20000100
 8004a34:	200001d8 	.word	0x200001d8
 8004a38:	08004ad5 	.word	0x08004ad5

08004a3c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	603a      	str	r2, [r7, #0]
 8004a46:	80fb      	strh	r3, [r7, #6]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <SendCmd+0x50>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8004a56:	4b0d      	ldr	r3, [pc, #52]	; (8004a8c <SendCmd+0x50>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	797a      	ldrb	r2, [r7, #5]
 8004a5c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <SendCmd+0x50>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	797a      	ldrb	r2, [r7, #5]
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fb6f 	bl	800614c <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <SendCmd+0x50>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f852 	bl	8004b1c <OutputCmdTrace>

  hciContext.io.Send(0,0);
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <SendCmd+0x54>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	2000      	movs	r0, #0
 8004a80:	4798      	blx	r3

  return;
 8004a82:	bf00      	nop
}
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200000fc 	.word	0x200000fc
 8004a90:	200001d8 	.word	0x200001d8

08004a94 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <NotifyCmdStatus+0x3c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8004aac:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <NotifyCmdStatus+0x3c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8004ab4:	e008      	b.n	8004ac8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <NotifyCmdStatus+0x3c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8004abe:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <NotifyCmdStatus+0x3c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	4798      	blx	r3
  return;
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
}
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000200 	.word	0x20000200

08004ad4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7a5b      	ldrb	r3, [r3, #9]
 8004ae0:	2b0f      	cmp	r3, #15
 8004ae2:	d003      	beq.n	8004aec <TlEvtReceived+0x18>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	7a5b      	ldrb	r3, [r3, #9]
 8004ae8:	2b0e      	cmp	r3, #14
 8004aea:	d107      	bne.n	8004afc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4809      	ldr	r0, [pc, #36]	; (8004b14 <TlEvtReceived+0x40>)
 8004af0:	f000 fb9e 	bl	8005230 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8004af4:	2000      	movs	r0, #0
 8004af6:	f000 ff00 	bl	80058fa <hci_cmd_resp_release>
 8004afa:	e006      	b.n	8004b0a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4806      	ldr	r0, [pc, #24]	; (8004b18 <TlEvtReceived+0x44>)
 8004b00:	f000 fb96 	bl	8005230 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004b04:	4804      	ldr	r0, [pc, #16]	; (8004b18 <TlEvtReceived+0x44>)
 8004b06:	f000 feec 	bl	80058e2 <hci_notify_asynch_evt>
  }

  return;
 8004b0a:	bf00      	nop
}
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200001f8 	.word	0x200001f8
 8004b18:	200000f4 	.word	0x200000f4

08004b1c <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8004b24:	bf00      	nop
}
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	7a5b      	ldrb	r3, [r3, #9]
 8004b3c:	2b0e      	cmp	r3, #14
 8004b3e:	d002      	beq.n	8004b46 <OutputRspTrace+0x16>
 8004b40:	2b0f      	cmp	r3, #15
 8004b42:	d002      	beq.n	8004b4a <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 8004b44:	e002      	b.n	8004b4c <OutputRspTrace+0x1c>
      break;
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <OutputRspTrace+0x1c>
      break;
 8004b4a:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8004b4c:	bf00      	nop
}
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	7a5b      	ldrb	r3, [r3, #9]
 8004b64:	2bff      	cmp	r3, #255	; 0xff
 8004b66:	d100      	bne.n	8004b6a <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
}
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <hci_register_io_bus+0x20>)
 8004b84:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <hci_register_io_bus+0x24>)
 8004b8a:	611a      	str	r2, [r3, #16]

  return;
 8004b8c:	bf00      	nop
}
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	08004ef5 	.word	0x08004ef5
 8004b9c:	08004f5d 	.word	0x08004f5d

08004ba0 <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <shci_init+0x30>)
 8004bb0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8004bb2:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <shci_init+0x34>)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8004bb8:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <shci_init+0x34>)
 8004bba:	f000 f947 	bl	8004e4c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f8a0 	bl	8004d08 <TlInit>

  return;
 8004bc8:	bf00      	nop
}
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000224 	.word	0x20000224
 8004bd4:	20000204 	.word	0x20000204

08004bd8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004bde:	4824      	ldr	r0, [pc, #144]	; (8004c70 <shci_user_evt_proc+0x98>)
 8004be0:	f000 fae2 	bl	80051a8 <LST_is_empty>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d12f      	bne.n	8004c4a <shci_user_evt_proc+0x72>
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <shci_user_evt_proc+0x9c>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d02b      	beq.n	8004c4a <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	481d      	ldr	r0, [pc, #116]	; (8004c70 <shci_user_evt_proc+0x98>)
 8004bfa:	f000 fb5c 	bl	80052b6 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f913 	bl	8004e2c <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <shci_user_evt_proc+0xa0>)
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8004c12:	2301      	movs	r3, #1
 8004c14:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004c16:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <shci_user_evt_proc+0xa0>)
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	1d3a      	adds	r2, r7, #4
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8004c20:	793a      	ldrb	r2, [r7, #4]
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <shci_user_evt_proc+0x9c>)
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e002      	b.n	8004c2e <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004c28:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <shci_user_evt_proc+0x9c>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <shci_user_evt_proc+0x9c>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fa1d 	bl	8005078 <TL_MM_EvtDone>
 8004c3e:	e004      	b.n	8004c4a <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4619      	mov	r1, r3
 8004c44:	480a      	ldr	r0, [pc, #40]	; (8004c70 <shci_user_evt_proc+0x98>)
 8004c46:	f000 facf 	bl	80051e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004c4a:	4809      	ldr	r0, [pc, #36]	; (8004c70 <shci_user_evt_proc+0x98>)
 8004c4c:	f000 faac 	bl	80051a8 <LST_is_empty>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <shci_user_evt_proc+0x8e>
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <shci_user_evt_proc+0x9c>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8004c5e:	4804      	ldr	r0, [pc, #16]	; (8004c70 <shci_user_evt_proc+0x98>)
 8004c60:	f7fb fb5b 	bl	800031a <shci_notify_asynch_evt>
  }


  return;
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
}
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000104 	.word	0x20000104
 8004c74:	20000114 	.word	0x20000114
 8004c78:	20000204 	.word	0x20000204

08004c7c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60ba      	str	r2, [r7, #8]
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	4603      	mov	r3, r0
 8004c88:	81fb      	strh	r3, [r7, #14]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f000 f86c 	bl	8004d6c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004c94:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <shci_send+0x84>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	89fa      	ldrh	r2, [r7, #14]
 8004c9a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8004c9e:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <shci_send+0x84>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	7b7a      	ldrb	r2, [r7, #13]
 8004ca4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004ca6:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <shci_send+0x84>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	7b7a      	ldrb	r2, [r7, #13]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fa4b 	bl	800614c <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8004cb6:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <shci_send+0x84>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f89c 	bl	8004df8 <OutputCmdTrace>

  shciContext.io.Send(0,0);
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <shci_send+0x88>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8004cca:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004cce:	f7fb fb3b 	bl	8000348 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f103 0008 	add.w	r0, r3, #8
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <shci_send+0x84>)
 8004cda:	6819      	ldr	r1, [r3, #0]
 8004cdc:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <shci_send+0x84>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	789b      	ldrb	r3, [r3, #2]
 8004ce2:	3303      	adds	r3, #3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f001 fa31 	bl	800614c <memcpy>

  OutputRspTrace(p_rsp);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f88e 	bl	8004e0c <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	f000 f83b 	bl	8004d6c <Cmd_SetStatus>

  return;
 8004cf6:	bf00      	nop
}
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000110 	.word	0x20000110
 8004d04:	20000204 	.word	0x20000204

08004d08 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8004d10:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <TlInit+0x4c>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8004d16:	4810      	ldr	r0, [pc, #64]	; (8004d58 <TlInit+0x50>)
 8004d18:	f000 fa36 	bl	8005188 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	f000 f825 	bl	8004d6c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <TlInit+0x54>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <TlInit+0x58>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00c      	beq.n	8004d4a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <TlInit+0x5c>)
 8004d36:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <TlInit+0x60>)
 8004d3a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8004d3c:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <TlInit+0x58>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f107 020c 	add.w	r2, r7, #12
 8004d44:	4610      	mov	r0, r2
 8004d46:	4798      	blx	r3
  }

  return;
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
}
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000110 	.word	0x20000110
 8004d58:	20000104 	.word	0x20000104
 8004d5c:	20000114 	.word	0x20000114
 8004d60:	20000204 	.word	0x20000204
 8004d64:	08004dbd 	.word	0x08004dbd
 8004d68:	08004dd5 	.word	0x08004dd5

08004d6c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <Cmd_SetStatus+0x48>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <Cmd_SetStatus+0x48>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2000      	movs	r0, #0
 8004d8a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <Cmd_SetStatus+0x4c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8004d92:	e00b      	b.n	8004dac <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8004d94:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <Cmd_SetStatus+0x4c>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8004d9a:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <Cmd_SetStatus+0x48>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <Cmd_SetStatus+0x48>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2001      	movs	r0, #1
 8004da8:	4798      	blx	r3
  return;
 8004daa:	bf00      	nop
 8004dac:	bf00      	nop
}
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000224 	.word	0x20000224
 8004db8:	2000010c 	.word	0x2000010c

08004dbc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7fb fab4 	bl	8000332 <shci_cmd_resp_release>

  return;
 8004dca:	bf00      	nop
}
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4805      	ldr	r0, [pc, #20]	; (8004df4 <TlUserEvtReceived+0x20>)
 8004de0:	f000 fa26 	bl	8005230 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004de4:	4803      	ldr	r0, [pc, #12]	; (8004df4 <TlUserEvtReceived+0x20>)
 8004de6:	f7fb fa98 	bl	800031a <shci_notify_asynch_evt>

  return;
 8004dea:	bf00      	nop
}
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000104 	.word	0x20000104

08004df8 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 8004e00:	bf00      	nop
}
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7a5b      	ldrb	r3, [r3, #9]
 8004e18:	2b0e      	cmp	r3, #14
 8004e1a:	d000      	beq.n	8004e1e <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 8004e1c:	e000      	b.n	8004e20 <OutputRspTrace+0x14>
      break;
 8004e1e:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 8004e20:	bf00      	nop
}
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7a5b      	ldrb	r3, [r3, #9]
 8004e38:	2bff      	cmp	r3, #255	; 0xff
 8004e3a:	d100      	bne.n	8004e3e <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
}
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <shci_register_io_bus+0x20>)
 8004e58:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <shci_register_io_bus+0x24>)
 8004e5e:	611a      	str	r2, [r3, #16]

  return;
 8004e60:	bf00      	nop
}
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	08004f85 	.word	0x08004f85
 8004e70:	08004fd9 	.word	0x08004fd9

08004e74 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8004e78:	f000 fe78 	bl	8005b6c <HW_IPCC_Enable>

  return;
 8004e7c:	bf00      	nop
}
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <TL_Init>:


void TL_Init( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8004e84:	4b10      	ldr	r3, [pc, #64]	; (8004ec8 <TL_Init+0x48>)
 8004e86:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <TL_Init+0x4c>)
 8004e88:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <TL_Init+0x48>)
 8004e8c:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <TL_Init+0x50>)
 8004e8e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8004e90:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <TL_Init+0x48>)
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <TL_Init+0x54>)
 8004e94:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <TL_Init+0x48>)
 8004e98:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <TL_Init+0x58>)
 8004e9a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <TL_Init+0x48>)
 8004e9e:	4a0f      	ldr	r2, [pc, #60]	; (8004edc <TL_Init+0x5c>)
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <TL_Init+0x48>)
 8004ea4:	4a0e      	ldr	r2, [pc, #56]	; (8004ee0 <TL_Init+0x60>)
 8004ea6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <TL_Init+0x48>)
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <TL_Init+0x64>)
 8004eac:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <TL_Init+0x48>)
 8004eb0:	4a0d      	ldr	r2, [pc, #52]	; (8004ee8 <TL_Init+0x68>)
 8004eb2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <TL_Init+0x48>)
 8004eb6:	4a0d      	ldr	r2, [pc, #52]	; (8004eec <TL_Init+0x6c>)
 8004eb8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8004eba:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <TL_Init+0x48>)
 8004ebc:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <TL_Init+0x70>)
 8004ebe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8004ec0:	f000 fe64 	bl	8005b8c <HW_IPCC_Init>

  return;
 8004ec4:	bf00      	nop
}
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20030000 	.word	0x20030000
 8004ecc:	20030028 	.word	0x20030028
 8004ed0:	20030048 	.word	0x20030048
 8004ed4:	20030058 	.word	0x20030058
 8004ed8:	20030064 	.word	0x20030064
 8004edc:	2003006c 	.word	0x2003006c
 8004ee0:	20030074 	.word	0x20030074
 8004ee4:	2003007c 	.word	0x2003007c
 8004ee8:	20030098 	.word	0x20030098
 8004eec:	2003009c 	.word	0x2003009c
 8004ef0:	200300a8 	.word	0x200300a8

08004ef4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8004f00:	4811      	ldr	r0, [pc, #68]	; (8004f48 <TL_BLE_Init+0x54>)
 8004f02:	f000 f941 	bl	8005188 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8004f06:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <TL_BLE_Init+0x58>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a0c      	ldr	r2, [pc, #48]	; (8004f50 <TL_BLE_Init+0x5c>)
 8004f20:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4a08      	ldr	r2, [pc, #32]	; (8004f48 <TL_BLE_Init+0x54>)
 8004f26:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8004f28:	f000 fe46 	bl	8005bb8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <TL_BLE_Init+0x60>)
 8004f32:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a07      	ldr	r2, [pc, #28]	; (8004f58 <TL_BLE_Init+0x64>)
 8004f3a:	6013      	str	r3, [r2, #0]

  return 0;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200300c4 	.word	0x200300c4
 8004f4c:	20030000 	.word	0x20030000
 8004f50:	20030a48 	.word	0x20030a48
 8004f54:	20000230 	.word	0x20000230
 8004f58:	20000234 	.word	0x20000234

08004f5c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <TL_BLE_SendCmd+0x24>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 8004f72:	f000 fe2b 	bl	8005bcc <HW_IPCC_BLE_SendCmd>

  return 0;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20030000 	.word	0x20030000

08004f84 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8004f90:	480d      	ldr	r0, [pc, #52]	; (8004fc8 <TL_SYS_Init+0x44>)
 8004f92:	f000 f8f9 	bl	8005188 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8004f96:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <TL_SYS_Init+0x48>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <TL_SYS_Init+0x44>)
 8004fa8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8004faa:	f000 fe19 	bl	8005be0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a07      	ldr	r2, [pc, #28]	; (8004fd0 <TL_SYS_Init+0x4c>)
 8004fb4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4a06      	ldr	r2, [pc, #24]	; (8004fd4 <TL_SYS_Init+0x50>)
 8004fbc:	6013      	str	r3, [r2, #0]

  return 0;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	200300cc 	.word	0x200300cc
 8004fcc:	20030000 	.word	0x20030000
 8004fd0:	20000238 	.word	0x20000238
 8004fd4:	2000023c 	.word	0x2000023c

08004fd8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <TL_SYS_SendCmd+0x24>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2210      	movs	r2, #16
 8004fec:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 8004fee:	f000 fe01 	bl	8005bf4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20030000 	.word	0x20030000

08005000 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005008:	4817      	ldr	r0, [pc, #92]	; (8005068 <TL_MM_Init+0x68>)
 800500a:	f000 f8bd 	bl	8005188 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800500e:	4817      	ldr	r0, [pc, #92]	; (800506c <TL_MM_Init+0x6c>)
 8005010:	f000 f8ba 	bl	8005188 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <TL_MM_Init+0x70>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	4a16      	ldr	r2, [pc, #88]	; (8005074 <TL_MM_Init+0x74>)
 800501a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800501c:	4b15      	ldr	r3, [pc, #84]	; (8005074 <TL_MM_Init+0x74>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6892      	ldr	r2, [r2, #8]
 8005024:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <TL_MM_Init+0x74>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68d2      	ldr	r2, [r2, #12]
 800502e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005030:	4b10      	ldr	r3, [pc, #64]	; (8005074 <TL_MM_Init+0x74>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <TL_MM_Init+0x68>)
 8005036:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005038:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <TL_MM_Init+0x74>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <TL_MM_Init+0x74>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6852      	ldr	r2, [r2, #4]
 800504a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <TL_MM_Init+0x74>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6912      	ldr	r2, [r2, #16]
 8005054:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <TL_MM_Init+0x74>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6952      	ldr	r2, [r2, #20]
 800505e:	619a      	str	r2, [r3, #24]

  return;
 8005060:	bf00      	nop
}
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	200300b4 	.word	0x200300b4
 800506c:	20000228 	.word	0x20000228
 8005070:	20030000 	.word	0x20030000
 8005074:	20000240 	.word	0x20000240

08005078 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4806      	ldr	r0, [pc, #24]	; (800509c <TL_MM_EvtDone+0x24>)
 8005084:	f000 f8d4 	bl	8005230 <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f82b 	bl	80050e4 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800508e:	4804      	ldr	r0, [pc, #16]	; (80050a0 <TL_MM_EvtDone+0x28>)
 8005090:	f000 fdbe 	bl	8005c10 <HW_IPCC_MM_SendFreeBuf>

  return;
 8005094:	bf00      	nop
}
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000228 	.word	0x20000228
 80050a0:	080050a5 	.word	0x080050a5

080050a4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80050aa:	e00c      	b.n	80050c6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	480a      	ldr	r0, [pc, #40]	; (80050dc <SendFreeBuf+0x38>)
 80050b2:	f000 f900 	bl	80052b6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80050b6:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <SendFreeBuf+0x3c>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4611      	mov	r1, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f8b5 	bl	8005230 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80050c6:	4805      	ldr	r0, [pc, #20]	; (80050dc <SendFreeBuf+0x38>)
 80050c8:	f000 f86e 	bl	80051a8 <LST_is_empty>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0ec      	beq.n	80050ac <SendFreeBuf+0x8>
  }

  return;
 80050d2:	bf00      	nop
}
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000228 	.word	0x20000228
 80050e0:	20030000 	.word	0x20030000

080050e4 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	7a5b      	ldrb	r3, [r3, #9]
 80050f0:	2b0f      	cmp	r3, #15
 80050f2:	d004      	beq.n	80050fe <OutputMemReleaseTrace+0x1a>
 80050f4:	2bff      	cmp	r3, #255	; 0xff
 80050f6:	d004      	beq.n	8005102 <OutputMemReleaseTrace+0x1e>
 80050f8:	2b0e      	cmp	r3, #14
 80050fa:	d004      	beq.n	8005106 <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 80050fc:	e004      	b.n	8005108 <OutputMemReleaseTrace+0x24>
      break;
 80050fe:	bf00      	nop
 8005100:	e002      	b.n	8005108 <OutputMemReleaseTrace+0x24>
      break;
 8005102:	bf00      	nop
 8005104:	e000      	b.n	8005108 <OutputMemReleaseTrace+0x24>
      break;
 8005106:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 8005108:	bf00      	nop
}
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005118:	4805      	ldr	r0, [pc, #20]	; (8005130 <TL_TRACES_Init+0x1c>)
 800511a:	f000 f835 	bl	8005188 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <TL_TRACES_Init+0x20>)
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	4a03      	ldr	r2, [pc, #12]	; (8005130 <TL_TRACES_Init+0x1c>)
 8005124:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005126:	f000 fd95 	bl	8005c54 <HW_IPCC_TRACES_Init>

  return;
 800512a:	bf00      	nop
}
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200300bc 	.word	0x200300bc
 8005134:	20030000 	.word	0x20030000

08005138 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <OTP_Read+0x48>)
 8005144:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005146:	e002      	b.n	800514e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3b08      	subs	r3, #8
 800514c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3307      	adds	r3, #7
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	79fa      	ldrb	r2, [r7, #7]
 8005156:	429a      	cmp	r2, r3
 8005158:	d003      	beq.n	8005162 <OTP_Read+0x2a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4a09      	ldr	r2, [pc, #36]	; (8005184 <OTP_Read+0x4c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d1f2      	bne.n	8005148 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3307      	adds	r3, #7
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	79fa      	ldrb	r2, [r7, #7]
 800516a:	429a      	cmp	r2, r3
 800516c:	d001      	beq.n	8005172 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8005172:	68fb      	ldr	r3, [r7, #12]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	1fff73f8 	.word	0x1fff73f8
 8005184:	1fff7000 	.word	0x1fff7000

08005188 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	605a      	str	r2, [r3, #4]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b0:	f3ef 8310 	mrs	r3, PRIMASK
 80051b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80051b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80051b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80051ba:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d102      	bne.n	80051cc <LST_is_empty+0x24>
  {
    return_value = TRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
 80051ca:	e001      	b.n	80051d0 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	75fb      	strb	r3, [r7, #23]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f2:	f3ef 8310 	mrs	r3, PRIMASK
 80051f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80051f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80051fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80051fc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523a:	f3ef 8310 	mrs	r3, PRIMASK
 800523e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005240:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005244:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	60fb      	str	r3, [r7, #12]
  return(result);
 8005286:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800528a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6852      	ldr	r2, [r2, #4]
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c0:	f3ef 8310 	mrs	r3, PRIMASK
 80052c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80052c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80052c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80052ca:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ffcd 	bl	8005278 <LST_remove_node>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80052e8:	bf00      	nop
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80052f4:	4b03      	ldr	r3, [pc, #12]	; (8005304 <LL_FLASH_GetUDN+0x14>)
 80052f6:	681b      	ldr	r3, [r3, #0]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	1fff7580 	.word	0x1fff7580

08005308 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <LL_FLASH_GetDeviceID+0x14>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	b2db      	uxtb	r3, r3
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	1fff7584 	.word	0x1fff7584

08005320 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <LL_FLASH_GetSTCompanyID+0x14>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	0a1b      	lsrs	r3, r3, #8
}
 800532a:	4618      	mov	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	1fff7584 	.word	0x1fff7584

08005338 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8005338:	b5b0      	push	{r4, r5, r7, lr}
 800533a:	b08c      	sub	sp, #48	; 0x30
 800533c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800533e:	4b28      	ldr	r3, [pc, #160]	; (80053e0 <APP_BLE_Init+0xa8>)
 8005340:	463c      	mov	r4, r7
 8005342:	461d      	mov	r5, r3
 8005344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800534a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800534c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005350:	c407      	stmia	r4!, {r0, r1, r2}
 8005352:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8005354:	f000 f8f6 	bl	8005544 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8005358:	2101      	movs	r1, #1
 800535a:	2002      	movs	r0, #2
 800535c:	f000 fc96 	bl	8005c8c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8005360:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <APP_BLE_Init+0xac>)
 8005362:	2100      	movs	r1, #0
 8005364:	2004      	movs	r0, #4
 8005366:	f000 fd9f 	bl	8005ea8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800536a:	463b      	mov	r3, r7
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fa17 	bl	80047a0 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8005372:	f000 f8fd 	bl	8005570 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8005376:	f7ff f973 	bl	8004660 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800537a:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <APP_BLE_Init+0xb0>)
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8005382:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <APP_BLE_Init+0xb0>)
 8005384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005388:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800538a:	4a18      	ldr	r2, [pc, #96]	; (80053ec <APP_BLE_Init+0xb4>)
 800538c:	2100      	movs	r1, #0
 800538e:	2001      	movs	r0, #1
 8005390:	f000 fd8a 	bl	8005ea8 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8005394:	2006      	movs	r0, #6
 8005396:	f7fe fe9a 	bl	80040ce <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800539a:	f000 fb27 	bl	80059ec <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800539e:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <APP_BLE_Init+0xb8>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	4914      	ldr	r1, [pc, #80]	; (80053f4 <APP_BLE_Init+0xbc>)
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7fb fc11 	bl	8000bcc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80053aa:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <APP_BLE_Init+0xc0>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	4913      	ldr	r1, [pc, #76]	; (80053fc <APP_BLE_Init+0xc4>)
 80053b0:	2000      	movs	r0, #0
 80053b2:	f7fb fc0b 	bl	8000bcc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <APP_BLE_Init+0xb0>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <APP_BLE_Init+0xb0>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <APP_BLE_Init+0xc8>)
 80053c8:	2280      	movs	r2, #128	; 0x80
 80053ca:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <APP_BLE_Init+0xcc>)
 80053ce:	22a0      	movs	r2, #160	; 0xa0
 80053d0:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80053d2:	2001      	movs	r0, #1
 80053d4:	f000 f9a6 	bl	8005724 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80053d8:	bf00      	nop
}
 80053da:	3730      	adds	r7, #48	; 0x30
 80053dc:	46bd      	mov	sp, r7
 80053de:	bdb0      	pop	{r4, r5, r7, pc}
 80053e0:	080061c8 	.word	0x080061c8
 80053e4:	08004835 	.word	0x08004835
 80053e8:	20000118 	.word	0x20000118
 80053ec:	08005891 	.word	0x08005891
 80053f0:	080058c5 	.word	0x080058c5
 80053f4:	200001a9 	.word	0x200001a9
 80053f8:	080058d5 	.word	0x080058d5
 80053fc:	200001aa 	.word	0x200001aa
 8005400:	200001ac 	.word	0x200001ac
 8005404:	200001ae 	.word	0x200001ae

08005408 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005410:	2342      	movs	r3, #66	; 0x42
 8005412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3301      	adds	r3, #1
 800541a:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b3e      	cmp	r3, #62	; 0x3e
 8005422:	d024      	beq.n	800546e <SVCCTL_App_Notification+0x66>
 8005424:	2bff      	cmp	r3, #255	; 0xff
 8005426:	d070      	beq.n	800550a <SVCCTL_App_Notification+0x102>
 8005428:	2b05      	cmp	r3, #5
 800542a:	d000      	beq.n	800542e <SVCCTL_App_Notification+0x26>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 800542c:	e080      	b.n	8005530 <SVCCTL_App_Notification+0x128>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	3302      	adds	r3, #2
 8005432:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800543a:	b29a      	uxth	r2, r3
 800543c:	4b3f      	ldr	r3, [pc, #252]	; (800553c <SVCCTL_App_Notification+0x134>)
 800543e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005440:	429a      	cmp	r2, r3
 8005442:	d106      	bne.n	8005452 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8005444:	4b3d      	ldr	r3, [pc, #244]	; (800553c <SVCCTL_App_Notification+0x134>)
 8005446:	2200      	movs	r2, #0
 8005448:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800544a:	4b3c      	ldr	r3, [pc, #240]	; (800553c <SVCCTL_App_Notification+0x134>)
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 8005452:	2001      	movs	r0, #1
 8005454:	f000 f966 	bl	8005724 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8005458:	4b39      	ldr	r3, [pc, #228]	; (8005540 <SVCCTL_App_Notification+0x138>)
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800545e:	4b37      	ldr	r3, [pc, #220]	; (800553c <SVCCTL_App_Notification+0x134>)
 8005460:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005462:	4b37      	ldr	r3, [pc, #220]	; (8005540 <SVCCTL_App_Notification+0x138>)
 8005464:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8005466:	4836      	ldr	r0, [pc, #216]	; (8005540 <SVCCTL_App_Notification+0x138>)
 8005468:	f000 faac 	bl	80059c4 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800546c:	e060      	b.n	8005530 <SVCCTL_App_Notification+0x128>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	3302      	adds	r3, #2
 8005472:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d042      	beq.n	8005502 <SVCCTL_App_Notification+0xfa>
 800547c:	2b0c      	cmp	r3, #12
 800547e:	d002      	beq.n	8005486 <SVCCTL_App_Notification+0x7e>
 8005480:	2b01      	cmp	r3, #1
 8005482:	d016      	beq.n	80054b2 <SVCCTL_App_Notification+0xaa>
          break;
 8005484:	e040      	b.n	8005508 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	3301      	adds	r3, #1
 800548a:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800548c:	4b2b      	ldr	r3, [pc, #172]	; (800553c <SVCCTL_App_Notification+0x134>)
 800548e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005490:	f107 020a 	add.w	r2, r7, #10
 8005494:	f107 010b 	add.w	r1, r7, #11
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe fe86 	bl	80041aa <hci_le_read_phy>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 80054a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d12c      	bne.n	8005506 <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	2b02      	cmp	r3, #2
          break;
 80054b0:	e029      	b.n	8005506 <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	3301      	adds	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80054b8:	4b20      	ldr	r3, [pc, #128]	; (800553c <SVCCTL_App_Notification+0x134>)
 80054ba:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fb fbfa 	bl	8000cb8 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80054c4:	4b1d      	ldr	r3, [pc, #116]	; (800553c <SVCCTL_App_Notification+0x134>)
 80054c6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d104      	bne.n	80054d8 <SVCCTL_App_Notification+0xd0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <SVCCTL_App_Notification+0x134>)
 80054d0:	2206      	movs	r2, #6
 80054d2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80054d6:	e003      	b.n	80054e0 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80054d8:	4b18      	ldr	r3, [pc, #96]	; (800553c <SVCCTL_App_Notification+0x134>)
 80054da:	2205      	movs	r2, #5
 80054dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <SVCCTL_App_Notification+0x134>)
 80054ea:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <SVCCTL_App_Notification+0x138>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <SVCCTL_App_Notification+0x134>)
 80054f4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <SVCCTL_App_Notification+0x138>)
 80054f8:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80054fa:	4811      	ldr	r0, [pc, #68]	; (8005540 <SVCCTL_App_Notification+0x138>)
 80054fc:	f000 fa62 	bl	80059c4 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8005500:	e002      	b.n	8005508 <SVCCTL_App_Notification+0x100>
          break;
 8005502:	bf00      	nop
 8005504:	e014      	b.n	8005530 <SVCCTL_App_Notification+0x128>
          break;
 8005506:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8005508:	e012      	b.n	8005530 <SVCCTL_App_Notification+0x128>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	3302      	adds	r3, #2
 800550e:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f240 4207 	movw	r2, #1031	; 0x407
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <SVCCTL_App_Notification+0x120>
 800551e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005522:	d003      	beq.n	800552c <SVCCTL_App_Notification+0x124>
 8005524:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 8005526:	e002      	b.n	800552e <SVCCTL_App_Notification+0x126>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <SVCCTL_App_Notification+0x126>
      break;
 800552c:	bf00      	nop
      break; /* EVT_VENDOR */
 800552e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8005530:	2301      	movs	r3, #1
}
 8005532:	4618      	mov	r0, r3
 8005534:	3728      	adds	r7, #40	; 0x28
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000118 	.word	0x20000118
 8005540:	20000320 	.word	0x20000320

08005544 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <Ble_Tl_Init+0x20>)
 800554c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <Ble_Tl_Init+0x24>)
 8005550:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8005552:	463b      	mov	r3, r7
 8005554:	4619      	mov	r1, r3
 8005556:	4805      	ldr	r0, [pc, #20]	; (800556c <Ble_Tl_Init+0x28>)
 8005558:	f7ff f950 	bl	80047fc <hci_init>

  return;
 800555c:	bf00      	nop
}
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200300d4 	.word	0x200300d4
 8005568:	0800595f 	.word	0x0800595f
 800556c:	08005927 	.word	0x08005927

08005570 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8005570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005572:	b091      	sub	sp, #68	; 0x44
 8005574:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8005576:	2300      	movs	r3, #0
 8005578:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800557a:	f7fe fdf2 	bl	8004162 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800557e:	f000 f943 	bl	8005808 <BleGetBdAddress>
 8005582:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	2106      	movs	r1, #6
 8005588:	2000      	movs	r0, #0
 800558a:	f7fe fce0 	bl	8003f4e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	795a      	ldrb	r2, [r3, #5]
 8005592:	4b5e      	ldr	r3, [pc, #376]	; (800570c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005594:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	791a      	ldrb	r2, [r3, #4]
 800559a:	4b5c      	ldr	r3, [pc, #368]	; (800570c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800559c:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	78da      	ldrb	r2, [r3, #3]
 80055a2:	4b5a      	ldr	r3, [pc, #360]	; (800570c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80055a4:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	789a      	ldrb	r2, [r3, #2]
 80055aa:	4b58      	ldr	r3, [pc, #352]	; (800570c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80055ac:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	785a      	ldrb	r2, [r3, #1]
 80055b2:	4b56      	ldr	r3, [pc, #344]	; (800570c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80055b4:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	4b54      	ldr	r3, [pc, #336]	; (800570c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80055bc:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80055be:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80055c2:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80055c4:	f7ff fe94 	bl	80052f0 <LL_FLASH_GetUDN>
 80055c8:	4603      	mov	r3, r0
 80055ca:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80055cc:	f107 0308 	add.w	r3, r7, #8
 80055d0:	461a      	mov	r2, r3
 80055d2:	2106      	movs	r1, #6
 80055d4:	202e      	movs	r0, #46	; 0x2e
 80055d6:	f7fe fcba 	bl	8003f4e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80055da:	4a4d      	ldr	r2, [pc, #308]	; (8005710 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 80055dc:	2110      	movs	r1, #16
 80055de:	2018      	movs	r0, #24
 80055e0:	f7fe fcb5 	bl	8003f4e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80055e4:	4a4b      	ldr	r2, [pc, #300]	; (8005714 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 80055e6:	2110      	movs	r1, #16
 80055e8:	2008      	movs	r0, #8
 80055ea:	f7fe fcb0 	bl	8003f4e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80055ee:	2118      	movs	r1, #24
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7fe fd15 	bl	8004020 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80055f6:	f7fe fa65 	bl	8003ac4 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80055fe:	7ffb      	ldrb	r3, [r7, #31]
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8005606:	7ffb      	ldrb	r3, [r7, #31]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01e      	beq.n	800564a <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "MY_BLE";
 800560c:	4b42      	ldr	r3, [pc, #264]	; (8005718 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800560e:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8005610:	f107 0216 	add.w	r2, r7, #22
 8005614:	7ff8      	ldrb	r0, [r7, #31]
 8005616:	f107 0312 	add.w	r3, r7, #18
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	f107 0314 	add.w	r3, r7, #20
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	2207      	movs	r2, #7
 8005626:	2100      	movs	r1, #0
 8005628:	f7fe f941 	bl	80038ae <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800562c:	8afc      	ldrh	r4, [r7, #22]
 800562e:	8abd      	ldrh	r5, [r7, #20]
 8005630:	69b8      	ldr	r0, [r7, #24]
 8005632:	f7fa fda3 	bl	800017c <strlen>
 8005636:	4603      	mov	r3, r0
 8005638:	b2da      	uxtb	r2, r3
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	2200      	movs	r2, #0
 8005642:	4629      	mov	r1, r5
 8005644:	4620      	mov	r0, r4
 8005646:	f7fe fbfb 	bl	8003e40 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800564a:	8af8      	ldrh	r0, [r7, #22]
 800564c:	8a79      	ldrh	r1, [r7, #18]
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	2302      	movs	r3, #2
 8005654:	2200      	movs	r2, #0
 8005656:	f7fe fbf3 	bl	8003e40 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800565a:	2202      	movs	r2, #2
 800565c:	2102      	movs	r1, #2
 800565e:	2000      	movs	r0, #0
 8005660:	f7fe fe0b 	bl	800427a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8005664:	4b2d      	ldr	r3, [pc, #180]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800566a:	4b2c      	ldr	r3, [pc, #176]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe f82b 	bl	80036ca <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8005674:	4b29      	ldr	r3, [pc, #164]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005676:	2201      	movs	r2, #1
 8005678:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800567a:	4b28      	ldr	r3, [pc, #160]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800567c:	2200      	movs	r2, #0
 800567e:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8005680:	4b26      	ldr	r3, [pc, #152]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005682:	2208      	movs	r2, #8
 8005684:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8005686:	4b25      	ldr	r3, [pc, #148]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005688:	2210      	movs	r2, #16
 800568a:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800568e:	2200      	movs	r2, #0
 8005690:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8005692:	4b22      	ldr	r3, [pc, #136]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8005696:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8005698:	4b20      	ldr	r3, [pc, #128]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800569a:	2200      	movs	r2, #0
 800569c:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056a4:	e00b      	b.n	80056be <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 80056a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80056ac:	4413      	add	r3, r2
 80056ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80056b2:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 80056b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056b8:	3301      	adds	r3, #1
 80056ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	d9ef      	bls.n	80056a6 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80056c6:	4b15      	ldr	r3, [pc, #84]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80056c8:	789d      	ldrb	r5, [r3, #2]
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80056cc:	785e      	ldrb	r6, [r3, #1]
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80056d0:	7d5b      	ldrb	r3, [r3, #21]
 80056d2:	4a12      	ldr	r2, [pc, #72]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80056d4:	7d92      	ldrb	r2, [r2, #22]
 80056d6:	4911      	ldr	r1, [pc, #68]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80056d8:	7d09      	ldrb	r1, [r1, #20]
 80056da:	4810      	ldr	r0, [pc, #64]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80056dc:	6980      	ldr	r0, [r0, #24]
 80056de:	2400      	movs	r4, #0
 80056e0:	9404      	str	r4, [sp, #16]
 80056e2:	9003      	str	r0, [sp, #12]
 80056e4:	9102      	str	r1, [sp, #8]
 80056e6:	9201      	str	r2, [sp, #4]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	2300      	movs	r3, #0
 80056ec:	2201      	movs	r2, #1
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	f7fe f834 	bl	800375e <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80056f8:	789b      	ldrb	r3, [r3, #2]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 80056fe:	f7fe f9bd 	bl	8003a7c <aci_gap_configure_whitelist>
   }
}
 8005702:	bf00      	nop
 8005704:	372c      	adds	r7, #44	; 0x2c
 8005706:	46bd      	mov	sp, r7
 8005708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570a:	bf00      	nop
 800570c:	20000010 	.word	0x20000010
 8005710:	08006398 	.word	0x08006398
 8005714:	080063a8 	.word	0x080063a8
 8005718:	080061f8 	.word	0x080061f8
 800571c:	20000118 	.word	0x20000118
 8005720:	0001b207 	.word	0x0001b207

08005724 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	; 0x30
 8005728:	af08      	add	r7, sp, #32
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800572e:	2342      	movs	r3, #66	; 0x42
 8005730:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d106      	bne.n	8005746 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8005738:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <Adv_Request+0xc8>)
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800573e:	4b2c      	ldr	r3, [pc, #176]	; (80057f0 <Adv_Request+0xcc>)
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	81bb      	strh	r3, [r7, #12]
 8005744:	e005      	b.n	8005752 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8005746:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800574a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800574c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005750:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8005752:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <Adv_Request+0xd0>)
 8005754:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005758:	4618      	mov	r0, r3
 800575a:	f7fb faad 	bl	8000cb8 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	2b02      	cmp	r3, #2
 8005762:	d10d      	bne.n	8005780 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8005764:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <Adv_Request+0xd0>)
 8005766:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800576a:	2b01      	cmp	r3, #1
 800576c:	d004      	beq.n	8005778 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800576e:	4b21      	ldr	r3, [pc, #132]	; (80057f4 <Adv_Request+0xd0>)
 8005770:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005774:	2b02      	cmp	r3, #2
 8005776:	d103      	bne.n	8005780 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8005778:	f7fd fea5 	bl	80034c6 <aci_gap_set_non_discoverable>
 800577c:	4603      	mov	r3, r0
 800577e:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8005780:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <Adv_Request+0xd0>)
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8005788:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <Adv_Request+0xd0>)
 800578a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800578e:	89b8      	ldrh	r0, [r7, #12]
 8005790:	89f9      	ldrh	r1, [r7, #14]
 8005792:	2200      	movs	r2, #0
 8005794:	9206      	str	r2, [sp, #24]
 8005796:	2200      	movs	r2, #0
 8005798:	9205      	str	r2, [sp, #20]
 800579a:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <Adv_Request+0xd4>)
 800579c:	9204      	str	r2, [sp, #16]
 800579e:	9303      	str	r3, [sp, #12]
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <Adv_Request+0xd8>)
 80057a2:	9302      	str	r3, [sp, #8]
 80057a4:	2307      	movs	r3, #7
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2300      	movs	r3, #0
 80057ae:	4602      	mov	r2, r0
 80057b0:	2000      	movs	r0, #0
 80057b2:	f7fd feac 	bl	800350e <aci_gap_set_discoverable>
 80057b6:	4603      	mov	r3, r0
 80057b8:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80057ba:	4911      	ldr	r1, [pc, #68]	; (8005800 <Adv_Request+0xdc>)
 80057bc:	200e      	movs	r0, #14
 80057be:	f7fe f901 	bl	80039c4 <aci_gap_update_adv_data>
 80057c2:	4603      	mov	r3, r0
 80057c4:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d107      	bne.n	80057e2 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <Adv_Request+0xd0>)
 80057d4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80057d8:	490a      	ldr	r1, [pc, #40]	; (8005804 <Adv_Request+0xe0>)
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fb faf6 	bl	8000dcc <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
}
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200001ac 	.word	0x200001ac
 80057f0:	200001ae 	.word	0x200001ae
 80057f4:	20000118 	.word	0x20000118
 80057f8:	20000141 	.word	0x20000141
 80057fc:	080063b8 	.word	0x080063b8
 8005800:	20000010 	.word	0x20000010
 8005804:	0001e046 	.word	0x0001e046

08005808 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800580e:	f7ff fd6f 	bl	80052f0 <LL_FLASH_GetUDN>
 8005812:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800581a:	d023      	beq.n	8005864 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800581c:	f7ff fd80 	bl	8005320 <LL_FLASH_GetSTCompanyID>
 8005820:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8005822:	f7ff fd71 	bl	8005308 <LL_FLASH_GetDeviceID>
 8005826:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	4b16      	ldr	r3, [pc, #88]	; (8005888 <BleGetBdAddress+0x80>)
 800582e:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	0a1b      	lsrs	r3, r3, #8
 8005834:	b2da      	uxtb	r2, r3
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <BleGetBdAddress+0x80>)
 8005838:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	b2da      	uxtb	r2, r3
 8005840:	4b11      	ldr	r3, [pc, #68]	; (8005888 <BleGetBdAddress+0x80>)
 8005842:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <BleGetBdAddress+0x80>)
 800584a:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	b2da      	uxtb	r2, r3
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <BleGetBdAddress+0x80>)
 8005852:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <BleGetBdAddress+0x80>)
 800585c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800585e:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <BleGetBdAddress+0x80>)
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	e00b      	b.n	800587c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8005864:	2000      	movs	r0, #0
 8005866:	f7ff fc67 	bl	8005138 <OTP_Read>
 800586a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	e001      	b.n	800587c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <BleGetBdAddress+0x84>)
 800587a:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800587c:	697b      	ldr	r3, [r7, #20]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000244 	.word	0x20000244
 800588c:	08006390 	.word	0x08006390

08005890 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <Adv_Cancel+0x30>)
 8005898:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800589c:	2b05      	cmp	r3, #5
 800589e:	d00a      	beq.n	80058b6 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 80058a0:	2300      	movs	r3, #0
 80058a2:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80058a4:	f7fd fe0f 	bl	80034c6 <aci_gap_set_non_discoverable>
 80058a8:	4603      	mov	r3, r0
 80058aa:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <Adv_Cancel+0x30>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
}
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000118 	.word	0x20000118

080058c4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80058c8:	2100      	movs	r1, #0
 80058ca:	2001      	movs	r0, #1
 80058cc:	f000 fb0c 	bl	8005ee8 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80058d0:	bf00      	nop
}
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 80058d8:	bf00      	nop
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80058ea:	2100      	movs	r1, #0
 80058ec:	2004      	movs	r0, #4
 80058ee:	f000 fafb 	bl	8005ee8 <UTIL_SEQ_SetTask>
  return;
 80058f2:	bf00      	nop
}
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005902:	2001      	movs	r0, #1
 8005904:	f000 fb56 	bl	8005fb4 <UTIL_SEQ_SetEvt>
  return;
 8005908:	bf00      	nop
}
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005918:	2001      	movs	r0, #1
 800591a:	f000 fb69 	bl	8005ff0 <UTIL_SEQ_WaitEvt>
  return;
 800591e:	bf00      	nop
}
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	3308      	adds	r3, #8
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fedf 	bl	80046fc <SVCCTL_UserEvtRx>
 800593e:	4603      	mov	r3, r0
 8005940:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8005942:	7afb      	ldrb	r3, [r7, #11]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800594e:	e002      	b.n	8005956 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	4603      	mov	r3, r0
 8005966:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <BLE_StatusNot+0x16>
 800596e:	2b01      	cmp	r3, #1
 8005970:	d006      	beq.n	8005980 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8005972:	e00b      	b.n	800598c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005974:	2307      	movs	r3, #7
 8005976:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fadf 	bl	8005f3c <UTIL_SEQ_PauseTask>
      break;
 800597e:	e005      	b.n	800598c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005980:	2307      	movs	r3, #7
 8005982:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 faf7 	bl	8005f78 <UTIL_SEQ_ResumeTask>
      break;
 800598a:	bf00      	nop
  }
  return;
 800598c:	bf00      	nop
}
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d004      	beq.n	80059ae <P2PS_STM_App_Notification+0x1a>
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d004      	beq.n	80059b2 <P2PS_STM_App_Notification+0x1e>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80059ac:	e004      	b.n	80059b8 <P2PS_STM_App_Notification+0x24>
      break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <P2PS_STM_App_Notification+0x24>
      break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <P2PS_STM_App_Notification+0x24>
      break;
 80059b6:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80059b8:	bf00      	nop
}
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <P2PS_APP_Notification+0x16>
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d002      	beq.n	80059de <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80059d8:	e002      	b.n	80059e0 <P2PS_APP_Notification+0x1c>
    break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <P2PS_APP_Notification+0x1c>
    break;
 80059de:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80059e0:	bf00      	nop
}
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 80059f0:	bf00      	nop
}
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <LL_PWR_EnableBootC2>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <LL_PWR_EnableBootC2+0x1c>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <LL_PWR_EnableBootC2+0x1c>)
 8005a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0a:	60d3      	str	r3, [r2, #12]
}
 8005a0c:	bf00      	nop
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	58000400 	.word	0x58000400

08005a1c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005a26:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005a2a:	4905      	ldr	r1, [pc, #20]	; (8005a40 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	58000800 	.word	0x58000800

08005a44 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005a4e:	6a1a      	ldr	r2, [r3, #32]
 8005a50:	4904      	ldr	r1, [pc, #16]	; (8005a64 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	620b      	str	r3, [r1, #32]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	58000800 	.word	0x58000800

08005a68 <LL_AHB3_GRP1_EnableClock>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f043 0201 	orr.w	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	43db      	mvns	r3, r3
 8005aee:	401a      	ands	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	605a      	str	r2, [r3, #4]
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	401a      	ands	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	605a      	str	r2, [r3, #4]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	041a      	lsls	r2, r3, #16
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	609a      	str	r2, [r3, #8]
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	4013      	ands	r3, r2
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d101      	bne.n	8005b5e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8005b70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005b74:	f7ff ff52 	bl	8005a1c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8005b78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005b7c:	f7ff ff62 	bl	8005a44 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8005b80:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8005b82:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8005b84:	f7ff ff3a 	bl	80059fc <LL_PWR_EnableBootC2>

  return;
 8005b88:	bf00      	nop
}
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8005b90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005b94:	f7ff ff68 	bl	8005a68 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8005b98:	4806      	ldr	r0, [pc, #24]	; (8005bb4 <HW_IPCC_Init+0x28>)
 8005b9a:	f7ff ff8e 	bl	8005aba <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8005b9e:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <HW_IPCC_Init+0x28>)
 8005ba0:	f7ff ff7b 	bl	8005a9a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8005ba4:	202c      	movs	r0, #44	; 0x2c
 8005ba6:	f7fb fe72 	bl	800188e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005baa:	202d      	movs	r0, #45	; 0x2d
 8005bac:	f7fb fe6f 	bl	800188e <HAL_NVIC_EnableIRQ>

  return;
 8005bb0:	bf00      	nop
}
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	58000c00 	.word	0x58000c00

08005bb8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4802      	ldr	r0, [pc, #8]	; (8005bc8 <HW_IPCC_BLE_Init+0x10>)
 8005bc0:	f7ff ff9e 	bl	8005b00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005bc4:	bf00      	nop
}
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	58000c00 	.word	0x58000c00

08005bcc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	4802      	ldr	r0, [pc, #8]	; (8005bdc <HW_IPCC_BLE_SendCmd+0x10>)
 8005bd4:	f7ff ffa6 	bl	8005b24 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8005bd8:	bf00      	nop
}
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	58000c00 	.word	0x58000c00

08005be0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8005be4:	2102      	movs	r1, #2
 8005be6:	4802      	ldr	r0, [pc, #8]	; (8005bf0 <HW_IPCC_SYS_Init+0x10>)
 8005be8:	f7ff ff8a 	bl	8005b00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005bec:	bf00      	nop
}
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	58000c00 	.word	0x58000c00

08005bf4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	4804      	ldr	r0, [pc, #16]	; (8005c0c <HW_IPCC_SYS_SendCmd+0x18>)
 8005bfc:	f7ff ff92 	bl	8005b24 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005c00:	2102      	movs	r1, #2
 8005c02:	4802      	ldr	r0, [pc, #8]	; (8005c0c <HW_IPCC_SYS_SendCmd+0x18>)
 8005c04:	f7ff ff69 	bl	8005ada <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8005c08:	bf00      	nop
}
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	58000c00 	.word	0x58000c00

08005c10 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8005c18:	2108      	movs	r1, #8
 8005c1a:	480c      	ldr	r0, [pc, #48]	; (8005c4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8005c1c:	f7ff ff91 	bl	8005b42 <LL_C1_IPCC_IsActiveFlag_CHx>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8005c26:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8005c2c:	2108      	movs	r1, #8
 8005c2e:	4807      	ldr	r0, [pc, #28]	; (8005c4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8005c30:	f7ff ff53 	bl	8005ada <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8005c34:	e006      	b.n	8005c44 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8005c3a:	2108      	movs	r1, #8
 8005c3c:	4803      	ldr	r0, [pc, #12]	; (8005c4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8005c3e:	f7ff ff71 	bl	8005b24 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8005c42:	bf00      	nop
}
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	58000c00 	.word	0x58000c00
 8005c50:	2000024c 	.word	0x2000024c

08005c54 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8005c58:	2108      	movs	r1, #8
 8005c5a:	4802      	ldr	r0, [pc, #8]	; (8005c64 <HW_IPCC_TRACES_Init+0x10>)
 8005c5c:	f7ff ff50 	bl	8005b00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005c60:	bf00      	nop
}
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	58000c00 	.word	0x58000c00

08005c68 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <UTIL_LPM_Init+0x1c>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <UTIL_LPM_Init+0x20>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8005c78:	bf00      	nop
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000250 	.word	0x20000250
 8005c88:	20000254 	.word	0x20000254

08005c8c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c98:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9c:	613b      	str	r3, [r7, #16]
  return(result);
 8005c9e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8005ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ca2:	b672      	cpsid	i
  
  switch(state)
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d009      	beq.n	8005cbe <UTIL_LPM_SetOffMode+0x32>
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d000      	beq.n	8005cb0 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8005cae:	e00e      	b.n	8005cce <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <UTIL_LPM_SetOffMode+0x58>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <UTIL_LPM_SetOffMode+0x58>)
 8005cba:	6013      	str	r3, [r2, #0]
      break;
 8005cbc:	e007      	b.n	8005cce <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	43da      	mvns	r2, r3
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <UTIL_LPM_SetOffMode+0x58>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	4a06      	ldr	r2, [pc, #24]	; (8005ce4 <UTIL_LPM_SetOffMode+0x58>)
 8005cca:	6013      	str	r3, [r2, #0]
      break;
 8005ccc:	bf00      	nop
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8005cd8:	bf00      	nop
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	20000254 	.word	0x20000254

08005ce8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8005cf0:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <UTIL_SEQ_Run+0x1a0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8005cf6:	4b64      	ldr	r3, [pc, #400]	; (8005e88 <UTIL_SEQ_Run+0x1a0>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	4a62      	ldr	r2, [pc, #392]	; (8005e88 <UTIL_SEQ_Run+0x1a0>)
 8005d00:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8005d02:	e081      	b.n	8005e08 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8005d08:	e002      	b.n	8005d10 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8005d10:	4a5e      	ldr	r2, [pc, #376]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005d18:	4b5d      	ldr	r3, [pc, #372]	; (8005e90 <UTIL_SEQ_Run+0x1a8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	401a      	ands	r2, r3
 8005d1e:	4b5a      	ldr	r3, [pc, #360]	; (8005e88 <UTIL_SEQ_Run+0x1a0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8005d28:	4a58      	ldr	r2, [pc, #352]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005d30:	4b57      	ldr	r3, [pc, #348]	; (8005e90 <UTIL_SEQ_Run+0x1a8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	401a      	ands	r2, r3
 8005d36:	4b54      	ldr	r3, [pc, #336]	; (8005e88 <UTIL_SEQ_Run+0x1a0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8005d3e:	4a53      	ldr	r2, [pc, #332]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8005d50:	4a4e      	ldr	r2, [pc, #312]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4413      	add	r3, r2
 8005d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d5c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8005d5e:	4a4b      	ldr	r2, [pc, #300]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f98f 	bl	8006090 <SEQ_BitPosition>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <UTIL_SEQ_Run+0x1ac>)
 8005d78:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8005d7a:	4a44      	ldr	r2, [pc, #272]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4413      	add	r3, r2
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	4b43      	ldr	r3, [pc, #268]	; (8005e94 <UTIL_SEQ_Run+0x1ac>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2101      	movs	r1, #1
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	401a      	ands	r2, r3
 8005d92:	493e      	ldr	r1, [pc, #248]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	440b      	add	r3, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005da0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005da2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005da4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8005da6:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8005da8:	4b3a      	ldr	r3, [pc, #232]	; (8005e94 <UTIL_SEQ_Run+0x1ac>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2201      	movs	r2, #1
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43da      	mvns	r2, r3
 8005db4:	4b38      	ldr	r3, [pc, #224]	; (8005e98 <UTIL_SEQ_Run+0x1b0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4013      	ands	r3, r2
 8005dba:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <UTIL_SEQ_Run+0x1b0>)
 8005dbc:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dc2:	e013      	b.n	8005dec <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	4a30      	ldr	r2, [pc, #192]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005dca:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8005dce:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <UTIL_SEQ_Run+0x1ac>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43da      	mvns	r2, r3
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	400a      	ands	r2, r1
 8005de0:	492a      	ldr	r1, [pc, #168]	; (8005e8c <UTIL_SEQ_Run+0x1a4>)
 8005de2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	3b01      	subs	r3, #1
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e8      	bne.n	8005dc4 <UTIL_SEQ_Run+0xdc>
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <UTIL_SEQ_Run+0x1ac>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a26      	ldr	r2, [pc, #152]	; (8005e9c <UTIL_SEQ_Run+0x1b4>)
 8005e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e06:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8005e08:	4b23      	ldr	r3, [pc, #140]	; (8005e98 <UTIL_SEQ_Run+0x1b0>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <UTIL_SEQ_Run+0x1a8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	401a      	ands	r2, r3
 8005e12:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <UTIL_SEQ_Run+0x1a0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <UTIL_SEQ_Run+0x144>
 8005e1c:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <UTIL_SEQ_Run+0x1b8>)
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <UTIL_SEQ_Run+0x1bc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f43f af6c 	beq.w	8005d04 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <UTIL_SEQ_Run+0x1ac>)
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e32:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8005e34:	f000 f91e 	bl	8006074 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e38:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e3e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005e40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e42:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8005e44:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <UTIL_SEQ_Run+0x1b0>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <UTIL_SEQ_Run+0x1a8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	401a      	ands	r2, r3
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <UTIL_SEQ_Run+0x1a0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d108      	bne.n	8005e6a <UTIL_SEQ_Run+0x182>
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <UTIL_SEQ_Run+0x1b8>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <UTIL_SEQ_Run+0x1bc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 8005e66:	f7fa fa44 	bl	80002f2 <UTIL_SEQ_Idle>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8005e74:	f000 f905 	bl	8006082 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8005e78:	4a03      	ldr	r2, [pc, #12]	; (8005e88 <UTIL_SEQ_Run+0x1a0>)
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	6013      	str	r3, [r2, #0]

  return;
 8005e7e:	bf00      	nop
}
 8005e80:	3730      	adds	r7, #48	; 0x30
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000024 	.word	0x20000024
 8005e8c:	200002e8 	.word	0x200002e8
 8005e90:	20000020 	.word	0x20000020
 8005e94:	20000264 	.word	0x20000264
 8005e98:	20000258 	.word	0x20000258
 8005e9c:	20000268 	.word	0x20000268
 8005ea0:	2000025c 	.word	0x2000025c
 8005ea4:	20000260 	.word	0x20000260

08005ea8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb8:	617b      	str	r3, [r7, #20]
  return(result);
 8005eba:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8005ebc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ebe:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f8e5 	bl	8006090 <SEQ_BitPosition>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4a06      	ldr	r2, [pc, #24]	; (8005ee4 <UTIL_SEQ_RegTask+0x3c>)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8005edc:	bf00      	nop
}
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000268 	.word	0x20000268

08005ee8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005efa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005efc:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 8005efe:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <UTIL_SEQ_SetTask+0x4c>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	4a0b      	ldr	r2, [pc, #44]	; (8005f34 <UTIL_SEQ_SetTask+0x4c>)
 8005f08:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8005f0a:	4a0b      	ldr	r2, [pc, #44]	; (8005f38 <UTIL_SEQ_SetTask+0x50>)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	4908      	ldr	r1, [pc, #32]	; (8005f38 <UTIL_SEQ_SetTask+0x50>)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8005f28:	bf00      	nop
}
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	20000258 	.word	0x20000258
 8005f38:	200002e8 	.word	0x200002e8

08005f3c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f44:	f3ef 8310 	mrs	r3, PRIMASK
 8005f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f4e:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	43da      	mvns	r2, r3
 8005f54:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <UTIL_SEQ_PauseTask+0x38>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	4a06      	ldr	r2, [pc, #24]	; (8005f74 <UTIL_SEQ_PauseTask+0x38>)
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8005f68:	bf00      	nop
}
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	20000020 	.word	0x20000020

08005f78 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f80:	f3ef 8310 	mrs	r3, PRIMASK
 8005f84:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f86:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f8a:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 8005f8c:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <UTIL_SEQ_ResumeTask+0x38>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	4a06      	ldr	r2, [pc, #24]	; (8005fb0 <UTIL_SEQ_ResumeTask+0x38>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8005fa2:	bf00      	nop
}
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000020 	.word	0x20000020

08005fb4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fc6:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <UTIL_SEQ_SetEvt+0x38>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	4a06      	ldr	r2, [pc, #24]	; (8005fec <UTIL_SEQ_SetEvt+0x38>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8005fde:	bf00      	nop
}
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	2000025c 	.word	0x2000025c

08005ff0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <UTIL_SEQ_WaitEvt+0x78>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8005ffe:	4b1a      	ldr	r3, [pc, #104]	; (8006068 <UTIL_SEQ_WaitEvt+0x78>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006006:	d102      	bne.n	800600e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e005      	b.n	800601a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800600e:	4b16      	ldr	r3, [pc, #88]	; (8006068 <UTIL_SEQ_WaitEvt+0x78>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2201      	movs	r2, #1
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <UTIL_SEQ_WaitEvt+0x7c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8006020:	4a12      	ldr	r2, [pc, #72]	; (800606c <UTIL_SEQ_WaitEvt+0x7c>)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8006026:	e005      	b.n	8006034 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <UTIL_SEQ_WaitEvt+0x7c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4619      	mov	r1, r3
 800602e:	6978      	ldr	r0, [r7, #20]
 8006030:	f7fa f966 	bl	8000300 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <UTIL_SEQ_WaitEvt+0x80>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <UTIL_SEQ_WaitEvt+0x7c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4013      	ands	r3, r2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f2      	beq.n	8006028 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8006042:	4a09      	ldr	r2, [pc, #36]	; (8006068 <UTIL_SEQ_WaitEvt+0x78>)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <UTIL_SEQ_WaitEvt+0x7c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	43da      	mvns	r2, r3
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <UTIL_SEQ_WaitEvt+0x80>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4013      	ands	r3, r2
 8006054:	4a06      	ldr	r2, [pc, #24]	; (8006070 <UTIL_SEQ_WaitEvt+0x80>)
 8006056:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8006058:	4a04      	ldr	r2, [pc, #16]	; (800606c <UTIL_SEQ_WaitEvt+0x7c>)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6013      	str	r3, [r2, #0]

  return;
 800605e:	bf00      	nop
}
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000264 	.word	0x20000264
 800606c:	20000260 	.word	0x20000260
 8006070:	2000025c 	.word	0x2000025c

08006074 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006078:	bf00      	nop
}
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8006082:	b480      	push	{r7}
 8006084:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006086:	bf00      	nop
}
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <SEQ_BitPosition+0x20>
 80060a6:	2310      	movs	r3, #16
 80060a8:	73fb      	strb	r3, [r7, #15]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	041b      	lsls	r3, r3, #16
 80060ae:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d105      	bne.n	80060c6 <SEQ_BitPosition+0x36>
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	3308      	adds	r3, #8
 80060be:	73fb      	strb	r3, [r7, #15]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d105      	bne.n	80060dc <SEQ_BitPosition+0x4c>
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	3304      	adds	r3, #4
 80060d4:	73fb      	strb	r3, [r7, #15]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	0f1b      	lsrs	r3, r3, #28
 80060e0:	4a07      	ldr	r2, [pc, #28]	; (8006100 <SEQ_BitPosition+0x70>)
 80060e2:	5cd2      	ldrb	r2, [r2, r3]
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	4413      	add	r3, r2
 80060e8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	f1c3 031f 	rsb	r3, r3, #31
 80060f0:	b2db      	uxtb	r3, r3
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	080063c0 	.word	0x080063c0

08006104 <__libc_init_array>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4e0d      	ldr	r6, [pc, #52]	; (800613c <__libc_init_array+0x38>)
 8006108:	4c0d      	ldr	r4, [pc, #52]	; (8006140 <__libc_init_array+0x3c>)
 800610a:	1ba4      	subs	r4, r4, r6
 800610c:	10a4      	asrs	r4, r4, #2
 800610e:	2500      	movs	r5, #0
 8006110:	42a5      	cmp	r5, r4
 8006112:	d109      	bne.n	8006128 <__libc_init_array+0x24>
 8006114:	4e0b      	ldr	r6, [pc, #44]	; (8006144 <__libc_init_array+0x40>)
 8006116:	4c0c      	ldr	r4, [pc, #48]	; (8006148 <__libc_init_array+0x44>)
 8006118:	f000 f82c 	bl	8006174 <_init>
 800611c:	1ba4      	subs	r4, r4, r6
 800611e:	10a4      	asrs	r4, r4, #2
 8006120:	2500      	movs	r5, #0
 8006122:	42a5      	cmp	r5, r4
 8006124:	d105      	bne.n	8006132 <__libc_init_array+0x2e>
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800612c:	4798      	blx	r3
 800612e:	3501      	adds	r5, #1
 8006130:	e7ee      	b.n	8006110 <__libc_init_array+0xc>
 8006132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006136:	4798      	blx	r3
 8006138:	3501      	adds	r5, #1
 800613a:	e7f2      	b.n	8006122 <__libc_init_array+0x1e>
 800613c:	080063d0 	.word	0x080063d0
 8006140:	080063d0 	.word	0x080063d0
 8006144:	080063d0 	.word	0x080063d0
 8006148:	080063d4 	.word	0x080063d4

0800614c <memcpy>:
 800614c:	b510      	push	{r4, lr}
 800614e:	1e43      	subs	r3, r0, #1
 8006150:	440a      	add	r2, r1
 8006152:	4291      	cmp	r1, r2
 8006154:	d100      	bne.n	8006158 <memcpy+0xc>
 8006156:	bd10      	pop	{r4, pc}
 8006158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800615c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006160:	e7f7      	b.n	8006152 <memcpy+0x6>

08006162 <memset>:
 8006162:	4402      	add	r2, r0
 8006164:	4603      	mov	r3, r0
 8006166:	4293      	cmp	r3, r2
 8006168:	d100      	bne.n	800616c <memset+0xa>
 800616a:	4770      	bx	lr
 800616c:	f803 1b01 	strb.w	r1, [r3], #1
 8006170:	e7f9      	b.n	8006166 <memset+0x4>
	...

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
