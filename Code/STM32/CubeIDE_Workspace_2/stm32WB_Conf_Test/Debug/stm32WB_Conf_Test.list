
stm32WB_Conf_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064cc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  08006854  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  08006878  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  08006911  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800694e  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000098  20000118  0800695f  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000174  200001b0  080069f7  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  080069f7  00020324  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0002a54b  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00004fe8  00000000  00000000  0004a72b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00001b78  00000000  00000000  0004f718  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001930  00000000  00000000  00051290  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00024724  00000000  00000000  00052bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00019206  00000000  00000000  000772e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000c77b3  00000000  00000000  000904ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  00157c9d  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00006f28  00000000  00000000  00157d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001b0 	.word	0x200001b0
 8000158:	00000000 	.word	0x00000000
 800015c:	080065f0 	.word	0x080065f0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001b4 	.word	0x200001b4
 8000178:	080065f0 	.word	0x080065f0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4313      	orrs	r3, r2
 80001a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4013      	ands	r3, r2
 80001ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001b0:	68fb      	ldr	r3, [r7, #12]
}
 80001b2:	bf00      	nop
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001bc:	4770      	bx	lr

080001be <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 80001be:	b480      	push	{r7}
 80001c0:	b083      	sub	sp, #12
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	43db      	mvns	r3, r3
 80001d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001d4:	4013      	ands	r3, r2
 80001d6:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000204:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4013      	ands	r3, r2
 800020c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800020e:	68fb      	ldr	r3, [r7, #12]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 8000234:	2303      	movs	r3, #3
 8000236:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 8000238:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800023c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	2001      	movs	r0, #1
 8000240:	f7ff ffa4 	bl	800018c <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4619      	mov	r1, r3
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024c:	f001 fcb4 	bl	8001bb8 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000250:	2001      	movs	r0, #1
 8000252:	f7ff ffb4 	bl	80001be <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 8000256:	2318      	movs	r3, #24
 8000258:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	2002      	movs	r0, #2
 800025c:	f7ff ff96 	bl	800018c <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4619      	mov	r1, r3
 8000264:	4809      	ldr	r0, [pc, #36]	; (800028c <APPD_Init+0x70>)
 8000266:	f001 fca7 	bl	8001bb8 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800026a:	2002      	movs	r0, #2
 800026c:	f7ff ffa7 	bl	80001be <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000270:	f001 faf8 	bl	8001864 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000274:	f001 fafc 	bl	8001870 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000278:	f001 fb00 	bl	800187c <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 800027c:	f000 f824 	bl	80002c8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000280:	f000 f8c2 	bl	8000408 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000284:	bf00      	nop
}
 8000286:	3718      	adds	r7, #24
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	48000400 	.word	0x48000400

08000290 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <APPD_EnableCPU2+0x34>)
 8000298:	1d3c      	adds	r4, r7, #4
 800029a:	461d      	mov	r5, r3
 800029c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002a4:	c403      	stmia	r4!, {r0, r1}
 80002a6:	8022      	strh	r2, [r4, #0]
 80002a8:	3402      	adds	r4, #2
 80002aa:	0c13      	lsrs	r3, r2, #16
 80002ac:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80002ae:	f005 f96f 	bl	8005590 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f004 fcc8 	bl	8004c4a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80002ba:	bf00      	nop
}
 80002bc:	3720      	adds	r7, #32
 80002be:	46bd      	mov	sp, r7
 80002c0:	bdb0      	pop	{r4, r5, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	08006608 	.word	0x08006608

080002c8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	77fb      	strb	r3, [r7, #31]
 80002ec:	e033      	b.n	8000356 <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80002ee:	7ffb      	ldrb	r3, [r7, #31]
 80002f0:	4a42      	ldr	r2, [pc, #264]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	4413      	add	r3, r2
 80002f6:	799b      	ldrb	r3, [r3, #6]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d028      	beq.n	800034e <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002fc:	7ffb      	ldrb	r3, [r7, #31]
 80002fe:	4a3f      	ldr	r2, [pc, #252]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 8000300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000304:	4a3e      	ldr	r2, [pc, #248]	; (8000400 <APPD_SetCPU2GpioConfig+0x138>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d00f      	beq.n	800032a <APPD_SetCPU2GpioConfig+0x62>
 800030a:	4a3e      	ldr	r2, [pc, #248]	; (8000404 <APPD_SetCPU2GpioConfig+0x13c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d015      	beq.n	800033c <APPD_SetCPU2GpioConfig+0x74>
 8000310:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000314:	d000      	beq.n	8000318 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000316:	e01b      	b.n	8000350 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000318:	7ffb      	ldrb	r3, [r7, #31]
 800031a:	4a38      	ldr	r2, [pc, #224]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	4413      	add	r3, r2
 8000320:	889a      	ldrh	r2, [r3, #4]
 8000322:	8bbb      	ldrh	r3, [r7, #28]
 8000324:	4313      	orrs	r3, r2
 8000326:	83bb      	strh	r3, [r7, #28]
          break;
 8000328:	e012      	b.n	8000350 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800032a:	7ffb      	ldrb	r3, [r7, #31]
 800032c:	4a33      	ldr	r2, [pc, #204]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	4413      	add	r3, r2
 8000332:	889a      	ldrh	r2, [r3, #4]
 8000334:	8b7b      	ldrh	r3, [r7, #26]
 8000336:	4313      	orrs	r3, r2
 8000338:	837b      	strh	r3, [r7, #26]
          break;
 800033a:	e009      	b.n	8000350 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800033c:	7ffb      	ldrb	r3, [r7, #31]
 800033e:	4a2f      	ldr	r2, [pc, #188]	; (80003fc <APPD_SetCPU2GpioConfig+0x134>)
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	4413      	add	r3, r2
 8000344:	889a      	ldrh	r2, [r3, #4]
 8000346:	8b3b      	ldrh	r3, [r7, #24]
 8000348:	4313      	orrs	r3, r2
 800034a:	833b      	strh	r3, [r7, #24]
          break;
 800034c:	e000      	b.n	8000350 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 800034e:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000350:	7ffb      	ldrb	r3, [r7, #31]
 8000352:	3301      	adds	r3, #1
 8000354:	77fb      	strb	r3, [r7, #31]
 8000356:	7ffb      	ldrb	r3, [r7, #31]
 8000358:	2b21      	cmp	r3, #33	; 0x21
 800035a:	d9c8      	bls.n	80002ee <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000364:	2303      	movs	r3, #3
 8000366:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000368:	8bbb      	ldrh	r3, [r7, #28]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d014      	beq.n	8000398 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 800036e:	8bbb      	ldrh	r3, [r7, #28]
 8000370:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	2001      	movs	r0, #1
 8000374:	f7ff ff0a 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000378:	2001      	movs	r0, #1
 800037a:	f7ff ff33 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f001 fc17 	bl	8001bb8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800038a:	8bbb      	ldrh	r3, [r7, #28]
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f001 fd78 	bl	8001e88 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000398:	8b7b      	ldrh	r3, [r7, #26]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d012      	beq.n	80003c4 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 800039e:	8b7b      	ldrh	r3, [r7, #26]
 80003a0:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a2:	2002      	movs	r0, #2
 80003a4:	f7ff fef2 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80003a8:	2002      	movs	r0, #2
 80003aa:	f7ff ff1b 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4619      	mov	r1, r3
 80003b2:	4813      	ldr	r0, [pc, #76]	; (8000400 <APPD_SetCPU2GpioConfig+0x138>)
 80003b4:	f001 fc00 	bl	8001bb8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80003b8:	8b7b      	ldrh	r3, [r7, #26]
 80003ba:	2200      	movs	r2, #0
 80003bc:	4619      	mov	r1, r3
 80003be:	4810      	ldr	r0, [pc, #64]	; (8000400 <APPD_SetCPU2GpioConfig+0x138>)
 80003c0:	f001 fd62 	bl	8001e88 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80003c4:	8b3b      	ldrh	r3, [r7, #24]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d013      	beq.n	80003f2 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 80003ca:	8b3b      	ldrh	r3, [r7, #24]
 80003cc:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	2004      	movs	r0, #4
 80003d0:	f7ff fedc 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003d4:	2004      	movs	r0, #4
 80003d6:	f7ff ff05 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <APPD_SetCPU2GpioConfig+0x13c>)
 80003e0:	f001 fbea 	bl	8001bb8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80003e4:	8b3b      	ldrh	r3, [r7, #24]
 80003e6:	2200      	movs	r2, #0
 80003e8:	4619      	mov	r1, r3
 80003ea:	4806      	ldr	r0, [pc, #24]	; (8000404 <APPD_SetCPU2GpioConfig+0x13c>)
 80003ec:	f001 fd4c 	bl	8001e88 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
}
 80003f4:	3720      	adds	r7, #32
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	0800667c 	.word	0x0800667c
 8000400:	48000400 	.word	0x48000400
 8000404:	48000800 	.word	0x48000800

08000408 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 800040c:	bf00      	nop
}
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <LL_C2_PWR_SetPowerMode+0x28>)
 8000422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000426:	f023 0207 	bic.w	r2, r3, #7
 800042a:	4905      	ldr	r1, [pc, #20]	; (8000440 <LL_C2_PWR_SetPowerMode+0x28>)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4313      	orrs	r3, r2
 8000430:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	58000400 	.word	0x58000400

08000444 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800044c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	608b      	str	r3, [r1, #8]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000470:	f000 f80c 	bl	800048c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000474:	4904      	ldr	r1, [pc, #16]	; (8000488 <APPE_Init+0x1c>)
 8000476:	2000      	movs	r0, #0
 8000478:	f000 fbf4 	bl	8000c64 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
   APPD_Init();
 800047c:	f7ff fece 	bl	800021c <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000480:	f000 f812 	bl	80004a8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000484:	bf00      	nop
}
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200002f8 	.word	0x200002f8

0800048c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000490:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000494:	f7ff ffd6 	bl	8000444 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000498:	f005 fe24 	bl	80060e4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800049c:	2004      	movs	r0, #4
 800049e:	f7ff ffbb 	bl	8000418 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004a2:	bf00      	nop
}
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004ae:	f004 ff25 	bl	80052fc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004b2:	4a11      	ldr	r2, [pc, #68]	; (80004f8 <appe_Tl_Init+0x50>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	2008      	movs	r0, #8
 80004b8:	f005 ff34 	bl	8006324 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <appe_Tl_Init+0x54>)
 80004be:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <appe_Tl_Init+0x58>)
 80004c2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80004c4:	463b      	mov	r3, r7
 80004c6:	4619      	mov	r1, r3
 80004c8:	480e      	ldr	r0, [pc, #56]	; (8000504 <appe_Tl_Init+0x5c>)
 80004ca:	f004 fda7 	bl	800501c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <appe_Tl_Init+0x60>)
 80004d0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <appe_Tl_Init+0x64>)
 80004d4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <appe_Tl_Init+0x68>)
 80004d8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80004da:	f240 533c 	movw	r3, #1340	; 0x53c
 80004de:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4618      	mov	r0, r3
 80004e6:	f004 ffc9 	bl	800547c <TL_MM_Init>

  TL_Enable();
 80004ea:	f004 ff01 	bl	80052f0 <TL_Enable>

  return;
 80004ee:	bf00      	nop
}
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	08005055 	.word	0x08005055
 80004fc:	20030724 	.word	0x20030724
 8000500:	08000515 	.word	0x08000515
 8000504:	0800052b 	.word	0x0800052b
 8000508:	2003093c 	.word	0x2003093c
 800050c:	20030830 	.word	0x20030830
 8000510:	200301e8 	.word	0x200301e8

08000514 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800051e:	bf00      	nop
}
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000532:	f7ff fead 	bl	8000290 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000536:	f005 f93d 	bl	80057b4 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800053a:	2100      	movs	r1, #0
 800053c:	2001      	movs	r0, #1
 800053e:	f005 fde3 	bl	8006108 <UTIL_LPM_SetOffMode>
  return;
 8000542:	bf00      	nop
}
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800054e:	bf00      	nop
}
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000566:	f005 fdfd 	bl	8006164 <UTIL_SEQ_Run>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800057a:	2100      	movs	r1, #0
 800057c:	2008      	movs	r0, #8
 800057e:	f005 fef1 	bl	8006364 <UTIL_SEQ_SetTask>
  return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000592:	2002      	movs	r0, #2
 8000594:	f005 ff4c 	bl	8006430 <UTIL_SEQ_SetEvt>
  return;
 8000598:	bf00      	nop
}
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005a8:	2002      	movs	r0, #2
 80005aa:	f005 ff5f 	bl	800646c <UTIL_SEQ_WaitEvt>
  return;
 80005ae:	bf00      	nop
}
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_EXTI_EnableIT_0_31+0x24>)
 80005c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <LL_EXTI_EnableIT_0_31+0x24>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	58000800 	.word	0x58000800

080005e0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4904      	ldr	r1, [pc, #16]	; (8000600 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	600b      	str	r3, [r1, #0]

}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	58000800 	.word	0x58000800

08000604 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <ReadRtcSsrValue+0x3c>)
 800060c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800060e:	b29b      	uxth	r3, r3
 8000610:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <ReadRtcSsrValue+0x3c>)
 8000614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000616:	b29b      	uxth	r3, r3
 8000618:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800061a:	e005      	b.n	8000628 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <ReadRtcSsrValue+0x3c>)
 8000622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000624:	b29b      	uxth	r3, r3
 8000626:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d1f5      	bne.n	800061c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000630:	683b      	ldr	r3, [r7, #0]
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40002800 	.word	0x40002800

08000644 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	491d      	ldr	r1, [pc, #116]	; (80006cc <LinkTimerAfter+0x88>)
 8000658:	4613      	mov	r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4413      	add	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	440b      	add	r3, r1
 8000662:	3315      	adds	r3, #21
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b06      	cmp	r3, #6
 800066c:	d009      	beq.n	8000682 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800066e:	7bfa      	ldrb	r2, [r7, #15]
 8000670:	4916      	ldr	r1, [pc, #88]	; (80006cc <LinkTimerAfter+0x88>)
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	440b      	add	r3, r1
 800067c:	3314      	adds	r3, #20
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000682:	79fa      	ldrb	r2, [r7, #7]
 8000684:	4911      	ldr	r1, [pc, #68]	; (80006cc <LinkTimerAfter+0x88>)
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	440b      	add	r3, r1
 8000690:	3315      	adds	r3, #21
 8000692:	7bfa      	ldrb	r2, [r7, #15]
 8000694:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <LinkTimerAfter+0x88>)
 800069a:	4613      	mov	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	4413      	add	r3, r2
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	440b      	add	r3, r1
 80006a4:	3314      	adds	r3, #20
 80006a6:	79ba      	ldrb	r2, [r7, #6]
 80006a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <LinkTimerAfter+0x88>)
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	440b      	add	r3, r1
 80006b8:	3315      	adds	r3, #21
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	701a      	strb	r2, [r3, #0]

  return;
 80006be:	bf00      	nop
}
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000028 	.word	0x20000028

080006d0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <LinkTimerBefore+0xb8>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d032      	beq.n	8000752 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80006ec:	79ba      	ldrb	r2, [r7, #6]
 80006ee:	4927      	ldr	r1, [pc, #156]	; (800078c <LinkTimerBefore+0xbc>)
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	440b      	add	r3, r1
 80006fa:	3314      	adds	r3, #20
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000700:	7bfa      	ldrb	r2, [r7, #15]
 8000702:	4922      	ldr	r1, [pc, #136]	; (800078c <LinkTimerBefore+0xbc>)
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	440b      	add	r3, r1
 800070e:	3315      	adds	r3, #21
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	491d      	ldr	r1, [pc, #116]	; (800078c <LinkTimerBefore+0xbc>)
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	440b      	add	r3, r1
 8000722:	3315      	adds	r3, #21
 8000724:	79ba      	ldrb	r2, [r7, #6]
 8000726:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	4918      	ldr	r1, [pc, #96]	; (800078c <LinkTimerBefore+0xbc>)
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	440b      	add	r3, r1
 8000736:	3314      	adds	r3, #20
 8000738:	7bfa      	ldrb	r2, [r7, #15]
 800073a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	4913      	ldr	r1, [pc, #76]	; (800078c <LinkTimerBefore+0xbc>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	3314      	adds	r3, #20
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000750:	e014      	b.n	800077c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	490d      	ldr	r1, [pc, #52]	; (800078c <LinkTimerBefore+0xbc>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3315      	adds	r3, #21
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	4908      	ldr	r1, [pc, #32]	; (800078c <LinkTimerBefore+0xbc>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3314      	adds	r3, #20
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	701a      	strb	r2, [r3, #0]
  return;
 800077a:	bf00      	nop
}
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200000b8 	.word	0x200000b8
 800078c:	20000028 	.word	0x20000028

08000790 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800079a:	4b4e      	ldr	r3, [pc, #312]	; (80008d4 <linkTimer+0x144>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d118      	bne.n	80007d6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007a4:	4b4b      	ldr	r3, [pc, #300]	; (80008d4 <linkTimer+0x144>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <linkTimer+0x148>)
 80007ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007ae:	4a49      	ldr	r2, [pc, #292]	; (80008d4 <linkTimer+0x144>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	4949      	ldr	r1, [pc, #292]	; (80008dc <linkTimer+0x14c>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	440b      	add	r3, r1
 80007c2:	3315      	adds	r3, #21
 80007c4:	2206      	movs	r2, #6
 80007c6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <linkTimer+0x150>)
 80007ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ce:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	81fb      	strh	r3, [r7, #14]
 80007d4:	e078      	b.n	80008c8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80007d6:	f000 f909 	bl	80009ec <ReturnTimeElapsed>
 80007da:	4603      	mov	r3, r0
 80007dc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	493e      	ldr	r1, [pc, #248]	; (80008dc <linkTimer+0x14c>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	3308      	adds	r3, #8
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	4419      	add	r1, r3
 80007f6:	4839      	ldr	r0, [pc, #228]	; (80008dc <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	4403      	add	r3, r0
 8000802:	3308      	adds	r3, #8
 8000804:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	4934      	ldr	r1, [pc, #208]	; (80008dc <linkTimer+0x14c>)
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3308      	adds	r3, #8
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <linkTimer+0x144>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <linkTimer+0x14c>)
 8000824:	460b      	mov	r3, r1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	440b      	add	r3, r1
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4413      	add	r3, r2
 800082e:	3308      	adds	r3, #8
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	429a      	cmp	r2, r3
 8000836:	d337      	bcc.n	80008a8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <linkTimer+0x144>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800083e:	7b7a      	ldrb	r2, [r7, #13]
 8000840:	4926      	ldr	r1, [pc, #152]	; (80008dc <linkTimer+0x14c>)
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	440b      	add	r3, r1
 800084c:	3315      	adds	r3, #21
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000852:	e013      	b.n	800087c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000854:	7b7a      	ldrb	r2, [r7, #13]
 8000856:	4921      	ldr	r1, [pc, #132]	; (80008dc <linkTimer+0x14c>)
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	3315      	adds	r3, #21
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000868:	7b7a      	ldrb	r2, [r7, #13]
 800086a:	491c      	ldr	r1, [pc, #112]	; (80008dc <linkTimer+0x14c>)
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	440b      	add	r3, r1
 8000876:	3315      	adds	r3, #21
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800087c:	7b3b      	ldrb	r3, [r7, #12]
 800087e:	2b06      	cmp	r3, #6
 8000880:	d00b      	beq.n	800089a <linkTimer+0x10a>
 8000882:	7b3a      	ldrb	r2, [r7, #12]
 8000884:	4915      	ldr	r1, [pc, #84]	; (80008dc <linkTimer+0x14c>)
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	440b      	add	r3, r1
 8000890:	3308      	adds	r3, #8
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	429a      	cmp	r2, r3
 8000898:	d2dc      	bcs.n	8000854 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800089a:	7b7a      	ldrb	r2, [r7, #13]
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fecf 	bl	8000644 <LinkTimerAfter>
 80008a6:	e00f      	b.n	80008c8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <linkTimer+0x144>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff0c 	bl	80006d0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <linkTimer+0x144>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <linkTimer+0x148>)
 80008c0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <linkTimer+0x144>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80008c8:	89fb      	ldrh	r3, [r7, #14]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000b8 	.word	0x200000b8
 80008d8:	200000b9 	.word	0x200000b9
 80008dc:	20000028 	.word	0x20000028
 80008e0:	200000bc 	.word	0x200000bc

080008e4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80008f4:	4b39      	ldr	r3, [pc, #228]	; (80009dc <UnlinkTimer+0xf8>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d111      	bne.n	8000924 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000900:	4b36      	ldr	r3, [pc, #216]	; (80009dc <UnlinkTimer+0xf8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <UnlinkTimer+0xfc>)
 8000908:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	4935      	ldr	r1, [pc, #212]	; (80009e4 <UnlinkTimer+0x100>)
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	440b      	add	r3, r1
 8000918:	3315      	adds	r3, #21
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <UnlinkTimer+0xf8>)
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e03e      	b.n	80009a2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	492f      	ldr	r1, [pc, #188]	; (80009e4 <UnlinkTimer+0x100>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3314      	adds	r3, #20
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	492a      	ldr	r1, [pc, #168]	; (80009e4 <UnlinkTimer+0x100>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3315      	adds	r3, #21
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800094c:	79f9      	ldrb	r1, [r7, #7]
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	4824      	ldr	r0, [pc, #144]	; (80009e4 <UnlinkTimer+0x100>)
 8000952:	460b      	mov	r3, r1
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	440b      	add	r3, r1
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	4403      	add	r3, r0
 800095c:	3315      	adds	r3, #21
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2d8      	uxtb	r0, r3
 8000962:	4920      	ldr	r1, [pc, #128]	; (80009e4 <UnlinkTimer+0x100>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3315      	adds	r3, #21
 8000970:	4602      	mov	r2, r0
 8000972:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	2b06      	cmp	r3, #6
 8000978:	d013      	beq.n	80009a2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800097a:	79f9      	ldrb	r1, [r7, #7]
 800097c:	7bba      	ldrb	r2, [r7, #14]
 800097e:	4819      	ldr	r0, [pc, #100]	; (80009e4 <UnlinkTimer+0x100>)
 8000980:	460b      	mov	r3, r1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	440b      	add	r3, r1
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	4403      	add	r3, r0
 800098a:	3314      	adds	r3, #20
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2d8      	uxtb	r0, r3
 8000990:	4914      	ldr	r1, [pc, #80]	; (80009e4 <UnlinkTimer+0x100>)
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	440b      	add	r3, r1
 800099c:	3314      	adds	r3, #20
 800099e:	4602      	mov	r2, r0
 80009a0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	490f      	ldr	r1, [pc, #60]	; (80009e4 <UnlinkTimer+0x100>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	440b      	add	r3, r1
 80009b0:	330c      	adds	r3, #12
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <UnlinkTimer+0xf8>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b06      	cmp	r3, #6
 80009be:	d107      	bne.n	80009d0 <UnlinkTimer+0xec>
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d104      	bne.n	80009d0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <UnlinkTimer+0x104>)
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009cc:	601a      	str	r2, [r3, #0]
  }

  return;
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
}
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	200000b8 	.word	0x200000b8
 80009e0:	200000b9 	.word	0x200000b9
 80009e4:	20000028 	.word	0x20000028
 80009e8:	200000bc 	.word	0x200000bc

080009ec <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <ReturnTimeElapsed+0x70>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009fa:	d026      	beq.n	8000a4a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80009fc:	f7ff fe02 	bl	8000604 <ReadRtcSsrValue>
 8000a00:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <ReturnTimeElapsed+0x70>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d805      	bhi.n	8000a18 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <ReturnTimeElapsed+0x70>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	e00a      	b.n	8000a2e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <ReturnTimeElapsed+0x74>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <ReturnTimeElapsed+0x70>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <ReturnTimeElapsed+0x78>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	fb02 f303 	mul.w	r3, r2, r3
 8000a3a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <ReturnTimeElapsed+0x7c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	40d3      	lsrs	r3, r2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	e001      	b.n	8000a4e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	b29b      	uxth	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000bc 	.word	0x200000bc
 8000a60:	200001d2 	.word	0x200001d2
 8000a64:	200001d1 	.word	0x200001d1
 8000a68:	200001d0 	.word	0x200001d0

08000a6c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d108      	bne.n	8000a8e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a7c:	f7ff fdc2 	bl	8000604 <ReadRtcSsrValue>
 8000a80:	4602      	mov	r2, r0
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <RestartWakeupCounter+0xa8>)
 8000a84:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f001 f879 	bl	8001b7e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000a8c:	e03e      	b.n	8000b0c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d803      	bhi.n	8000a9c <RestartWakeupCounter+0x30>
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <RestartWakeupCounter+0xac>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d002      	beq.n	8000aa2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000aa2:	bf00      	nop
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f7      	beq.n	8000aa4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ac8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <RestartWakeupCounter+0xb4>)
 8000acc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ad0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f001 f861 	bl	8001b9a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <RestartWakeupCounter+0xb8>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	0c1b      	lsrs	r3, r3, #16
 8000ade:	041b      	lsls	r3, r3, #16
 8000ae0:	88fa      	ldrh	r2, [r7, #6]
 8000ae2:	4910      	ldr	r1, [pc, #64]	; (8000b24 <RestartWakeupCounter+0xb8>)
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ae8:	f7ff fd8c 	bl	8000604 <ReadRtcSsrValue>
 8000aec:	4602      	mov	r2, r0
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <RestartWakeupCounter+0xa8>)
 8000af0:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <RestartWakeupCounter+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b04:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b06:	f3af 8000 	nop.w
  return ;
 8000b0a:	bf00      	nop
}
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000bc 	.word	0x200000bc
 8000b18:	200001d0 	.word	0x200001d0
 8000b1c:	200001cc 	.word	0x200001cc
 8000b20:	58000800 	.word	0x58000800
 8000b24:	40002800 	.word	0x40002800

08000b28 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b2e:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <RescheduleTimerList+0x124>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3a:	d108      	bne.n	8000b4e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b3c:	bf00      	nop
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <RescheduleTimerList+0x128>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f7      	bne.n	8000b3e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b4e:	4b40      	ldr	r3, [pc, #256]	; (8000c50 <RescheduleTimerList+0x128>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <RescheduleTimerList+0x128>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b60:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000b62:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <RescheduleTimerList+0x12c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	493b      	ldr	r1, [pc, #236]	; (8000c58 <RescheduleTimerList+0x130>)
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	440b      	add	r3, r1
 8000b76:	3308      	adds	r3, #8
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b7c:	f7ff ff36 	bl	80009ec <ReturnTimeElapsed>
 8000b80:	4603      	mov	r3, r0
 8000b82:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d205      	bcs.n	8000b98 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <RescheduleTimerList+0x134>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e04d      	b.n	8000c34 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <RescheduleTimerList+0x138>)
 8000b9c:	8812      	ldrh	r2, [r2, #0]
 8000b9e:	b292      	uxth	r2, r2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d906      	bls.n	8000bb8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <RescheduleTimerList+0x138>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <RescheduleTimerList+0x134>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e03d      	b.n	8000c34 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <RescheduleTimerList+0x134>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc8:	e034      	b.n	8000c34 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	4922      	ldr	r1, [pc, #136]	; (8000c58 <RescheduleTimerList+0x130>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3308      	adds	r3, #8
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d20a      	bcs.n	8000bf8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000be2:	7bfa      	ldrb	r2, [r7, #15]
 8000be4:	491c      	ldr	r1, [pc, #112]	; (8000c58 <RescheduleTimerList+0x130>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e013      	b.n	8000c20 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	4917      	ldr	r1, [pc, #92]	; (8000c58 <RescheduleTimerList+0x130>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	3308      	adds	r3, #8
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <RescheduleTimerList+0x130>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4403      	add	r3, r0
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <RescheduleTimerList+0x130>)
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3315      	adds	r3, #21
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d1c7      	bne.n	8000bca <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c3a:	89bb      	ldrh	r3, [r7, #12]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff15 	bl	8000a6c <RestartWakeupCounter>

  return ;
 8000c42:	bf00      	nop
}
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40002800 	.word	0x40002800
 8000c50:	200001cc 	.word	0x200001cc
 8000c54:	200000b8 	.word	0x200000b8
 8000c58:	20000028 	.word	0x20000028
 8000c5c:	200000c0 	.word	0x200000c0
 8000c60:	200001d4 	.word	0x200001d4

08000c64 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000c70:	4a61      	ldr	r2, [pc, #388]	; (8000df8 <HW_TS_Init+0x194>)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c76:	4b60      	ldr	r3, [pc, #384]	; (8000df8 <HW_TS_Init+0x194>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	22ca      	movs	r2, #202	; 0xca
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c80:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <HW_TS_Init+0x194>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2253      	movs	r2, #83	; 0x53
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000c8a:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <HW_TS_Init+0x198>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	4a5b      	ldr	r2, [pc, #364]	; (8000dfc <HW_TS_Init+0x198>)
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <HW_TS_Init+0x198>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f1c3 0304 	rsb	r3, r3, #4
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <HW_TS_Init+0x19c>)
 8000caa:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000cac:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <HW_TS_Init+0x198>)
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000cb4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000cb8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	fa92 f2a2 	rbit	r2, r2
 8000cc0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <HW_TS_Init+0x1a0>)
 8000cd4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000cd6:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <HW_TS_Init+0x198>)
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <HW_TS_Init+0x1a4>)
 8000ce8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000cea:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <HW_TS_Init+0x1a4>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <HW_TS_Init+0x1a0>)
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	fb02 f303 	mul.w	r3, r2, r3
 8000cf8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000cfc:	4a40      	ldr	r2, [pc, #256]	; (8000e00 <HW_TS_Init+0x19c>)
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	40d3      	lsrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d904      	bls.n	8000d18 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <HW_TS_Init+0x1a8>)
 8000d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d14:	801a      	strh	r2, [r3, #0]
 8000d16:	e003      	b.n	8000d20 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <HW_TS_Init+0x1a8>)
 8000d1e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d24:	f7ff fc5c 	bl	80005e0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000d2c:	f7ff fc44 	bl	80005b8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d143      	bne.n	8000dbe <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <HW_TS_Init+0x1ac>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <HW_TS_Init+0x1b0>)
 8000d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d42:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	75fb      	strb	r3, [r7, #23]
 8000d48:	e00c      	b.n	8000d64 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000d4a:	7dfa      	ldrb	r2, [r7, #23]
 8000d4c:	4932      	ldr	r1, [pc, #200]	; (8000e18 <HW_TS_Init+0x1b4>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	330c      	adds	r3, #12
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d9ef      	bls.n	8000d4a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <HW_TS_Init+0x1b8>)
 8000d6c:	2206      	movs	r2, #6
 8000d6e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HW_TS_Init+0x194>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HW_TS_Init+0x194>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d82:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HW_TS_Init+0x194>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HW_TS_Init+0x194>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d98:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HW_TS_Init+0x1bc>)
 8000d9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000da0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 fef9 	bl	8001b9a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HW_TS_Init+0x194>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HW_TS_Init+0x194>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	e00a      	b.n	8000dd4 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HW_TS_Init+0x194>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 fed5 	bl	8001b7e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HW_TS_Init+0x194>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000dde:	2200      	movs	r2, #0
 8000de0:	2103      	movs	r1, #3
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 fe89 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 fea0 	bl	8001b2e <HAL_NVIC_EnableIRQ>

  return;
 8000dee:	bf00      	nop
}
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001cc 	.word	0x200001cc
 8000dfc:	40002800 	.word	0x40002800
 8000e00:	200001d0 	.word	0x200001d0
 8000e04:	200001d1 	.word	0x200001d1
 8000e08:	200001d2 	.word	0x200001d2
 8000e0c:	200001d4 	.word	0x200001d4
 8000e10:	200000c0 	.word	0x200000c0
 8000e14:	200000bc 	.word	0x200000bc
 8000e18:	20000028 	.word	0x20000028
 8000e1c:	200000b8 	.word	0x200000b8
 8000e20:	58000800 	.word	0x58000800

08000e24 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b08b      	sub	sp, #44	; 0x2c
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8000e3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8000e40:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000e46:	e004      	b.n	8000e52 <HW_TS_Create+0x2e>
  {
    loop++;
 8000e48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e56:	2b05      	cmp	r3, #5
 8000e58:	d80c      	bhi.n	8000e74 <HW_TS_Create+0x50>
 8000e5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e5e:	492b      	ldr	r1, [pc, #172]	; (8000f0c <HW_TS_Create+0xe8>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	330c      	adds	r3, #12
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1e9      	bne.n	8000e48 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e78:	2b06      	cmp	r3, #6
 8000e7a:	d037      	beq.n	8000eec <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000e7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e80:	4922      	ldr	r1, [pc, #136]	; (8000f0c <HW_TS_Create+0xe8>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	440b      	add	r3, r1
 8000e8c:	330c      	adds	r3, #12
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000e9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ea0:	491a      	ldr	r1, [pc, #104]	; (8000f0c <HW_TS_Create+0xe8>)
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	3310      	adds	r3, #16
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000eb2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000eb6:	4915      	ldr	r1, [pc, #84]	; (8000f0c <HW_TS_Create+0xe8>)
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	330d      	adds	r3, #13
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000ec8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ecc:	490f      	ldr	r1, [pc, #60]	; (8000f0c <HW_TS_Create+0xe8>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ee2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000eea:	e007      	b.n	8000efc <HW_TS_Create+0xd8>
 8000eec:	6a3b      	ldr	r3, [r7, #32]
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	372c      	adds	r7, #44	; 0x2c
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000028 	.word	0x20000028

08000f10 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8000f1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f20:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000f26:	2003      	movs	r0, #3
 8000f28:	f000 fe0f 	bl	8001b4a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <HW_TS_Stop+0xfc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	22ca      	movs	r2, #202	; 0xca
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <HW_TS_Stop+0xfc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2253      	movs	r2, #83	; 0x53
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000f40:	79fa      	ldrb	r2, [r7, #7]
 8000f42:	4933      	ldr	r1, [pc, #204]	; (8001010 <HW_TS_Stop+0x100>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	440b      	add	r3, r1
 8000f4e:	330c      	adds	r3, #12
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d148      	bne.n	8000fea <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fcc1 	bl	80008e4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <HW_TS_Stop+0x104>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f68:	7cfb      	ldrb	r3, [r7, #19]
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d135      	bne.n	8000fda <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <HW_TS_Stop+0x108>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7a:	d108      	bne.n	8000f8e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f7c:	bf00      	nop
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HW_TS_Stop+0xfc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f7      	bne.n	8000f7e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HW_TS_Stop+0xfc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HW_TS_Stop+0xfc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fa0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fa2:	bf00      	nop
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HW_TS_Stop+0xfc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f7      	beq.n	8000fa4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HW_TS_Stop+0xfc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <HW_TS_Stop+0xfc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fc8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <HW_TS_Stop+0x10c>)
 8000fcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fd0:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 fde1 	bl	8001b9a <HAL_NVIC_ClearPendingIRQ>
 8000fd8:	e007      	b.n	8000fea <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HW_TS_Stop+0x110>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	7cfa      	ldrb	r2, [r7, #19]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d001      	beq.n	8000fea <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8000fe6:	f7ff fd9f 	bl	8000b28 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <HW_TS_Stop+0xfc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 fd9a 	bl	8001b2e <HAL_NVIC_EnableIRQ>
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001004:	bf00      	nop
}
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001cc 	.word	0x200001cc
 8001010:	20000028 	.word	0x20000028
 8001014:	200000b8 	.word	0x200000b8
 8001018:	40002800 	.word	0x40002800
 800101c:	58000800 	.word	0x58000800
 8001020:	200000b9 	.word	0x200000b9

08001024 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	493b      	ldr	r1, [pc, #236]	; (8001120 <HW_TS_Start+0xfc>)
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	330c      	adds	r3, #12
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d103      	bne.n	8001050 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff60 	bl	8000f10 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001050:	f3ef 8310 	mrs	r3, PRIMASK
 8001054:	60fb      	str	r3, [r7, #12]
  return(result);
 8001056:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800105a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800105c:	2003      	movs	r0, #3
 800105e:	f000 fd74 	bl	8001b4a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <HW_TS_Start+0x100>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	22ca      	movs	r2, #202	; 0xca
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
 800106c:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <HW_TS_Start+0x100>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2253      	movs	r2, #83	; 0x53
 8001074:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001076:	79fa      	ldrb	r2, [r7, #7]
 8001078:	4929      	ldr	r1, [pc, #164]	; (8001120 <HW_TS_Start+0xfc>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	330c      	adds	r3, #12
 8001086:	2202      	movs	r2, #2
 8001088:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	4924      	ldr	r1, [pc, #144]	; (8001120 <HW_TS_Start+0xfc>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3308      	adds	r3, #8
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	491f      	ldr	r1, [pc, #124]	; (8001120 <HW_TS_Start+0xfc>)
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	440b      	add	r3, r1
 80010ac:	3304      	adds	r3, #4
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fb6b 	bl	8000790 <linkTimer>
 80010ba:	4603      	mov	r3, r0
 80010bc:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HW_TS_Start+0x104>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <HW_TS_Start+0x108>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	7c7a      	ldrb	r2, [r7, #17]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d002      	beq.n	80010d6 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80010d0:	f7ff fd2a 	bl	8000b28 <RescheduleTimerList>
 80010d4:	e013      	b.n	80010fe <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	4911      	ldr	r1, [pc, #68]	; (8001120 <HW_TS_Start+0xfc>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	8a7b      	ldrh	r3, [r7, #18]
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	1ac9      	subs	r1, r1, r3
 80010ee:	480c      	ldr	r0, [pc, #48]	; (8001120 <HW_TS_Start+0xfc>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4403      	add	r3, r0
 80010fa:	3308      	adds	r3, #8
 80010fc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HW_TS_Start+0x100>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001108:	2003      	movs	r0, #3
 800110a:	f000 fd10 	bl	8001b2e <HAL_NVIC_EnableIRQ>
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001118:	bf00      	nop
}
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000028 	.word	0x20000028
 8001124:	200001cc 	.word	0x200001cc
 8001128:	200000b8 	.word	0x200000b8
 800112c:	200000b9 	.word	0x200000b9

08001130 <LL_RCC_LSE_SetDriveCapability>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001140:	f023 0218 	bic.w	r2, r3, #24
 8001144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4313      	orrs	r3, r2
 800114c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_AHB2_GRP1_EnableClock>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800116a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001192:	f000 fae1 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f80d 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 f8b3 	bl	8001304 <MX_GPIO_Init>
  MX_RF_Init();
 800119e:	f000 f875 	bl	800128c <MX_RF_Init>
  MX_RTC_Init();
 80011a2:	f000 f87b 	bl	800129c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80011a6:	f7ff f961 	bl	800046c <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ae:	f004 ffd9 	bl	8006164 <UTIL_SEQ_Run>
 80011b2:	e7fa      	b.n	80011aa <main+0x1c>

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0a2      	sub	sp, #136	; 0x88
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011be:	2248      	movs	r2, #72	; 0x48
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f005 fa0b 	bl	80065de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2224      	movs	r2, #36	; 0x24
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 f9fb 	bl	80065de <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011e8:	f000 fe8a 	bl	8001f00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ff9f 	bl	8001130 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80011f2:	2327      	movs	r3, #39	; 0x27
 80011f4:	643b      	str	r3, [r7, #64]	; 0x40
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001204:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001206:	2301      	movs	r3, #1
 8001208:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800120e:	2300      	movs	r3, #0
 8001210:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001216:	2300      	movs	r3, #0
 8001218:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800121e:	4618      	mov	r0, r3
 8001220:	f001 f9fa 	bl	8002618 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800122a:	f000 f872 	bl	8001312 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800122e:	236f      	movs	r3, #111	; 0x6f
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	2103      	movs	r1, #3
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fd6b 	bl	8002d2c <HAL_RCC_ClockConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800125c:	f000 f859 	bl	8001312 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP|RCC_PERIPHCLK_RTC;
 8001260:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001264:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800126c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001270:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4618      	mov	r0, r3
 8001276:	f002 f8ad 	bl	80033d4 <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001280:	f000 f847 	bl	8001312 <Error_Handler>
  }
}
 8001284:	bf00      	nop
 8001286:	3788      	adds	r7, #136	; 0x88
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_RTC_Init+0x60>)
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <MX_RTC_Init+0x64>)
 80012a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_RTC_Init+0x60>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_RTC_Init+0x60>)
 80012ae:	220f      	movs	r2, #15
 80012b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_RTC_Init+0x60>)
 80012b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_RTC_Init+0x60>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_RTC_Init+0x60>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <MX_RTC_Init+0x60>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_RTC_Init+0x60>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <MX_RTC_Init+0x60>)
 80012d4:	f002 f959 	bl	800358a <HAL_RTC_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 f818 	bl	8001312 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_RTC_Init+0x60>)
 80012e8:	f002 fa3e 	bl	8003768 <HAL_RTCEx_SetWakeUpTimer_IT>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80012f2:	f000 f80e 	bl	8001312 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200002f8 	.word	0x200002f8
 8001300:	40002800 	.word	0x40002800

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	2004      	movs	r0, #4
 800130a:	f7ff ff27 	bl	800115c <LL_AHB2_GRP1_EnableClock>

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_AHB3_GRP1_EnableClock>:
{
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800135a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4013      	ands	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_APB1_GRP1_EnableClock>:
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4313      	orrs	r3, r2
 800138a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4013      	ands	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001398:	68fb      	ldr	r3, [r7, #12]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80013aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013ae:	f7ff ffc8 	bl	8001342 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2005      	movs	r0, #5
 80013b8:	f000 fb9f 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013bc:	2005      	movs	r0, #5
 80013be:	f000 fbb6 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	202e      	movs	r0, #46	; 0x2e
 80013c8:	f000 fb97 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80013cc:	202e      	movs	r0, #46	; 0x2e
 80013ce:	f000 fbae 	bl	8001b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_RTC_MspInit+0x38>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d10d      	bne.n	8001406 <HAL_RTC_MspInit+0x2e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ea:	f7ff ff99 	bl	8001320 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80013ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013f2:	f7ff ffbf 	bl	8001374 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2003      	movs	r0, #3
 80013fc:	f000 fb7d 	bl	8001afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 fb94 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40002800 	.word	0x40002800

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f9d0 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <RTC_WKUP_IRQHandler+0x10>)
 8001476:	f002 fa33 	bl	80038e0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002f8 	.word	0x200002f8

08001484 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001496:	f000 fd0f 	bl	8001eb8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <SystemInit+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <SystemInit+0x98>)
 80014ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <SystemInit+0x98>)
 80014b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80014d2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <SystemInit+0x9c>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f0:	f023 0305 	bic.w	r3, r3, #5
 80014f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <SystemInit+0xa0>)
 8001512:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00
 800153c:	faf6fefb 	.word	0xfaf6fefb
 8001540:	22041000 	.word	0x22041000

08001544 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	4a47      	ldr	r2, [pc, #284]	; (8001674 <SystemCoreClockUpdate+0x130>)
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b0c      	cmp	r3, #12
 800156a:	d867      	bhi.n	800163c <SystemCoreClockUpdate+0xf8>
 800156c:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <SystemCoreClockUpdate+0x30>)
 800156e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001572:	bf00      	nop
 8001574:	080015a9 	.word	0x080015a9
 8001578:	0800163d 	.word	0x0800163d
 800157c:	0800163d 	.word	0x0800163d
 8001580:	0800163d 	.word	0x0800163d
 8001584:	080015b1 	.word	0x080015b1
 8001588:	0800163d 	.word	0x0800163d
 800158c:	0800163d 	.word	0x0800163d
 8001590:	0800163d 	.word	0x0800163d
 8001594:	080015b9 	.word	0x080015b9
 8001598:	0800163d 	.word	0x0800163d
 800159c:	0800163d 	.word	0x0800163d
 80015a0:	0800163d 	.word	0x0800163d
 80015a4:	080015c1 	.word	0x080015c1
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015a8:	4a33      	ldr	r2, [pc, #204]	; (8001678 <SystemCoreClockUpdate+0x134>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6013      	str	r3, [r2, #0]
      break;
 80015ae:	e049      	b.n	8001644 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80015b0:	4b31      	ldr	r3, [pc, #196]	; (8001678 <SystemCoreClockUpdate+0x134>)
 80015b2:	4a32      	ldr	r2, [pc, #200]	; (800167c <SystemCoreClockUpdate+0x138>)
 80015b4:	601a      	str	r2, [r3, #0]
      break;
 80015b6:	e045      	b.n	8001644 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <SystemCoreClockUpdate+0x134>)
 80015ba:	4a31      	ldr	r2, [pc, #196]	; (8001680 <SystemCoreClockUpdate+0x13c>)
 80015bc:	601a      	str	r2, [r3, #0]
      break;
 80015be:	e041      	b.n	8001644 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	3301      	adds	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d105      	bne.n	80015ee <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80015e2:	4a26      	ldr	r2, [pc, #152]	; (800167c <SystemCoreClockUpdate+0x138>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e00d      	b.n	800160a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d105      	bne.n	8001600 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80015f4:	4a22      	ldr	r2, [pc, #136]	; (8001680 <SystemCoreClockUpdate+0x13c>)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e004      	b.n	800160a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0f5b      	lsrs	r3, r3, #29
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	3301      	adds	r3, #1
 800162c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <SystemCoreClockUpdate+0x134>)
 8001638:	6013      	str	r3, [r2, #0]
      break;
 800163a:	e003      	b.n	8001644 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800163c:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <SystemCoreClockUpdate+0x134>)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	6013      	str	r3, [r2, #0]
      break;
 8001642:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <SystemCoreClockUpdate+0x140>)
 8001652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001656:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <SystemCoreClockUpdate+0x134>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <SystemCoreClockUpdate+0x134>)
 8001664:	6013      	str	r3, [r2, #0]

}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	080067cc 	.word	0x080067cc
 8001678:	20000004 	.word	0x20000004
 800167c:	00f42400 	.word	0x00f42400
 8001680:	01e84800 	.word	0x01e84800
 8001684:	0800678c 	.word	0x0800678c

08001688 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001688:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168c:	3304      	adds	r3, #4

0800168e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001690:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001692:	d3f9      	bcc.n	8001688 <CopyDataInit>
  bx lr
 8001694:	4770      	bx	lr

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001696:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001698:	3004      	adds	r0, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800169a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>
  bx lr
 800169e:	4770      	bx	lr

080016a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80016a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016a4:	f7ff fefc 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <LoopForever+0x8>)
 80016aa:	490c      	ldr	r1, [pc, #48]	; (80016dc <LoopForever+0xc>)
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <LoopForever+0x10>)
 80016ae:	2300      	movs	r3, #0
 80016b0:	f7ff ffed 	bl	800168e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <LoopForever+0x14>)
 80016b6:	490c      	ldr	r1, [pc, #48]	; (80016e8 <LoopForever+0x18>)
 80016b8:	2300      	movs	r3, #0
 80016ba:	f7ff ffee 	bl	800169a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <LoopForever+0x1c>)
 80016c0:	490b      	ldr	r1, [pc, #44]	; (80016f0 <LoopForever+0x20>)
 80016c2:	2300      	movs	r3, #0
 80016c4:	f7ff ffe9 	bl	800169a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016c8:	f004 ff5a 	bl	8006580 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80016cc:	f7ff fd5f 	bl	800118e <main>

080016d0 <LoopForever>:

LoopForever:
  b LoopForever
 80016d0:	e7fe      	b.n	80016d0 <LoopForever>
 80016d2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80016d4:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 80016d8:	20000004 	.word	0x20000004
 80016dc:	20000028 	.word	0x20000028
 80016e0:	08006854 	.word	0x08006854
  INIT_BSS _sbss, _ebss
 80016e4:	200001b0 	.word	0x200001b0
 80016e8:	20000324 	.word	0x20000324
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016ec:	200301e0 	.word	0x200301e0
 80016f0:	20030a57 	.word	0x20030a57

080016f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC1_IRQHandler>
	...

080016f8 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6053      	str	r3, [r2, #4]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e0042000 	.word	0xe0042000

08001718 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8001722:	f023 0302 	bic.w	r3, r3, #2
 8001726:	6053      	str	r3, [r2, #4]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e0042000 	.word	0xe0042000

08001738 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6053      	str	r3, [r2, #4]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e0042000 	.word	0xe0042000

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_Init+0x3c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_Init+0x3c>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176e:	2003      	movs	r0, #3
 8001770:	f000 f9b8 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001774:	2000      	movs	r0, #0
 8001776:	f000 f80f 	bl	8001798 <HAL_InitTick>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	e001      	b.n	800178a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001786:	f7ff fe0e 	bl	80013a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800178a:	79fb      	ldrb	r3, [r7, #7]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	58004000 	.word	0x58004000

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_InitTick+0x6c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d024      	beq.n	80017f6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ac:	f001 fc64 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_InitTick+0x6c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f9ce 	bl	8001b66 <HAL_SYSTICK_Config>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10f      	bne.n	80017f0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	d809      	bhi.n	80017ea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d6:	2200      	movs	r2, #0
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017de:	f000 f98c 	bl	8001afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_InitTick+0x70>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e007      	b.n	80017fa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e004      	b.n	80017fa <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e001      	b.n	80017fa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000000c 	.word	0x2000000c
 8001808:	20000008 	.word	0x20000008

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000000c 	.word	0x2000000c
 8001830:	2000031c 	.word	0x2000031c

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000031c 	.word	0x2000031c

0800184c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTickPrio+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008

08001864 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8001868:	f7ff ff46 	bl	80016f8 <LL_DBGMCU_DisableDBGSleepMode>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8001874:	f7ff ff50 	bl	8001718 <LL_DBGMCU_DisableDBGStopMode>
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8001880:	f7ff ff5a 	bl	8001738 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0b      	blt.n	8001916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <__NVIC_EnableIRQ+0x38>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db10      	blt.n	800195c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4909      	ldr	r1, [pc, #36]	; (8001968 <__NVIC_DisableIRQ+0x40>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	3320      	adds	r3, #32
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001958:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0c      	blt.n	8001998 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <__NVIC_SetPendingIRQ+0x38>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	3340      	adds	r3, #64	; 0x40
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0c      	blt.n	80019d4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_ClearPendingIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	3360      	adds	r3, #96	; 0x60
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fecb 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff fee2 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fed5 	bl	80018ec <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fee5 	bl	8001928 <__NVIC_DisableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff96 	bl	8001aa0 <SysTick_Config>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff feed 	bl	800196c <__NVIC_SetPendingIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fefd 	bl	80019a8 <__NVIC_ClearPendingIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e146      	b.n	8001e56 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8138 	beq.w	8001e50 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d00b      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d007      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf4:	2b11      	cmp	r3, #17
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b12      	cmp	r3, #18
 8001bfe:	d130      	bne.n	8001c62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c36:	2201      	movs	r2, #1
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 0201 	and.w	r2, r3, #1
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0xea>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d123      	bne.n	8001cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	6939      	ldr	r1, [r7, #16]
 8001ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0203 	and.w	r2, r3, #3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8092 	beq.w	8001e50 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d2c:	4a51      	ldr	r2, [pc, #324]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1c8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_GPIO_Init+0x2c0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1c4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <HAL_GPIO_Init+0x2c4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1c0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <HAL_GPIO_Init+0x2c8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1bc>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x1ca>
 8001d74:	2307      	movs	r3, #7
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x1ca>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x1ca>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x1ca>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d92:	4938      	ldr	r1, [pc, #224]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001da0:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001dce:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f47f aeb1 	bne.w	8001bc8 <HAL_GPIO_Init+0x10>
  }
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000
 8001e78:	48000400 	.word	0x48000400
 8001e7c:	48000800 	.word	0x48000800
 8001e80:	48001000 	.word	0x48001000
 8001e84:	58000800 	.word	0x58000800

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_HSEM_IRQHandler+0x30>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_HSEM_IRQHandler+0x30>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4906      	ldr	r1, [pc, #24]	; (8001ee8 <HAL_HSEM_IRQHandler+0x30>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <HAL_HSEM_IRQHandler+0x30>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f807 	bl	8001eec <HAL_HSEM_FreeCallback>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	58001500 	.word	0x58001500

08001eec <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	58000400 	.word	0x58000400

08001f20 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f32:	d101      	bne.n	8001f38 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_RCC_HSE_EnableBypass>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_RCC_HSE_DisableBypass>:
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_HSE_Enable>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_HSE_Disable>:
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_HSE_IsReady>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fce:	d101      	bne.n	8001fd4 <LL_RCC_HSE_IsReady+0x18>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <LL_RCC_HSE_IsReady+0x1a>
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_RCC_HSI_Enable>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_RCC_HSI_Disable>:
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_RCC_HSI_IsReady>:
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202e:	d101      	bne.n	8002034 <LL_RCC_HSI_IsReady+0x18>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <LL_RCC_HSI_IsReady+0x1a>
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_RCC_HSI48_Enable>:
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_RCC_HSI48_Disable>:
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_RCC_HSI48_IsReady>:
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d101      	bne.n	80020c6 <LL_RCC_HSI48_IsReady+0x18>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <LL_RCC_HSI48_IsReady+0x1a>
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_RCC_LSE_Enable>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_LSE_Disable>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_RCC_LSE_EnableBypass>:
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_RCC_LSE_DisableBypass>:
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_RCC_LSE_IsReady>:
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800215e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d101      	bne.n	8002172 <LL_RCC_LSE_IsReady+0x18>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <LL_RCC_LSE_IsReady+0x1a>
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_RCC_LSI1_Enable>:
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_RCC_LSI1_Disable>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_RCC_LSI1_IsReady>:
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d101      	bne.n	80021da <LL_RCC_LSI1_IsReady+0x18>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <LL_RCC_LSI1_IsReady+0x1a>
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_RCC_LSI2_Enable>:
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_RCC_LSI2_Disable>:
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_RCC_LSI2_IsReady>:
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b08      	cmp	r3, #8
 800223c:	d101      	bne.n	8002242 <LL_RCC_LSI2_IsReady+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_RCC_LSI2_IsReady+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_RCC_LSI2_SetTrimming>:
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_RCC_MSI_Enable>:
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_RCC_MSI_Disable>:
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6013      	str	r3, [r2, #0]
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_RCC_MSI_IsReady>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d101      	bne.n	80022ce <LL_RCC_MSI_IsReady+0x16>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_RCC_MSI_IsReady+0x18>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_RCC_MSI_SetRange>:
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_RCC_MSI_GetRange>:
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002312:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2bb0      	cmp	r3, #176	; 0xb0
 8002318:	d901      	bls.n	800231e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800231a:	23b0      	movs	r3, #176	; 0xb0
 800231c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800231e:	687b      	ldr	r3, [r7, #4]
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_RCC_MSI_SetCalibTrimming>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_RCC_SetSysClkSource>:
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 0203 	bic.w	r2, r3, #3
 8002368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_RCC_GetSysClkSource>:
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_RCC_SetAHBPrescaler>:
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_C2_RCC_SetAHBPrescaler>:
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80023c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_RCC_SetAHB4Prescaler>:
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023fa:	f023 020f 	bic.w	r2, r3, #15
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_RCC_SetAPB1Prescaler>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800242a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_RCC_SetAPB2Prescaler>:
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_RCC_GetAHBPrescaler>:
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_RCC_GetAHB4Prescaler>:
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002488:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024cc:	6013      	str	r3, [r2, #0]
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024ea:	d101      	bne.n	80024f0 <LL_RCC_PLL_IsReady+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_RCC_PLL_IsReady+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0303 	and.w	r3, r3, #3
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002570:	d101      	bne.n	8002576 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002596:	d101      	bne.n	800259c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d101      	bne.n	80025c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e0:	d101      	bne.n	80025e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002604:	d101      	bne.n	800260a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b08d      	sub	sp, #52	; 0x34
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e37b      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 808f 	beq.w	8002756 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002638:	f7ff fea1 	bl	800237e <LL_RCC_GetSysClkSource>
 800263c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800263e:	f7ff ff82 	bl	8002546 <LL_RCC_PLL_GetMainSource>
 8002642:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x3e>
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d149      	bne.n	80026e4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	2b01      	cmp	r3, #1
 8002654:	d146      	bne.n	80026e4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002656:	f7ff fe2f 	bl	80022b8 <LL_RCC_MSI_IsReady>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_OscConfig+0x54>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e35a      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002670:	f7ff fe47 	bl	8002302 <LL_RCC_MSI_GetRange>
 8002674:	4603      	mov	r3, r0
 8002676:	429c      	cmp	r4, r3
 8002678:	d914      	bls.n	80026a4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fd0e 	bl	80030a0 <RCC_SetFlashLatencyFromMSIRange>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e349      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fe21 	bl	80022da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fe45 	bl	800232c <LL_RCC_MSI_SetCalibTrimming>
 80026a2:	e013      	b.n	80026cc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fe16 	bl	80022da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fe3a 	bl	800232c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fcef 	bl	80030a0 <RCC_SetFlashLatencyFromMSIRange>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e32a      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80026cc:	f7fe ff3a 	bl	8001544 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026d0:	4bb4      	ldr	r3, [pc, #720]	; (80029a4 <HAL_RCC_OscConfig+0x38c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff f85f 	bl	8001798 <HAL_InitTick>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d039      	beq.n	8002754 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e31e      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01e      	beq.n	800272a <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026ec:	f7ff fdc6 	bl	800227c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f0:	f7ff f8a0 	bl	8001834 <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f8:	f7ff f89c 	bl	8001834 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e30b      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800270a:	f7ff fdd5 	bl	80022b8 <LL_RCC_MSI_IsReady>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f1      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fdde 	bl	80022da <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fe02 	bl	800232c <LL_RCC_MSI_SetCalibTrimming>
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800272a:	f7ff fdb6 	bl	800229a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800272e:	f7ff f881 	bl	8001834 <HAL_GetTick>
 8002732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002736:	f7ff f87d 	bl	8001834 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e2ec      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002748:	f7ff fdb6 	bl	80022b8 <LL_RCC_MSI_IsReady>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f1      	bne.n	8002736 <HAL_RCC_OscConfig+0x11e>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d05a      	beq.n	8002818 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002762:	f7ff fe0c 	bl	800237e <LL_RCC_GetSysClkSource>
 8002766:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002768:	f7ff feed 	bl	8002546 <LL_RCC_PLL_GetMainSource>
 800276c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	2b08      	cmp	r3, #8
 8002772:	d005      	beq.n	8002780 <HAL_RCC_OscConfig+0x168>
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d10d      	bne.n	8002796 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d10a      	bne.n	8002796 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	f7ff fc1c 	bl	8001fbc <LL_RCC_HSE_IsReady>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d045      	beq.n	8002816 <HAL_RCC_OscConfig+0x1fe>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d141      	bne.n	8002816 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e2c5      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_OscConfig+0x18e>
 80027a0:	f7ff fbee 	bl	8001f80 <LL_RCC_HSE_Enable>
 80027a4:	e00d      	b.n	80027c2 <HAL_RCC_OscConfig+0x1aa>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ae:	d104      	bne.n	80027ba <HAL_RCC_OscConfig+0x1a2>
 80027b0:	f7ff fbc8 	bl	8001f44 <LL_RCC_HSE_EnableBypass>
 80027b4:	f7ff fbe4 	bl	8001f80 <LL_RCC_HSE_Enable>
 80027b8:	e003      	b.n	80027c2 <HAL_RCC_OscConfig+0x1aa>
 80027ba:	f7ff fbf0 	bl	8001f9e <LL_RCC_HSE_Disable>
 80027be:	f7ff fbd0 	bl	8001f62 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff f833 	bl	8001834 <HAL_GetTick>
 80027ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d2:	f7ff f82f 	bl	8001834 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	; 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e29e      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80027e4:	f7ff fbea 	bl	8001fbc <LL_RCC_HSE_IsReady>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f1      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1ba>
 80027ee:	e013      	b.n	8002818 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7ff f820 	bl	8001834 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f8:	f7ff f81c 	bl	8001834 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b64      	cmp	r3, #100	; 0x64
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e28b      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800280a:	f7ff fbd7 	bl	8001fbc <LL_RCC_HSE_IsReady>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f1      	bne.n	80027f8 <HAL_RCC_OscConfig+0x1e0>
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d051      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002824:	f7ff fdab 	bl	800237e <LL_RCC_GetSysClkSource>
 8002828:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282a:	f7ff fe8c 	bl	8002546 <LL_RCC_PLL_GetMainSource>
 800282e:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x22a>
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d113      	bne.n	8002864 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d110      	bne.n	8002864 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002842:	f7ff fbeb 	bl	800201c <LL_RCC_HSI_IsReady>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x240>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e264      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fbef 	bl	8002040 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002862:	e031      	b.n	80028c8 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d019      	beq.n	80028a0 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286c:	f7ff fbb8 	bl	8001fe0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe ffe0 	bl	8001834 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe ffdc 	bl	8001834 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e24b      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800288a:	f7ff fbc7 	bl	800201c <LL_RCC_HSI_IsReady>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f1      	beq.n	8002878 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fbd1 	bl	8002040 <LL_RCC_HSI_SetCalibTrimming>
 800289e:	e013      	b.n	80028c8 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a0:	f7ff fbad 	bl	8001ffe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe ffc6 	bl	8001834 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ac:	f7fe ffc2 	bl	8001834 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e231      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80028be:	f7ff fbad 	bl	800201c <LL_RCC_HSI_IsReady>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f1      	bne.n	80028ac <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80a2 	beq.w	8002a26 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d075      	beq.n	80029d6 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d046      	beq.n	8002984 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80028f6:	f7ff fc64 	bl	80021c2 <LL_RCC_LSI1_IsReady>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d113      	bne.n	8002928 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002900:	f7ff fc3d 	bl	800217e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002904:	f7fe ff96 	bl	8001834 <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800290c:	f7fe ff92 	bl	8001834 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e201      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800291e:	f7ff fc50 	bl	80021c2 <LL_RCC_LSI1_IsReady>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f1      	beq.n	800290c <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002928:	f7ff fc5d 	bl	80021e6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe ff82 	bl	8001834 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002934:	f7fe ff7e 	bl	8001834 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b03      	cmp	r3, #3
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1ed      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002946:	f7ff fc70 	bl	800222a <LL_RCC_LSI2_IsReady>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f1      	beq.n	8002934 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fc7a 	bl	800224e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800295a:	f7ff fc21 	bl	80021a0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7fe ff69 	bl	8001834 <HAL_GetTick>
 8002962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002966:	f7fe ff65 	bl	8001834 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e1d4      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002978:	f7ff fc23 	bl	80021c2 <LL_RCC_LSI1_IsReady>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f1      	bne.n	8002966 <HAL_RCC_OscConfig+0x34e>
 8002982:	e050      	b.n	8002a26 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002984:	f7ff fbfb 	bl	800217e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe ff54 	bl	8001834 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002990:	f7fe ff50 	bl	8001834 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d904      	bls.n	80029a8 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1bf      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
 80029a2:	bf00      	nop
 80029a4:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 80029a8:	f7ff fc0b 	bl	80021c2 <LL_RCC_LSI1_IsReady>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ee      	beq.n	8002990 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80029b2:	f7ff fc29 	bl	8002208 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029b8:	f7fe ff3c 	bl	8001834 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1ab      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80029ca:	f7ff fc2e 	bl	800222a <LL_RCC_LSI2_IsReady>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f1      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3a0>
 80029d4:	e027      	b.n	8002a26 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80029d6:	f7ff fc17 	bl	8002208 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7fe ff2b 	bl	8001834 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80029e2:	f7fe ff27 	bl	8001834 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e196      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80029f4:	f7ff fc19 	bl	800222a <LL_RCC_LSI2_IsReady>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f1      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80029fe:	f7ff fbcf 	bl	80021a0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe ff17 	bl	8001834 <HAL_GetTick>
 8002a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a0a:	f7fe ff13 	bl	8001834 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e182      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002a1c:	f7ff fbd1 	bl	80021c2 <LL_RCC_LSI1_IsReady>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f1      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d05b      	beq.n	8002aea <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	4bb4      	ldr	r3, [pc, #720]	; (8002d04 <HAL_RCC_OscConfig+0x6ec>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d114      	bne.n	8002a68 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a3e:	f7ff fa5f 	bl	8001f00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7fe fef7 	bl	8001834 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7fe fef3 	bl	8001834 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e162      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5c:	4ba9      	ldr	r3, [pc, #676]	; (8002d04 <HAL_RCC_OscConfig+0x6ec>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d102      	bne.n	8002a76 <HAL_RCC_OscConfig+0x45e>
 8002a70:	f7ff fb2f 	bl	80020d2 <LL_RCC_LSE_Enable>
 8002a74:	e00c      	b.n	8002a90 <HAL_RCC_OscConfig+0x478>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d104      	bne.n	8002a88 <HAL_RCC_OscConfig+0x470>
 8002a7e:	f7ff fb4a 	bl	8002116 <LL_RCC_LSE_EnableBypass>
 8002a82:	f7ff fb26 	bl	80020d2 <LL_RCC_LSE_Enable>
 8002a86:	e003      	b.n	8002a90 <HAL_RCC_OscConfig+0x478>
 8002a88:	f7ff fb34 	bl	80020f4 <LL_RCC_LSE_Disable>
 8002a8c:	f7ff fb54 	bl	8002138 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d014      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fecc 	bl	8001834 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fec8 	bl	8001834 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e135      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ab6:	f7ff fb50 	bl	800215a <LL_RCC_LSE_IsReady>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x488>
 8002ac0:	e013      	b.n	8002aea <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe feb7 	bl	8001834 <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe feb3 	bl	8001834 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e120      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ae0:	f7ff fb3b 	bl	800215a <LL_RCC_LSE_IsReady>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ef      	bne.n	8002aca <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d02c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d014      	beq.n	8002b28 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002afe:	f7ff fab4 	bl	800206a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7fe fe97 	bl	8001834 <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b0a:	f7fe fe93 	bl	8001834 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e102      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002b1c:	f7ff fac7 	bl	80020ae <LL_RCC_HSI48_IsReady>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f1      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4f2>
 8002b26:	e013      	b.n	8002b50 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b28:	f7ff fab0 	bl	800208c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fe82 	bl	8001834 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b34:	f7fe fe7e 	bl	8001834 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0ed      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002b46:	f7ff fab2 	bl	80020ae <LL_RCC_HSI48_IsReady>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f1      	bne.n	8002b34 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80e3 	beq.w	8002d20 <HAL_RCC_OscConfig+0x708>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5a:	f7ff fc10 	bl	800237e <LL_RCC_GetSysClkSource>
 8002b5e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f040 80a6 	bne.w	8002cbe <HAL_RCC_OscConfig+0x6a6>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0203 	and.w	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d123      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d114      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d054      	beq.n	8002c72 <HAL_RCC_OscConfig+0x65a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d04f      	beq.n	8002c6e <HAL_RCC_OscConfig+0x656>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bce:	f7ff fc74 	bl	80024ba <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd2:	f7fe fe2f 	bl	8001834 <HAL_GetTick>
 8002bd6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x5d4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bda:	f7fe fe2b 	bl	8001834 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x5d4>
              {
                return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e09a      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ef      	bne.n	8002bda <HAL_RCC_OscConfig+0x5c2>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <HAL_RCC_OscConfig+0x6f0>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c12:	0212      	lsls	r2, r2, #8
 8002c14:	4311      	orrs	r1, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c26:	430a      	orrs	r2, r1
 8002c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c30:	f7ff fc34 	bl	800249c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c42:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c44:	f7fe fdf6 	bl	8001834 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x646>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fdf2 	bl	8001834 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x646>
              {
                return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e061      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ef      	beq.n	8002c4c <HAL_RCC_OscConfig+0x634>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6c:	e058      	b.n	8002d20 <HAL_RCC_OscConfig+0x708>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e057      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d14f      	bne.n	8002d20 <HAL_RCC_OscConfig+0x708>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c80:	f7ff fc0c 	bl	800249c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c94:	f7fe fdce 	bl	8001834 <HAL_GetTick>
 8002c98:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x696>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe fdca 	bl	8001834 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x696>
            {
              return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e039      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCC_OscConfig+0x684>
 8002cbc:	e030      	b.n	8002d20 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d02b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x704>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc4:	f7ff fbf9 	bl	80024ba <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fda4 	bl	8001834 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cee:	e00d      	b.n	8002d0c <HAL_RCC_OscConfig+0x6f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fda0 	bl	8001834 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d906      	bls.n	8002d0c <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e00f      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
 8002d02:	bf00      	nop
 8002d04:	58000400 	.word	0x58000400
 8002d08:	11c1808c 	.word	0x11c1808c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ea      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x6d8>
 8002d1a:	e001      	b.n	8002d20 <HAL_RCC_OscConfig+0x708>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x70a>
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3734      	adds	r7, #52	; 0x34
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	bf00      	nop

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e12a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b97      	ldr	r3, [pc, #604]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d91b      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b94      	ldr	r3, [pc, #592]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 0207 	bic.w	r2, r3, #7
 8002d56:	4992      	ldr	r1, [pc, #584]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fd69 	bl	8001834 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d66:	f7fe fd65 	bl	8001834 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e10e      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d78:	4b89      	ldr	r3, [pc, #548]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d1ef      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fafd 	bl	8002396 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe fd4a 	bl	8001834 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002da4:	f7fe fd46 	bl	8001834 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0ef      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002db6:	f7ff fbd2 	bl	800255e <LL_RCC_IsActiveFlag_HPRE>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f1      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d016      	beq.n	8002dfa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff faf4 	bl	80023be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dd6:	f7fe fd2d 	bl	8001834 <HAL_GetTick>
 8002dda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dde:	f7fe fd29 	bl	8001834 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0d2      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002df0:	f7ff fbc7 	bl	8002582 <LL_RCC_IsActiveFlag_C2HPRE>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f1      	beq.n	8002dde <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff faed 	bl	80023ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e10:	f7fe fd10 	bl	8001834 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e18:	f7fe fd0c 	bl	8001834 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0b5      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e2a:	f7ff fbbd 	bl	80025a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f1      	beq.n	8002e18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d016      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fae7 	bl	8002418 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e4a:	f7fe fcf3 	bl	8001834 <HAL_GetTick>
 8002e4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e52:	f7fe fcef 	bl	8001834 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e098      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e64:	f7ff fbb3 	bl	80025ce <LL_RCC_IsActiveFlag_PPRE1>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f1      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d017      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fadd 	bl	8002440 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e86:	f7fe fcd5 	bl	8001834 <HAL_GetTick>
 8002e8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e8e:	f7fe fcd1 	bl	8001834 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e07a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ea0:	f7ff fba7 	bl	80025f2 <LL_RCC_IsActiveFlag_PPRE2>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f1      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d043      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ebe:	f7ff f87d 	bl	8001fbc <LL_RCC_HSE_IsReady>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11e      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e064      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ed4:	f7ff fb00 	bl	80024d8 <LL_RCC_PLL_IsReady>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d113      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e059      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002eea:	f7ff f9e5 	bl	80022b8 <LL_RCC_MSI_IsReady>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04e      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ef8:	f7ff f890 	bl	800201c <LL_RCC_HSI_IsReady>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e047      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fa23 	bl	8002356 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe fc90 	bl	8001834 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe fc8c 	bl	8001834 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e033      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	f7ff fa26 	bl	800237e <LL_RCC_GetSysClkSource>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d1ec      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d21b      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 0207 	bic.w	r2, r3, #7
 8002f54:	4912      	ldr	r1, [pc, #72]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f5c:	f7fe fc6a 	bl	8001834 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f64:	f7fe fc66 	bl	8001834 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e00f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1ef      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002f84:	f7fe fade 	bl	8001544 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002f88:	f7fe fc60 	bl	800184c <HAL_GetTickPrio>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fc02 	bl	8001798 <HAL_InitTick>
 8002f94:	4603      	mov	r3, r0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	58004000 	.word	0x58004000

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002faa:	f7ff f9e8 	bl	800237e <LL_RCC_GetSysClkSource>
 8002fae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002fb6:	f7ff f9a4 	bl	8002302 <LL_RCC_MSI_GetRange>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	4a2a      	ldr	r2, [pc, #168]	; (800306c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e04a      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fd2:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e044      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fde:	f7fe ff9f 	bl	8001f20 <LL_RCC_HSE_IsEnabledDiv2>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d102      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e039      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002fee:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e036      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ff4:	f7ff faa7 	bl	8002546 <LL_RCC_PLL_GetMainSource>
 8002ff8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d002      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x62>
 8003000:	2b03      	cmp	r3, #3
 8003002:	d003      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x68>
 8003004:	e00d      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003008:	60bb      	str	r3, [r7, #8]
        break;
 800300a:	e015      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800300c:	f7fe ff88 	bl	8001f20 <LL_RCC_HSE_IsEnabledDiv2>
 8003010:	4603      	mov	r3, r0
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003018:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800301a:	e00d      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_RCC_GetSysClockFreq+0xd0>)
 800301e:	60bb      	str	r3, [r7, #8]
        break;
 8003020:	e00a      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003022:	f7ff f96e 	bl	8002302 <LL_RCC_MSI_GetRange>
 8003026:	4603      	mov	r3, r0
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	4a0f      	ldr	r2, [pc, #60]	; (800306c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	60bb      	str	r3, [r7, #8]
        break;
 8003036:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003038:	f7ff fa60 	bl	80024fc <LL_RCC_PLL_GetN>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	fb03 f402 	mul.w	r4, r3, r2
 8003044:	f7ff fa73 	bl	800252e <LL_RCC_PLL_GetDivider>
 8003048:	4603      	mov	r3, r0
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	3301      	adds	r3, #1
 800304e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003052:	f7ff fa60 	bl	8002516 <LL_RCC_PLL_GetR>
 8003056:	4603      	mov	r3, r0
 8003058:	0f5b      	lsrs	r3, r3, #29
 800305a:	3301      	adds	r3, #1
 800305c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003060:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bd90      	pop	{r4, r7, pc}
 800306c:	080067cc 	.word	0x080067cc
 8003070:	00f42400 	.word	0x00f42400
 8003074:	01e84800 	.word	0x01e84800

08003078 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003078:	b598      	push	{r3, r4, r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800307c:	f7ff ff92 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8003080:	4604      	mov	r4, r0
 8003082:	f7ff f9f1 	bl	8002468 <LL_RCC_GetAHBPrescaler>
 8003086:	4603      	mov	r3, r0
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	4a03      	ldr	r2, [pc, #12]	; (800309c <HAL_RCC_GetHCLKFreq+0x24>)
 8003090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003094:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd98      	pop	{r3, r4, r7, pc}
 800309c:	0800678c 	.word	0x0800678c

080030a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2bb0      	cmp	r3, #176	; 0xb0
 80030ac:	d903      	bls.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e007      	b.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	4a10      	ldr	r2, [pc, #64]	; (8003100 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80030c6:	f7ff f9db 	bl	8002480 <LL_RCC_GetAHB4Prescaler>
 80030ca:	4603      	mov	r3, r0
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	0c9b      	lsrs	r3, r3, #18
 80030ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f80c 	bl	800310c <RCC_SetFlashLatency>
 80030f4:	4603      	mov	r3, r0
#endif
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	080067cc 	.word	0x080067cc
 8003104:	0800678c 	.word	0x0800678c
 8003108:	431bde83 	.word	0x431bde83

0800310c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b08f      	sub	sp, #60	; 0x3c
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003116:	4b25      	ldr	r3, [pc, #148]	; (80031ac <RCC_SetFlashLatency+0xa0>)
 8003118:	f107 041c 	add.w	r4, r7, #28
 800311c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800311e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <RCC_SetFlashLatency+0xa4>)
 8003124:	f107 040c 	add.w	r4, r7, #12
 8003128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800312a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800312e:	2300      	movs	r3, #0
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003132:	2300      	movs	r3, #0
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
 8003136:	e015      	b.n	8003164 <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003140:	4413      	add	r3, r2
 8003142:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	d808      	bhi.n	800315e <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003154:	4413      	add	r3, r2
 8003156:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800315c:	e005      	b.n	800316a <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	3301      	adds	r3, #1
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	2b03      	cmp	r3, #3
 8003168:	d9e6      	bls.n	8003138 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <RCC_SetFlashLatency+0xa8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	4910      	ldr	r1, [pc, #64]	; (80031b4 <RCC_SetFlashLatency+0xa8>)
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800317a:	f7fe fb5b 	bl	8001834 <HAL_GetTick>
 800317e:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003180:	e008      	b.n	8003194 <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003182:	f7fe fb57 	bl	8001834 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e007      	b.n	80031a4 <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <RCC_SetFlashLatency+0xa8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800319e:	429a      	cmp	r2, r3
 80031a0:	d1ef      	bne.n	8003182 <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	373c      	adds	r7, #60	; 0x3c
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}
 80031ac:	08006624 	.word	0x08006624
 80031b0:	08006634 	.word	0x08006634
 80031b4:	58004000 	.word	0x58004000

080031b8 <LL_RCC_LSE_IsEnabled>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <LL_RCC_LSE_IsEnabled+0x18>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <LL_RCC_LSE_IsEnabled+0x1a>
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_RCC_LSE_IsReady>:
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d101      	bne.n	80031f4 <LL_RCC_LSE_IsReady+0x18>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <LL_RCC_LSE_IsReady+0x1a>
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_RCC_SetRFWKPClockSource>:
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_RCC_SetUSARTClockSource>:
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f023 0203 	bic.w	r2, r3, #3
 8003240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_RCC_SetI2CClockSource>:
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003264:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003270:	43db      	mvns	r3, r3
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800327c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_RCC_SetLPTIMClockSource>:
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <LL_RCC_SetRNGClockSource>:
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80032da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_RCC_SetCLK48ClockSource>:
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80032fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_RCC_SetADCClockSource>:
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <LL_RCC_SetRTCClockSource>:
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <LL_RCC_GetRTCClockSource>:
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_RCC_ForceBackupDomainReset>:
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80033dc:	2300      	movs	r3, #0
 80033de:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80033e0:	2300      	movs	r3, #0
 80033e2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d046      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80033f0:	f7ff ffc1 	bl	8003376 <LL_RCC_GetRTCClockSource>
 80033f4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d03c      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003400:	f7fe fd7e 	bl	8001f00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ff9b 	bl	800334a <LL_RCC_SetRTCClockSource>
 8003414:	e02e      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003420:	f7ff ffb6 	bl	8003390 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003424:	f7ff ffc5 	bl	80033b2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003440:	f7ff feba 	bl	80031b8 <LL_RCC_LSE_IsEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d114      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800344a:	f7fe f9f3 	bl	8001834 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003450:	e00b      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fe f9ef 	bl	8001834 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d902      	bls.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	77fb      	strb	r3, [r7, #31]
              break;
 8003468:	e004      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800346a:	f7ff feb7 	bl	80031dc <LL_RCC_LSE_IsReady>
 800346e:	4603      	mov	r3, r0
 8003470:	2b01      	cmp	r3, #1
 8003472:	d1ee      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003474:	7ffb      	ldrb	r3, [r7, #31]
 8003476:	77bb      	strb	r3, [r7, #30]
 8003478:	e001      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fecc 	bl	800322c <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fef4 	bl	8003292 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fee9 	bl	8003292 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fec1 	bl	8003258 <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02b      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d008      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f4:	d003      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fedf 	bl	80032c6 <LL_RCC_SetRNGClockSource>
 8003508:	e00a      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	2000      	movs	r0, #0
 8003516:	f7ff fed6 	bl	80032c6 <LL_RCC_SetRNGClockSource>
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff fee9 	bl	80032f2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003528:	d107      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800352a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003538:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003542:	2b00      	cmp	r3, #0
 8003544:	d011      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fee7 	bl	800331e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003558:	d107      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fe40 	bl	8003200 <LL_RCC_SetRFWKPClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8003580:	7fbb      	ldrb	r3, [r7, #30]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e090      	b.n	80036be <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fd ff11 	bl	80013d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	22ca      	movs	r2, #202	; 0xca
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2253      	movs	r2, #83	; 0x53
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f89f 	bl	8003712 <RTC_EnterInitMode>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2204      	movs	r2, #4
 80035e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e067      	b.n	80036be <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003600:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68d2      	ldr	r2, [r2, #12]
 8003628:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6919      	ldr	r1, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	041a      	lsls	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800364c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0203 	bic.w	r2, r2, #3
 800365c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d113      	bne.n	80036ac <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f81e 	bl	80036c6 <HAL_RTC_WaitForSynchro>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	22ff      	movs	r2, #255	; 0xff
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2204      	movs	r2, #4
 800369c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e008      	b.n	80036be <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	22ff      	movs	r2, #255	; 0xff
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80036bc:	2300      	movs	r3, #0
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036dc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80036de:	f7fe f8a9 	bl	8001834 <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036e4:	e009      	b.n	80036fa <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036e6:	f7fe f8a5 	bl	8001834 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f4:	d901      	bls.n	80036fa <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e007      	b.n	800370a <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ee      	beq.n	80036e6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d119      	bne.n	800375c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003730:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003732:	f7fe f87f 	bl	8001834 <HAL_GetTick>
 8003736:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003738:	e009      	b.n	800374e <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800373a:	f7fe f87b 	bl	8001834 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003748:	d901      	bls.n	800374e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e007      	b.n	800375e <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800377e:	2302      	movs	r3, #2
 8003780:	e0a8      	b.n	80038d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	22ca      	movs	r2, #202	; 0xca
 8003798:	625a      	str	r2, [r3, #36]	; 0x24
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2253      	movs	r2, #83	; 0x53
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
    tickstart = HAL_GetTick();
 80037b0:	f7fe f840 	bl	8001834 <HAL_GetTick>
 80037b4:	6178      	str	r0, [r7, #20]
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80037b6:	e015      	b.n	80037e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037b8:	f7fe f83c 	bl	8001834 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037c6:	d90d      	bls.n	80037e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2203      	movs	r2, #3
 80037d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e077      	b.n	80038d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e2      	bne.n	80037b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003812:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003814:	f7fe f80e 	bl	8001834 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800381a:	e015      	b.n	8003848 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800381c:	f7fe f80a 	bl	8001834 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800382a:	d90d      	bls.n	8003848 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2203      	movs	r2, #3
 8003838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e045      	b.n	80038d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0e2      	beq.n	800381c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0207 	bic.w	r2, r2, #7
 800386c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003884:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800388a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a12      	ldr	r2, [pc, #72]	; (80038dc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003898:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038a8:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	22ff      	movs	r2, #255	; 0xff
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	58000800 	.word	0x58000800

080038e0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
    {
      /* WAKEUPTIMER callback */ 
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f818 	bl	800392c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800390c:	60da      	str	r2, [r3, #12]
    }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003910:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003914:	60da      	str	r2, [r3, #12]
 
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	58000800 	.word	0x58000800

0800392c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800394a:	f107 0308 	add.w	r3, r7, #8
 800394e:	2218      	movs	r2, #24
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f000 ff45 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003958:	233f      	movs	r3, #63	; 0x3f
 800395a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800395c:	2381      	movs	r3, #129	; 0x81
 800395e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003964:	2301      	movs	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003968:	f107 0308 	add.w	r3, r7, #8
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f001 f9f0 	bl	8004d54 <hci_send_req>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	da01      	bge.n	800397e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800397a:	23ff      	movs	r3, #255	; 0xff
 800397c:	e000      	b.n	8003980 <aci_gap_set_non_discoverable+0x40>
  return status;
 800397e:	79fb      	ldrb	r3, [r7, #7]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b0ce      	sub	sp, #312	; 0x138
 800398c:	af00      	add	r7, sp, #0
 800398e:	4605      	mov	r5, r0
 8003990:	460c      	mov	r4, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	1dfb      	adds	r3, r7, #7
 8003998:	462a      	mov	r2, r5
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	4622      	mov	r2, r4
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	1cbb      	adds	r3, r7, #2
 80039a4:	4602      	mov	r2, r0
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	1dbb      	adds	r3, r7, #6
 80039aa:	460a      	mov	r2, r1
 80039ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80039ae:	f107 0310 	add.w	r3, r7, #16
 80039b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80039b6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80039ba:	3308      	adds	r3, #8
 80039bc:	f107 0210 	add.w	r2, r7, #16
 80039c0:	4413      	add	r3, r2
 80039c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80039c6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80039ca:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80039ce:	4413      	add	r3, r2
 80039d0:	3309      	adds	r3, #9
 80039d2:	f107 0210 	add.w	r2, r7, #16
 80039d6:	4413      	add	r3, r2
 80039d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80039dc:	f107 030f 	add.w	r3, r7, #15
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80039ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039ee:	1dfa      	adds	r2, r7, #7
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80039f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039f8:	3301      	adds	r3, #1
 80039fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80039fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a02:	1d3a      	adds	r2, r7, #4
 8003a04:	8812      	ldrh	r2, [r2, #0]
 8003a06:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a0e:	3302      	adds	r3, #2
 8003a10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003a14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a18:	1cba      	adds	r2, r7, #2
 8003a1a:	8812      	ldrh	r2, [r2, #0]
 8003a1c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a24:	3302      	adds	r3, #2
 8003a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8003a2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a2e:	1dba      	adds	r2, r7, #6
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8003a3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a42:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003a46:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8003a52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a56:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003a5a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003a5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a60:	3301      	adds	r3, #1
 8003a62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8003a66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003a70:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fea4 	bl	80047c2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8003a7a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003a7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003a82:	4413      	add	r3, r2
 8003a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8003a88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a8c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003a90:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8003a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a96:	3301      	adds	r3, #1
 8003a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8003a9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003aa6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fe89 	bl	80047c2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8003ab0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003ab4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003ab8:	4413      	add	r3, r2
 8003aba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8003abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003ac6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003acc:	3302      	adds	r3, #2
 8003ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8003ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ad6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003ada:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003aea:	2218      	movs	r2, #24
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fe77 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003af4:	233f      	movs	r3, #63	; 0x3f
 8003af6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003afa:	2383      	movs	r3, #131	; 0x83
 8003afc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003b00:	f107 0310 	add.w	r3, r7, #16
 8003b04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003b08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003b10:	f107 030f 	add.w	r3, r7, #15
 8003b14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003b1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f915 	bl	8004d54 <hci_send_req>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da01      	bge.n	8003b34 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8003b30:	23ff      	movs	r3, #255	; 0xff
 8003b32:	e002      	b.n	8003b3a <aci_gap_set_discoverable+0x1b2>
  return status;
 8003b34:	f107 030f 	add.w	r3, r7, #15
 8003b38:	781b      	ldrb	r3, [r3, #0]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bdb0      	pop	{r4, r5, r7, pc}

08003b44 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b0cc      	sub	sp, #304	; 0x130
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	1dfb      	adds	r3, r7, #7
 8003b4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8003b50:	f107 0310 	add.w	r3, r7, #16
 8003b54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003b58:	f107 030f 	add.w	r3, r7, #15
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8003b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b6a:	1dfa      	adds	r2, r7, #7
 8003b6c:	7812      	ldrb	r2, [r2, #0]
 8003b6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b74:	3301      	adds	r3, #1
 8003b76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b7e:	2218      	movs	r2, #24
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fe2d 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003b88:	233f      	movs	r3, #63	; 0x3f
 8003b8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8003b8e:	2385      	movs	r3, #133	; 0x85
 8003b90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003b94:	f107 0310 	add.w	r3, r7, #16
 8003b98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ba0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003ba4:	f107 030f 	add.w	r3, r7, #15
 8003ba8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f8cb 	bl	8004d54 <hci_send_req>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da01      	bge.n	8003bc8 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8003bc4:	23ff      	movs	r3, #255	; 0xff
 8003bc6:	e002      	b.n	8003bce <aci_gap_set_io_capability+0x8a>
  return status;
 8003bc8:	f107 030f 	add.w	r3, r7, #15
 8003bcc:	781b      	ldrb	r3, [r3, #0]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b0cc      	sub	sp, #304	; 0x130
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4605      	mov	r5, r0
 8003be0:	460c      	mov	r4, r1
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	462a      	mov	r2, r5
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	1dbb      	adds	r3, r7, #6
 8003bee:	4622      	mov	r2, r4
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	1d7b      	adds	r3, r7, #5
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	1d3b      	adds	r3, r7, #4
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8003bfe:	f107 0310 	add.w	r3, r7, #16
 8003c02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003c06:	f107 030f 	add.w	r3, r7, #15
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8003c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c18:	1dfa      	adds	r2, r7, #7
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003c1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c22:	3301      	adds	r3, #1
 8003c24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8003c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c2c:	1dba      	adds	r2, r7, #6
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c36:	3301      	adds	r3, #1
 8003c38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8003c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c40:	1d7a      	adds	r2, r7, #5
 8003c42:	7812      	ldrb	r2, [r2, #0]
 8003c44:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8003c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c54:	1d3a      	adds	r2, r7, #4
 8003c56:	7812      	ldrb	r2, [r2, #0]
 8003c58:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8003c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8003c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c68:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8003c6c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c72:	3301      	adds	r3, #1
 8003c74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8003c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c7c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8003c80:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c86:	3301      	adds	r3, #1
 8003c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8003c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c90:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003c94:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8003ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ca4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003ca8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8003cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8003cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cba:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8003cbe:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8003cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003cca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003cce:	2218      	movs	r2, #24
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fd85 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003cd8:	233f      	movs	r3, #63	; 0x3f
 8003cda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8003cde:	2386      	movs	r3, #134	; 0x86
 8003ce0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003ce4:	f107 0310 	add.w	r3, r7, #16
 8003ce8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003cec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cf0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003cf4:	f107 030f 	add.w	r3, r7, #15
 8003cf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003d02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 f823 	bl	8004d54 <hci_send_req>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	da01      	bge.n	8003d18 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8003d14:	23ff      	movs	r3, #255	; 0xff
 8003d16:	e002      	b.n	8003d1e <aci_gap_set_authentication_requirement+0x146>
  return status;
 8003d18:	f107 030f 	add.w	r3, r7, #15
 8003d1c:	781b      	ldrb	r3, [r3, #0]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bdb0      	pop	{r4, r5, r7, pc}

08003d28 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8003d28:	b590      	push	{r4, r7, lr}
 8003d2a:	b0cd      	sub	sp, #308	; 0x134
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4604      	mov	r4, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	463a      	mov	r2, r7
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	1dfb      	adds	r3, r7, #7
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	1dbb      	adds	r3, r7, #6
 8003d40:	4602      	mov	r2, r0
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	1d7b      	adds	r3, r7, #5
 8003d46:	460a      	mov	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8003d4a:	f107 0310 	add.w	r3, r7, #16
 8003d4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	2207      	movs	r2, #7
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fd41 	bl	80047e2 <Osal_MemSet>
  int index_input = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8003d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d6a:	1dfa      	adds	r2, r7, #7
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d74:	3301      	adds	r3, #1
 8003d76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8003d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d7e:	1dba      	adds	r2, r7, #6
 8003d80:	7812      	ldrb	r2, [r2, #0]
 8003d82:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d88:	3301      	adds	r3, #1
 8003d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8003d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d92:	1d7a      	adds	r2, r7, #5
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003da6:	2218      	movs	r2, #24
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fd19 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003db0:	233f      	movs	r3, #63	; 0x3f
 8003db2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8003db6:	238a      	movs	r3, #138	; 0x8a
 8003db8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003dbc:	f107 0310 	add.w	r3, r7, #16
 8003dc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003dd4:	2307      	movs	r3, #7
 8003dd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 ffb7 	bl	8004d54 <hci_send_req>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da01      	bge.n	8003df0 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8003dec:	23ff      	movs	r3, #255	; 0xff
 8003dee:	e021      	b.n	8003e34 <aci_gap_init+0x10c>
  if ( resp.Status )
 8003df0:	f107 0308 	add.w	r3, r7, #8
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <aci_gap_init+0xda>
    return resp.Status;
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	e018      	b.n	8003e34 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8003e02:	f107 0308 	add.w	r3, r7, #8
 8003e06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003e20:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8003e22:	f107 0308 	add.w	r3, r7, #8
 8003e26:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e30:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd90      	pop	{r4, r7, pc}

08003e3e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b0cc      	sub	sp, #304	; 0x130
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4602      	mov	r2, r0
 8003e46:	463b      	mov	r3, r7
 8003e48:	6019      	str	r1, [r3, #0]
 8003e4a:	1dfb      	adds	r3, r7, #7
 8003e4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8003e4e:	f107 0310 	add.w	r3, r7, #16
 8003e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003e56:	f107 030f 	add.w	r3, r7, #15
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8003e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e68:	1dfa      	adds	r2, r7, #7
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e72:	3301      	adds	r3, #1
 8003e74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8003e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e7c:	1c58      	adds	r0, r3, #1
 8003e7e:	1dfb      	adds	r3, r7, #7
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	463b      	mov	r3, r7
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	f000 fc9c 	bl	80047c2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003e92:	4413      	add	r3, r2
 8003e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003e98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003e9c:	2218      	movs	r2, #24
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fc9e 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003ea6:	233f      	movs	r3, #63	; 0x3f
 8003ea8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8003eac:	238e      	movs	r3, #142	; 0x8e
 8003eae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ebe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003ec2:	f107 030f 	add.w	r3, r7, #15
 8003ec6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 ff3c 	bl	8004d54 <hci_send_req>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da01      	bge.n	8003ee6 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8003ee2:	23ff      	movs	r3, #255	; 0xff
 8003ee4:	e002      	b.n	8003eec <aci_gap_update_adv_data+0xae>
  return status;
 8003ee6:	f107 030f 	add.w	r3, r7, #15
 8003eea:	781b      	ldrb	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b088      	sub	sp, #32
 8003efa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003f00:	f107 0308 	add.w	r3, r7, #8
 8003f04:	2218      	movs	r2, #24
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fc6a 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003f0e:	233f      	movs	r3, #63	; 0x3f
 8003f10:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8003f12:	2392      	movs	r3, #146	; 0x92
 8003f14:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003f1e:	f107 0308 	add.w	r3, r7, #8
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 ff15 	bl	8004d54 <hci_send_req>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	da01      	bge.n	8003f34 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003f30:	23ff      	movs	r3, #255	; 0xff
 8003f32:	e000      	b.n	8003f36 <aci_gap_configure_whitelist+0x40>
  return status;
 8003f34:	79fb      	ldrb	r3, [r7, #7]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3720      	adds	r7, #32
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b088      	sub	sp, #32
 8003f42:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003f48:	f107 0308 	add.w	r3, r7, #8
 8003f4c:	2218      	movs	r2, #24
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fc46 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8003f56:	233f      	movs	r3, #63	; 0x3f
 8003f58:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8003f5a:	f240 1301 	movw	r3, #257	; 0x101
 8003f5e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003f60:	1dfb      	adds	r3, r7, #7
 8003f62:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fef0 	bl	8004d54 <hci_send_req>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da01      	bge.n	8003f7e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8003f7a:	23ff      	movs	r3, #255	; 0xff
 8003f7c:	e000      	b.n	8003f80 <aci_gatt_init+0x42>
  return status;
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b0cf      	sub	sp, #316	; 0x13c
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4638      	mov	r0, r7
 8003f92:	6001      	str	r1, [r0, #0]
 8003f94:	4610      	mov	r0, r2
 8003f96:	4619      	mov	r1, r3
 8003f98:	1dfb      	adds	r3, r7, #7
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	1dbb      	adds	r3, r7, #6
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	1d7b      	adds	r3, r7, #5
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8003faa:	f107 0310 	add.w	r3, r7, #16
 8003fae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d007      	beq.n	8003fca <aci_gatt_add_service+0x42>
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d101      	bne.n	8003fc6 <aci_gatt_add_service+0x3e>
 8003fc2:	2311      	movs	r3, #17
 8003fc4:	e002      	b.n	8003fcc <aci_gatt_add_service+0x44>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <aci_gatt_add_service+0x44>
 8003fca:	2303      	movs	r3, #3
 8003fcc:	f107 0210 	add.w	r2, r7, #16
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003fd6:	f107 030c 	add.w	r3, r7, #12
 8003fda:	2203      	movs	r2, #3
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fbff 	bl	80047e2 <Osal_MemSet>
  int index_input = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8003fea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fee:	1dfa      	adds	r2, r7, #7
 8003ff0:	7812      	ldrb	r2, [r2, #0]
 8003ff2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d002      	beq.n	800400c <aci_gatt_add_service+0x84>
 8004006:	2b02      	cmp	r3, #2
 8004008:	d004      	beq.n	8004014 <aci_gatt_add_service+0x8c>
 800400a:	e007      	b.n	800401c <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800400c:	2302      	movs	r3, #2
 800400e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004012:	e005      	b.n	8004020 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8004014:	2310      	movs	r3, #16
 8004016:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800401a:	e001      	b.n	8004020 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800401c:	2347      	movs	r3, #71	; 0x47
 800401e:	e05d      	b.n	80040dc <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004020:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004024:	1c58      	adds	r0, r3, #1
 8004026:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800402a:	463b      	mov	r3, r7
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	f000 fbc8 	bl	80047c2 <Osal_MemCpy>
    index_input += size;
 8004032:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004036:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800403a:	4413      	add	r3, r2
 800403c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8004040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004044:	1dba      	adds	r2, r7, #6
 8004046:	7812      	ldrb	r2, [r2, #0]
 8004048:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800404a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800404e:	3301      	adds	r3, #1
 8004050:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004058:	1d7a      	adds	r2, r7, #5
 800405a:	7812      	ldrb	r2, [r2, #0]
 800405c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800405e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004062:	3301      	adds	r3, #1
 8004064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004068:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800406c:	2218      	movs	r2, #24
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fbb6 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004076:	233f      	movs	r3, #63	; 0x3f
 8004078:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800407c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004080:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004084:	f107 0310 	add.w	r3, r7, #16
 8004088:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800408c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004090:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004094:	f107 030c 	add.w	r3, r7, #12
 8004098:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800409c:	2303      	movs	r3, #3
 800409e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80040a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fe53 	bl	8004d54 <hci_send_req>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da01      	bge.n	80040b8 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80040b4:	23ff      	movs	r3, #255	; 0xff
 80040b6:	e011      	b.n	80040dc <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80040b8:	f107 030c 	add.w	r3, r7, #12
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <aci_gatt_add_service+0x142>
    return resp.Status;
 80040c2:	f107 030c 	add.w	r3, r7, #12
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	e008      	b.n	80040dc <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80040ca:	f107 030c 	add.w	r3, r7, #12
 80040ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80040d8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}

080040e6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80040e6:	b590      	push	{r4, r7, lr}
 80040e8:	b0d1      	sub	sp, #324	; 0x144
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	4604      	mov	r4, r0
 80040ee:	4608      	mov	r0, r1
 80040f0:	f107 0108 	add.w	r1, r7, #8
 80040f4:	600a      	str	r2, [r1, #0]
 80040f6:	4619      	mov	r1, r3
 80040f8:	f107 030e 	add.w	r3, r7, #14
 80040fc:	4622      	mov	r2, r4
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	f107 030d 	add.w	r3, r7, #13
 8004104:	4602      	mov	r2, r0
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	1dbb      	adds	r3, r7, #6
 800410a:	460a      	mov	r2, r1
 800410c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800410e:	f107 0318 	add.w	r3, r7, #24
 8004112:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004116:	f107 030d 	add.w	r3, r7, #13
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d008      	beq.n	8004132 <aci_gatt_add_char+0x4c>
 8004120:	f107 030d 	add.w	r3, r7, #13
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d101      	bne.n	800412e <aci_gatt_add_char+0x48>
 800412a:	2313      	movs	r3, #19
 800412c:	e002      	b.n	8004134 <aci_gatt_add_char+0x4e>
 800412e:	2303      	movs	r3, #3
 8004130:	e000      	b.n	8004134 <aci_gatt_add_char+0x4e>
 8004132:	2305      	movs	r3, #5
 8004134:	f107 0218 	add.w	r2, r7, #24
 8004138:	4413      	add	r3, r2
 800413a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	2203      	movs	r2, #3
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fb4b 	bl	80047e2 <Osal_MemSet>
  int index_input = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8004152:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004156:	f107 020e 	add.w	r2, r7, #14
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800415e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004162:	3302      	adds	r3, #2
 8004164:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8004168:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800416c:	f107 020d 	add.w	r2, r7, #13
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004174:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004178:	3301      	adds	r3, #1
 800417a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800417e:	f107 030d 	add.w	r3, r7, #13
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <aci_gatt_add_char+0xa8>
 8004188:	2b02      	cmp	r3, #2
 800418a:	d004      	beq.n	8004196 <aci_gatt_add_char+0xb0>
 800418c:	e007      	b.n	800419e <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800418e:	2302      	movs	r3, #2
 8004190:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004194:	e005      	b.n	80041a2 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8004196:	2310      	movs	r3, #16
 8004198:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800419c:	e001      	b.n	80041a2 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800419e:	2347      	movs	r3, #71	; 0x47
 80041a0:	e086      	b.n	80042b0 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80041a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041a6:	1cd8      	adds	r0, r3, #3
 80041a8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80041ac:	f107 0308 	add.w	r3, r7, #8
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	f000 fb06 	bl	80047c2 <Osal_MemCpy>
    index_input += size;
 80041b6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80041ba:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80041be:	4413      	add	r3, r2
 80041c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80041c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041c8:	1dba      	adds	r2, r7, #6
 80041ca:	8812      	ldrh	r2, [r2, #0]
 80041cc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80041ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041d2:	3302      	adds	r3, #2
 80041d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80041d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041dc:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80041e0:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80041e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041e6:	3301      	adds	r3, #1
 80041e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80041ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041f0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80041f4:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80041f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041fa:	3301      	adds	r3, #1
 80041fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004200:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004204:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004208:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800420a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800420e:	3301      	adds	r3, #1
 8004210:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004214:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004218:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800421c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800421e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004222:	3301      	adds	r3, #1
 8004224:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004228:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800422c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004230:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004232:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004236:	3301      	adds	r3, #1
 8004238:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800423c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004240:	2218      	movs	r2, #24
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f000 facc 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800424a:	233f      	movs	r3, #63	; 0x3f
 800424c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004250:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004254:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004258:	f107 0318 	add.w	r3, r7, #24
 800425c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004260:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004264:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004270:	2303      	movs	r3, #3
 8004272:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004276:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fd69 	bl	8004d54 <hci_send_req>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	da01      	bge.n	800428c <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8004288:	23ff      	movs	r3, #255	; 0xff
 800428a:	e011      	b.n	80042b0 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800428c:	f107 0314 	add.w	r3, r7, #20
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8004296:	f107 0314 	add.w	r3, r7, #20
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	e008      	b.n	80042b0 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800429e:	f107 0314 	add.w	r3, r7, #20
 80042a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80042ac:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd90      	pop	{r4, r7, pc}

080042ba <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80042ba:	b5b0      	push	{r4, r5, r7, lr}
 80042bc:	b0cc      	sub	sp, #304	; 0x130
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4605      	mov	r5, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	1dbb      	adds	r3, r7, #6
 80042ca:	462a      	mov	r2, r5
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	4622      	mov	r2, r4
 80042d2:	801a      	strh	r2, [r3, #0]
 80042d4:	1cfb      	adds	r3, r7, #3
 80042d6:	4602      	mov	r2, r0
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	1cbb      	adds	r3, r7, #2
 80042dc:	460a      	mov	r2, r1
 80042de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80042e0:	f107 0310 	add.w	r3, r7, #16
 80042e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80042e8:	f107 030f 	add.w	r3, r7, #15
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80042f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042fa:	1dba      	adds	r2, r7, #6
 80042fc:	8812      	ldrh	r2, [r2, #0]
 80042fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004300:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004304:	3302      	adds	r3, #2
 8004306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800430a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800430e:	1d3a      	adds	r2, r7, #4
 8004310:	8812      	ldrh	r2, [r2, #0]
 8004312:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004318:	3302      	adds	r3, #2
 800431a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800431e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004322:	1cfa      	adds	r2, r7, #3
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800432c:	3301      	adds	r3, #1
 800432e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004336:	1cba      	adds	r2, r7, #2
 8004338:	7812      	ldrb	r2, [r2, #0]
 800433a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800433c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004340:	3301      	adds	r3, #1
 8004342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800434a:	1d98      	adds	r0, r3, #6
 800434c:	1cbb      	adds	r3, r7, #2
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004356:	f000 fa34 	bl	80047c2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800435a:	1cbb      	adds	r3, r7, #2
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004362:	4413      	add	r3, r2
 8004364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004368:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800436c:	2218      	movs	r2, #24
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fa36 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004376:	233f      	movs	r3, #63	; 0x3f
 8004378:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800437c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004380:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004384:	f107 0310 	add.w	r3, r7, #16
 8004388:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800438c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004390:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004394:	f107 030f 	add.w	r3, r7, #15
 8004398:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800439c:	2301      	movs	r3, #1
 800439e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80043a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fcd3 	bl	8004d54 <hci_send_req>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da01      	bge.n	80043b8 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80043b4:	23ff      	movs	r3, #255	; 0xff
 80043b6:	e002      	b.n	80043be <aci_gatt_update_char_value+0x104>
  return status;
 80043b8:	f107 030f 	add.w	r3, r7, #15
 80043bc:	781b      	ldrb	r3, [r3, #0]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bdb0      	pop	{r4, r5, r7, pc}

080043c8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b0cc      	sub	sp, #304	; 0x130
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	463b      	mov	r3, r7
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	4602      	mov	r2, r0
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	1dbb      	adds	r3, r7, #6
 80043da:	460a      	mov	r2, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80043de:	f107 0310 	add.w	r3, r7, #16
 80043e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80043e6:	f107 030f 	add.w	r3, r7, #15
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80043f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043f8:	1dfa      	adds	r2, r7, #7
 80043fa:	7812      	ldrb	r2, [r2, #0]
 80043fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80043fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004402:	3301      	adds	r3, #1
 8004404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800440c:	1dba      	adds	r2, r7, #6
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004412:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004416:	3301      	adds	r3, #1
 8004418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800441c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004420:	1c98      	adds	r0, r3, #2
 8004422:	1dbb      	adds	r3, r7, #6
 8004424:	781a      	ldrb	r2, [r3, #0]
 8004426:	463b      	mov	r3, r7
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	f000 f9ca 	bl	80047c2 <Osal_MemCpy>
  index_input += Length;
 800442e:	1dbb      	adds	r3, r7, #6
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004436:	4413      	add	r3, r2
 8004438:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800443c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004440:	2218      	movs	r2, #24
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f9cc 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800444a:	233f      	movs	r3, #63	; 0x3f
 800444c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004450:	230c      	movs	r3, #12
 8004452:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004456:	f107 0310 	add.w	r3, r7, #16
 800445a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800445e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004462:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004466:	f107 030f 	add.w	r3, r7, #15
 800446a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004474:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fc6a 	bl	8004d54 <hci_send_req>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	da01      	bge.n	800448a <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8004486:	23ff      	movs	r3, #255	; 0xff
 8004488:	e002      	b.n	8004490 <aci_hal_write_config_data+0xc8>
  return status;
 800448a:	f107 030f 	add.w	r3, r7, #15
 800448e:	781b      	ldrb	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b0cc      	sub	sp, #304	; 0x130
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4602      	mov	r2, r0
 80044a2:	1dfb      	adds	r3, r7, #7
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	460a      	mov	r2, r1
 80044aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80044ac:	f107 0310 	add.w	r3, r7, #16
 80044b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80044b4:	f107 030f 	add.w	r3, r7, #15
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80044c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c6:	1dfa      	adds	r2, r7, #7
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80044cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044d0:	3301      	adds	r3, #1
 80044d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80044d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044da:	1dba      	adds	r2, r7, #6
 80044dc:	7812      	ldrb	r2, [r2, #0]
 80044de:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80044e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044e4:	3301      	adds	r3, #1
 80044e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80044ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044ee:	2218      	movs	r2, #24
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f975 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80044f8:	233f      	movs	r3, #63	; 0x3f
 80044fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80044fe:	230f      	movs	r3, #15
 8004500:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800450c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004510:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004514:	f107 030f 	add.w	r3, r7, #15
 8004518:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800451c:	2301      	movs	r3, #1
 800451e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fc13 	bl	8004d54 <hci_send_req>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	da01      	bge.n	8004538 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004534:	23ff      	movs	r3, #255	; 0xff
 8004536:	e002      	b.n	800453e <aci_hal_set_tx_power_level+0xa4>
  return status;
 8004538:	f107 030f 	add.w	r3, r7, #15
 800453c:	781b      	ldrb	r3, [r3, #0]
}
 800453e:	4618      	mov	r0, r3
 8004540:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b0cc      	sub	sp, #304	; 0x130
 800454c:	af00      	add	r7, sp, #0
 800454e:	4602      	mov	r2, r0
 8004550:	1dbb      	adds	r3, r7, #6
 8004552:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8004554:	f107 0310 	add.w	r3, r7, #16
 8004558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800455c:	f107 030f 	add.w	r3, r7, #15
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800456a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800456e:	1dba      	adds	r2, r7, #6
 8004570:	8812      	ldrh	r2, [r2, #0]
 8004572:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004578:	3302      	adds	r3, #2
 800457a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800457e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004582:	2218      	movs	r2, #24
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f92b 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800458c:	233f      	movs	r3, #63	; 0x3f
 800458e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8004592:	2318      	movs	r3, #24
 8004594:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004598:	f107 0310 	add.w	r3, r7, #16
 800459c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80045a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80045a8:	f107 030f 	add.w	r3, r7, #15
 80045ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80045b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fbc9 	bl	8004d54 <hci_send_req>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da01      	bge.n	80045cc <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80045c8:	23ff      	movs	r3, #255	; 0xff
 80045ca:	e002      	b.n	80045d2 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 80045cc:	f107 030f 	add.w	r3, r7, #15
 80045d0:	781b      	ldrb	r3, [r3, #0]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	2218      	movs	r2, #24
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f8f7 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x03;
 80045f4:	2303      	movs	r3, #3
 80045f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80045f8:	2303      	movs	r3, #3
 80045fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004604:	f107 0308 	add.w	r3, r7, #8
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fba2 	bl	8004d54 <hci_send_req>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	da01      	bge.n	800461a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004616:	23ff      	movs	r3, #255	; 0xff
 8004618:	e000      	b.n	800461c <hci_reset+0x40>
  return status;
 800461a:	79fb      	ldrb	r3, [r7, #7]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b0ce      	sub	sp, #312	; 0x138
 8004628:	af00      	add	r7, sp, #0
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	6019      	str	r1, [r3, #0]
 8004630:	1d3b      	adds	r3, r7, #4
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f107 030e 	add.w	r3, r7, #14
 8004638:	4602      	mov	r2, r0
 800463a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800463c:	f107 0318 	add.w	r3, r7, #24
 8004640:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004644:	f107 0310 	add.w	r3, r7, #16
 8004648:	2205      	movs	r2, #5
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f8c8 	bl	80047e2 <Osal_MemSet>
  int index_input = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8004658:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800465c:	f107 020e 	add.w	r2, r7, #14
 8004660:	8812      	ldrh	r2, [r2, #0]
 8004662:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004664:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004668:	3302      	adds	r3, #2
 800466a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800466e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004672:	2218      	movs	r2, #24
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f8b3 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x08;
 800467c:	2308      	movs	r3, #8
 800467e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8004682:	2330      	movs	r3, #48	; 0x30
 8004684:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004688:	f107 0318 	add.w	r3, r7, #24
 800468c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004690:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004694:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80046a0:	2305      	movs	r3, #5
 80046a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80046a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fb51 	bl	8004d54 <hci_send_req>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	da01      	bge.n	80046bc <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80046b8:	23ff      	movs	r3, #255	; 0xff
 80046ba:	e016      	b.n	80046ea <hci_le_read_phy+0xc6>
  if ( resp.Status )
 80046bc:	f107 0310 	add.w	r3, r7, #16
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <hci_le_read_phy+0xaa>
    return resp.Status;
 80046c6:	f107 0310 	add.w	r3, r7, #16
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	e00d      	b.n	80046ea <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 80046ce:	f107 0310 	add.w	r3, r7, #16
 80046d2:	78da      	ldrb	r2, [r3, #3]
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80046dc:	f107 0310 	add.w	r3, r7, #16
 80046e0:	791a      	ldrb	r2, [r3, #4]
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b0cd      	sub	sp, #308	; 0x134
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4604      	mov	r4, r0
 80046fc:	4608      	mov	r0, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	1dfb      	adds	r3, r7, #7
 8004702:	4622      	mov	r2, r4
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	1dbb      	adds	r3, r7, #6
 8004708:	4602      	mov	r2, r0
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	1d7b      	adds	r3, r7, #5
 800470e:	460a      	mov	r2, r1
 8004710:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8004712:	f107 0310 	add.w	r3, r7, #16
 8004716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800471a:	f107 030f 	add.w	r3, r7, #15
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8004728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472c:	1dfa      	adds	r2, r7, #7
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004736:	3301      	adds	r3, #1
 8004738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800473c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004740:	1dba      	adds	r2, r7, #6
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800474a:	3301      	adds	r3, #1
 800474c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8004750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004754:	1d7a      	adds	r2, r7, #5
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800475a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800475e:	3301      	adds	r3, #1
 8004760:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004764:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004768:	2218      	movs	r2, #24
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f838 	bl	80047e2 <Osal_MemSet>
  rq.ogf = 0x08;
 8004772:	2308      	movs	r3, #8
 8004774:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8004778:	2331      	movs	r3, #49	; 0x31
 800477a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800477e:	f107 0310 	add.w	r3, r7, #16
 8004782:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004786:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800478a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800478e:	f107 030f 	add.w	r3, r7, #15
 8004792:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800479c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fad6 	bl	8004d54 <hci_send_req>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da01      	bge.n	80047b2 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80047ae:	23ff      	movs	r3, #255	; 0xff
 80047b0:	e002      	b.n	80047b8 <hci_le_set_default_phy+0xc4>
  return status;
 80047b2:	f107 030f 	add.w	r3, r7, #15
 80047b6:	781b      	ldrb	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd90      	pop	{r4, r7, pc}

080047c2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f001 fef8 	bl	80065c8 <memcpy>
 80047d8:	4603      	mov	r3, r0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f001 fef3 	bl	80065de <memset>
 80047f8:	4603      	mov	r3, r0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800480c:	2300      	movs	r3, #0
 800480e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3301      	adds	r3, #1
 8004816:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2bff      	cmp	r3, #255	; 0xff
 800481e:	d000      	beq.n	8004822 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8004820:	e04a      	b.n	80048b8 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	3302      	adds	r3, #2
 8004826:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	f640 4301 	movw	r3, #3073	; 0xc01
 8004834:	429a      	cmp	r2, r3
 8004836:	d000      	beq.n	800483a <PeerToPeer_Event_Handler+0x36>
          break;
 8004838:	e03d      	b.n	80048b6 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3302      	adds	r3, #2
 800483e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	885b      	ldrh	r3, [r3, #2]
 8004844:	b29b      	uxth	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <PeerToPeer_Event_Handler+0xc0>)
 800484a:	889b      	ldrh	r3, [r3, #4]
 800484c:	3302      	adds	r3, #2
 800484e:	429a      	cmp	r2, r3
 8004850:	d118      	bne.n	8004884 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	7a1b      	ldrb	r3, [r3, #8]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8004864:	2300      	movs	r3, #0
 8004866:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8004868:	f107 0308 	add.w	r3, r7, #8
 800486c:	4618      	mov	r0, r3
 800486e:	f001 facf 	bl	8005e10 <P2PS_STM_App_Notification>
        break;
 8004872:	e01f      	b.n	80048b4 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8004874:	2301      	movs	r3, #1
 8004876:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8004878:	f107 0308 	add.w	r3, r7, #8
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fac7 	bl	8005e10 <P2PS_STM_App_Notification>
        break;
 8004882:	e017      	b.n	80048b4 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	885b      	ldrh	r3, [r3, #2]
 8004888:	b29b      	uxth	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <PeerToPeer_Event_Handler+0xc0>)
 800488e:	885b      	ldrh	r3, [r3, #2]
 8004890:	3301      	adds	r3, #1
 8004892:	429a      	cmp	r2, r3
 8004894:	d10e      	bne.n	80048b4 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8004896:	2303      	movs	r3, #3
 8004898:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	88db      	ldrh	r3, [r3, #6]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	3308      	adds	r3, #8
 80048a8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80048aa:	f107 0308 	add.w	r3, r7, #8
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 faae 	bl	8005e10 <P2PS_STM_App_Notification>
        break;
 80048b4:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 80048b6:	bf00      	nop
  }

  return(return_value);
 80048b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80048bc:	4618      	mov	r0, r3
 80048be:	3728      	adds	r7, #40	; 0x28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	200000c4 	.word	0x200000c4

080048c8 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80048ce:	484a      	ldr	r0, [pc, #296]	; (80049f8 <P2PS_STM_Init+0x130>)
 80048d0:	f000 f938 	bl	8004b44 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80048d4:	238f      	movs	r3, #143	; 0x8f
 80048d6:	703b      	strb	r3, [r7, #0]
 80048d8:	23e5      	movs	r3, #229	; 0xe5
 80048da:	707b      	strb	r3, [r7, #1]
 80048dc:	23b3      	movs	r3, #179	; 0xb3
 80048de:	70bb      	strb	r3, [r7, #2]
 80048e0:	23d5      	movs	r3, #213	; 0xd5
 80048e2:	70fb      	strb	r3, [r7, #3]
 80048e4:	232e      	movs	r3, #46	; 0x2e
 80048e6:	713b      	strb	r3, [r7, #4]
 80048e8:	237f      	movs	r3, #127	; 0x7f
 80048ea:	717b      	strb	r3, [r7, #5]
 80048ec:	234a      	movs	r3, #74	; 0x4a
 80048ee:	71bb      	strb	r3, [r7, #6]
 80048f0:	2398      	movs	r3, #152	; 0x98
 80048f2:	71fb      	strb	r3, [r7, #7]
 80048f4:	232a      	movs	r3, #42	; 0x2a
 80048f6:	723b      	strb	r3, [r7, #8]
 80048f8:	2348      	movs	r3, #72	; 0x48
 80048fa:	727b      	strb	r3, [r7, #9]
 80048fc:	237a      	movs	r3, #122	; 0x7a
 80048fe:	72bb      	strb	r3, [r7, #10]
 8004900:	23cc      	movs	r3, #204	; 0xcc
 8004902:	72fb      	strb	r3, [r7, #11]
 8004904:	2340      	movs	r3, #64	; 0x40
 8004906:	733b      	strb	r3, [r7, #12]
 8004908:	23fe      	movs	r3, #254	; 0xfe
 800490a:	737b      	strb	r3, [r7, #13]
 800490c:	2300      	movs	r3, #0
 800490e:	73bb      	strb	r3, [r7, #14]
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8004914:	4639      	mov	r1, r7
 8004916:	4b39      	ldr	r3, [pc, #228]	; (80049fc <P2PS_STM_Init+0x134>)
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2308      	movs	r3, #8
 800491c:	2201      	movs	r2, #1
 800491e:	2002      	movs	r0, #2
 8004920:	f7ff fb32 	bl	8003f88 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8004924:	2319      	movs	r3, #25
 8004926:	703b      	strb	r3, [r7, #0]
 8004928:	23ed      	movs	r3, #237	; 0xed
 800492a:	707b      	strb	r3, [r7, #1]
 800492c:	2382      	movs	r3, #130	; 0x82
 800492e:	70bb      	strb	r3, [r7, #2]
 8004930:	23ae      	movs	r3, #174	; 0xae
 8004932:	70fb      	strb	r3, [r7, #3]
 8004934:	23ed      	movs	r3, #237	; 0xed
 8004936:	713b      	strb	r3, [r7, #4]
 8004938:	2321      	movs	r3, #33	; 0x21
 800493a:	717b      	strb	r3, [r7, #5]
 800493c:	234c      	movs	r3, #76	; 0x4c
 800493e:	71bb      	strb	r3, [r7, #6]
 8004940:	239d      	movs	r3, #157	; 0x9d
 8004942:	71fb      	strb	r3, [r7, #7]
 8004944:	2341      	movs	r3, #65	; 0x41
 8004946:	723b      	strb	r3, [r7, #8]
 8004948:	2345      	movs	r3, #69	; 0x45
 800494a:	727b      	strb	r3, [r7, #9]
 800494c:	2322      	movs	r3, #34	; 0x22
 800494e:	72bb      	strb	r3, [r7, #10]
 8004950:	238e      	movs	r3, #142	; 0x8e
 8004952:	72fb      	strb	r3, [r7, #11]
 8004954:	2341      	movs	r3, #65	; 0x41
 8004956:	733b      	strb	r3, [r7, #12]
 8004958:	23fe      	movs	r3, #254	; 0xfe
 800495a:	737b      	strb	r3, [r7, #13]
 800495c:	2300      	movs	r3, #0
 800495e:	73bb      	strb	r3, [r7, #14]
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8004964:	4b25      	ldr	r3, [pc, #148]	; (80049fc <P2PS_STM_Init+0x134>)
 8004966:	8818      	ldrh	r0, [r3, #0]
 8004968:	463a      	mov	r2, r7
 800496a:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <P2PS_STM_Init+0x138>)
 800496c:	9305      	str	r3, [sp, #20]
 800496e:	2301      	movs	r3, #1
 8004970:	9304      	str	r3, [sp, #16]
 8004972:	230a      	movs	r3, #10
 8004974:	9303      	str	r3, [sp, #12]
 8004976:	2301      	movs	r3, #1
 8004978:	9302      	str	r3, [sp, #8]
 800497a:	2300      	movs	r3, #0
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	2306      	movs	r3, #6
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2302      	movs	r3, #2
 8004984:	2102      	movs	r1, #2
 8004986:	f7ff fbae 	bl	80040e6 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800498a:	2319      	movs	r3, #25
 800498c:	703b      	strb	r3, [r7, #0]
 800498e:	23ed      	movs	r3, #237	; 0xed
 8004990:	707b      	strb	r3, [r7, #1]
 8004992:	2382      	movs	r3, #130	; 0x82
 8004994:	70bb      	strb	r3, [r7, #2]
 8004996:	23ae      	movs	r3, #174	; 0xae
 8004998:	70fb      	strb	r3, [r7, #3]
 800499a:	23ed      	movs	r3, #237	; 0xed
 800499c:	713b      	strb	r3, [r7, #4]
 800499e:	2321      	movs	r3, #33	; 0x21
 80049a0:	717b      	strb	r3, [r7, #5]
 80049a2:	234c      	movs	r3, #76	; 0x4c
 80049a4:	71bb      	strb	r3, [r7, #6]
 80049a6:	239d      	movs	r3, #157	; 0x9d
 80049a8:	71fb      	strb	r3, [r7, #7]
 80049aa:	2341      	movs	r3, #65	; 0x41
 80049ac:	723b      	strb	r3, [r7, #8]
 80049ae:	2345      	movs	r3, #69	; 0x45
 80049b0:	727b      	strb	r3, [r7, #9]
 80049b2:	2322      	movs	r3, #34	; 0x22
 80049b4:	72bb      	strb	r3, [r7, #10]
 80049b6:	238e      	movs	r3, #142	; 0x8e
 80049b8:	72fb      	strb	r3, [r7, #11]
 80049ba:	2342      	movs	r3, #66	; 0x42
 80049bc:	733b      	strb	r3, [r7, #12]
 80049be:	23fe      	movs	r3, #254	; 0xfe
 80049c0:	737b      	strb	r3, [r7, #13]
 80049c2:	2300      	movs	r3, #0
 80049c4:	73bb      	strb	r3, [r7, #14]
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <P2PS_STM_Init+0x134>)
 80049cc:	8818      	ldrh	r0, [r3, #0]
 80049ce:	463a      	mov	r2, r7
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <P2PS_STM_Init+0x13c>)
 80049d2:	9305      	str	r3, [sp, #20]
 80049d4:	2301      	movs	r3, #1
 80049d6:	9304      	str	r3, [sp, #16]
 80049d8:	230a      	movs	r3, #10
 80049da:	9303      	str	r3, [sp, #12]
 80049dc:	2301      	movs	r3, #1
 80049de:	9302      	str	r3, [sp, #8]
 80049e0:	2300      	movs	r3, #0
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	2310      	movs	r3, #16
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2302      	movs	r3, #2
 80049ea:	2102      	movs	r1, #2
 80049ec:	f7ff fb7b 	bl	80040e6 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80049f0:	bf00      	nop
}
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08004805 	.word	0x08004805
 80049fc:	200000c4 	.word	0x200000c4
 8004a00:	200000c6 	.word	0x200000c6
 8004a04:	200000c8 	.word	0x200000c8

08004a08 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return;
 8004a0c:	bf00      	nop
}
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0
  return;
 8004a1a:	bf00      	nop
}
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <DIS_Init>:
__weak void DIS_Init( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return;
 8004a28:	bf00      	nop
}
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  return;
 8004a36:	bf00      	nop
}
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return;
 8004a44:	bf00      	nop
}
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HRS_Init>:
__weak void HRS_Init( void )
{
 8004a4e:	b480      	push	{r7}
 8004a50:	af00      	add	r7, sp, #0
  return;
 8004a52:	bf00      	nop
}
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HTS_Init>:
__weak void HTS_Init( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return;
 8004a60:	bf00      	nop
}
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <IAS_Init>:
__weak void IAS_Init( void )
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  return;
 8004a6e:	bf00      	nop
}
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LLS_Init>:
__weak void LLS_Init( void )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return;
 8004a7c:	bf00      	nop
}
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <TPS_Init>:
__weak void TPS_Init( void )
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0
  return;
 8004a8a:	bf00      	nop
}
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return;
 8004a98:	bf00      	nop
}
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  return;
 8004aa6:	bf00      	nop
}
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <MESH_Init>:
__weak void MESH_Init( void )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return;
 8004ab4:	bf00      	nop
}
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  return;
 8004ac2:	bf00      	nop
}
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return;
 8004ad0:	bf00      	nop
}
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <SVCCTL_Init+0x18>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <SVCCTL_Init+0x1c>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8004aec:	f000 f806 	bl	8004afc <SVCCTL_SvcInit>

  return;
 8004af0:	bf00      	nop
}
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	200000cc 	.word	0x200000cc
 8004af8:	200000ec 	.word	0x200000ec

08004afc <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  BLS_Init();
 8004b00:	f7ff ff82 	bl	8004a08 <BLS_Init>

  CRS_STM_Init();
 8004b04:	f7ff ff87 	bl	8004a16 <CRS_STM_Init>

  DIS_Init();
 8004b08:	f7ff ff8c 	bl	8004a24 <DIS_Init>

  EDS_STM_Init();
 8004b0c:	f7ff ff91 	bl	8004a32 <EDS_STM_Init>

  HIDS_Init();
 8004b10:	f7ff ff96 	bl	8004a40 <HIDS_Init>

  HRS_Init();
 8004b14:	f7ff ff9b 	bl	8004a4e <HRS_Init>

  HTS_Init();
 8004b18:	f7ff ffa0 	bl	8004a5c <HTS_Init>

  IAS_Init();
 8004b1c:	f7ff ffa5 	bl	8004a6a <IAS_Init>

  LLS_Init();
 8004b20:	f7ff ffaa 	bl	8004a78 <LLS_Init>

  TPS_Init();
 8004b24:	f7ff ffaf 	bl	8004a86 <TPS_Init>

  MOTENV_STM_Init();
 8004b28:	f7ff ffb4 	bl	8004a94 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8004b2c:	f7ff fecc 	bl	80048c8 <P2PS_STM_Init>

  OTAS_STM_Init();
 8004b30:	f7ff ffb7 	bl	8004aa2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8004b34:	f7ff ffc3 	bl	8004abe <BVOPUS_STM_Init>

  MESH_Init();
 8004b38:	f7ff ffba 	bl	8004ab0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8004b3c:	f7ff ffc6 	bl	8004acc <SVCCTL_InitCustomSvc>
  
  return;
 8004b40:	bf00      	nop
}
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <SVCCTL_RegisterSvcHandler+0x30>)
 8004b4e:	7f1b      	ldrb	r3, [r3, #28]
 8004b50:	4619      	mov	r1, r3
 8004b52:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <SVCCTL_RegisterSvcHandler+0x30>)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <SVCCTL_RegisterSvcHandler+0x30>)
 8004b5c:	7f1b      	ldrb	r3, [r3, #28]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <SVCCTL_RegisterSvcHandler+0x30>)
 8004b64:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8004b66:	bf00      	nop
}
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	200000cc 	.word	0x200000cc

08004b78 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3301      	adds	r3, #1
 8004b84:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2bff      	cmp	r3, #255	; 0xff
 8004b90:	d000      	beq.n	8004b94 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8004b92:	e025      	b.n	8004be0 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	3302      	adds	r3, #2
 8004b98:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ba8:	d000      	beq.n	8004bac <SVCCTL_UserEvtRx+0x34>
          break;
 8004baa:	e018      	b.n	8004bde <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004bac:	2300      	movs	r3, #0
 8004bae:	757b      	strb	r3, [r7, #21]
 8004bb0:	e00d      	b.n	8004bce <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8004bb2:	7d7b      	ldrb	r3, [r7, #21]
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <SVCCTL_UserEvtRx+0xa0>)
 8004bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d108      	bne.n	8004bda <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004bc8:	7d7b      	ldrb	r3, [r7, #21]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	757b      	strb	r3, [r7, #21]
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <SVCCTL_UserEvtRx+0xa0>)
 8004bd0:	7f1b      	ldrb	r3, [r3, #28]
 8004bd2:	7d7a      	ldrb	r2, [r7, #21]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d3ec      	bcc.n	8004bb2 <SVCCTL_UserEvtRx+0x3a>
          break;
 8004bd8:	e000      	b.n	8004bdc <SVCCTL_UserEvtRx+0x64>
              break;
 8004bda:	bf00      	nop
          break;
 8004bdc:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8004bde:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d009      	beq.n	8004bfa <SVCCTL_UserEvtRx+0x82>
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d00a      	beq.n	8004c00 <SVCCTL_UserEvtRx+0x88>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fe48 	bl	8005884 <SVCCTL_App_Notification>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75bb      	strb	r3, [r7, #22]
      break;
 8004bf8:	e008      	b.n	8004c0c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	75bb      	strb	r3, [r7, #22]
      break;
 8004bfe:	e005      	b.n	8004c0c <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75bb      	strb	r3, [r7, #22]
      break;
 8004c04:	e002      	b.n	8004c0c <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75bb      	strb	r3, [r7, #22]
      break;
 8004c0a:	bf00      	nop
  }

  return (return_status);
 8004c0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200000cc 	.word	0x200000cc

08004c1c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004c24:	f107 030c 	add.w	r3, r7, #12
 8004c28:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2121      	movs	r1, #33	; 0x21
 8004c34:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8004c38:	f000 fa5e 	bl	80050f8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	330b      	adds	r3, #11
 8004c40:	78db      	ldrb	r3, [r3, #3]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b088      	sub	sp, #32
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8004c52:	f107 030c 	add.w	r3, r7, #12
 8004c56:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	210f      	movs	r1, #15
 8004c62:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8004c66:	f000 fa47 	bl	80050f8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	330b      	adds	r3, #11
 8004c6e:	78db      	ldrb	r3, [r3, #3]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <hci_init+0x30>)
 8004c88:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8004c8a:	4a08      	ldr	r2, [pc, #32]	; (8004cac <hci_init+0x34>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8004c90:	4806      	ldr	r0, [pc, #24]	; (8004cac <hci_init+0x34>)
 8004c92:	f000 f9af 	bl	8004ff4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f8dc 	bl	8004e58 <TlInit>

  return;
 8004ca0:	bf00      	nop
}
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000200 	.word	0x20000200
 8004cac:	200001d8 	.word	0x200001d8

08004cb0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8004cb6:	4824      	ldr	r0, [pc, #144]	; (8004d48 <hci_user_evt_proc+0x98>)
 8004cb8:	f000 fcb4 	bl	8005624 <LST_is_empty>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d12f      	bne.n	8004d22 <hci_user_evt_proc+0x72>
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <hci_user_evt_proc+0x9c>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d02b      	beq.n	8004d22 <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8004cca:	f107 030c 	add.w	r3, r7, #12
 8004cce:	4619      	mov	r1, r3
 8004cd0:	481d      	ldr	r0, [pc, #116]	; (8004d48 <hci_user_evt_proc+0x98>)
 8004cd2:	f000 fd2e 	bl	8005732 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f97b 	bl	8004fd4 <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 8004cde:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <hci_user_evt_proc+0xa0>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8004cea:	2301      	movs	r3, #1
 8004cec:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8004cee:	4b18      	ldr	r3, [pc, #96]	; (8004d50 <hci_user_evt_proc+0xa0>)
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	1d3a      	adds	r2, r7, #4
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8004cf8:	793a      	ldrb	r2, [r7, #4]
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <hci_user_evt_proc+0x9c>)
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	e002      	b.n	8004d06 <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004d00:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <hci_user_evt_proc+0x9c>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8004d06:	4b11      	ldr	r3, [pc, #68]	; (8004d4c <hci_user_evt_proc+0x9c>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fbef 	bl	80054f4 <TL_MM_EvtDone>
 8004d16:	e004      	b.n	8004d22 <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	480a      	ldr	r0, [pc, #40]	; (8004d48 <hci_user_evt_proc+0x98>)
 8004d1e:	f000 fca1 	bl	8005664 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8004d22:	4809      	ldr	r0, [pc, #36]	; (8004d48 <hci_user_evt_proc+0x98>)
 8004d24:	f000 fc7e 	bl	8005624 <LST_is_empty>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d107      	bne.n	8004d3e <hci_user_evt_proc+0x8e>
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <hci_user_evt_proc+0x9c>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8004d36:	4804      	ldr	r0, [pc, #16]	; (8004d48 <hci_user_evt_proc+0x98>)
 8004d38:	f001 f811 	bl	8005d5e <hci_notify_asynch_evt>
  }


  return;
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
}
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200000f4 	.word	0x200000f4
 8004d4c:	20000100 	.word	0x20000100
 8004d50:	200001d8 	.word	0x200001d8

08004d54 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8004d60:	2000      	movs	r0, #0
 8004d62:	f000 f8d5 	bl	8004f10 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8004d66:	2300      	movs	r3, #0
 8004d68:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	885b      	ldrh	r3, [r3, #2]
 8004d6e:	b21b      	sxth	r3, r3
 8004d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d74:	b21a      	sxth	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	029b      	lsls	r3, r3, #10
 8004d7c:	b21b      	sxth	r3, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b21b      	sxth	r3, r3
 8004d82:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	b2d9      	uxtb	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	8bbb      	ldrh	r3, [r7, #28]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 f891 	bl	8004eb8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8004d96:	e052      	b.n	8004e3e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8004d98:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004d9c:	f000 fff6 	bl	8005d8c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8004da0:	e047      	b.n	8004e32 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8004da2:	f107 030c 	add.w	r3, r7, #12
 8004da6:	4619      	mov	r1, r3
 8004da8:	482a      	ldr	r0, [pc, #168]	; (8004e54 <hci_send_req+0x100>)
 8004daa:	f000 fcc2 	bl	8005732 <LST_remove_head>

      OutputRspTrace(pevtpacket);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 f8fb 	bl	8004fac <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	7a5b      	ldrb	r3, [r3, #9]
 8004dba:	2b0f      	cmp	r3, #15
 8004dbc:	d114      	bne.n	8004de8 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	330b      	adds	r3, #11
 8004dc2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	885b      	ldrh	r3, [r3, #2]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8bba      	ldrh	r2, [r7, #28]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d104      	bne.n	8004dda <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	7812      	ldrb	r2, [r2, #0]
 8004dd8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d027      	beq.n	8004e32 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8004de2:	2301      	movs	r3, #1
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e024      	b.n	8004e32 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	330b      	adds	r3, #11
 8004dec:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8bba      	ldrh	r2, [r7, #28]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d114      	bne.n	8004e26 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	7a9b      	ldrb	r3, [r3, #10]
 8004e00:	3b03      	subs	r3, #3
 8004e02:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	bfa8      	it	ge
 8004e0e:	461a      	movge	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6918      	ldr	r0, [r3, #16]
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	1cd9      	adds	r1, r3, #3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	461a      	mov	r2, r3
 8004e22:	f001 fbd1 	bl	80065c8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8004e32:	4808      	ldr	r0, [pc, #32]	; (8004e54 <hci_send_req+0x100>)
 8004e34:	f000 fbf6 	bl	8005624 <LST_is_empty>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0b1      	beq.n	8004da2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8004e3e:	7ffb      	ldrb	r3, [r7, #31]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0a9      	beq.n	8004d98 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8004e44:	2001      	movs	r0, #1
 8004e46:	f000 f863 	bl	8004f10 <NotifyCmdStatus>

  return 0;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	200001f8 	.word	0x200001f8

08004e58 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8004e60:	480f      	ldr	r0, [pc, #60]	; (8004ea0 <TlInit+0x48>)
 8004e62:	f000 fbcf 	bl	8005604 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8004e66:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <TlInit+0x4c>)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8004e6c:	480e      	ldr	r0, [pc, #56]	; (8004ea8 <TlInit+0x50>)
 8004e6e:	f000 fbc9 	bl	8005604 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8004e72:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <TlInit+0x54>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8004e78:	4b0d      	ldr	r3, [pc, #52]	; (8004eb0 <TlInit+0x58>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <TlInit+0x5c>)
 8004e86:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8004e88:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <TlInit+0x58>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f107 0208 	add.w	r2, r7, #8
 8004e90:	4610      	mov	r0, r2
 8004e92:	4798      	blx	r3
  }

  return;
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
}
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200001f8 	.word	0x200001f8
 8004ea4:	200000fc 	.word	0x200000fc
 8004ea8:	200000f4 	.word	0x200000f4
 8004eac:	20000100 	.word	0x20000100
 8004eb0:	200001d8 	.word	0x200001d8
 8004eb4:	08004f51 	.word	0x08004f51

08004eb8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	603a      	str	r2, [r7, #0]
 8004ec2:	80fb      	strh	r3, [r7, #6]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <SendCmd+0x50>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <SendCmd+0x50>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	797a      	ldrb	r2, [r7, #5]
 8004ed8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8004eda:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <SendCmd+0x50>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	797a      	ldrb	r2, [r7, #5]
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 fb6f 	bl	80065c8 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <SendCmd+0x50>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f852 	bl	8004f98 <OutputCmdTrace>

  hciContext.io.Send(0,0);
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <SendCmd+0x54>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2100      	movs	r1, #0
 8004efa:	2000      	movs	r0, #0
 8004efc:	4798      	blx	r3

  return;
 8004efe:	bf00      	nop
}
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200000fc 	.word	0x200000fc
 8004f0c:	200001d8 	.word	0x200001d8

08004f10 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d108      	bne.n	8004f32 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8004f20:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <NotifyCmdStatus+0x3c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <NotifyCmdStatus+0x3c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8004f30:	e008      	b.n	8004f44 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8004f32:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <NotifyCmdStatus+0x3c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8004f3a:	4b04      	ldr	r3, [pc, #16]	; (8004f4c <NotifyCmdStatus+0x3c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2001      	movs	r0, #1
 8004f40:	4798      	blx	r3
  return;
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
}
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000200 	.word	0x20000200

08004f50 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	7a5b      	ldrb	r3, [r3, #9]
 8004f5c:	2b0f      	cmp	r3, #15
 8004f5e:	d003      	beq.n	8004f68 <TlEvtReceived+0x18>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	7a5b      	ldrb	r3, [r3, #9]
 8004f64:	2b0e      	cmp	r3, #14
 8004f66:	d107      	bne.n	8004f78 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4809      	ldr	r0, [pc, #36]	; (8004f90 <TlEvtReceived+0x40>)
 8004f6c:	f000 fb9e 	bl	80056ac <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8004f70:	2000      	movs	r0, #0
 8004f72:	f000 ff00 	bl	8005d76 <hci_cmd_resp_release>
 8004f76:	e006      	b.n	8004f86 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4806      	ldr	r0, [pc, #24]	; (8004f94 <TlEvtReceived+0x44>)
 8004f7c:	f000 fb96 	bl	80056ac <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004f80:	4804      	ldr	r0, [pc, #16]	; (8004f94 <TlEvtReceived+0x44>)
 8004f82:	f000 feec 	bl	8005d5e <hci_notify_asynch_evt>
  }

  return;
 8004f86:	bf00      	nop
}
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	200001f8 	.word	0x200001f8
 8004f94:	200000f4 	.word	0x200000f4

08004f98 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8004fa0:	bf00      	nop
}
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	7a5b      	ldrb	r3, [r3, #9]
 8004fb8:	2b0e      	cmp	r3, #14
 8004fba:	d002      	beq.n	8004fc2 <OutputRspTrace+0x16>
 8004fbc:	2b0f      	cmp	r3, #15
 8004fbe:	d002      	beq.n	8004fc6 <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 8004fc0:	e002      	b.n	8004fc8 <OutputRspTrace+0x1c>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <OutputRspTrace+0x1c>
      break;
 8004fc6:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 8004fc8:	bf00      	nop
}
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7a5b      	ldrb	r3, [r3, #9]
 8004fe0:	2bff      	cmp	r3, #255	; 0xff
 8004fe2:	d100      	bne.n	8004fe6 <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
}
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a05      	ldr	r2, [pc, #20]	; (8005014 <hci_register_io_bus+0x20>)
 8005000:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a04      	ldr	r2, [pc, #16]	; (8005018 <hci_register_io_bus+0x24>)
 8005006:	611a      	str	r2, [r3, #16]

  return;
 8005008:	bf00      	nop
}
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	08005371 	.word	0x08005371
 8005018:	080053d9 	.word	0x080053d9

0800501c <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <shci_init+0x30>)
 800502c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <shci_init+0x34>)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005034:	4806      	ldr	r0, [pc, #24]	; (8005050 <shci_init+0x34>)
 8005036:	f000 f947 	bl	80052c8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f8a0 	bl	8005184 <TlInit>

  return;
 8005044:	bf00      	nop
}
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000224 	.word	0x20000224
 8005050:	20000204 	.word	0x20000204

08005054 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800505a:	4824      	ldr	r0, [pc, #144]	; (80050ec <shci_user_evt_proc+0x98>)
 800505c:	f000 fae2 	bl	8005624 <LST_is_empty>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d12f      	bne.n	80050c6 <shci_user_evt_proc+0x72>
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <shci_user_evt_proc+0x9c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d02b      	beq.n	80050c6 <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800506e:	f107 030c 	add.w	r3, r7, #12
 8005072:	4619      	mov	r1, r3
 8005074:	481d      	ldr	r0, [pc, #116]	; (80050ec <shci_user_evt_proc+0x98>)
 8005076:	f000 fb5c 	bl	8005732 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 f913 	bl	80052a8 <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 8005082:	4b1c      	ldr	r3, [pc, #112]	; (80050f4 <shci_user_evt_proc+0xa0>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00c      	beq.n	80050a4 <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800508e:	2301      	movs	r3, #1
 8005090:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005092:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <shci_user_evt_proc+0xa0>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	1d3a      	adds	r2, r7, #4
 8005098:	4610      	mov	r0, r2
 800509a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800509c:	793a      	ldrb	r2, [r7, #4]
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <shci_user_evt_proc+0x9c>)
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e002      	b.n	80050aa <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <shci_user_evt_proc+0x9c>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80050aa:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <shci_user_evt_proc+0x9c>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fa1d 	bl	80054f4 <TL_MM_EvtDone>
 80050ba:	e004      	b.n	80050c6 <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4619      	mov	r1, r3
 80050c0:	480a      	ldr	r0, [pc, #40]	; (80050ec <shci_user_evt_proc+0x98>)
 80050c2:	f000 facf 	bl	8005664 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80050c6:	4809      	ldr	r0, [pc, #36]	; (80050ec <shci_user_evt_proc+0x98>)
 80050c8:	f000 faac 	bl	8005624 <LST_is_empty>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <shci_user_evt_proc+0x8e>
 80050d2:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <shci_user_evt_proc+0x9c>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80050da:	4804      	ldr	r0, [pc, #16]	; (80050ec <shci_user_evt_proc+0x98>)
 80050dc:	f7fb fa49 	bl	8000572 <shci_notify_asynch_evt>
  }


  return;
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
}
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000104 	.word	0x20000104
 80050f0:	20000114 	.word	0x20000114
 80050f4:	20000204 	.word	0x20000204

080050f8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60ba      	str	r2, [r7, #8]
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	4603      	mov	r3, r0
 8005104:	81fb      	strh	r3, [r7, #14]
 8005106:	460b      	mov	r3, r1
 8005108:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800510a:	2000      	movs	r0, #0
 800510c:	f000 f86c 	bl	80051e8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005110:	4b1a      	ldr	r3, [pc, #104]	; (800517c <shci_send+0x84>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	89fa      	ldrh	r2, [r7, #14]
 8005116:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <shci_send+0x84>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	7b7a      	ldrb	r2, [r7, #13]
 8005120:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005122:	4b16      	ldr	r3, [pc, #88]	; (800517c <shci_send+0x84>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	7b7a      	ldrb	r2, [r7, #13]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fa4b 	bl	80065c8 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <shci_send+0x84>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f89c 	bl	8005274 <OutputCmdTrace>

  shciContext.io.Send(0,0);
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <shci_send+0x88>)
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2100      	movs	r1, #0
 8005142:	2000      	movs	r0, #0
 8005144:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005146:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800514a:	f7fb fa29 	bl	80005a0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f103 0008 	add.w	r0, r3, #8
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <shci_send+0x84>)
 8005156:	6819      	ldr	r1, [r3, #0]
 8005158:	4b08      	ldr	r3, [pc, #32]	; (800517c <shci_send+0x84>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	789b      	ldrb	r3, [r3, #2]
 800515e:	3303      	adds	r3, #3
 8005160:	461a      	mov	r2, r3
 8005162:	f001 fa31 	bl	80065c8 <memcpy>

  OutputRspTrace(p_rsp);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f88e 	bl	8005288 <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800516c:	2001      	movs	r0, #1
 800516e:	f000 f83b 	bl	80051e8 <Cmd_SetStatus>

  return;
 8005172:	bf00      	nop
}
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000110 	.word	0x20000110
 8005180:	20000204 	.word	0x20000204

08005184 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800518c:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <TlInit+0x4c>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005192:	4810      	ldr	r0, [pc, #64]	; (80051d4 <TlInit+0x50>)
 8005194:	f000 fa36 	bl	8005604 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005198:	2001      	movs	r0, #1
 800519a:	f000 f825 	bl	80051e8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <TlInit+0x54>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <TlInit+0x58>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <TlInit+0x5c>)
 80051b2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <TlInit+0x60>)
 80051b6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <TlInit+0x58>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f107 020c 	add.w	r2, r7, #12
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
  }

  return;
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
}
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000110 	.word	0x20000110
 80051d4:	20000104 	.word	0x20000104
 80051d8:	20000114 	.word	0x20000114
 80051dc:	20000204 	.word	0x20000204
 80051e0:	08005239 	.word	0x08005239
 80051e4:	08005251 	.word	0x08005251

080051e8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <Cmd_SetStatus+0x48>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <Cmd_SetStatus+0x48>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2000      	movs	r0, #0
 8005206:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <Cmd_SetStatus+0x4c>)
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800520e:	e00b      	b.n	8005228 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005210:	4b08      	ldr	r3, [pc, #32]	; (8005234 <Cmd_SetStatus+0x4c>)
 8005212:	2201      	movs	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <Cmd_SetStatus+0x48>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <Cmd_SetStatus+0x48>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2001      	movs	r0, #1
 8005224:	4798      	blx	r3
  return;
 8005226:	bf00      	nop
 8005228:	bf00      	nop
}
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000224 	.word	0x20000224
 8005234:	2000010c 	.word	0x2000010c

08005238 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005240:	2000      	movs	r0, #0
 8005242:	f7fb f9a2 	bl	800058a <shci_cmd_resp_release>

  return;
 8005246:	bf00      	nop
}
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4805      	ldr	r0, [pc, #20]	; (8005270 <TlUserEvtReceived+0x20>)
 800525c:	f000 fa26 	bl	80056ac <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005260:	4803      	ldr	r0, [pc, #12]	; (8005270 <TlUserEvtReceived+0x20>)
 8005262:	f7fb f986 	bl	8000572 <shci_notify_asynch_evt>

  return;
 8005266:	bf00      	nop
}
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000104 	.word	0x20000104

08005274 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 800527c:	bf00      	nop
}
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	7a5b      	ldrb	r3, [r3, #9]
 8005294:	2b0e      	cmp	r3, #14
 8005296:	d000      	beq.n	800529a <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 8005298:	e000      	b.n	800529c <OutputRspTrace+0x14>
      break;
 800529a:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 800529c:	bf00      	nop
}
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	7a5b      	ldrb	r3, [r3, #9]
 80052b4:	2bff      	cmp	r3, #255	; 0xff
 80052b6:	d100      	bne.n	80052ba <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
}
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a05      	ldr	r2, [pc, #20]	; (80052e8 <shci_register_io_bus+0x20>)
 80052d4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <shci_register_io_bus+0x24>)
 80052da:	611a      	str	r2, [r3, #16]

  return;
 80052dc:	bf00      	nop
}
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	08005401 	.word	0x08005401
 80052ec:	08005455 	.word	0x08005455

080052f0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80052f4:	f000 fe78 	bl	8005fe8 <HW_IPCC_Enable>

  return;
 80052f8:	bf00      	nop
}
 80052fa:	bd80      	pop	{r7, pc}

080052fc <TL_Init>:


void TL_Init( void )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005300:	4b10      	ldr	r3, [pc, #64]	; (8005344 <TL_Init+0x48>)
 8005302:	4a11      	ldr	r2, [pc, #68]	; (8005348 <TL_Init+0x4c>)
 8005304:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <TL_Init+0x48>)
 8005308:	4a10      	ldr	r2, [pc, #64]	; (800534c <TL_Init+0x50>)
 800530a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <TL_Init+0x48>)
 800530e:	4a10      	ldr	r2, [pc, #64]	; (8005350 <TL_Init+0x54>)
 8005310:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <TL_Init+0x48>)
 8005314:	4a0f      	ldr	r2, [pc, #60]	; (8005354 <TL_Init+0x58>)
 8005316:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <TL_Init+0x48>)
 800531a:	4a0f      	ldr	r2, [pc, #60]	; (8005358 <TL_Init+0x5c>)
 800531c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <TL_Init+0x48>)
 8005320:	4a0e      	ldr	r2, [pc, #56]	; (800535c <TL_Init+0x60>)
 8005322:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <TL_Init+0x48>)
 8005326:	4a0e      	ldr	r2, [pc, #56]	; (8005360 <TL_Init+0x64>)
 8005328:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <TL_Init+0x48>)
 800532c:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <TL_Init+0x68>)
 800532e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <TL_Init+0x48>)
 8005332:	4a0d      	ldr	r2, [pc, #52]	; (8005368 <TL_Init+0x6c>)
 8005334:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005336:	4b03      	ldr	r3, [pc, #12]	; (8005344 <TL_Init+0x48>)
 8005338:	4a0c      	ldr	r2, [pc, #48]	; (800536c <TL_Init+0x70>)
 800533a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800533c:	f000 fe64 	bl	8006008 <HW_IPCC_Init>

  return;
 8005340:	bf00      	nop
}
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20030000 	.word	0x20030000
 8005348:	20030028 	.word	0x20030028
 800534c:	20030048 	.word	0x20030048
 8005350:	20030058 	.word	0x20030058
 8005354:	20030064 	.word	0x20030064
 8005358:	2003006c 	.word	0x2003006c
 800535c:	20030074 	.word	0x20030074
 8005360:	2003007c 	.word	0x2003007c
 8005364:	20030098 	.word	0x20030098
 8005368:	2003009c 	.word	0x2003009c
 800536c:	200300a8 	.word	0x200300a8

08005370 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800537c:	4811      	ldr	r0, [pc, #68]	; (80053c4 <TL_BLE_Init+0x54>)
 800537e:	f000 f941 	bl	8005604 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005382:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <TL_BLE_Init+0x58>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a0c      	ldr	r2, [pc, #48]	; (80053cc <TL_BLE_Init+0x5c>)
 800539c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <TL_BLE_Init+0x54>)
 80053a2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80053a4:	f000 fe46 	bl	8006034 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <TL_BLE_Init+0x60>)
 80053ae:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <TL_BLE_Init+0x64>)
 80053b6:	6013      	str	r3, [r2, #0]

  return 0;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	200300c4 	.word	0x200300c4
 80053c8:	20030000 	.word	0x20030000
 80053cc:	20030a48 	.word	0x20030a48
 80053d0:	20000230 	.word	0x20000230
 80053d4:	20000234 	.word	0x20000234

080053d8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <TL_BLE_SendCmd+0x24>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2201      	movs	r2, #1
 80053ec:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 80053ee:	f000 fe2b 	bl	8006048 <HW_IPCC_BLE_SendCmd>

  return 0;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20030000 	.word	0x20030000

08005400 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800540c:	480d      	ldr	r0, [pc, #52]	; (8005444 <TL_SYS_Init+0x44>)
 800540e:	f000 f8f9 	bl	8005604 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <TL_SYS_Init+0x48>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4a08      	ldr	r2, [pc, #32]	; (8005444 <TL_SYS_Init+0x44>)
 8005424:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005426:	f000 fe19 	bl	800605c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a07      	ldr	r2, [pc, #28]	; (800544c <TL_SYS_Init+0x4c>)
 8005430:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4a06      	ldr	r2, [pc, #24]	; (8005450 <TL_SYS_Init+0x50>)
 8005438:	6013      	str	r3, [r2, #0]

  return 0;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	200300cc 	.word	0x200300cc
 8005448:	20030000 	.word	0x20030000
 800544c:	20000238 	.word	0x20000238
 8005450:	2000023c 	.word	0x2000023c

08005454 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <TL_SYS_SendCmd+0x24>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2210      	movs	r2, #16
 8005468:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800546a:	f000 fe01 	bl	8006070 <HW_IPCC_SYS_SendCmd>

  return 0;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	20030000 	.word	0x20030000

0800547c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005484:	4817      	ldr	r0, [pc, #92]	; (80054e4 <TL_MM_Init+0x68>)
 8005486:	f000 f8bd 	bl	8005604 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800548a:	4817      	ldr	r0, [pc, #92]	; (80054e8 <TL_MM_Init+0x6c>)
 800548c:	f000 f8ba 	bl	8005604 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005490:	4b16      	ldr	r3, [pc, #88]	; (80054ec <TL_MM_Init+0x70>)
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <TL_MM_Init+0x74>)
 8005496:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005498:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <TL_MM_Init+0x74>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6892      	ldr	r2, [r2, #8]
 80054a0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <TL_MM_Init+0x74>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68d2      	ldr	r2, [r2, #12]
 80054aa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80054ac:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <TL_MM_Init+0x74>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <TL_MM_Init+0x68>)
 80054b2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <TL_MM_Init+0x74>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80054be:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <TL_MM_Init+0x74>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6852      	ldr	r2, [r2, #4]
 80054c6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <TL_MM_Init+0x74>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6912      	ldr	r2, [r2, #16]
 80054d0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <TL_MM_Init+0x74>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6952      	ldr	r2, [r2, #20]
 80054da:	619a      	str	r2, [r3, #24]

  return;
 80054dc:	bf00      	nop
}
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	200300b4 	.word	0x200300b4
 80054e8:	20000228 	.word	0x20000228
 80054ec:	20030000 	.word	0x20030000
 80054f0:	20000240 	.word	0x20000240

080054f4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4806      	ldr	r0, [pc, #24]	; (8005518 <TL_MM_EvtDone+0x24>)
 8005500:	f000 f8d4 	bl	80056ac <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f82b 	bl	8005560 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800550a:	4804      	ldr	r0, [pc, #16]	; (800551c <TL_MM_EvtDone+0x28>)
 800550c:	f000 fdbe 	bl	800608c <HW_IPCC_MM_SendFreeBuf>

  return;
 8005510:	bf00      	nop
}
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000228 	.word	0x20000228
 800551c:	08005521 	.word	0x08005521

08005520 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005526:	e00c      	b.n	8005542 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005528:	1d3b      	adds	r3, r7, #4
 800552a:	4619      	mov	r1, r3
 800552c:	480a      	ldr	r0, [pc, #40]	; (8005558 <SendFreeBuf+0x38>)
 800552e:	f000 f900 	bl	8005732 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <SendFreeBuf+0x3c>)
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	4611      	mov	r1, r2
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f8b5 	bl	80056ac <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005542:	4805      	ldr	r0, [pc, #20]	; (8005558 <SendFreeBuf+0x38>)
 8005544:	f000 f86e 	bl	8005624 <LST_is_empty>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ec      	beq.n	8005528 <SendFreeBuf+0x8>
  }

  return;
 800554e:	bf00      	nop
}
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000228 	.word	0x20000228
 800555c:	20030000 	.word	0x20030000

08005560 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	7a5b      	ldrb	r3, [r3, #9]
 800556c:	2b0f      	cmp	r3, #15
 800556e:	d004      	beq.n	800557a <OutputMemReleaseTrace+0x1a>
 8005570:	2bff      	cmp	r3, #255	; 0xff
 8005572:	d004      	beq.n	800557e <OutputMemReleaseTrace+0x1e>
 8005574:	2b0e      	cmp	r3, #14
 8005576:	d004      	beq.n	8005582 <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 8005578:	e004      	b.n	8005584 <OutputMemReleaseTrace+0x24>
      break;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <OutputMemReleaseTrace+0x24>
      break;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <OutputMemReleaseTrace+0x24>
      break;
 8005582:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 8005584:	bf00      	nop
}
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005594:	4805      	ldr	r0, [pc, #20]	; (80055ac <TL_TRACES_Init+0x1c>)
 8005596:	f000 f835 	bl	8005604 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <TL_TRACES_Init+0x20>)
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	4a03      	ldr	r2, [pc, #12]	; (80055ac <TL_TRACES_Init+0x1c>)
 80055a0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80055a2:	f000 fd95 	bl	80060d0 <HW_IPCC_TRACES_Init>

  return;
 80055a6:	bf00      	nop
}
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	200300bc 	.word	0x200300bc
 80055b0:	20030000 	.word	0x20030000

080055b4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <OTP_Read+0x48>)
 80055c0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80055c2:	e002      	b.n	80055ca <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b08      	subs	r3, #8
 80055c8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3307      	adds	r3, #7
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	79fa      	ldrb	r2, [r7, #7]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d003      	beq.n	80055de <OTP_Read+0x2a>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <OTP_Read+0x4c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d1f2      	bne.n	80055c4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3307      	adds	r3, #7
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	79fa      	ldrb	r2, [r7, #7]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d001      	beq.n	80055ee <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80055ee:	68fb      	ldr	r3, [r7, #12]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	1fff73f8 	.word	0x1fff73f8
 8005600:	1fff7000 	.word	0x1fff7000

08005604 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	605a      	str	r2, [r3, #4]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562c:	f3ef 8310 	mrs	r3, PRIMASK
 8005630:	60fb      	str	r3, [r7, #12]
  return(result);
 8005632:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005636:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	429a      	cmp	r2, r3
 8005640:	d102      	bne.n	8005648 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
 8005646:	e001      	b.n	800564c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566e:	f3ef 8310 	mrs	r3, PRIMASK
 8005672:	60fb      	str	r3, [r7, #12]
  return(result);
 8005674:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005676:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005678:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80056bc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80056be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80056c0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005700:	60fb      	str	r3, [r7, #12]
  return(result);
 8005702:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005706:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6852      	ldr	r2, [r2, #4]
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573c:	f3ef 8310 	mrs	r3, PRIMASK
 8005740:	60fb      	str	r3, [r7, #12]
  return(result);
 8005742:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005744:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005746:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff ffcd 	bl	80056f4 <LST_remove_node>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005764:	bf00      	nop
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8005770:	4b03      	ldr	r3, [pc, #12]	; (8005780 <LL_FLASH_GetUDN+0x14>)
 8005772:	681b      	ldr	r3, [r3, #0]
}
 8005774:	4618      	mov	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	1fff7580 	.word	0x1fff7580

08005784 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <LL_FLASH_GetDeviceID+0x14>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	b2db      	uxtb	r3, r3
}
 800578e:	4618      	mov	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	1fff7584 	.word	0x1fff7584

0800579c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80057a0:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <LL_FLASH_GetSTCompanyID+0x14>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0a1b      	lsrs	r3, r3, #8
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	1fff7584 	.word	0x1fff7584

080057b4 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80057b4:	b5b0      	push	{r4, r5, r7, lr}
 80057b6:	b08c      	sub	sp, #48	; 0x30
 80057b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80057ba:	4b28      	ldr	r3, [pc, #160]	; (800585c <APP_BLE_Init+0xa8>)
 80057bc:	463c      	mov	r4, r7
 80057be:	461d      	mov	r5, r3
 80057c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80057cc:	c407      	stmia	r4!, {r0, r1, r2}
 80057ce:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80057d0:	f000 f8f6 	bl	80059c0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80057d4:	2101      	movs	r1, #1
 80057d6:	2002      	movs	r0, #2
 80057d8:	f000 fc96 	bl	8006108 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80057dc:	4a20      	ldr	r2, [pc, #128]	; (8005860 <APP_BLE_Init+0xac>)
 80057de:	2100      	movs	r1, #0
 80057e0:	2004      	movs	r0, #4
 80057e2:	f000 fd9f 	bl	8006324 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80057e6:	463b      	mov	r3, r7
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fa17 	bl	8004c1c <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80057ee:	f000 f8fd 	bl	80059ec <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80057f2:	f7ff f973 	bl	8004adc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80057f6:	4b1b      	ldr	r3, [pc, #108]	; (8005864 <APP_BLE_Init+0xb0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80057fe:	4b19      	ldr	r3, [pc, #100]	; (8005864 <APP_BLE_Init+0xb0>)
 8005800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005804:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8005806:	4a18      	ldr	r2, [pc, #96]	; (8005868 <APP_BLE_Init+0xb4>)
 8005808:	2100      	movs	r1, #0
 800580a:	2001      	movs	r0, #1
 800580c:	f000 fd8a 	bl	8006324 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8005810:	2006      	movs	r0, #6
 8005812:	f7fe fe99 	bl	8004548 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8005816:	f000 fb27 	bl	8005e68 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800581a:	4b14      	ldr	r3, [pc, #80]	; (800586c <APP_BLE_Init+0xb8>)
 800581c:	2200      	movs	r2, #0
 800581e:	4914      	ldr	r1, [pc, #80]	; (8005870 <APP_BLE_Init+0xbc>)
 8005820:	2000      	movs	r0, #0
 8005822:	f7fb faff 	bl	8000e24 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8005826:	4b13      	ldr	r3, [pc, #76]	; (8005874 <APP_BLE_Init+0xc0>)
 8005828:	2200      	movs	r2, #0
 800582a:	4913      	ldr	r1, [pc, #76]	; (8005878 <APP_BLE_Init+0xc4>)
 800582c:	2000      	movs	r0, #0
 800582e:	f7fb faf9 	bl	8000e24 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8005832:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <APP_BLE_Init+0xb0>)
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <APP_BLE_Init+0xb0>)
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8005842:	4b0e      	ldr	r3, [pc, #56]	; (800587c <APP_BLE_Init+0xc8>)
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <APP_BLE_Init+0xcc>)
 800584a:	22a0      	movs	r2, #160	; 0xa0
 800584c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800584e:	2001      	movs	r0, #1
 8005850:	f000 f9a6 	bl	8005ba0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8005854:	bf00      	nop
}
 8005856:	3730      	adds	r7, #48	; 0x30
 8005858:	46bd      	mov	sp, r7
 800585a:	bdb0      	pop	{r4, r5, r7, pc}
 800585c:	08006644 	.word	0x08006644
 8005860:	08004cb1 	.word	0x08004cb1
 8005864:	20000118 	.word	0x20000118
 8005868:	08005d0d 	.word	0x08005d0d
 800586c:	08005d41 	.word	0x08005d41
 8005870:	200001a9 	.word	0x200001a9
 8005874:	08005d51 	.word	0x08005d51
 8005878:	200001aa 	.word	0x200001aa
 800587c:	200001ac 	.word	0x200001ac
 8005880:	200001ae 	.word	0x200001ae

08005884 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800588c:	2342      	movs	r3, #66	; 0x42
 800588e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3301      	adds	r3, #1
 8005896:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b3e      	cmp	r3, #62	; 0x3e
 800589e:	d024      	beq.n	80058ea <SVCCTL_App_Notification+0x66>
 80058a0:	2bff      	cmp	r3, #255	; 0xff
 80058a2:	d070      	beq.n	8005986 <SVCCTL_App_Notification+0x102>
 80058a4:	2b05      	cmp	r3, #5
 80058a6:	d000      	beq.n	80058aa <SVCCTL_App_Notification+0x26>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 80058a8:	e080      	b.n	80059ac <SVCCTL_App_Notification+0x128>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	3302      	adds	r3, #2
 80058ae:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 80058ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058bc:	429a      	cmp	r2, r3
 80058be:	d106      	bne.n	80058ce <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80058c0:	4b3d      	ldr	r3, [pc, #244]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80058c6:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 80058ce:	2001      	movs	r0, #1
 80058d0:	f000 f966 	bl	8005ba0 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80058d4:	4b39      	ldr	r3, [pc, #228]	; (80059bc <SVCCTL_App_Notification+0x138>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80058da:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 80058dc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <SVCCTL_App_Notification+0x138>)
 80058e0:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 80058e2:	4836      	ldr	r0, [pc, #216]	; (80059bc <SVCCTL_App_Notification+0x138>)
 80058e4:	f000 faac 	bl	8005e40 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 80058e8:	e060      	b.n	80059ac <SVCCTL_App_Notification+0x128>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	3302      	adds	r3, #2
 80058ee:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d042      	beq.n	800597e <SVCCTL_App_Notification+0xfa>
 80058f8:	2b0c      	cmp	r3, #12
 80058fa:	d002      	beq.n	8005902 <SVCCTL_App_Notification+0x7e>
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d016      	beq.n	800592e <SVCCTL_App_Notification+0xaa>
          break;
 8005900:	e040      	b.n	8005984 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	3301      	adds	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8005908:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 800590a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800590c:	f107 020a 	add.w	r2, r7, #10
 8005910:	f107 010b 	add.w	r1, r7, #11
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe fe85 	bl	8004624 <hci_le_read_phy>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8005920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005924:	2b00      	cmp	r3, #0
 8005926:	d12c      	bne.n	8005982 <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8005928:	7afb      	ldrb	r3, [r7, #11]
 800592a:	2b02      	cmp	r3, #2
          break;
 800592c:	e029      	b.n	8005982 <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	3301      	adds	r3, #1
 8005932:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8005934:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 8005936:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800593a:	4618      	mov	r0, r3
 800593c:	f7fb fae8 	bl	8000f10 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8005940:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 8005942:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005946:	2b04      	cmp	r3, #4
 8005948:	d104      	bne.n	8005954 <SVCCTL_App_Notification+0xd0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 800594c:	2206      	movs	r2, #6
 800594e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8005952:	e003      	b.n	800595c <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8005954:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 8005956:	2205      	movs	r2, #5
 8005958:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005962:	b29a      	uxth	r2, r3
 8005964:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 8005966:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8005968:	4b14      	ldr	r3, [pc, #80]	; (80059bc <SVCCTL_App_Notification+0x138>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800596e:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <SVCCTL_App_Notification+0x134>)
 8005970:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <SVCCTL_App_Notification+0x138>)
 8005974:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8005976:	4811      	ldr	r0, [pc, #68]	; (80059bc <SVCCTL_App_Notification+0x138>)
 8005978:	f000 fa62 	bl	8005e40 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800597c:	e002      	b.n	8005984 <SVCCTL_App_Notification+0x100>
          break;
 800597e:	bf00      	nop
 8005980:	e014      	b.n	80059ac <SVCCTL_App_Notification+0x128>
          break;
 8005982:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8005984:	e012      	b.n	80059ac <SVCCTL_App_Notification+0x128>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	3302      	adds	r3, #2
 800598a:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f240 4207 	movw	r2, #1031	; 0x407
 8005996:	4293      	cmp	r3, r2
 8005998:	d004      	beq.n	80059a4 <SVCCTL_App_Notification+0x120>
 800599a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599e:	d003      	beq.n	80059a8 <SVCCTL_App_Notification+0x124>
 80059a0:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 80059a2:	e002      	b.n	80059aa <SVCCTL_App_Notification+0x126>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <SVCCTL_App_Notification+0x126>
      break;
 80059a8:	bf00      	nop
      break; /* EVT_VENDOR */
 80059aa:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80059ac:	2301      	movs	r3, #1
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000118 	.word	0x20000118
 80059bc:	20000320 	.word	0x20000320

080059c0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80059c6:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <Ble_Tl_Init+0x20>)
 80059c8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <Ble_Tl_Init+0x24>)
 80059cc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80059ce:	463b      	mov	r3, r7
 80059d0:	4619      	mov	r1, r3
 80059d2:	4805      	ldr	r0, [pc, #20]	; (80059e8 <Ble_Tl_Init+0x28>)
 80059d4:	f7ff f950 	bl	8004c78 <hci_init>

  return;
 80059d8:	bf00      	nop
}
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	200300d4 	.word	0x200300d4
 80059e4:	08005ddb 	.word	0x08005ddb
 80059e8:	08005da3 	.word	0x08005da3

080059ec <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80059ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ee:	b091      	sub	sp, #68	; 0x44
 80059f0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80059f2:	2300      	movs	r3, #0
 80059f4:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80059f6:	f7fe fdf1 	bl	80045dc <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80059fa:	f000 f943 	bl	8005c84 <BleGetBdAddress>
 80059fe:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	2106      	movs	r1, #6
 8005a04:	2000      	movs	r0, #0
 8005a06:	f7fe fcdf 	bl	80043c8 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	795a      	ldrb	r2, [r3, #5]
 8005a0e:	4b5e      	ldr	r3, [pc, #376]	; (8005b88 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005a10:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	791a      	ldrb	r2, [r3, #4]
 8005a16:	4b5c      	ldr	r3, [pc, #368]	; (8005b88 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005a18:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	78da      	ldrb	r2, [r3, #3]
 8005a1e:	4b5a      	ldr	r3, [pc, #360]	; (8005b88 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005a20:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	789a      	ldrb	r2, [r3, #2]
 8005a26:	4b58      	ldr	r3, [pc, #352]	; (8005b88 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005a28:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	785a      	ldrb	r2, [r3, #1]
 8005a2e:	4b56      	ldr	r3, [pc, #344]	; (8005b88 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005a30:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	4b54      	ldr	r3, [pc, #336]	; (8005b88 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8005a38:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8005a3a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8005a3e:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8005a40:	f7ff fe94 	bl	800576c <LL_FLASH_GetUDN>
 8005a44:	4603      	mov	r3, r0
 8005a46:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2106      	movs	r1, #6
 8005a50:	202e      	movs	r0, #46	; 0x2e
 8005a52:	f7fe fcb9 	bl	80043c8 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8005a56:	4a4d      	ldr	r2, [pc, #308]	; (8005b8c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8005a58:	2110      	movs	r1, #16
 8005a5a:	2018      	movs	r0, #24
 8005a5c:	f7fe fcb4 	bl	80043c8 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8005a60:	4a4b      	ldr	r2, [pc, #300]	; (8005b90 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 8005a62:	2110      	movs	r1, #16
 8005a64:	2008      	movs	r0, #8
 8005a66:	f7fe fcaf 	bl	80043c8 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005a6a:	2118      	movs	r1, #24
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	f7fe fd14 	bl	800449a <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8005a72:	f7fe fa64 	bl	8003f3e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8005a7a:	7ffb      	ldrb	r3, [r7, #31]
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01e      	beq.n	8005ac6 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "my_BLE";
 8005a88:	4b42      	ldr	r3, [pc, #264]	; (8005b94 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 8005a8a:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 8005a8c:	f107 0216 	add.w	r2, r7, #22
 8005a90:	7ff8      	ldrb	r0, [r7, #31]
 8005a92:	f107 0312 	add.w	r3, r7, #18
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	f107 0314 	add.w	r3, r7, #20
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f7fe f940 	bl	8003d28 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8005aa8:	8afc      	ldrh	r4, [r7, #22]
 8005aaa:	8abd      	ldrh	r5, [r7, #20]
 8005aac:	69b8      	ldr	r0, [r7, #24]
 8005aae:	f7fa fb65 	bl	800017c <strlen>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	2200      	movs	r2, #0
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7fe fbfa 	bl	80042ba <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8005ac6:	8af8      	ldrh	r0, [r7, #22]
 8005ac8:	8a79      	ldrh	r1, [r7, #18]
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	2302      	movs	r3, #2
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f7fe fbf2 	bl	80042ba <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	2102      	movs	r1, #2
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7fe fe0a 	bl	80046f4 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8005ae0:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8005ae6:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe f82a 	bl	8003b44 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8005af0:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8005af6:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8005afc:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005afe:	2208      	movs	r2, #8
 8005b00:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8005b02:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b04:	2210      	movs	r2, #16
 8005b06:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8005b0e:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8005b12:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8005b14:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b20:	e00b      	b.n	8005b3a <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8005b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b26:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b28:	4413      	add	r3, r2
 8005b2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b2e:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8005b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b34:	3301      	adds	r3, #1
 8005b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	d9ef      	bls.n	8005b22 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b44:	789d      	ldrb	r5, [r3, #2]
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b48:	785e      	ldrb	r6, [r3, #1]
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b4c:	7d5b      	ldrb	r3, [r3, #21]
 8005b4e:	4a12      	ldr	r2, [pc, #72]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b50:	7d92      	ldrb	r2, [r2, #22]
 8005b52:	4911      	ldr	r1, [pc, #68]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b54:	7d09      	ldrb	r1, [r1, #20]
 8005b56:	4810      	ldr	r0, [pc, #64]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b58:	6980      	ldr	r0, [r0, #24]
 8005b5a:	2400      	movs	r4, #0
 8005b5c:	9404      	str	r4, [sp, #16]
 8005b5e:	9003      	str	r0, [sp, #12]
 8005b60:	9102      	str	r1, [sp, #8]
 8005b62:	9201      	str	r2, [sp, #4]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	2300      	movs	r3, #0
 8005b68:	2201      	movs	r2, #1
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f7fe f833 	bl	8003bd8 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8005b72:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 8005b7a:	f7fe f9bc 	bl	8003ef6 <aci_gap_configure_whitelist>
   }
}
 8005b7e:	bf00      	nop
 8005b80:	372c      	adds	r7, #44	; 0x2c
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000010 	.word	0x20000010
 8005b8c:	08006814 	.word	0x08006814
 8005b90:	08006824 	.word	0x08006824
 8005b94:	08006674 	.word	0x08006674
 8005b98:	20000118 	.word	0x20000118
 8005b9c:	0001b207 	.word	0x0001b207

08005ba0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08c      	sub	sp, #48	; 0x30
 8005ba4:	af08      	add	r7, sp, #32
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005baa:	2342      	movs	r3, #66	; 0x42
 8005bac:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d106      	bne.n	8005bc2 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8005bb4:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <Adv_Request+0xc8>)
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8005bba:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <Adv_Request+0xcc>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	81bb      	strh	r3, [r7, #12]
 8005bc0:	e005      	b.n	8005bce <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8005bc2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8005bc6:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8005bc8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005bcc:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8005bce:	4b28      	ldr	r3, [pc, #160]	; (8005c70 <Adv_Request+0xd0>)
 8005bd0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fb f99b 	bl	8000f10 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d10d      	bne.n	8005bfc <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8005be0:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <Adv_Request+0xd0>)
 8005be2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d004      	beq.n	8005bf4 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8005bea:	4b21      	ldr	r3, [pc, #132]	; (8005c70 <Adv_Request+0xd0>)
 8005bec:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d103      	bne.n	8005bfc <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8005bf4:	f7fd fea4 	bl	8003940 <aci_gap_set_non_discoverable>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <Adv_Request+0xd0>)
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8005c04:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <Adv_Request+0xd0>)
 8005c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c0a:	89b8      	ldrh	r0, [r7, #12]
 8005c0c:	89f9      	ldrh	r1, [r7, #14]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	9206      	str	r2, [sp, #24]
 8005c12:	2200      	movs	r2, #0
 8005c14:	9205      	str	r2, [sp, #20]
 8005c16:	4a17      	ldr	r2, [pc, #92]	; (8005c74 <Adv_Request+0xd4>)
 8005c18:	9204      	str	r2, [sp, #16]
 8005c1a:	9303      	str	r3, [sp, #12]
 8005c1c:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <Adv_Request+0xd8>)
 8005c1e:	9302      	str	r3, [sp, #8]
 8005c20:	2307      	movs	r3, #7
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	2300      	movs	r3, #0
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f7fd feab 	bl	8003988 <aci_gap_set_discoverable>
 8005c32:	4603      	mov	r3, r0
 8005c34:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8005c36:	4911      	ldr	r1, [pc, #68]	; (8005c7c <Adv_Request+0xdc>)
 8005c38:	200e      	movs	r0, #14
 8005c3a:	f7fe f900 	bl	8003e3e <aci_gap_update_adv_data>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8005c48:	79fb      	ldrb	r3, [r7, #7]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d107      	bne.n	8005c5e <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8005c4e:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <Adv_Request+0xd0>)
 8005c50:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005c54:	490a      	ldr	r1, [pc, #40]	; (8005c80 <Adv_Request+0xe0>)
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fb f9e4 	bl	8001024 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
}
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	200001ac 	.word	0x200001ac
 8005c6c:	200001ae 	.word	0x200001ae
 8005c70:	20000118 	.word	0x20000118
 8005c74:	20000141 	.word	0x20000141
 8005c78:	08006834 	.word	0x08006834
 8005c7c:	20000010 	.word	0x20000010
 8005c80:	0001e046 	.word	0x0001e046

08005c84 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8005c8a:	f7ff fd6f 	bl	800576c <LL_FLASH_GetUDN>
 8005c8e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c96:	d023      	beq.n	8005ce0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8005c98:	f7ff fd80 	bl	800579c <LL_FLASH_GetSTCompanyID>
 8005c9c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8005c9e:	f7ff fd71 	bl	8005784 <LL_FLASH_GetDeviceID>
 8005ca2:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <BleGetBdAddress+0x80>)
 8005caa:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <BleGetBdAddress+0x80>)
 8005cb4:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <BleGetBdAddress+0x80>)
 8005cbe:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <BleGetBdAddress+0x80>)
 8005cc6:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <BleGetBdAddress+0x80>)
 8005cce:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	0a1b      	lsrs	r3, r3, #8
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <BleGetBdAddress+0x80>)
 8005cd8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <BleGetBdAddress+0x80>)
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	e00b      	b.n	8005cf8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7ff fc67 	bl	80055b4 <OTP_Read>
 8005ce6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	e001      	b.n	8005cf8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <BleGetBdAddress+0x84>)
 8005cf6:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8005cf8:	697b      	ldr	r3, [r7, #20]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000244 	.word	0x20000244
 8005d08:	0800680c 	.word	0x0800680c

08005d0c <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <Adv_Cancel+0x30>)
 8005d14:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005d18:	2b05      	cmp	r3, #5
 8005d1a:	d00a      	beq.n	8005d32 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8005d20:	f7fd fe0e 	bl	8003940 <aci_gap_set_non_discoverable>
 8005d24:	4603      	mov	r3, r0
 8005d26:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005d28:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <Adv_Cancel+0x30>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
}
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000118 	.word	0x20000118

08005d40 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8005d44:	2100      	movs	r1, #0
 8005d46:	2001      	movs	r0, #1
 8005d48:	f000 fb0c 	bl	8006364 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8005d4c:	bf00      	nop
}
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8005d66:	2100      	movs	r1, #0
 8005d68:	2004      	movs	r0, #4
 8005d6a:	f000 fafb 	bl	8006364 <UTIL_SEQ_SetTask>
  return;
 8005d6e:	bf00      	nop
}
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f000 fb56 	bl	8006430 <UTIL_SEQ_SetEvt>
  return;
 8005d84:	bf00      	nop
}
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005d94:	2001      	movs	r0, #1
 8005d96:	f000 fb69 	bl	800646c <UTIL_SEQ_WaitEvt>
  return;
 8005d9a:	bf00      	nop
}
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	3308      	adds	r3, #8
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fedf 	bl	8004b78 <SVCCTL_UserEvtRx>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8005dca:	e002      	b.n	8005dd2 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	4603      	mov	r3, r0
 8005de2:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <BLE_StatusNot+0x16>
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d006      	beq.n	8005dfc <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8005dee:	e00b      	b.n	8005e08 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005df0:	2307      	movs	r3, #7
 8005df2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fadf 	bl	80063b8 <UTIL_SEQ_PauseTask>
      break;
 8005dfa:	e005      	b.n	8005e08 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005dfc:	2307      	movs	r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 faf7 	bl	80063f4 <UTIL_SEQ_ResumeTask>
      break;
 8005e06:	bf00      	nop
  }
  return;
 8005e08:	bf00      	nop
}
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d004      	beq.n	8005e2a <P2PS_STM_App_Notification+0x1a>
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d004      	beq.n	8005e2e <P2PS_STM_App_Notification+0x1e>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <P2PS_STM_App_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8005e28:	e004      	b.n	8005e34 <P2PS_STM_App_Notification+0x24>
      break;
 8005e2a:	bf00      	nop
 8005e2c:	e002      	b.n	8005e34 <P2PS_STM_App_Notification+0x24>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <P2PS_STM_App_Notification+0x24>
      break;
 8005e32:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8005e34:	bf00      	nop
}
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <P2PS_APP_Notification+0x16>
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d002      	beq.n	8005e5a <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8005e54:	e002      	b.n	8005e5c <P2PS_APP_Notification+0x1c>
    break;
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <P2PS_APP_Notification+0x1c>
    break;
 8005e5a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8005e5c:	bf00      	nop
}
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8005e6c:	bf00      	nop
}
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <LL_PWR_EnableBootC2>:
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <LL_PWR_EnableBootC2+0x1c>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <LL_PWR_EnableBootC2+0x1c>)
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e86:	60d3      	str	r3, [r2, #12]
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	58000400 	.word	0x58000400

08005e98 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005ea2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005ea6:	4905      	ldr	r1, [pc, #20]	; (8005ebc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	58000800 	.word	0x58000800

08005ec0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005eca:	6a1a      	ldr	r2, [r3, #32]
 8005ecc:	4904      	ldr	r1, [pc, #16]	; (8005ee0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	620b      	str	r3, [r1, #32]
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	58000800 	.word	0x58000800

08005ee4 <LL_AHB3_GRP1_EnableClock>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4013      	ands	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f08:	68fb      	ldr	r3, [r7, #12]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	605a      	str	r2, [r3, #4]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	401a      	ands	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	605a      	str	r2, [r3, #4]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	041a      	lsls	r2, r3, #16
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d101      	bne.n	8005fda <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8005fec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005ff0:	f7ff ff52 	bl	8005e98 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8005ff4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005ff8:	f7ff ff62 	bl	8005ec0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8005ffc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8005ffe:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006000:	f7ff ff3a 	bl	8005e78 <LL_PWR_EnableBootC2>

  return;
 8006004:	bf00      	nop
}
 8006006:	bd80      	pop	{r7, pc}

08006008 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800600c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006010:	f7ff ff68 	bl	8005ee4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006014:	4806      	ldr	r0, [pc, #24]	; (8006030 <HW_IPCC_Init+0x28>)
 8006016:	f7ff ff8e 	bl	8005f36 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800601a:	4805      	ldr	r0, [pc, #20]	; (8006030 <HW_IPCC_Init+0x28>)
 800601c:	f7ff ff7b 	bl	8005f16 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006020:	202c      	movs	r0, #44	; 0x2c
 8006022:	f7fb fd84 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006026:	202d      	movs	r0, #45	; 0x2d
 8006028:	f7fb fd81 	bl	8001b2e <HAL_NVIC_EnableIRQ>

  return;
 800602c:	bf00      	nop
}
 800602e:	bd80      	pop	{r7, pc}
 8006030:	58000c00 	.word	0x58000c00

08006034 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006038:	2101      	movs	r1, #1
 800603a:	4802      	ldr	r0, [pc, #8]	; (8006044 <HW_IPCC_BLE_Init+0x10>)
 800603c:	f7ff ff9e 	bl	8005f7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006040:	bf00      	nop
}
 8006042:	bd80      	pop	{r7, pc}
 8006044:	58000c00 	.word	0x58000c00

08006048 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800604c:	2101      	movs	r1, #1
 800604e:	4802      	ldr	r0, [pc, #8]	; (8006058 <HW_IPCC_BLE_SendCmd+0x10>)
 8006050:	f7ff ffa6 	bl	8005fa0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006054:	bf00      	nop
}
 8006056:	bd80      	pop	{r7, pc}
 8006058:	58000c00 	.word	0x58000c00

0800605c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006060:	2102      	movs	r1, #2
 8006062:	4802      	ldr	r0, [pc, #8]	; (800606c <HW_IPCC_SYS_Init+0x10>)
 8006064:	f7ff ff8a 	bl	8005f7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006068:	bf00      	nop
}
 800606a:	bd80      	pop	{r7, pc}
 800606c:	58000c00 	.word	0x58000c00

08006070 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006074:	2102      	movs	r1, #2
 8006076:	4804      	ldr	r0, [pc, #16]	; (8006088 <HW_IPCC_SYS_SendCmd+0x18>)
 8006078:	f7ff ff92 	bl	8005fa0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800607c:	2102      	movs	r1, #2
 800607e:	4802      	ldr	r0, [pc, #8]	; (8006088 <HW_IPCC_SYS_SendCmd+0x18>)
 8006080:	f7ff ff69 	bl	8005f56 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006084:	bf00      	nop
}
 8006086:	bd80      	pop	{r7, pc}
 8006088:	58000c00 	.word	0x58000c00

0800608c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006094:	2108      	movs	r1, #8
 8006096:	480c      	ldr	r0, [pc, #48]	; (80060c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006098:	f7ff ff91 	bl	8005fbe <LL_C1_IPCC_IsActiveFlag_CHx>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <HW_IPCC_MM_SendFreeBuf+0x40>)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80060a8:	2108      	movs	r1, #8
 80060aa:	4807      	ldr	r0, [pc, #28]	; (80060c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80060ac:	f7ff ff53 	bl	8005f56 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80060b0:	e006      	b.n	80060c0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80060b6:	2108      	movs	r1, #8
 80060b8:	4803      	ldr	r0, [pc, #12]	; (80060c8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80060ba:	f7ff ff71 	bl	8005fa0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80060be:	bf00      	nop
}
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	58000c00 	.word	0x58000c00
 80060cc:	2000024c 	.word	0x2000024c

080060d0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80060d4:	2108      	movs	r1, #8
 80060d6:	4802      	ldr	r0, [pc, #8]	; (80060e0 <HW_IPCC_TRACES_Init+0x10>)
 80060d8:	f7ff ff50 	bl	8005f7c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80060dc:	bf00      	nop
}
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	58000c00 	.word	0x58000c00

080060e4 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <UTIL_LPM_Init+0x1c>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <UTIL_LPM_Init+0x20>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000250 	.word	0x20000250
 8006104:	20000254 	.word	0x20000254

08006108 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006114:	f3ef 8310 	mrs	r3, PRIMASK
 8006118:	613b      	str	r3, [r7, #16]
  return(result);
 800611a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800611c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800611e:	b672      	cpsid	i
  
  switch(state)
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <UTIL_LPM_SetOffMode+0x32>
 8006126:	2b01      	cmp	r3, #1
 8006128:	d000      	beq.n	800612c <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800612a:	e00e      	b.n	800614a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800612c:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <UTIL_LPM_SetOffMode+0x58>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4313      	orrs	r3, r2
 8006134:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <UTIL_LPM_SetOffMode+0x58>)
 8006136:	6013      	str	r3, [r2, #0]
      break;
 8006138:	e007      	b.n	800614a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	43da      	mvns	r2, r3
 800613e:	4b08      	ldr	r3, [pc, #32]	; (8006160 <UTIL_LPM_SetOffMode+0x58>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4013      	ands	r3, r2
 8006144:	4a06      	ldr	r2, [pc, #24]	; (8006160 <UTIL_LPM_SetOffMode+0x58>)
 8006146:	6013      	str	r3, [r2, #0]
      break;
 8006148:	bf00      	nop
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	20000254 	.word	0x20000254

08006164 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08c      	sub	sp, #48	; 0x30
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800616c:	4b65      	ldr	r3, [pc, #404]	; (8006304 <UTIL_SEQ_Run+0x1a0>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006172:	4b64      	ldr	r3, [pc, #400]	; (8006304 <UTIL_SEQ_Run+0x1a0>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4013      	ands	r3, r2
 800617a:	4a62      	ldr	r2, [pc, #392]	; (8006304 <UTIL_SEQ_Run+0x1a0>)
 800617c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800617e:	e081      	b.n	8006284 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8006184:	e002      	b.n	800618c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	3301      	adds	r3, #1
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800618c:	4a5e      	ldr	r2, [pc, #376]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006194:	4b5d      	ldr	r3, [pc, #372]	; (800630c <UTIL_SEQ_Run+0x1a8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	401a      	ands	r2, r3
 800619a:	4b5a      	ldr	r3, [pc, #360]	; (8006304 <UTIL_SEQ_Run+0x1a0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0f0      	beq.n	8006186 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80061a4:	4a58      	ldr	r2, [pc, #352]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80061ac:	4b57      	ldr	r3, [pc, #348]	; (800630c <UTIL_SEQ_Run+0x1a8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	401a      	ands	r2, r3
 80061b2:	4b54      	ldr	r3, [pc, #336]	; (8006304 <UTIL_SEQ_Run+0x1a0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4013      	ands	r3, r2
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80061ba:	4a53      	ldr	r2, [pc, #332]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	4413      	add	r3, r2
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80061cc:	4a4e      	ldr	r2, [pc, #312]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061d8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80061da:	4a4b      	ldr	r2, [pc, #300]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	4013      	ands	r3, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f98f 	bl	800650c <SEQ_BitPosition>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b47      	ldr	r3, [pc, #284]	; (8006310 <UTIL_SEQ_Run+0x1ac>)
 80061f4:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80061f6:	4a44      	ldr	r2, [pc, #272]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4413      	add	r3, r2
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	4b43      	ldr	r3, [pc, #268]	; (8006310 <UTIL_SEQ_Run+0x1ac>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2101      	movs	r1, #1
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	401a      	ands	r2, r3
 800620e:	493e      	ldr	r1, [pc, #248]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	440b      	add	r3, r1
 8006216:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006218:	f3ef 8310 	mrs	r3, PRIMASK
 800621c:	61bb      	str	r3, [r7, #24]
  return(result);
 800621e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006220:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006222:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006224:	4b3a      	ldr	r3, [pc, #232]	; (8006310 <UTIL_SEQ_Run+0x1ac>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2201      	movs	r2, #1
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43da      	mvns	r2, r3
 8006230:	4b38      	ldr	r3, [pc, #224]	; (8006314 <UTIL_SEQ_Run+0x1b0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4013      	ands	r3, r2
 8006236:	4a37      	ldr	r2, [pc, #220]	; (8006314 <UTIL_SEQ_Run+0x1b0>)
 8006238:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800623a:	2302      	movs	r3, #2
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623e:	e013      	b.n	8006268 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	3b01      	subs	r3, #1
 8006244:	4a30      	ldr	r2, [pc, #192]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 8006246:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <UTIL_SEQ_Run+0x1ac>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2201      	movs	r2, #1
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	43da      	mvns	r2, r3
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	3b01      	subs	r3, #1
 800625a:	400a      	ands	r2, r1
 800625c:	492a      	ldr	r1, [pc, #168]	; (8006308 <UTIL_SEQ_Run+0x1a4>)
 800625e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	3b01      	subs	r3, #1
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e8      	bne.n	8006240 <UTIL_SEQ_Run+0xdc>
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <UTIL_SEQ_Run+0x1ac>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a26      	ldr	r2, [pc, #152]	; (8006318 <UTIL_SEQ_Run+0x1b4>)
 800627e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006282:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8006284:	4b23      	ldr	r3, [pc, #140]	; (8006314 <UTIL_SEQ_Run+0x1b0>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4b20      	ldr	r3, [pc, #128]	; (800630c <UTIL_SEQ_Run+0x1a8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	401a      	ands	r2, r3
 800628e:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <UTIL_SEQ_Run+0x1a0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4013      	ands	r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <UTIL_SEQ_Run+0x144>
 8006298:	4b20      	ldr	r3, [pc, #128]	; (800631c <UTIL_SEQ_Run+0x1b8>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4b20      	ldr	r3, [pc, #128]	; (8006320 <UTIL_SEQ_Run+0x1bc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f43f af6c 	beq.w	8006180 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <UTIL_SEQ_Run+0x1ac>)
 80062aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ae:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80062b0:	f000 f91e 	bl	80064f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b4:	f3ef 8310 	mrs	r3, PRIMASK
 80062b8:	613b      	str	r3, [r7, #16]
  return(result);
 80062ba:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80062bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80062be:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80062c0:	4b14      	ldr	r3, [pc, #80]	; (8006314 <UTIL_SEQ_Run+0x1b0>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b11      	ldr	r3, [pc, #68]	; (800630c <UTIL_SEQ_Run+0x1a8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	401a      	ands	r2, r3
 80062ca:	4b0e      	ldr	r3, [pc, #56]	; (8006304 <UTIL_SEQ_Run+0x1a0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d108      	bne.n	80062e6 <UTIL_SEQ_Run+0x182>
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <UTIL_SEQ_Run+0x1b8>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <UTIL_SEQ_Run+0x1bc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4013      	ands	r3, r2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 80062e2:	f7fa f932 	bl	800054a <UTIL_SEQ_Idle>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 80062f0:	f000 f905 	bl	80064fe <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80062f4:	4a03      	ldr	r2, [pc, #12]	; (8006304 <UTIL_SEQ_Run+0x1a0>)
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	6013      	str	r3, [r2, #0]

  return;
 80062fa:	bf00      	nop
}
 80062fc:	3730      	adds	r7, #48	; 0x30
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000024 	.word	0x20000024
 8006308:	200002e8 	.word	0x200002e8
 800630c:	20000020 	.word	0x20000020
 8006310:	20000264 	.word	0x20000264
 8006314:	20000258 	.word	0x20000258
 8006318:	20000268 	.word	0x20000268
 800631c:	2000025c 	.word	0x2000025c
 8006320:	20000260 	.word	0x20000260

08006324 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006330:	f3ef 8310 	mrs	r3, PRIMASK
 8006334:	617b      	str	r3, [r7, #20]
  return(result);
 8006336:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8006338:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800633a:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f8e5 	bl	800650c <SEQ_BitPosition>
 8006342:	4603      	mov	r3, r0
 8006344:	4619      	mov	r1, r3
 8006346:	4a06      	ldr	r2, [pc, #24]	; (8006360 <UTIL_SEQ_RegTask+0x3c>)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006358:	bf00      	nop
}
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000268 	.word	0x20000268

08006364 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800636e:	f3ef 8310 	mrs	r3, PRIMASK
 8006372:	60fb      	str	r3, [r7, #12]
  return(result);
 8006374:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006376:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006378:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 800637a:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <UTIL_SEQ_SetTask+0x4c>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4313      	orrs	r3, r2
 8006382:	4a0b      	ldr	r2, [pc, #44]	; (80063b0 <UTIL_SEQ_SetTask+0x4c>)
 8006384:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006386:	4a0b      	ldr	r2, [pc, #44]	; (80063b4 <UTIL_SEQ_SetTask+0x50>)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	431a      	orrs	r2, r3
 8006392:	4908      	ldr	r1, [pc, #32]	; (80063b4 <UTIL_SEQ_SetTask+0x50>)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80063a4:	bf00      	nop
}
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20000258 	.word	0x20000258
 80063b4:	200002e8 	.word	0x200002e8

080063b8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c0:	f3ef 8310 	mrs	r3, PRIMASK
 80063c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80063c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80063c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80063ca:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	43da      	mvns	r2, r3
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <UTIL_SEQ_PauseTask+0x38>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4013      	ands	r3, r2
 80063d6:	4a06      	ldr	r2, [pc, #24]	; (80063f0 <UTIL_SEQ_PauseTask+0x38>)
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80063e4:	bf00      	nop
}
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	20000020 	.word	0x20000020

080063f4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006400:	60fb      	str	r3, [r7, #12]
  return(result);
 8006402:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006404:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006406:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 8006408:	4b08      	ldr	r3, [pc, #32]	; (800642c <UTIL_SEQ_ResumeTask+0x38>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	4a06      	ldr	r2, [pc, #24]	; (800642c <UTIL_SEQ_ResumeTask+0x38>)
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800641e:	bf00      	nop
}
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000020 	.word	0x20000020

08006430 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006438:	f3ef 8310 	mrs	r3, PRIMASK
 800643c:	60fb      	str	r3, [r7, #12]
  return(result);
 800643e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006442:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <UTIL_SEQ_SetEvt+0x38>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4313      	orrs	r3, r2
 800644c:	4a06      	ldr	r2, [pc, #24]	; (8006468 <UTIL_SEQ_SetEvt+0x38>)
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800645a:	bf00      	nop
}
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	2000025c 	.word	0x2000025c

0800646c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8006474:	4b1b      	ldr	r3, [pc, #108]	; (80064e4 <UTIL_SEQ_WaitEvt+0x78>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800647a:	4b1a      	ldr	r3, [pc, #104]	; (80064e4 <UTIL_SEQ_WaitEvt+0x78>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006482:	d102      	bne.n	800648a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e005      	b.n	8006496 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800648a:	4b16      	ldr	r3, [pc, #88]	; (80064e4 <UTIL_SEQ_WaitEvt+0x78>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2201      	movs	r2, #1
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <UTIL_SEQ_WaitEvt+0x7c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800649c:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <UTIL_SEQ_WaitEvt+0x7c>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80064a2:	e005      	b.n	80064b0 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80064a4:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <UTIL_SEQ_WaitEvt+0x7c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4619      	mov	r1, r3
 80064aa:	6978      	ldr	r0, [r7, #20]
 80064ac:	f7fa f854 	bl	8000558 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80064b0:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <UTIL_SEQ_WaitEvt+0x80>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <UTIL_SEQ_WaitEvt+0x7c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f2      	beq.n	80064a4 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80064be:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <UTIL_SEQ_WaitEvt+0x78>)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 80064c4:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <UTIL_SEQ_WaitEvt+0x7c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	43da      	mvns	r2, r3
 80064ca:	4b08      	ldr	r3, [pc, #32]	; (80064ec <UTIL_SEQ_WaitEvt+0x80>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4013      	ands	r3, r2
 80064d0:	4a06      	ldr	r2, [pc, #24]	; (80064ec <UTIL_SEQ_WaitEvt+0x80>)
 80064d2:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <UTIL_SEQ_WaitEvt+0x7c>)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6013      	str	r3, [r2, #0]

  return;
 80064da:	bf00      	nop
}
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000264 	.word	0x20000264
 80064e8:	20000260 	.word	0x20000260
 80064ec:	2000025c 	.word	0x2000025c

080064f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80064f4:	bf00      	nop
}
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80064fe:	b480      	push	{r7}
 8006500:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8006502:	bf00      	nop
}
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0c1b      	lsrs	r3, r3, #16
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <SEQ_BitPosition+0x20>
 8006522:	2310      	movs	r3, #16
 8006524:	73fb      	strb	r3, [r7, #15]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	041b      	lsls	r3, r3, #16
 800652a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d105      	bne.n	8006542 <SEQ_BitPosition+0x36>
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	3308      	adds	r3, #8
 800653a:	73fb      	strb	r3, [r7, #15]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	021b      	lsls	r3, r3, #8
 8006540:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <SEQ_BitPosition+0x4c>
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	3304      	adds	r3, #4
 8006550:	73fb      	strb	r3, [r7, #15]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	0f1b      	lsrs	r3, r3, #28
 800655c:	4a07      	ldr	r2, [pc, #28]	; (800657c <SEQ_BitPosition+0x70>)
 800655e:	5cd2      	ldrb	r2, [r2, r3]
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	4413      	add	r3, r2
 8006564:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	f1c3 031f 	rsb	r3, r3, #31
 800656c:	b2db      	uxtb	r3, r3
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	0800683c 	.word	0x0800683c

08006580 <__libc_init_array>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4e0d      	ldr	r6, [pc, #52]	; (80065b8 <__libc_init_array+0x38>)
 8006584:	4c0d      	ldr	r4, [pc, #52]	; (80065bc <__libc_init_array+0x3c>)
 8006586:	1ba4      	subs	r4, r4, r6
 8006588:	10a4      	asrs	r4, r4, #2
 800658a:	2500      	movs	r5, #0
 800658c:	42a5      	cmp	r5, r4
 800658e:	d109      	bne.n	80065a4 <__libc_init_array+0x24>
 8006590:	4e0b      	ldr	r6, [pc, #44]	; (80065c0 <__libc_init_array+0x40>)
 8006592:	4c0c      	ldr	r4, [pc, #48]	; (80065c4 <__libc_init_array+0x44>)
 8006594:	f000 f82c 	bl	80065f0 <_init>
 8006598:	1ba4      	subs	r4, r4, r6
 800659a:	10a4      	asrs	r4, r4, #2
 800659c:	2500      	movs	r5, #0
 800659e:	42a5      	cmp	r5, r4
 80065a0:	d105      	bne.n	80065ae <__libc_init_array+0x2e>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065a8:	4798      	blx	r3
 80065aa:	3501      	adds	r5, #1
 80065ac:	e7ee      	b.n	800658c <__libc_init_array+0xc>
 80065ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065b2:	4798      	blx	r3
 80065b4:	3501      	adds	r5, #1
 80065b6:	e7f2      	b.n	800659e <__libc_init_array+0x1e>
 80065b8:	0800684c 	.word	0x0800684c
 80065bc:	0800684c 	.word	0x0800684c
 80065c0:	0800684c 	.word	0x0800684c
 80065c4:	08006850 	.word	0x08006850

080065c8 <memcpy>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	1e43      	subs	r3, r0, #1
 80065cc:	440a      	add	r2, r1
 80065ce:	4291      	cmp	r1, r2
 80065d0:	d100      	bne.n	80065d4 <memcpy+0xc>
 80065d2:	bd10      	pop	{r4, pc}
 80065d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065dc:	e7f7      	b.n	80065ce <memcpy+0x6>

080065de <memset>:
 80065de:	4402      	add	r2, r0
 80065e0:	4603      	mov	r3, r0
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d100      	bne.n	80065e8 <memset+0xa>
 80065e6:	4770      	bx	lr
 80065e8:	f803 1b01 	strb.w	r1, [r3], #1
 80065ec:	e7f9      	b.n	80065e2 <memset+0x4>
	...

080065f0 <_init>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr

080065fc <_fini>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr
